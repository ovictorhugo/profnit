import {
  __commonJS,
  __require
} from "./chunk-TFWDKVI3.js";

// node_modules/@google-cloud/promisify/build/src/index.js
var require_src = __commonJS({
  "node_modules/@google-cloud/promisify/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.callbackifyAll = exports2.callbackify = exports2.promisifyAll = exports2.promisify = void 0;
    function promisify(originalMethod, options) {
      if (originalMethod.promisified_) {
        return originalMethod;
      }
      options = options || {};
      const slice = Array.prototype.slice;
      const wrapper = function() {
        let last;
        for (last = arguments.length - 1; last >= 0; last--) {
          const arg = arguments[last];
          if (typeof arg === "undefined") {
            continue;
          }
          if (typeof arg !== "function") {
            break;
          }
          return originalMethod.apply(this, arguments);
        }
        const args = slice.call(arguments, 0, last + 1);
        let PromiseCtor = Promise;
        if (this && this.Promise) {
          PromiseCtor = this.Promise;
        }
        return new PromiseCtor((resolve, reject) => {
          args.push((...args2) => {
            const callbackArgs = slice.call(args2);
            const err = callbackArgs.shift();
            if (err) {
              return reject(err);
            }
            if (options.singular && callbackArgs.length === 1) {
              resolve(callbackArgs[0]);
            } else {
              resolve(callbackArgs);
            }
          });
          originalMethod.apply(this, args);
        });
      };
      wrapper.promisified_ = true;
      return wrapper;
    }
    exports2.promisify = promisify;
    function promisifyAll(Class, options) {
      const exclude = options && options.exclude || [];
      const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);
      const methods = ownPropertyNames.filter((methodName) => {
        return !exclude.includes(methodName) && typeof Class.prototype[methodName] === "function" && // is it a function?
        !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName);
      });
      methods.forEach((methodName) => {
        const originalMethod = Class.prototype[methodName];
        if (!originalMethod.promisified_) {
          Class.prototype[methodName] = exports2.promisify(originalMethod, options);
        }
      });
    }
    exports2.promisifyAll = promisifyAll;
    function callbackify(originalMethod) {
      if (originalMethod.callbackified_) {
        return originalMethod;
      }
      const wrapper = function() {
        if (typeof arguments[arguments.length - 1] !== "function") {
          return originalMethod.apply(this, arguments);
        }
        const cb = Array.prototype.pop.call(arguments);
        originalMethod.apply(this, arguments).then(
          // tslint:disable-next-line:no-any
          (res) => {
            res = Array.isArray(res) ? res : [res];
            cb(null, ...res);
          },
          (err) => cb(err)
        );
      };
      wrapper.callbackified_ = true;
      return wrapper;
    }
    exports2.callbackify = callbackify;
    function callbackifyAll(Class, options) {
      const exclude = options && options.exclude || [];
      const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);
      const methods = ownPropertyNames.filter((methodName) => {
        return !exclude.includes(methodName) && typeof Class.prototype[methodName] === "function" && // is it a function?
        !/^_|(Stream|_)|^constructor$/.test(methodName);
      });
      methods.forEach((methodName) => {
        const originalMethod = Class.prototype[methodName];
        if (!originalMethod.callbackified_) {
          Class.prototype[methodName] = exports2.callbackify(originalMethod);
        }
      });
    }
    exports2.callbackifyAll = callbackifyAll;
  }
});

// node_modules/arrify/index.js
var require_arrify = __commonJS({
  "node_modules/arrify/index.js"(exports2, module2) {
    "use strict";
    var arrify = (value) => {
      if (value === null || value === void 0) {
        return [];
      }
      if (Array.isArray(value)) {
        return value;
      }
      if (typeof value === "string") {
        return [value];
      }
      if (typeof value[Symbol.iterator] === "function") {
        return [...value];
      }
      return [value];
    };
    module2.exports = arrify;
  }
});

// browser-external:events
var require_events = __commonJS({
  "browser-external:events"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "events" has been externalized for browser compatibility. Cannot access "events.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports2, module2) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject = function isPlainObject2(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options) {
      if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name) {
      if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name).value;
        }
      }
      return obj[name];
    };
    module2.exports = function extend() {
      var options, name, src, copy, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length; ++i) {
        options = arguments[i];
        if (options != null) {
          for (name in options) {
            src = getProperty(target, name);
            copy = getProperty(options, name);
            if (target !== copy) {
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : [];
                } else {
                  clone = src && isPlainObject(src) ? src : {};
                }
                setProperty(target, { name, newValue: extend(deep, clone, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// browser-external:stream
var require_stream = __commonJS({
  "browser-external:stream"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "stream" has been externalized for browser compatibility. Cannot access "stream.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/@google-cloud/projectify/build/src/index.js
var require_src2 = __commonJS({
  "node_modules/@google-cloud/projectify/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MissingProjectIdError = exports2.replaceProjectIdToken = void 0;
    var stream_1 = require_stream();
    function replaceProjectIdToken(value, projectId) {
      if (Array.isArray(value)) {
        value = value.map((v) => replaceProjectIdToken(v, projectId));
      }
      if (value !== null && typeof value === "object" && !(value instanceof Buffer) && !(value instanceof stream_1.Stream) && typeof value.hasOwnProperty === "function") {
        for (const opt in value) {
          if (value.hasOwnProperty(opt)) {
            value[opt] = replaceProjectIdToken(value[opt], projectId);
          }
        }
      }
      if (typeof value === "string" && value.indexOf("{{projectId}}") > -1) {
        if (!projectId || projectId === "{{projectId}}") {
          throw new MissingProjectIdError();
        }
        value = value.replace(/{{projectId}}/g, projectId);
      }
      return value;
    }
    exports2.replaceProjectIdToken = replaceProjectIdToken;
    var MissingProjectIdError = class extends Error {
      constructor() {
        super(...arguments);
        this.message = `Sorry, we cannot connect to Cloud Services without a project
    ID. You may specify one with an environment variable named
    "GOOGLE_CLOUD_PROJECT".`.replace(/ +/g, " ");
      }
    };
    exports2.MissingProjectIdError = MissingProjectIdError;
  }
});

// browser-external:punycode
var require_punycode = __commonJS({
  "browser-external:punycode"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "punycode" has been externalized for browser compatibility. Cannot access "punycode.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/ent/reversed.json
var require_reversed = __commonJS({
  "node_modules/ent/reversed.json"(exports2, module2) {
    module2.exports = {
      "9": "Tab;",
      "10": "NewLine;",
      "33": "excl;",
      "34": "quot;",
      "35": "num;",
      "36": "dollar;",
      "37": "percnt;",
      "38": "amp;",
      "39": "apos;",
      "40": "lpar;",
      "41": "rpar;",
      "42": "midast;",
      "43": "plus;",
      "44": "comma;",
      "46": "period;",
      "47": "sol;",
      "58": "colon;",
      "59": "semi;",
      "60": "lt;",
      "61": "equals;",
      "62": "gt;",
      "63": "quest;",
      "64": "commat;",
      "91": "lsqb;",
      "92": "bsol;",
      "93": "rsqb;",
      "94": "Hat;",
      "95": "UnderBar;",
      "96": "grave;",
      "123": "lcub;",
      "124": "VerticalLine;",
      "125": "rcub;",
      "160": "NonBreakingSpace;",
      "161": "iexcl;",
      "162": "cent;",
      "163": "pound;",
      "164": "curren;",
      "165": "yen;",
      "166": "brvbar;",
      "167": "sect;",
      "168": "uml;",
      "169": "copy;",
      "170": "ordf;",
      "171": "laquo;",
      "172": "not;",
      "173": "shy;",
      "174": "reg;",
      "175": "strns;",
      "176": "deg;",
      "177": "pm;",
      "178": "sup2;",
      "179": "sup3;",
      "180": "DiacriticalAcute;",
      "181": "micro;",
      "182": "para;",
      "183": "middot;",
      "184": "Cedilla;",
      "185": "sup1;",
      "186": "ordm;",
      "187": "raquo;",
      "188": "frac14;",
      "189": "half;",
      "190": "frac34;",
      "191": "iquest;",
      "192": "Agrave;",
      "193": "Aacute;",
      "194": "Acirc;",
      "195": "Atilde;",
      "196": "Auml;",
      "197": "Aring;",
      "198": "AElig;",
      "199": "Ccedil;",
      "200": "Egrave;",
      "201": "Eacute;",
      "202": "Ecirc;",
      "203": "Euml;",
      "204": "Igrave;",
      "205": "Iacute;",
      "206": "Icirc;",
      "207": "Iuml;",
      "208": "ETH;",
      "209": "Ntilde;",
      "210": "Ograve;",
      "211": "Oacute;",
      "212": "Ocirc;",
      "213": "Otilde;",
      "214": "Ouml;",
      "215": "times;",
      "216": "Oslash;",
      "217": "Ugrave;",
      "218": "Uacute;",
      "219": "Ucirc;",
      "220": "Uuml;",
      "221": "Yacute;",
      "222": "THORN;",
      "223": "szlig;",
      "224": "agrave;",
      "225": "aacute;",
      "226": "acirc;",
      "227": "atilde;",
      "228": "auml;",
      "229": "aring;",
      "230": "aelig;",
      "231": "ccedil;",
      "232": "egrave;",
      "233": "eacute;",
      "234": "ecirc;",
      "235": "euml;",
      "236": "igrave;",
      "237": "iacute;",
      "238": "icirc;",
      "239": "iuml;",
      "240": "eth;",
      "241": "ntilde;",
      "242": "ograve;",
      "243": "oacute;",
      "244": "ocirc;",
      "245": "otilde;",
      "246": "ouml;",
      "247": "divide;",
      "248": "oslash;",
      "249": "ugrave;",
      "250": "uacute;",
      "251": "ucirc;",
      "252": "uuml;",
      "253": "yacute;",
      "254": "thorn;",
      "255": "yuml;",
      "256": "Amacr;",
      "257": "amacr;",
      "258": "Abreve;",
      "259": "abreve;",
      "260": "Aogon;",
      "261": "aogon;",
      "262": "Cacute;",
      "263": "cacute;",
      "264": "Ccirc;",
      "265": "ccirc;",
      "266": "Cdot;",
      "267": "cdot;",
      "268": "Ccaron;",
      "269": "ccaron;",
      "270": "Dcaron;",
      "271": "dcaron;",
      "272": "Dstrok;",
      "273": "dstrok;",
      "274": "Emacr;",
      "275": "emacr;",
      "278": "Edot;",
      "279": "edot;",
      "280": "Eogon;",
      "281": "eogon;",
      "282": "Ecaron;",
      "283": "ecaron;",
      "284": "Gcirc;",
      "285": "gcirc;",
      "286": "Gbreve;",
      "287": "gbreve;",
      "288": "Gdot;",
      "289": "gdot;",
      "290": "Gcedil;",
      "292": "Hcirc;",
      "293": "hcirc;",
      "294": "Hstrok;",
      "295": "hstrok;",
      "296": "Itilde;",
      "297": "itilde;",
      "298": "Imacr;",
      "299": "imacr;",
      "302": "Iogon;",
      "303": "iogon;",
      "304": "Idot;",
      "305": "inodot;",
      "306": "IJlig;",
      "307": "ijlig;",
      "308": "Jcirc;",
      "309": "jcirc;",
      "310": "Kcedil;",
      "311": "kcedil;",
      "312": "kgreen;",
      "313": "Lacute;",
      "314": "lacute;",
      "315": "Lcedil;",
      "316": "lcedil;",
      "317": "Lcaron;",
      "318": "lcaron;",
      "319": "Lmidot;",
      "320": "lmidot;",
      "321": "Lstrok;",
      "322": "lstrok;",
      "323": "Nacute;",
      "324": "nacute;",
      "325": "Ncedil;",
      "326": "ncedil;",
      "327": "Ncaron;",
      "328": "ncaron;",
      "329": "napos;",
      "330": "ENG;",
      "331": "eng;",
      "332": "Omacr;",
      "333": "omacr;",
      "336": "Odblac;",
      "337": "odblac;",
      "338": "OElig;",
      "339": "oelig;",
      "340": "Racute;",
      "341": "racute;",
      "342": "Rcedil;",
      "343": "rcedil;",
      "344": "Rcaron;",
      "345": "rcaron;",
      "346": "Sacute;",
      "347": "sacute;",
      "348": "Scirc;",
      "349": "scirc;",
      "350": "Scedil;",
      "351": "scedil;",
      "352": "Scaron;",
      "353": "scaron;",
      "354": "Tcedil;",
      "355": "tcedil;",
      "356": "Tcaron;",
      "357": "tcaron;",
      "358": "Tstrok;",
      "359": "tstrok;",
      "360": "Utilde;",
      "361": "utilde;",
      "362": "Umacr;",
      "363": "umacr;",
      "364": "Ubreve;",
      "365": "ubreve;",
      "366": "Uring;",
      "367": "uring;",
      "368": "Udblac;",
      "369": "udblac;",
      "370": "Uogon;",
      "371": "uogon;",
      "372": "Wcirc;",
      "373": "wcirc;",
      "374": "Ycirc;",
      "375": "ycirc;",
      "376": "Yuml;",
      "377": "Zacute;",
      "378": "zacute;",
      "379": "Zdot;",
      "380": "zdot;",
      "381": "Zcaron;",
      "382": "zcaron;",
      "402": "fnof;",
      "437": "imped;",
      "501": "gacute;",
      "567": "jmath;",
      "710": "circ;",
      "711": "Hacek;",
      "728": "breve;",
      "729": "dot;",
      "730": "ring;",
      "731": "ogon;",
      "732": "tilde;",
      "733": "DiacriticalDoubleAcute;",
      "785": "DownBreve;",
      "913": "Alpha;",
      "914": "Beta;",
      "915": "Gamma;",
      "916": "Delta;",
      "917": "Epsilon;",
      "918": "Zeta;",
      "919": "Eta;",
      "920": "Theta;",
      "921": "Iota;",
      "922": "Kappa;",
      "923": "Lambda;",
      "924": "Mu;",
      "925": "Nu;",
      "926": "Xi;",
      "927": "Omicron;",
      "928": "Pi;",
      "929": "Rho;",
      "931": "Sigma;",
      "932": "Tau;",
      "933": "Upsilon;",
      "934": "Phi;",
      "935": "Chi;",
      "936": "Psi;",
      "937": "Omega;",
      "945": "alpha;",
      "946": "beta;",
      "947": "gamma;",
      "948": "delta;",
      "949": "epsilon;",
      "950": "zeta;",
      "951": "eta;",
      "952": "theta;",
      "953": "iota;",
      "954": "kappa;",
      "955": "lambda;",
      "956": "mu;",
      "957": "nu;",
      "958": "xi;",
      "959": "omicron;",
      "960": "pi;",
      "961": "rho;",
      "962": "varsigma;",
      "963": "sigma;",
      "964": "tau;",
      "965": "upsilon;",
      "966": "phi;",
      "967": "chi;",
      "968": "psi;",
      "969": "omega;",
      "977": "vartheta;",
      "978": "upsih;",
      "981": "varphi;",
      "982": "varpi;",
      "988": "Gammad;",
      "989": "gammad;",
      "1008": "varkappa;",
      "1009": "varrho;",
      "1013": "varepsilon;",
      "1014": "bepsi;",
      "1025": "IOcy;",
      "1026": "DJcy;",
      "1027": "GJcy;",
      "1028": "Jukcy;",
      "1029": "DScy;",
      "1030": "Iukcy;",
      "1031": "YIcy;",
      "1032": "Jsercy;",
      "1033": "LJcy;",
      "1034": "NJcy;",
      "1035": "TSHcy;",
      "1036": "KJcy;",
      "1038": "Ubrcy;",
      "1039": "DZcy;",
      "1040": "Acy;",
      "1041": "Bcy;",
      "1042": "Vcy;",
      "1043": "Gcy;",
      "1044": "Dcy;",
      "1045": "IEcy;",
      "1046": "ZHcy;",
      "1047": "Zcy;",
      "1048": "Icy;",
      "1049": "Jcy;",
      "1050": "Kcy;",
      "1051": "Lcy;",
      "1052": "Mcy;",
      "1053": "Ncy;",
      "1054": "Ocy;",
      "1055": "Pcy;",
      "1056": "Rcy;",
      "1057": "Scy;",
      "1058": "Tcy;",
      "1059": "Ucy;",
      "1060": "Fcy;",
      "1061": "KHcy;",
      "1062": "TScy;",
      "1063": "CHcy;",
      "1064": "SHcy;",
      "1065": "SHCHcy;",
      "1066": "HARDcy;",
      "1067": "Ycy;",
      "1068": "SOFTcy;",
      "1069": "Ecy;",
      "1070": "YUcy;",
      "1071": "YAcy;",
      "1072": "acy;",
      "1073": "bcy;",
      "1074": "vcy;",
      "1075": "gcy;",
      "1076": "dcy;",
      "1077": "iecy;",
      "1078": "zhcy;",
      "1079": "zcy;",
      "1080": "icy;",
      "1081": "jcy;",
      "1082": "kcy;",
      "1083": "lcy;",
      "1084": "mcy;",
      "1085": "ncy;",
      "1086": "ocy;",
      "1087": "pcy;",
      "1088": "rcy;",
      "1089": "scy;",
      "1090": "tcy;",
      "1091": "ucy;",
      "1092": "fcy;",
      "1093": "khcy;",
      "1094": "tscy;",
      "1095": "chcy;",
      "1096": "shcy;",
      "1097": "shchcy;",
      "1098": "hardcy;",
      "1099": "ycy;",
      "1100": "softcy;",
      "1101": "ecy;",
      "1102": "yucy;",
      "1103": "yacy;",
      "1105": "iocy;",
      "1106": "djcy;",
      "1107": "gjcy;",
      "1108": "jukcy;",
      "1109": "dscy;",
      "1110": "iukcy;",
      "1111": "yicy;",
      "1112": "jsercy;",
      "1113": "ljcy;",
      "1114": "njcy;",
      "1115": "tshcy;",
      "1116": "kjcy;",
      "1118": "ubrcy;",
      "1119": "dzcy;",
      "8194": "ensp;",
      "8195": "emsp;",
      "8196": "emsp13;",
      "8197": "emsp14;",
      "8199": "numsp;",
      "8200": "puncsp;",
      "8201": "ThinSpace;",
      "8202": "VeryThinSpace;",
      "8203": "ZeroWidthSpace;",
      "8204": "zwnj;",
      "8205": "zwj;",
      "8206": "lrm;",
      "8207": "rlm;",
      "8208": "hyphen;",
      "8211": "ndash;",
      "8212": "mdash;",
      "8213": "horbar;",
      "8214": "Vert;",
      "8216": "OpenCurlyQuote;",
      "8217": "rsquor;",
      "8218": "sbquo;",
      "8220": "OpenCurlyDoubleQuote;",
      "8221": "rdquor;",
      "8222": "ldquor;",
      "8224": "dagger;",
      "8225": "ddagger;",
      "8226": "bullet;",
      "8229": "nldr;",
      "8230": "mldr;",
      "8240": "permil;",
      "8241": "pertenk;",
      "8242": "prime;",
      "8243": "Prime;",
      "8244": "tprime;",
      "8245": "bprime;",
      "8249": "lsaquo;",
      "8250": "rsaquo;",
      "8254": "OverBar;",
      "8257": "caret;",
      "8259": "hybull;",
      "8260": "frasl;",
      "8271": "bsemi;",
      "8279": "qprime;",
      "8287": "MediumSpace;",
      "8288": "NoBreak;",
      "8289": "ApplyFunction;",
      "8290": "it;",
      "8291": "InvisibleComma;",
      "8364": "euro;",
      "8411": "TripleDot;",
      "8412": "DotDot;",
      "8450": "Copf;",
      "8453": "incare;",
      "8458": "gscr;",
      "8459": "Hscr;",
      "8460": "Poincareplane;",
      "8461": "quaternions;",
      "8462": "planckh;",
      "8463": "plankv;",
      "8464": "Iscr;",
      "8465": "imagpart;",
      "8466": "Lscr;",
      "8467": "ell;",
      "8469": "Nopf;",
      "8470": "numero;",
      "8471": "copysr;",
      "8472": "wp;",
      "8473": "primes;",
      "8474": "rationals;",
      "8475": "Rscr;",
      "8476": "Rfr;",
      "8477": "Ropf;",
      "8478": "rx;",
      "8482": "trade;",
      "8484": "Zopf;",
      "8487": "mho;",
      "8488": "Zfr;",
      "8489": "iiota;",
      "8492": "Bscr;",
      "8493": "Cfr;",
      "8495": "escr;",
      "8496": "expectation;",
      "8497": "Fscr;",
      "8499": "phmmat;",
      "8500": "oscr;",
      "8501": "aleph;",
      "8502": "beth;",
      "8503": "gimel;",
      "8504": "daleth;",
      "8517": "DD;",
      "8518": "DifferentialD;",
      "8519": "exponentiale;",
      "8520": "ImaginaryI;",
      "8531": "frac13;",
      "8532": "frac23;",
      "8533": "frac15;",
      "8534": "frac25;",
      "8535": "frac35;",
      "8536": "frac45;",
      "8537": "frac16;",
      "8538": "frac56;",
      "8539": "frac18;",
      "8540": "frac38;",
      "8541": "frac58;",
      "8542": "frac78;",
      "8592": "slarr;",
      "8593": "uparrow;",
      "8594": "srarr;",
      "8595": "ShortDownArrow;",
      "8596": "leftrightarrow;",
      "8597": "varr;",
      "8598": "UpperLeftArrow;",
      "8599": "UpperRightArrow;",
      "8600": "searrow;",
      "8601": "swarrow;",
      "8602": "nleftarrow;",
      "8603": "nrightarrow;",
      "8605": "rightsquigarrow;",
      "8606": "twoheadleftarrow;",
      "8607": "Uarr;",
      "8608": "twoheadrightarrow;",
      "8609": "Darr;",
      "8610": "leftarrowtail;",
      "8611": "rightarrowtail;",
      "8612": "mapstoleft;",
      "8613": "UpTeeArrow;",
      "8614": "RightTeeArrow;",
      "8615": "mapstodown;",
      "8617": "larrhk;",
      "8618": "rarrhk;",
      "8619": "looparrowleft;",
      "8620": "rarrlp;",
      "8621": "leftrightsquigarrow;",
      "8622": "nleftrightarrow;",
      "8624": "lsh;",
      "8625": "rsh;",
      "8626": "ldsh;",
      "8627": "rdsh;",
      "8629": "crarr;",
      "8630": "curvearrowleft;",
      "8631": "curvearrowright;",
      "8634": "olarr;",
      "8635": "orarr;",
      "8636": "lharu;",
      "8637": "lhard;",
      "8638": "upharpoonright;",
      "8639": "upharpoonleft;",
      "8640": "RightVector;",
      "8641": "rightharpoondown;",
      "8642": "RightDownVector;",
      "8643": "LeftDownVector;",
      "8644": "rlarr;",
      "8645": "UpArrowDownArrow;",
      "8646": "lrarr;",
      "8647": "llarr;",
      "8648": "uuarr;",
      "8649": "rrarr;",
      "8650": "downdownarrows;",
      "8651": "ReverseEquilibrium;",
      "8652": "rlhar;",
      "8653": "nLeftarrow;",
      "8654": "nLeftrightarrow;",
      "8655": "nRightarrow;",
      "8656": "Leftarrow;",
      "8657": "Uparrow;",
      "8658": "Rightarrow;",
      "8659": "Downarrow;",
      "8660": "Leftrightarrow;",
      "8661": "vArr;",
      "8662": "nwArr;",
      "8663": "neArr;",
      "8664": "seArr;",
      "8665": "swArr;",
      "8666": "Lleftarrow;",
      "8667": "Rrightarrow;",
      "8669": "zigrarr;",
      "8676": "LeftArrowBar;",
      "8677": "RightArrowBar;",
      "8693": "duarr;",
      "8701": "loarr;",
      "8702": "roarr;",
      "8703": "hoarr;",
      "8704": "forall;",
      "8705": "complement;",
      "8706": "PartialD;",
      "8707": "Exists;",
      "8708": "NotExists;",
      "8709": "varnothing;",
      "8711": "nabla;",
      "8712": "isinv;",
      "8713": "notinva;",
      "8715": "SuchThat;",
      "8716": "NotReverseElement;",
      "8719": "Product;",
      "8720": "Coproduct;",
      "8721": "sum;",
      "8722": "minus;",
      "8723": "mp;",
      "8724": "plusdo;",
      "8726": "ssetmn;",
      "8727": "lowast;",
      "8728": "SmallCircle;",
      "8730": "Sqrt;",
      "8733": "vprop;",
      "8734": "infin;",
      "8735": "angrt;",
      "8736": "angle;",
      "8737": "measuredangle;",
      "8738": "angsph;",
      "8739": "VerticalBar;",
      "8740": "nsmid;",
      "8741": "spar;",
      "8742": "nspar;",
      "8743": "wedge;",
      "8744": "vee;",
      "8745": "cap;",
      "8746": "cup;",
      "8747": "Integral;",
      "8748": "Int;",
      "8749": "tint;",
      "8750": "oint;",
      "8751": "DoubleContourIntegral;",
      "8752": "Cconint;",
      "8753": "cwint;",
      "8754": "cwconint;",
      "8755": "CounterClockwiseContourIntegral;",
      "8756": "therefore;",
      "8757": "because;",
      "8758": "ratio;",
      "8759": "Proportion;",
      "8760": "minusd;",
      "8762": "mDDot;",
      "8763": "homtht;",
      "8764": "Tilde;",
      "8765": "bsim;",
      "8766": "mstpos;",
      "8767": "acd;",
      "8768": "wreath;",
      "8769": "nsim;",
      "8770": "esim;",
      "8771": "TildeEqual;",
      "8772": "nsimeq;",
      "8773": "TildeFullEqual;",
      "8774": "simne;",
      "8775": "NotTildeFullEqual;",
      "8776": "TildeTilde;",
      "8777": "NotTildeTilde;",
      "8778": "approxeq;",
      "8779": "apid;",
      "8780": "bcong;",
      "8781": "CupCap;",
      "8782": "HumpDownHump;",
      "8783": "HumpEqual;",
      "8784": "esdot;",
      "8785": "eDot;",
      "8786": "fallingdotseq;",
      "8787": "risingdotseq;",
      "8788": "coloneq;",
      "8789": "eqcolon;",
      "8790": "eqcirc;",
      "8791": "cire;",
      "8793": "wedgeq;",
      "8794": "veeeq;",
      "8796": "trie;",
      "8799": "questeq;",
      "8800": "NotEqual;",
      "8801": "equiv;",
      "8802": "NotCongruent;",
      "8804": "leq;",
      "8805": "GreaterEqual;",
      "8806": "LessFullEqual;",
      "8807": "GreaterFullEqual;",
      "8808": "lneqq;",
      "8809": "gneqq;",
      "8810": "NestedLessLess;",
      "8811": "NestedGreaterGreater;",
      "8812": "twixt;",
      "8813": "NotCupCap;",
      "8814": "NotLess;",
      "8815": "NotGreater;",
      "8816": "NotLessEqual;",
      "8817": "NotGreaterEqual;",
      "8818": "lsim;",
      "8819": "gtrsim;",
      "8820": "NotLessTilde;",
      "8821": "NotGreaterTilde;",
      "8822": "lg;",
      "8823": "gtrless;",
      "8824": "ntlg;",
      "8825": "ntgl;",
      "8826": "Precedes;",
      "8827": "Succeeds;",
      "8828": "PrecedesSlantEqual;",
      "8829": "SucceedsSlantEqual;",
      "8830": "prsim;",
      "8831": "succsim;",
      "8832": "nprec;",
      "8833": "nsucc;",
      "8834": "subset;",
      "8835": "supset;",
      "8836": "nsub;",
      "8837": "nsup;",
      "8838": "SubsetEqual;",
      "8839": "supseteq;",
      "8840": "nsubseteq;",
      "8841": "nsupseteq;",
      "8842": "subsetneq;",
      "8843": "supsetneq;",
      "8845": "cupdot;",
      "8846": "uplus;",
      "8847": "SquareSubset;",
      "8848": "SquareSuperset;",
      "8849": "SquareSubsetEqual;",
      "8850": "SquareSupersetEqual;",
      "8851": "SquareIntersection;",
      "8852": "SquareUnion;",
      "8853": "oplus;",
      "8854": "ominus;",
      "8855": "otimes;",
      "8856": "osol;",
      "8857": "odot;",
      "8858": "ocir;",
      "8859": "oast;",
      "8861": "odash;",
      "8862": "plusb;",
      "8863": "minusb;",
      "8864": "timesb;",
      "8865": "sdotb;",
      "8866": "vdash;",
      "8867": "LeftTee;",
      "8868": "top;",
      "8869": "UpTee;",
      "8871": "models;",
      "8872": "vDash;",
      "8873": "Vdash;",
      "8874": "Vvdash;",
      "8875": "VDash;",
      "8876": "nvdash;",
      "8877": "nvDash;",
      "8878": "nVdash;",
      "8879": "nVDash;",
      "8880": "prurel;",
      "8882": "vltri;",
      "8883": "vrtri;",
      "8884": "trianglelefteq;",
      "8885": "trianglerighteq;",
      "8886": "origof;",
      "8887": "imof;",
      "8888": "mumap;",
      "8889": "hercon;",
      "8890": "intercal;",
      "8891": "veebar;",
      "8893": "barvee;",
      "8894": "angrtvb;",
      "8895": "lrtri;",
      "8896": "xwedge;",
      "8897": "xvee;",
      "8898": "xcap;",
      "8899": "xcup;",
      "8900": "diamond;",
      "8901": "sdot;",
      "8902": "Star;",
      "8903": "divonx;",
      "8904": "bowtie;",
      "8905": "ltimes;",
      "8906": "rtimes;",
      "8907": "lthree;",
      "8908": "rthree;",
      "8909": "bsime;",
      "8910": "cuvee;",
      "8911": "cuwed;",
      "8912": "Subset;",
      "8913": "Supset;",
      "8914": "Cap;",
      "8915": "Cup;",
      "8916": "pitchfork;",
      "8917": "epar;",
      "8918": "ltdot;",
      "8919": "gtrdot;",
      "8920": "Ll;",
      "8921": "ggg;",
      "8922": "LessEqualGreater;",
      "8923": "gtreqless;",
      "8926": "curlyeqprec;",
      "8927": "curlyeqsucc;",
      "8928": "nprcue;",
      "8929": "nsccue;",
      "8930": "nsqsube;",
      "8931": "nsqsupe;",
      "8934": "lnsim;",
      "8935": "gnsim;",
      "8936": "prnsim;",
      "8937": "succnsim;",
      "8938": "ntriangleleft;",
      "8939": "ntriangleright;",
      "8940": "ntrianglelefteq;",
      "8941": "ntrianglerighteq;",
      "8942": "vellip;",
      "8943": "ctdot;",
      "8944": "utdot;",
      "8945": "dtdot;",
      "8946": "disin;",
      "8947": "isinsv;",
      "8948": "isins;",
      "8949": "isindot;",
      "8950": "notinvc;",
      "8951": "notinvb;",
      "8953": "isinE;",
      "8954": "nisd;",
      "8955": "xnis;",
      "8956": "nis;",
      "8957": "notnivc;",
      "8958": "notnivb;",
      "8965": "barwedge;",
      "8966": "doublebarwedge;",
      "8968": "LeftCeiling;",
      "8969": "RightCeiling;",
      "8970": "lfloor;",
      "8971": "RightFloor;",
      "8972": "drcrop;",
      "8973": "dlcrop;",
      "8974": "urcrop;",
      "8975": "ulcrop;",
      "8976": "bnot;",
      "8978": "profline;",
      "8979": "profsurf;",
      "8981": "telrec;",
      "8982": "target;",
      "8988": "ulcorner;",
      "8989": "urcorner;",
      "8990": "llcorner;",
      "8991": "lrcorner;",
      "8994": "sfrown;",
      "8995": "ssmile;",
      "9005": "cylcty;",
      "9006": "profalar;",
      "9014": "topbot;",
      "9021": "ovbar;",
      "9023": "solbar;",
      "9084": "angzarr;",
      "9136": "lmoustache;",
      "9137": "rmoustache;",
      "9140": "tbrk;",
      "9141": "UnderBracket;",
      "9142": "bbrktbrk;",
      "9180": "OverParenthesis;",
      "9181": "UnderParenthesis;",
      "9182": "OverBrace;",
      "9183": "UnderBrace;",
      "9186": "trpezium;",
      "9191": "elinters;",
      "9251": "blank;",
      "9416": "oS;",
      "9472": "HorizontalLine;",
      "9474": "boxv;",
      "9484": "boxdr;",
      "9488": "boxdl;",
      "9492": "boxur;",
      "9496": "boxul;",
      "9500": "boxvr;",
      "9508": "boxvl;",
      "9516": "boxhd;",
      "9524": "boxhu;",
      "9532": "boxvh;",
      "9552": "boxH;",
      "9553": "boxV;",
      "9554": "boxdR;",
      "9555": "boxDr;",
      "9556": "boxDR;",
      "9557": "boxdL;",
      "9558": "boxDl;",
      "9559": "boxDL;",
      "9560": "boxuR;",
      "9561": "boxUr;",
      "9562": "boxUR;",
      "9563": "boxuL;",
      "9564": "boxUl;",
      "9565": "boxUL;",
      "9566": "boxvR;",
      "9567": "boxVr;",
      "9568": "boxVR;",
      "9569": "boxvL;",
      "9570": "boxVl;",
      "9571": "boxVL;",
      "9572": "boxHd;",
      "9573": "boxhD;",
      "9574": "boxHD;",
      "9575": "boxHu;",
      "9576": "boxhU;",
      "9577": "boxHU;",
      "9578": "boxvH;",
      "9579": "boxVh;",
      "9580": "boxVH;",
      "9600": "uhblk;",
      "9604": "lhblk;",
      "9608": "block;",
      "9617": "blk14;",
      "9618": "blk12;",
      "9619": "blk34;",
      "9633": "square;",
      "9642": "squf;",
      "9643": "EmptyVerySmallSquare;",
      "9645": "rect;",
      "9646": "marker;",
      "9649": "fltns;",
      "9651": "xutri;",
      "9652": "utrif;",
      "9653": "utri;",
      "9656": "rtrif;",
      "9657": "triangleright;",
      "9661": "xdtri;",
      "9662": "dtrif;",
      "9663": "triangledown;",
      "9666": "ltrif;",
      "9667": "triangleleft;",
      "9674": "lozenge;",
      "9675": "cir;",
      "9708": "tridot;",
      "9711": "xcirc;",
      "9720": "ultri;",
      "9721": "urtri;",
      "9722": "lltri;",
      "9723": "EmptySmallSquare;",
      "9724": "FilledSmallSquare;",
      "9733": "starf;",
      "9734": "star;",
      "9742": "phone;",
      "9792": "female;",
      "9794": "male;",
      "9824": "spadesuit;",
      "9827": "clubsuit;",
      "9829": "heartsuit;",
      "9830": "diams;",
      "9834": "sung;",
      "9837": "flat;",
      "9838": "natural;",
      "9839": "sharp;",
      "10003": "checkmark;",
      "10007": "cross;",
      "10016": "maltese;",
      "10038": "sext;",
      "10072": "VerticalSeparator;",
      "10098": "lbbrk;",
      "10099": "rbbrk;",
      "10184": "bsolhsub;",
      "10185": "suphsol;",
      "10214": "lobrk;",
      "10215": "robrk;",
      "10216": "LeftAngleBracket;",
      "10217": "RightAngleBracket;",
      "10218": "Lang;",
      "10219": "Rang;",
      "10220": "loang;",
      "10221": "roang;",
      "10229": "xlarr;",
      "10230": "xrarr;",
      "10231": "xharr;",
      "10232": "xlArr;",
      "10233": "xrArr;",
      "10234": "xhArr;",
      "10236": "xmap;",
      "10239": "dzigrarr;",
      "10498": "nvlArr;",
      "10499": "nvrArr;",
      "10500": "nvHarr;",
      "10501": "Map;",
      "10508": "lbarr;",
      "10509": "rbarr;",
      "10510": "lBarr;",
      "10511": "rBarr;",
      "10512": "RBarr;",
      "10513": "DDotrahd;",
      "10514": "UpArrowBar;",
      "10515": "DownArrowBar;",
      "10518": "Rarrtl;",
      "10521": "latail;",
      "10522": "ratail;",
      "10523": "lAtail;",
      "10524": "rAtail;",
      "10525": "larrfs;",
      "10526": "rarrfs;",
      "10527": "larrbfs;",
      "10528": "rarrbfs;",
      "10531": "nwarhk;",
      "10532": "nearhk;",
      "10533": "searhk;",
      "10534": "swarhk;",
      "10535": "nwnear;",
      "10536": "toea;",
      "10537": "tosa;",
      "10538": "swnwar;",
      "10547": "rarrc;",
      "10549": "cudarrr;",
      "10550": "ldca;",
      "10551": "rdca;",
      "10552": "cudarrl;",
      "10553": "larrpl;",
      "10556": "curarrm;",
      "10557": "cularrp;",
      "10565": "rarrpl;",
      "10568": "harrcir;",
      "10569": "Uarrocir;",
      "10570": "lurdshar;",
      "10571": "ldrushar;",
      "10574": "LeftRightVector;",
      "10575": "RightUpDownVector;",
      "10576": "DownLeftRightVector;",
      "10577": "LeftUpDownVector;",
      "10578": "LeftVectorBar;",
      "10579": "RightVectorBar;",
      "10580": "RightUpVectorBar;",
      "10581": "RightDownVectorBar;",
      "10582": "DownLeftVectorBar;",
      "10583": "DownRightVectorBar;",
      "10584": "LeftUpVectorBar;",
      "10585": "LeftDownVectorBar;",
      "10586": "LeftTeeVector;",
      "10587": "RightTeeVector;",
      "10588": "RightUpTeeVector;",
      "10589": "RightDownTeeVector;",
      "10590": "DownLeftTeeVector;",
      "10591": "DownRightTeeVector;",
      "10592": "LeftUpTeeVector;",
      "10593": "LeftDownTeeVector;",
      "10594": "lHar;",
      "10595": "uHar;",
      "10596": "rHar;",
      "10597": "dHar;",
      "10598": "luruhar;",
      "10599": "ldrdhar;",
      "10600": "ruluhar;",
      "10601": "rdldhar;",
      "10602": "lharul;",
      "10603": "llhard;",
      "10604": "rharul;",
      "10605": "lrhard;",
      "10606": "UpEquilibrium;",
      "10607": "ReverseUpEquilibrium;",
      "10608": "RoundImplies;",
      "10609": "erarr;",
      "10610": "simrarr;",
      "10611": "larrsim;",
      "10612": "rarrsim;",
      "10613": "rarrap;",
      "10614": "ltlarr;",
      "10616": "gtrarr;",
      "10617": "subrarr;",
      "10619": "suplarr;",
      "10620": "lfisht;",
      "10621": "rfisht;",
      "10622": "ufisht;",
      "10623": "dfisht;",
      "10629": "lopar;",
      "10630": "ropar;",
      "10635": "lbrke;",
      "10636": "rbrke;",
      "10637": "lbrkslu;",
      "10638": "rbrksld;",
      "10639": "lbrksld;",
      "10640": "rbrkslu;",
      "10641": "langd;",
      "10642": "rangd;",
      "10643": "lparlt;",
      "10644": "rpargt;",
      "10645": "gtlPar;",
      "10646": "ltrPar;",
      "10650": "vzigzag;",
      "10652": "vangrt;",
      "10653": "angrtvbd;",
      "10660": "ange;",
      "10661": "range;",
      "10662": "dwangle;",
      "10663": "uwangle;",
      "10664": "angmsdaa;",
      "10665": "angmsdab;",
      "10666": "angmsdac;",
      "10667": "angmsdad;",
      "10668": "angmsdae;",
      "10669": "angmsdaf;",
      "10670": "angmsdag;",
      "10671": "angmsdah;",
      "10672": "bemptyv;",
      "10673": "demptyv;",
      "10674": "cemptyv;",
      "10675": "raemptyv;",
      "10676": "laemptyv;",
      "10677": "ohbar;",
      "10678": "omid;",
      "10679": "opar;",
      "10681": "operp;",
      "10683": "olcross;",
      "10684": "odsold;",
      "10686": "olcir;",
      "10687": "ofcir;",
      "10688": "olt;",
      "10689": "ogt;",
      "10690": "cirscir;",
      "10691": "cirE;",
      "10692": "solb;",
      "10693": "bsolb;",
      "10697": "boxbox;",
      "10701": "trisb;",
      "10702": "rtriltri;",
      "10703": "LeftTriangleBar;",
      "10704": "RightTriangleBar;",
      "10716": "iinfin;",
      "10717": "infintie;",
      "10718": "nvinfin;",
      "10723": "eparsl;",
      "10724": "smeparsl;",
      "10725": "eqvparsl;",
      "10731": "lozf;",
      "10740": "RuleDelayed;",
      "10742": "dsol;",
      "10752": "xodot;",
      "10753": "xoplus;",
      "10754": "xotime;",
      "10756": "xuplus;",
      "10758": "xsqcup;",
      "10764": "qint;",
      "10765": "fpartint;",
      "10768": "cirfnint;",
      "10769": "awint;",
      "10770": "rppolint;",
      "10771": "scpolint;",
      "10772": "npolint;",
      "10773": "pointint;",
      "10774": "quatint;",
      "10775": "intlarhk;",
      "10786": "pluscir;",
      "10787": "plusacir;",
      "10788": "simplus;",
      "10789": "plusdu;",
      "10790": "plussim;",
      "10791": "plustwo;",
      "10793": "mcomma;",
      "10794": "minusdu;",
      "10797": "loplus;",
      "10798": "roplus;",
      "10799": "Cross;",
      "10800": "timesd;",
      "10801": "timesbar;",
      "10803": "smashp;",
      "10804": "lotimes;",
      "10805": "rotimes;",
      "10806": "otimesas;",
      "10807": "Otimes;",
      "10808": "odiv;",
      "10809": "triplus;",
      "10810": "triminus;",
      "10811": "tritime;",
      "10812": "iprod;",
      "10815": "amalg;",
      "10816": "capdot;",
      "10818": "ncup;",
      "10819": "ncap;",
      "10820": "capand;",
      "10821": "cupor;",
      "10822": "cupcap;",
      "10823": "capcup;",
      "10824": "cupbrcap;",
      "10825": "capbrcup;",
      "10826": "cupcup;",
      "10827": "capcap;",
      "10828": "ccups;",
      "10829": "ccaps;",
      "10832": "ccupssm;",
      "10835": "And;",
      "10836": "Or;",
      "10837": "andand;",
      "10838": "oror;",
      "10839": "orslope;",
      "10840": "andslope;",
      "10842": "andv;",
      "10843": "orv;",
      "10844": "andd;",
      "10845": "ord;",
      "10847": "wedbar;",
      "10854": "sdote;",
      "10858": "simdot;",
      "10861": "congdot;",
      "10862": "easter;",
      "10863": "apacir;",
      "10864": "apE;",
      "10865": "eplus;",
      "10866": "pluse;",
      "10867": "Esim;",
      "10868": "Colone;",
      "10869": "Equal;",
      "10871": "eDDot;",
      "10872": "equivDD;",
      "10873": "ltcir;",
      "10874": "gtcir;",
      "10875": "ltquest;",
      "10876": "gtquest;",
      "10877": "LessSlantEqual;",
      "10878": "GreaterSlantEqual;",
      "10879": "lesdot;",
      "10880": "gesdot;",
      "10881": "lesdoto;",
      "10882": "gesdoto;",
      "10883": "lesdotor;",
      "10884": "gesdotol;",
      "10885": "lessapprox;",
      "10886": "gtrapprox;",
      "10887": "lneq;",
      "10888": "gneq;",
      "10889": "lnapprox;",
      "10890": "gnapprox;",
      "10891": "lesseqqgtr;",
      "10892": "gtreqqless;",
      "10893": "lsime;",
      "10894": "gsime;",
      "10895": "lsimg;",
      "10896": "gsiml;",
      "10897": "lgE;",
      "10898": "glE;",
      "10899": "lesges;",
      "10900": "gesles;",
      "10901": "eqslantless;",
      "10902": "eqslantgtr;",
      "10903": "elsdot;",
      "10904": "egsdot;",
      "10905": "el;",
      "10906": "eg;",
      "10909": "siml;",
      "10910": "simg;",
      "10911": "simlE;",
      "10912": "simgE;",
      "10913": "LessLess;",
      "10914": "GreaterGreater;",
      "10916": "glj;",
      "10917": "gla;",
      "10918": "ltcc;",
      "10919": "gtcc;",
      "10920": "lescc;",
      "10921": "gescc;",
      "10922": "smt;",
      "10923": "lat;",
      "10924": "smte;",
      "10925": "late;",
      "10926": "bumpE;",
      "10927": "preceq;",
      "10928": "succeq;",
      "10931": "prE;",
      "10932": "scE;",
      "10933": "prnE;",
      "10934": "succneqq;",
      "10935": "precapprox;",
      "10936": "succapprox;",
      "10937": "prnap;",
      "10938": "succnapprox;",
      "10939": "Pr;",
      "10940": "Sc;",
      "10941": "subdot;",
      "10942": "supdot;",
      "10943": "subplus;",
      "10944": "supplus;",
      "10945": "submult;",
      "10946": "supmult;",
      "10947": "subedot;",
      "10948": "supedot;",
      "10949": "subseteqq;",
      "10950": "supseteqq;",
      "10951": "subsim;",
      "10952": "supsim;",
      "10955": "subsetneqq;",
      "10956": "supsetneqq;",
      "10959": "csub;",
      "10960": "csup;",
      "10961": "csube;",
      "10962": "csupe;",
      "10963": "subsup;",
      "10964": "supsub;",
      "10965": "subsub;",
      "10966": "supsup;",
      "10967": "suphsub;",
      "10968": "supdsub;",
      "10969": "forkv;",
      "10970": "topfork;",
      "10971": "mlcp;",
      "10980": "DoubleLeftTee;",
      "10982": "Vdashl;",
      "10983": "Barv;",
      "10984": "vBar;",
      "10985": "vBarv;",
      "10987": "Vbar;",
      "10988": "Not;",
      "10989": "bNot;",
      "10990": "rnmid;",
      "10991": "cirmid;",
      "10992": "midcir;",
      "10993": "topcir;",
      "10994": "nhpar;",
      "10995": "parsim;",
      "11005": "parsl;",
      "64256": "fflig;",
      "64257": "filig;",
      "64258": "fllig;",
      "64259": "ffilig;",
      "64260": "ffllig;"
    };
  }
});

// node_modules/ent/encode.js
var require_encode = __commonJS({
  "node_modules/ent/encode.js"(exports2, module2) {
    var punycode = require_punycode();
    var revEntities = require_reversed();
    module2.exports = encode;
    function encode(str, opts) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a String");
      }
      if (!opts)
        opts = {};
      var numeric = true;
      if (opts.named)
        numeric = false;
      if (opts.numeric !== void 0)
        numeric = opts.numeric;
      var special = opts.special || {
        '"': true,
        "'": true,
        "<": true,
        ">": true,
        "&": true
      };
      var codePoints = punycode.ucs2.decode(str);
      var chars = [];
      for (var i = 0; i < codePoints.length; i++) {
        var cc = codePoints[i];
        var c = punycode.ucs2.encode([cc]);
        var e = revEntities[cc];
        if (e && (cc >= 127 || special[c]) && !numeric) {
          chars.push("&" + (/;$/.test(e) ? e : e + ";"));
        } else if (cc < 32 || cc >= 127 || special[c]) {
          chars.push("&#" + cc + ";");
        } else {
          chars.push(c);
        }
      }
      return chars.join("");
    }
  }
});

// node_modules/ent/entities.json
var require_entities = __commonJS({
  "node_modules/ent/entities.json"(exports2, module2) {
    module2.exports = {
      "Aacute;": "Á",
      Aacute: "Á",
      "aacute;": "á",
      aacute: "á",
      "Abreve;": "Ă",
      "abreve;": "ă",
      "ac;": "∾",
      "acd;": "∿",
      "acE;": "∾̳",
      "Acirc;": "Â",
      Acirc: "Â",
      "acirc;": "â",
      acirc: "â",
      "acute;": "´",
      acute: "´",
      "Acy;": "А",
      "acy;": "а",
      "AElig;": "Æ",
      AElig: "Æ",
      "aelig;": "æ",
      aelig: "æ",
      "af;": "⁡",
      "Afr;": "𝔄",
      "afr;": "𝔞",
      "Agrave;": "À",
      Agrave: "À",
      "agrave;": "à",
      agrave: "à",
      "alefsym;": "ℵ",
      "aleph;": "ℵ",
      "Alpha;": "Α",
      "alpha;": "α",
      "Amacr;": "Ā",
      "amacr;": "ā",
      "amalg;": "⨿",
      "AMP;": "&",
      AMP: "&",
      "amp;": "&",
      amp: "&",
      "And;": "⩓",
      "and;": "∧",
      "andand;": "⩕",
      "andd;": "⩜",
      "andslope;": "⩘",
      "andv;": "⩚",
      "ang;": "∠",
      "ange;": "⦤",
      "angle;": "∠",
      "angmsd;": "∡",
      "angmsdaa;": "⦨",
      "angmsdab;": "⦩",
      "angmsdac;": "⦪",
      "angmsdad;": "⦫",
      "angmsdae;": "⦬",
      "angmsdaf;": "⦭",
      "angmsdag;": "⦮",
      "angmsdah;": "⦯",
      "angrt;": "∟",
      "angrtvb;": "⊾",
      "angrtvbd;": "⦝",
      "angsph;": "∢",
      "angst;": "Å",
      "angzarr;": "⍼",
      "Aogon;": "Ą",
      "aogon;": "ą",
      "Aopf;": "𝔸",
      "aopf;": "𝕒",
      "ap;": "≈",
      "apacir;": "⩯",
      "apE;": "⩰",
      "ape;": "≊",
      "apid;": "≋",
      "apos;": "'",
      "ApplyFunction;": "⁡",
      "approx;": "≈",
      "approxeq;": "≊",
      "Aring;": "Å",
      Aring: "Å",
      "aring;": "å",
      aring: "å",
      "Ascr;": "𝒜",
      "ascr;": "𝒶",
      "Assign;": "≔",
      "ast;": "*",
      "asymp;": "≈",
      "asympeq;": "≍",
      "Atilde;": "Ã",
      Atilde: "Ã",
      "atilde;": "ã",
      atilde: "ã",
      "Auml;": "Ä",
      Auml: "Ä",
      "auml;": "ä",
      auml: "ä",
      "awconint;": "∳",
      "awint;": "⨑",
      "backcong;": "≌",
      "backepsilon;": "϶",
      "backprime;": "‵",
      "backsim;": "∽",
      "backsimeq;": "⋍",
      "Backslash;": "∖",
      "Barv;": "⫧",
      "barvee;": "⊽",
      "Barwed;": "⌆",
      "barwed;": "⌅",
      "barwedge;": "⌅",
      "bbrk;": "⎵",
      "bbrktbrk;": "⎶",
      "bcong;": "≌",
      "Bcy;": "Б",
      "bcy;": "б",
      "bdquo;": "„",
      "becaus;": "∵",
      "Because;": "∵",
      "because;": "∵",
      "bemptyv;": "⦰",
      "bepsi;": "϶",
      "bernou;": "ℬ",
      "Bernoullis;": "ℬ",
      "Beta;": "Β",
      "beta;": "β",
      "beth;": "ℶ",
      "between;": "≬",
      "Bfr;": "𝔅",
      "bfr;": "𝔟",
      "bigcap;": "⋂",
      "bigcirc;": "◯",
      "bigcup;": "⋃",
      "bigodot;": "⨀",
      "bigoplus;": "⨁",
      "bigotimes;": "⨂",
      "bigsqcup;": "⨆",
      "bigstar;": "★",
      "bigtriangledown;": "▽",
      "bigtriangleup;": "△",
      "biguplus;": "⨄",
      "bigvee;": "⋁",
      "bigwedge;": "⋀",
      "bkarow;": "⤍",
      "blacklozenge;": "⧫",
      "blacksquare;": "▪",
      "blacktriangle;": "▴",
      "blacktriangledown;": "▾",
      "blacktriangleleft;": "◂",
      "blacktriangleright;": "▸",
      "blank;": "␣",
      "blk12;": "▒",
      "blk14;": "░",
      "blk34;": "▓",
      "block;": "█",
      "bne;": "=⃥",
      "bnequiv;": "≡⃥",
      "bNot;": "⫭",
      "bnot;": "⌐",
      "Bopf;": "𝔹",
      "bopf;": "𝕓",
      "bot;": "⊥",
      "bottom;": "⊥",
      "bowtie;": "⋈",
      "boxbox;": "⧉",
      "boxDL;": "╗",
      "boxDl;": "╖",
      "boxdL;": "╕",
      "boxdl;": "┐",
      "boxDR;": "╔",
      "boxDr;": "╓",
      "boxdR;": "╒",
      "boxdr;": "┌",
      "boxH;": "═",
      "boxh;": "─",
      "boxHD;": "╦",
      "boxHd;": "╤",
      "boxhD;": "╥",
      "boxhd;": "┬",
      "boxHU;": "╩",
      "boxHu;": "╧",
      "boxhU;": "╨",
      "boxhu;": "┴",
      "boxminus;": "⊟",
      "boxplus;": "⊞",
      "boxtimes;": "⊠",
      "boxUL;": "╝",
      "boxUl;": "╜",
      "boxuL;": "╛",
      "boxul;": "┘",
      "boxUR;": "╚",
      "boxUr;": "╙",
      "boxuR;": "╘",
      "boxur;": "└",
      "boxV;": "║",
      "boxv;": "│",
      "boxVH;": "╬",
      "boxVh;": "╫",
      "boxvH;": "╪",
      "boxvh;": "┼",
      "boxVL;": "╣",
      "boxVl;": "╢",
      "boxvL;": "╡",
      "boxvl;": "┤",
      "boxVR;": "╠",
      "boxVr;": "╟",
      "boxvR;": "╞",
      "boxvr;": "├",
      "bprime;": "‵",
      "Breve;": "˘",
      "breve;": "˘",
      "brvbar;": "¦",
      brvbar: "¦",
      "Bscr;": "ℬ",
      "bscr;": "𝒷",
      "bsemi;": "⁏",
      "bsim;": "∽",
      "bsime;": "⋍",
      "bsol;": "\\",
      "bsolb;": "⧅",
      "bsolhsub;": "⟈",
      "bull;": "•",
      "bullet;": "•",
      "bump;": "≎",
      "bumpE;": "⪮",
      "bumpe;": "≏",
      "Bumpeq;": "≎",
      "bumpeq;": "≏",
      "Cacute;": "Ć",
      "cacute;": "ć",
      "Cap;": "⋒",
      "cap;": "∩",
      "capand;": "⩄",
      "capbrcup;": "⩉",
      "capcap;": "⩋",
      "capcup;": "⩇",
      "capdot;": "⩀",
      "CapitalDifferentialD;": "ⅅ",
      "caps;": "∩︀",
      "caret;": "⁁",
      "caron;": "ˇ",
      "Cayleys;": "ℭ",
      "ccaps;": "⩍",
      "Ccaron;": "Č",
      "ccaron;": "č",
      "Ccedil;": "Ç",
      Ccedil: "Ç",
      "ccedil;": "ç",
      ccedil: "ç",
      "Ccirc;": "Ĉ",
      "ccirc;": "ĉ",
      "Cconint;": "∰",
      "ccups;": "⩌",
      "ccupssm;": "⩐",
      "Cdot;": "Ċ",
      "cdot;": "ċ",
      "cedil;": "¸",
      cedil: "¸",
      "Cedilla;": "¸",
      "cemptyv;": "⦲",
      "cent;": "¢",
      cent: "¢",
      "CenterDot;": "·",
      "centerdot;": "·",
      "Cfr;": "ℭ",
      "cfr;": "𝔠",
      "CHcy;": "Ч",
      "chcy;": "ч",
      "check;": "✓",
      "checkmark;": "✓",
      "Chi;": "Χ",
      "chi;": "χ",
      "cir;": "○",
      "circ;": "ˆ",
      "circeq;": "≗",
      "circlearrowleft;": "↺",
      "circlearrowright;": "↻",
      "circledast;": "⊛",
      "circledcirc;": "⊚",
      "circleddash;": "⊝",
      "CircleDot;": "⊙",
      "circledR;": "®",
      "circledS;": "Ⓢ",
      "CircleMinus;": "⊖",
      "CirclePlus;": "⊕",
      "CircleTimes;": "⊗",
      "cirE;": "⧃",
      "cire;": "≗",
      "cirfnint;": "⨐",
      "cirmid;": "⫯",
      "cirscir;": "⧂",
      "ClockwiseContourIntegral;": "∲",
      "CloseCurlyDoubleQuote;": "”",
      "CloseCurlyQuote;": "’",
      "clubs;": "♣",
      "clubsuit;": "♣",
      "Colon;": "∷",
      "colon;": ":",
      "Colone;": "⩴",
      "colone;": "≔",
      "coloneq;": "≔",
      "comma;": ",",
      "commat;": "@",
      "comp;": "∁",
      "compfn;": "∘",
      "complement;": "∁",
      "complexes;": "ℂ",
      "cong;": "≅",
      "congdot;": "⩭",
      "Congruent;": "≡",
      "Conint;": "∯",
      "conint;": "∮",
      "ContourIntegral;": "∮",
      "Copf;": "ℂ",
      "copf;": "𝕔",
      "coprod;": "∐",
      "Coproduct;": "∐",
      "COPY;": "©",
      COPY: "©",
      "copy;": "©",
      copy: "©",
      "copysr;": "℗",
      "CounterClockwiseContourIntegral;": "∳",
      "crarr;": "↵",
      "Cross;": "⨯",
      "cross;": "✗",
      "Cscr;": "𝒞",
      "cscr;": "𝒸",
      "csub;": "⫏",
      "csube;": "⫑",
      "csup;": "⫐",
      "csupe;": "⫒",
      "ctdot;": "⋯",
      "cudarrl;": "⤸",
      "cudarrr;": "⤵",
      "cuepr;": "⋞",
      "cuesc;": "⋟",
      "cularr;": "↶",
      "cularrp;": "⤽",
      "Cup;": "⋓",
      "cup;": "∪",
      "cupbrcap;": "⩈",
      "CupCap;": "≍",
      "cupcap;": "⩆",
      "cupcup;": "⩊",
      "cupdot;": "⊍",
      "cupor;": "⩅",
      "cups;": "∪︀",
      "curarr;": "↷",
      "curarrm;": "⤼",
      "curlyeqprec;": "⋞",
      "curlyeqsucc;": "⋟",
      "curlyvee;": "⋎",
      "curlywedge;": "⋏",
      "curren;": "¤",
      curren: "¤",
      "curvearrowleft;": "↶",
      "curvearrowright;": "↷",
      "cuvee;": "⋎",
      "cuwed;": "⋏",
      "cwconint;": "∲",
      "cwint;": "∱",
      "cylcty;": "⌭",
      "Dagger;": "‡",
      "dagger;": "†",
      "daleth;": "ℸ",
      "Darr;": "↡",
      "dArr;": "⇓",
      "darr;": "↓",
      "dash;": "‐",
      "Dashv;": "⫤",
      "dashv;": "⊣",
      "dbkarow;": "⤏",
      "dblac;": "˝",
      "Dcaron;": "Ď",
      "dcaron;": "ď",
      "Dcy;": "Д",
      "dcy;": "д",
      "DD;": "ⅅ",
      "dd;": "ⅆ",
      "ddagger;": "‡",
      "ddarr;": "⇊",
      "DDotrahd;": "⤑",
      "ddotseq;": "⩷",
      "deg;": "°",
      deg: "°",
      "Del;": "∇",
      "Delta;": "Δ",
      "delta;": "δ",
      "demptyv;": "⦱",
      "dfisht;": "⥿",
      "Dfr;": "𝔇",
      "dfr;": "𝔡",
      "dHar;": "⥥",
      "dharl;": "⇃",
      "dharr;": "⇂",
      "DiacriticalAcute;": "´",
      "DiacriticalDot;": "˙",
      "DiacriticalDoubleAcute;": "˝",
      "DiacriticalGrave;": "`",
      "DiacriticalTilde;": "˜",
      "diam;": "⋄",
      "Diamond;": "⋄",
      "diamond;": "⋄",
      "diamondsuit;": "♦",
      "diams;": "♦",
      "die;": "¨",
      "DifferentialD;": "ⅆ",
      "digamma;": "ϝ",
      "disin;": "⋲",
      "div;": "÷",
      "divide;": "÷",
      divide: "÷",
      "divideontimes;": "⋇",
      "divonx;": "⋇",
      "DJcy;": "Ђ",
      "djcy;": "ђ",
      "dlcorn;": "⌞",
      "dlcrop;": "⌍",
      "dollar;": "$",
      "Dopf;": "𝔻",
      "dopf;": "𝕕",
      "Dot;": "¨",
      "dot;": "˙",
      "DotDot;": "⃜",
      "doteq;": "≐",
      "doteqdot;": "≑",
      "DotEqual;": "≐",
      "dotminus;": "∸",
      "dotplus;": "∔",
      "dotsquare;": "⊡",
      "doublebarwedge;": "⌆",
      "DoubleContourIntegral;": "∯",
      "DoubleDot;": "¨",
      "DoubleDownArrow;": "⇓",
      "DoubleLeftArrow;": "⇐",
      "DoubleLeftRightArrow;": "⇔",
      "DoubleLeftTee;": "⫤",
      "DoubleLongLeftArrow;": "⟸",
      "DoubleLongLeftRightArrow;": "⟺",
      "DoubleLongRightArrow;": "⟹",
      "DoubleRightArrow;": "⇒",
      "DoubleRightTee;": "⊨",
      "DoubleUpArrow;": "⇑",
      "DoubleUpDownArrow;": "⇕",
      "DoubleVerticalBar;": "∥",
      "DownArrow;": "↓",
      "Downarrow;": "⇓",
      "downarrow;": "↓",
      "DownArrowBar;": "⤓",
      "DownArrowUpArrow;": "⇵",
      "DownBreve;": "̑",
      "downdownarrows;": "⇊",
      "downharpoonleft;": "⇃",
      "downharpoonright;": "⇂",
      "DownLeftRightVector;": "⥐",
      "DownLeftTeeVector;": "⥞",
      "DownLeftVector;": "↽",
      "DownLeftVectorBar;": "⥖",
      "DownRightTeeVector;": "⥟",
      "DownRightVector;": "⇁",
      "DownRightVectorBar;": "⥗",
      "DownTee;": "⊤",
      "DownTeeArrow;": "↧",
      "drbkarow;": "⤐",
      "drcorn;": "⌟",
      "drcrop;": "⌌",
      "Dscr;": "𝒟",
      "dscr;": "𝒹",
      "DScy;": "Ѕ",
      "dscy;": "ѕ",
      "dsol;": "⧶",
      "Dstrok;": "Đ",
      "dstrok;": "đ",
      "dtdot;": "⋱",
      "dtri;": "▿",
      "dtrif;": "▾",
      "duarr;": "⇵",
      "duhar;": "⥯",
      "dwangle;": "⦦",
      "DZcy;": "Џ",
      "dzcy;": "џ",
      "dzigrarr;": "⟿",
      "Eacute;": "É",
      Eacute: "É",
      "eacute;": "é",
      eacute: "é",
      "easter;": "⩮",
      "Ecaron;": "Ě",
      "ecaron;": "ě",
      "ecir;": "≖",
      "Ecirc;": "Ê",
      Ecirc: "Ê",
      "ecirc;": "ê",
      ecirc: "ê",
      "ecolon;": "≕",
      "Ecy;": "Э",
      "ecy;": "э",
      "eDDot;": "⩷",
      "Edot;": "Ė",
      "eDot;": "≑",
      "edot;": "ė",
      "ee;": "ⅇ",
      "efDot;": "≒",
      "Efr;": "𝔈",
      "efr;": "𝔢",
      "eg;": "⪚",
      "Egrave;": "È",
      Egrave: "È",
      "egrave;": "è",
      egrave: "è",
      "egs;": "⪖",
      "egsdot;": "⪘",
      "el;": "⪙",
      "Element;": "∈",
      "elinters;": "⏧",
      "ell;": "ℓ",
      "els;": "⪕",
      "elsdot;": "⪗",
      "Emacr;": "Ē",
      "emacr;": "ē",
      "empty;": "∅",
      "emptyset;": "∅",
      "EmptySmallSquare;": "◻",
      "emptyv;": "∅",
      "EmptyVerySmallSquare;": "▫",
      "emsp;": " ",
      "emsp13;": " ",
      "emsp14;": " ",
      "ENG;": "Ŋ",
      "eng;": "ŋ",
      "ensp;": " ",
      "Eogon;": "Ę",
      "eogon;": "ę",
      "Eopf;": "𝔼",
      "eopf;": "𝕖",
      "epar;": "⋕",
      "eparsl;": "⧣",
      "eplus;": "⩱",
      "epsi;": "ε",
      "Epsilon;": "Ε",
      "epsilon;": "ε",
      "epsiv;": "ϵ",
      "eqcirc;": "≖",
      "eqcolon;": "≕",
      "eqsim;": "≂",
      "eqslantgtr;": "⪖",
      "eqslantless;": "⪕",
      "Equal;": "⩵",
      "equals;": "=",
      "EqualTilde;": "≂",
      "equest;": "≟",
      "Equilibrium;": "⇌",
      "equiv;": "≡",
      "equivDD;": "⩸",
      "eqvparsl;": "⧥",
      "erarr;": "⥱",
      "erDot;": "≓",
      "Escr;": "ℰ",
      "escr;": "ℯ",
      "esdot;": "≐",
      "Esim;": "⩳",
      "esim;": "≂",
      "Eta;": "Η",
      "eta;": "η",
      "ETH;": "Ð",
      ETH: "Ð",
      "eth;": "ð",
      eth: "ð",
      "Euml;": "Ë",
      Euml: "Ë",
      "euml;": "ë",
      euml: "ë",
      "euro;": "€",
      "excl;": "!",
      "exist;": "∃",
      "Exists;": "∃",
      "expectation;": "ℰ",
      "ExponentialE;": "ⅇ",
      "exponentiale;": "ⅇ",
      "fallingdotseq;": "≒",
      "Fcy;": "Ф",
      "fcy;": "ф",
      "female;": "♀",
      "ffilig;": "ﬃ",
      "fflig;": "ﬀ",
      "ffllig;": "ﬄ",
      "Ffr;": "𝔉",
      "ffr;": "𝔣",
      "filig;": "ﬁ",
      "FilledSmallSquare;": "◼",
      "FilledVerySmallSquare;": "▪",
      "fjlig;": "fj",
      "flat;": "♭",
      "fllig;": "ﬂ",
      "fltns;": "▱",
      "fnof;": "ƒ",
      "Fopf;": "𝔽",
      "fopf;": "𝕗",
      "ForAll;": "∀",
      "forall;": "∀",
      "fork;": "⋔",
      "forkv;": "⫙",
      "Fouriertrf;": "ℱ",
      "fpartint;": "⨍",
      "frac12;": "½",
      frac12: "½",
      "frac13;": "⅓",
      "frac14;": "¼",
      frac14: "¼",
      "frac15;": "⅕",
      "frac16;": "⅙",
      "frac18;": "⅛",
      "frac23;": "⅔",
      "frac25;": "⅖",
      "frac34;": "¾",
      frac34: "¾",
      "frac35;": "⅗",
      "frac38;": "⅜",
      "frac45;": "⅘",
      "frac56;": "⅚",
      "frac58;": "⅝",
      "frac78;": "⅞",
      "frasl;": "⁄",
      "frown;": "⌢",
      "Fscr;": "ℱ",
      "fscr;": "𝒻",
      "gacute;": "ǵ",
      "Gamma;": "Γ",
      "gamma;": "γ",
      "Gammad;": "Ϝ",
      "gammad;": "ϝ",
      "gap;": "⪆",
      "Gbreve;": "Ğ",
      "gbreve;": "ğ",
      "Gcedil;": "Ģ",
      "Gcirc;": "Ĝ",
      "gcirc;": "ĝ",
      "Gcy;": "Г",
      "gcy;": "г",
      "Gdot;": "Ġ",
      "gdot;": "ġ",
      "gE;": "≧",
      "ge;": "≥",
      "gEl;": "⪌",
      "gel;": "⋛",
      "geq;": "≥",
      "geqq;": "≧",
      "geqslant;": "⩾",
      "ges;": "⩾",
      "gescc;": "⪩",
      "gesdot;": "⪀",
      "gesdoto;": "⪂",
      "gesdotol;": "⪄",
      "gesl;": "⋛︀",
      "gesles;": "⪔",
      "Gfr;": "𝔊",
      "gfr;": "𝔤",
      "Gg;": "⋙",
      "gg;": "≫",
      "ggg;": "⋙",
      "gimel;": "ℷ",
      "GJcy;": "Ѓ",
      "gjcy;": "ѓ",
      "gl;": "≷",
      "gla;": "⪥",
      "glE;": "⪒",
      "glj;": "⪤",
      "gnap;": "⪊",
      "gnapprox;": "⪊",
      "gnE;": "≩",
      "gne;": "⪈",
      "gneq;": "⪈",
      "gneqq;": "≩",
      "gnsim;": "⋧",
      "Gopf;": "𝔾",
      "gopf;": "𝕘",
      "grave;": "`",
      "GreaterEqual;": "≥",
      "GreaterEqualLess;": "⋛",
      "GreaterFullEqual;": "≧",
      "GreaterGreater;": "⪢",
      "GreaterLess;": "≷",
      "GreaterSlantEqual;": "⩾",
      "GreaterTilde;": "≳",
      "Gscr;": "𝒢",
      "gscr;": "ℊ",
      "gsim;": "≳",
      "gsime;": "⪎",
      "gsiml;": "⪐",
      "GT;": ">",
      GT: ">",
      "Gt;": "≫",
      "gt;": ">",
      gt: ">",
      "gtcc;": "⪧",
      "gtcir;": "⩺",
      "gtdot;": "⋗",
      "gtlPar;": "⦕",
      "gtquest;": "⩼",
      "gtrapprox;": "⪆",
      "gtrarr;": "⥸",
      "gtrdot;": "⋗",
      "gtreqless;": "⋛",
      "gtreqqless;": "⪌",
      "gtrless;": "≷",
      "gtrsim;": "≳",
      "gvertneqq;": "≩︀",
      "gvnE;": "≩︀",
      "Hacek;": "ˇ",
      "hairsp;": " ",
      "half;": "½",
      "hamilt;": "ℋ",
      "HARDcy;": "Ъ",
      "hardcy;": "ъ",
      "hArr;": "⇔",
      "harr;": "↔",
      "harrcir;": "⥈",
      "harrw;": "↭",
      "Hat;": "^",
      "hbar;": "ℏ",
      "Hcirc;": "Ĥ",
      "hcirc;": "ĥ",
      "hearts;": "♥",
      "heartsuit;": "♥",
      "hellip;": "…",
      "hercon;": "⊹",
      "Hfr;": "ℌ",
      "hfr;": "𝔥",
      "HilbertSpace;": "ℋ",
      "hksearow;": "⤥",
      "hkswarow;": "⤦",
      "hoarr;": "⇿",
      "homtht;": "∻",
      "hookleftarrow;": "↩",
      "hookrightarrow;": "↪",
      "Hopf;": "ℍ",
      "hopf;": "𝕙",
      "horbar;": "―",
      "HorizontalLine;": "─",
      "Hscr;": "ℋ",
      "hscr;": "𝒽",
      "hslash;": "ℏ",
      "Hstrok;": "Ħ",
      "hstrok;": "ħ",
      "HumpDownHump;": "≎",
      "HumpEqual;": "≏",
      "hybull;": "⁃",
      "hyphen;": "‐",
      "Iacute;": "Í",
      Iacute: "Í",
      "iacute;": "í",
      iacute: "í",
      "ic;": "⁣",
      "Icirc;": "Î",
      Icirc: "Î",
      "icirc;": "î",
      icirc: "î",
      "Icy;": "И",
      "icy;": "и",
      "Idot;": "İ",
      "IEcy;": "Е",
      "iecy;": "е",
      "iexcl;": "¡",
      iexcl: "¡",
      "iff;": "⇔",
      "Ifr;": "ℑ",
      "ifr;": "𝔦",
      "Igrave;": "Ì",
      Igrave: "Ì",
      "igrave;": "ì",
      igrave: "ì",
      "ii;": "ⅈ",
      "iiiint;": "⨌",
      "iiint;": "∭",
      "iinfin;": "⧜",
      "iiota;": "℩",
      "IJlig;": "Ĳ",
      "ijlig;": "ĳ",
      "Im;": "ℑ",
      "Imacr;": "Ī",
      "imacr;": "ī",
      "image;": "ℑ",
      "ImaginaryI;": "ⅈ",
      "imagline;": "ℐ",
      "imagpart;": "ℑ",
      "imath;": "ı",
      "imof;": "⊷",
      "imped;": "Ƶ",
      "Implies;": "⇒",
      "in;": "∈",
      "incare;": "℅",
      "infin;": "∞",
      "infintie;": "⧝",
      "inodot;": "ı",
      "Int;": "∬",
      "int;": "∫",
      "intcal;": "⊺",
      "integers;": "ℤ",
      "Integral;": "∫",
      "intercal;": "⊺",
      "Intersection;": "⋂",
      "intlarhk;": "⨗",
      "intprod;": "⨼",
      "InvisibleComma;": "⁣",
      "InvisibleTimes;": "⁢",
      "IOcy;": "Ё",
      "iocy;": "ё",
      "Iogon;": "Į",
      "iogon;": "į",
      "Iopf;": "𝕀",
      "iopf;": "𝕚",
      "Iota;": "Ι",
      "iota;": "ι",
      "iprod;": "⨼",
      "iquest;": "¿",
      iquest: "¿",
      "Iscr;": "ℐ",
      "iscr;": "𝒾",
      "isin;": "∈",
      "isindot;": "⋵",
      "isinE;": "⋹",
      "isins;": "⋴",
      "isinsv;": "⋳",
      "isinv;": "∈",
      "it;": "⁢",
      "Itilde;": "Ĩ",
      "itilde;": "ĩ",
      "Iukcy;": "І",
      "iukcy;": "і",
      "Iuml;": "Ï",
      Iuml: "Ï",
      "iuml;": "ï",
      iuml: "ï",
      "Jcirc;": "Ĵ",
      "jcirc;": "ĵ",
      "Jcy;": "Й",
      "jcy;": "й",
      "Jfr;": "𝔍",
      "jfr;": "𝔧",
      "jmath;": "ȷ",
      "Jopf;": "𝕁",
      "jopf;": "𝕛",
      "Jscr;": "𝒥",
      "jscr;": "𝒿",
      "Jsercy;": "Ј",
      "jsercy;": "ј",
      "Jukcy;": "Є",
      "jukcy;": "є",
      "Kappa;": "Κ",
      "kappa;": "κ",
      "kappav;": "ϰ",
      "Kcedil;": "Ķ",
      "kcedil;": "ķ",
      "Kcy;": "К",
      "kcy;": "к",
      "Kfr;": "𝔎",
      "kfr;": "𝔨",
      "kgreen;": "ĸ",
      "KHcy;": "Х",
      "khcy;": "х",
      "KJcy;": "Ќ",
      "kjcy;": "ќ",
      "Kopf;": "𝕂",
      "kopf;": "𝕜",
      "Kscr;": "𝒦",
      "kscr;": "𝓀",
      "lAarr;": "⇚",
      "Lacute;": "Ĺ",
      "lacute;": "ĺ",
      "laemptyv;": "⦴",
      "lagran;": "ℒ",
      "Lambda;": "Λ",
      "lambda;": "λ",
      "Lang;": "⟪",
      "lang;": "⟨",
      "langd;": "⦑",
      "langle;": "⟨",
      "lap;": "⪅",
      "Laplacetrf;": "ℒ",
      "laquo;": "«",
      laquo: "«",
      "Larr;": "↞",
      "lArr;": "⇐",
      "larr;": "←",
      "larrb;": "⇤",
      "larrbfs;": "⤟",
      "larrfs;": "⤝",
      "larrhk;": "↩",
      "larrlp;": "↫",
      "larrpl;": "⤹",
      "larrsim;": "⥳",
      "larrtl;": "↢",
      "lat;": "⪫",
      "lAtail;": "⤛",
      "latail;": "⤙",
      "late;": "⪭",
      "lates;": "⪭︀",
      "lBarr;": "⤎",
      "lbarr;": "⤌",
      "lbbrk;": "❲",
      "lbrace;": "{",
      "lbrack;": "[",
      "lbrke;": "⦋",
      "lbrksld;": "⦏",
      "lbrkslu;": "⦍",
      "Lcaron;": "Ľ",
      "lcaron;": "ľ",
      "Lcedil;": "Ļ",
      "lcedil;": "ļ",
      "lceil;": "⌈",
      "lcub;": "{",
      "Lcy;": "Л",
      "lcy;": "л",
      "ldca;": "⤶",
      "ldquo;": "“",
      "ldquor;": "„",
      "ldrdhar;": "⥧",
      "ldrushar;": "⥋",
      "ldsh;": "↲",
      "lE;": "≦",
      "le;": "≤",
      "LeftAngleBracket;": "⟨",
      "LeftArrow;": "←",
      "Leftarrow;": "⇐",
      "leftarrow;": "←",
      "LeftArrowBar;": "⇤",
      "LeftArrowRightArrow;": "⇆",
      "leftarrowtail;": "↢",
      "LeftCeiling;": "⌈",
      "LeftDoubleBracket;": "⟦",
      "LeftDownTeeVector;": "⥡",
      "LeftDownVector;": "⇃",
      "LeftDownVectorBar;": "⥙",
      "LeftFloor;": "⌊",
      "leftharpoondown;": "↽",
      "leftharpoonup;": "↼",
      "leftleftarrows;": "⇇",
      "LeftRightArrow;": "↔",
      "Leftrightarrow;": "⇔",
      "leftrightarrow;": "↔",
      "leftrightarrows;": "⇆",
      "leftrightharpoons;": "⇋",
      "leftrightsquigarrow;": "↭",
      "LeftRightVector;": "⥎",
      "LeftTee;": "⊣",
      "LeftTeeArrow;": "↤",
      "LeftTeeVector;": "⥚",
      "leftthreetimes;": "⋋",
      "LeftTriangle;": "⊲",
      "LeftTriangleBar;": "⧏",
      "LeftTriangleEqual;": "⊴",
      "LeftUpDownVector;": "⥑",
      "LeftUpTeeVector;": "⥠",
      "LeftUpVector;": "↿",
      "LeftUpVectorBar;": "⥘",
      "LeftVector;": "↼",
      "LeftVectorBar;": "⥒",
      "lEg;": "⪋",
      "leg;": "⋚",
      "leq;": "≤",
      "leqq;": "≦",
      "leqslant;": "⩽",
      "les;": "⩽",
      "lescc;": "⪨",
      "lesdot;": "⩿",
      "lesdoto;": "⪁",
      "lesdotor;": "⪃",
      "lesg;": "⋚︀",
      "lesges;": "⪓",
      "lessapprox;": "⪅",
      "lessdot;": "⋖",
      "lesseqgtr;": "⋚",
      "lesseqqgtr;": "⪋",
      "LessEqualGreater;": "⋚",
      "LessFullEqual;": "≦",
      "LessGreater;": "≶",
      "lessgtr;": "≶",
      "LessLess;": "⪡",
      "lesssim;": "≲",
      "LessSlantEqual;": "⩽",
      "LessTilde;": "≲",
      "lfisht;": "⥼",
      "lfloor;": "⌊",
      "Lfr;": "𝔏",
      "lfr;": "𝔩",
      "lg;": "≶",
      "lgE;": "⪑",
      "lHar;": "⥢",
      "lhard;": "↽",
      "lharu;": "↼",
      "lharul;": "⥪",
      "lhblk;": "▄",
      "LJcy;": "Љ",
      "ljcy;": "љ",
      "Ll;": "⋘",
      "ll;": "≪",
      "llarr;": "⇇",
      "llcorner;": "⌞",
      "Lleftarrow;": "⇚",
      "llhard;": "⥫",
      "lltri;": "◺",
      "Lmidot;": "Ŀ",
      "lmidot;": "ŀ",
      "lmoust;": "⎰",
      "lmoustache;": "⎰",
      "lnap;": "⪉",
      "lnapprox;": "⪉",
      "lnE;": "≨",
      "lne;": "⪇",
      "lneq;": "⪇",
      "lneqq;": "≨",
      "lnsim;": "⋦",
      "loang;": "⟬",
      "loarr;": "⇽",
      "lobrk;": "⟦",
      "LongLeftArrow;": "⟵",
      "Longleftarrow;": "⟸",
      "longleftarrow;": "⟵",
      "LongLeftRightArrow;": "⟷",
      "Longleftrightarrow;": "⟺",
      "longleftrightarrow;": "⟷",
      "longmapsto;": "⟼",
      "LongRightArrow;": "⟶",
      "Longrightarrow;": "⟹",
      "longrightarrow;": "⟶",
      "looparrowleft;": "↫",
      "looparrowright;": "↬",
      "lopar;": "⦅",
      "Lopf;": "𝕃",
      "lopf;": "𝕝",
      "loplus;": "⨭",
      "lotimes;": "⨴",
      "lowast;": "∗",
      "lowbar;": "_",
      "LowerLeftArrow;": "↙",
      "LowerRightArrow;": "↘",
      "loz;": "◊",
      "lozenge;": "◊",
      "lozf;": "⧫",
      "lpar;": "(",
      "lparlt;": "⦓",
      "lrarr;": "⇆",
      "lrcorner;": "⌟",
      "lrhar;": "⇋",
      "lrhard;": "⥭",
      "lrm;": "‎",
      "lrtri;": "⊿",
      "lsaquo;": "‹",
      "Lscr;": "ℒ",
      "lscr;": "𝓁",
      "Lsh;": "↰",
      "lsh;": "↰",
      "lsim;": "≲",
      "lsime;": "⪍",
      "lsimg;": "⪏",
      "lsqb;": "[",
      "lsquo;": "‘",
      "lsquor;": "‚",
      "Lstrok;": "Ł",
      "lstrok;": "ł",
      "LT;": "<",
      LT: "<",
      "Lt;": "≪",
      "lt;": "<",
      lt: "<",
      "ltcc;": "⪦",
      "ltcir;": "⩹",
      "ltdot;": "⋖",
      "lthree;": "⋋",
      "ltimes;": "⋉",
      "ltlarr;": "⥶",
      "ltquest;": "⩻",
      "ltri;": "◃",
      "ltrie;": "⊴",
      "ltrif;": "◂",
      "ltrPar;": "⦖",
      "lurdshar;": "⥊",
      "luruhar;": "⥦",
      "lvertneqq;": "≨︀",
      "lvnE;": "≨︀",
      "macr;": "¯",
      macr: "¯",
      "male;": "♂",
      "malt;": "✠",
      "maltese;": "✠",
      "Map;": "⤅",
      "map;": "↦",
      "mapsto;": "↦",
      "mapstodown;": "↧",
      "mapstoleft;": "↤",
      "mapstoup;": "↥",
      "marker;": "▮",
      "mcomma;": "⨩",
      "Mcy;": "М",
      "mcy;": "м",
      "mdash;": "—",
      "mDDot;": "∺",
      "measuredangle;": "∡",
      "MediumSpace;": " ",
      "Mellintrf;": "ℳ",
      "Mfr;": "𝔐",
      "mfr;": "𝔪",
      "mho;": "℧",
      "micro;": "µ",
      micro: "µ",
      "mid;": "∣",
      "midast;": "*",
      "midcir;": "⫰",
      "middot;": "·",
      middot: "·",
      "minus;": "−",
      "minusb;": "⊟",
      "minusd;": "∸",
      "minusdu;": "⨪",
      "MinusPlus;": "∓",
      "mlcp;": "⫛",
      "mldr;": "…",
      "mnplus;": "∓",
      "models;": "⊧",
      "Mopf;": "𝕄",
      "mopf;": "𝕞",
      "mp;": "∓",
      "Mscr;": "ℳ",
      "mscr;": "𝓂",
      "mstpos;": "∾",
      "Mu;": "Μ",
      "mu;": "μ",
      "multimap;": "⊸",
      "mumap;": "⊸",
      "nabla;": "∇",
      "Nacute;": "Ń",
      "nacute;": "ń",
      "nang;": "∠⃒",
      "nap;": "≉",
      "napE;": "⩰̸",
      "napid;": "≋̸",
      "napos;": "ŉ",
      "napprox;": "≉",
      "natur;": "♮",
      "natural;": "♮",
      "naturals;": "ℕ",
      "nbsp;": " ",
      nbsp: " ",
      "nbump;": "≎̸",
      "nbumpe;": "≏̸",
      "ncap;": "⩃",
      "Ncaron;": "Ň",
      "ncaron;": "ň",
      "Ncedil;": "Ņ",
      "ncedil;": "ņ",
      "ncong;": "≇",
      "ncongdot;": "⩭̸",
      "ncup;": "⩂",
      "Ncy;": "Н",
      "ncy;": "н",
      "ndash;": "–",
      "ne;": "≠",
      "nearhk;": "⤤",
      "neArr;": "⇗",
      "nearr;": "↗",
      "nearrow;": "↗",
      "nedot;": "≐̸",
      "NegativeMediumSpace;": "​",
      "NegativeThickSpace;": "​",
      "NegativeThinSpace;": "​",
      "NegativeVeryThinSpace;": "​",
      "nequiv;": "≢",
      "nesear;": "⤨",
      "nesim;": "≂̸",
      "NestedGreaterGreater;": "≫",
      "NestedLessLess;": "≪",
      "NewLine;": "\n",
      "nexist;": "∄",
      "nexists;": "∄",
      "Nfr;": "𝔑",
      "nfr;": "𝔫",
      "ngE;": "≧̸",
      "nge;": "≱",
      "ngeq;": "≱",
      "ngeqq;": "≧̸",
      "ngeqslant;": "⩾̸",
      "nges;": "⩾̸",
      "nGg;": "⋙̸",
      "ngsim;": "≵",
      "nGt;": "≫⃒",
      "ngt;": "≯",
      "ngtr;": "≯",
      "nGtv;": "≫̸",
      "nhArr;": "⇎",
      "nharr;": "↮",
      "nhpar;": "⫲",
      "ni;": "∋",
      "nis;": "⋼",
      "nisd;": "⋺",
      "niv;": "∋",
      "NJcy;": "Њ",
      "njcy;": "њ",
      "nlArr;": "⇍",
      "nlarr;": "↚",
      "nldr;": "‥",
      "nlE;": "≦̸",
      "nle;": "≰",
      "nLeftarrow;": "⇍",
      "nleftarrow;": "↚",
      "nLeftrightarrow;": "⇎",
      "nleftrightarrow;": "↮",
      "nleq;": "≰",
      "nleqq;": "≦̸",
      "nleqslant;": "⩽̸",
      "nles;": "⩽̸",
      "nless;": "≮",
      "nLl;": "⋘̸",
      "nlsim;": "≴",
      "nLt;": "≪⃒",
      "nlt;": "≮",
      "nltri;": "⋪",
      "nltrie;": "⋬",
      "nLtv;": "≪̸",
      "nmid;": "∤",
      "NoBreak;": "⁠",
      "NonBreakingSpace;": " ",
      "Nopf;": "ℕ",
      "nopf;": "𝕟",
      "Not;": "⫬",
      "not;": "¬",
      not: "¬",
      "NotCongruent;": "≢",
      "NotCupCap;": "≭",
      "NotDoubleVerticalBar;": "∦",
      "NotElement;": "∉",
      "NotEqual;": "≠",
      "NotEqualTilde;": "≂̸",
      "NotExists;": "∄",
      "NotGreater;": "≯",
      "NotGreaterEqual;": "≱",
      "NotGreaterFullEqual;": "≧̸",
      "NotGreaterGreater;": "≫̸",
      "NotGreaterLess;": "≹",
      "NotGreaterSlantEqual;": "⩾̸",
      "NotGreaterTilde;": "≵",
      "NotHumpDownHump;": "≎̸",
      "NotHumpEqual;": "≏̸",
      "notin;": "∉",
      "notindot;": "⋵̸",
      "notinE;": "⋹̸",
      "notinva;": "∉",
      "notinvb;": "⋷",
      "notinvc;": "⋶",
      "NotLeftTriangle;": "⋪",
      "NotLeftTriangleBar;": "⧏̸",
      "NotLeftTriangleEqual;": "⋬",
      "NotLess;": "≮",
      "NotLessEqual;": "≰",
      "NotLessGreater;": "≸",
      "NotLessLess;": "≪̸",
      "NotLessSlantEqual;": "⩽̸",
      "NotLessTilde;": "≴",
      "NotNestedGreaterGreater;": "⪢̸",
      "NotNestedLessLess;": "⪡̸",
      "notni;": "∌",
      "notniva;": "∌",
      "notnivb;": "⋾",
      "notnivc;": "⋽",
      "NotPrecedes;": "⊀",
      "NotPrecedesEqual;": "⪯̸",
      "NotPrecedesSlantEqual;": "⋠",
      "NotReverseElement;": "∌",
      "NotRightTriangle;": "⋫",
      "NotRightTriangleBar;": "⧐̸",
      "NotRightTriangleEqual;": "⋭",
      "NotSquareSubset;": "⊏̸",
      "NotSquareSubsetEqual;": "⋢",
      "NotSquareSuperset;": "⊐̸",
      "NotSquareSupersetEqual;": "⋣",
      "NotSubset;": "⊂⃒",
      "NotSubsetEqual;": "⊈",
      "NotSucceeds;": "⊁",
      "NotSucceedsEqual;": "⪰̸",
      "NotSucceedsSlantEqual;": "⋡",
      "NotSucceedsTilde;": "≿̸",
      "NotSuperset;": "⊃⃒",
      "NotSupersetEqual;": "⊉",
      "NotTilde;": "≁",
      "NotTildeEqual;": "≄",
      "NotTildeFullEqual;": "≇",
      "NotTildeTilde;": "≉",
      "NotVerticalBar;": "∤",
      "npar;": "∦",
      "nparallel;": "∦",
      "nparsl;": "⫽⃥",
      "npart;": "∂̸",
      "npolint;": "⨔",
      "npr;": "⊀",
      "nprcue;": "⋠",
      "npre;": "⪯̸",
      "nprec;": "⊀",
      "npreceq;": "⪯̸",
      "nrArr;": "⇏",
      "nrarr;": "↛",
      "nrarrc;": "⤳̸",
      "nrarrw;": "↝̸",
      "nRightarrow;": "⇏",
      "nrightarrow;": "↛",
      "nrtri;": "⋫",
      "nrtrie;": "⋭",
      "nsc;": "⊁",
      "nsccue;": "⋡",
      "nsce;": "⪰̸",
      "Nscr;": "𝒩",
      "nscr;": "𝓃",
      "nshortmid;": "∤",
      "nshortparallel;": "∦",
      "nsim;": "≁",
      "nsime;": "≄",
      "nsimeq;": "≄",
      "nsmid;": "∤",
      "nspar;": "∦",
      "nsqsube;": "⋢",
      "nsqsupe;": "⋣",
      "nsub;": "⊄",
      "nsubE;": "⫅̸",
      "nsube;": "⊈",
      "nsubset;": "⊂⃒",
      "nsubseteq;": "⊈",
      "nsubseteqq;": "⫅̸",
      "nsucc;": "⊁",
      "nsucceq;": "⪰̸",
      "nsup;": "⊅",
      "nsupE;": "⫆̸",
      "nsupe;": "⊉",
      "nsupset;": "⊃⃒",
      "nsupseteq;": "⊉",
      "nsupseteqq;": "⫆̸",
      "ntgl;": "≹",
      "Ntilde;": "Ñ",
      Ntilde: "Ñ",
      "ntilde;": "ñ",
      ntilde: "ñ",
      "ntlg;": "≸",
      "ntriangleleft;": "⋪",
      "ntrianglelefteq;": "⋬",
      "ntriangleright;": "⋫",
      "ntrianglerighteq;": "⋭",
      "Nu;": "Ν",
      "nu;": "ν",
      "num;": "#",
      "numero;": "№",
      "numsp;": " ",
      "nvap;": "≍⃒",
      "nVDash;": "⊯",
      "nVdash;": "⊮",
      "nvDash;": "⊭",
      "nvdash;": "⊬",
      "nvge;": "≥⃒",
      "nvgt;": ">⃒",
      "nvHarr;": "⤄",
      "nvinfin;": "⧞",
      "nvlArr;": "⤂",
      "nvle;": "≤⃒",
      "nvlt;": "<⃒",
      "nvltrie;": "⊴⃒",
      "nvrArr;": "⤃",
      "nvrtrie;": "⊵⃒",
      "nvsim;": "∼⃒",
      "nwarhk;": "⤣",
      "nwArr;": "⇖",
      "nwarr;": "↖",
      "nwarrow;": "↖",
      "nwnear;": "⤧",
      "Oacute;": "Ó",
      Oacute: "Ó",
      "oacute;": "ó",
      oacute: "ó",
      "oast;": "⊛",
      "ocir;": "⊚",
      "Ocirc;": "Ô",
      Ocirc: "Ô",
      "ocirc;": "ô",
      ocirc: "ô",
      "Ocy;": "О",
      "ocy;": "о",
      "odash;": "⊝",
      "Odblac;": "Ő",
      "odblac;": "ő",
      "odiv;": "⨸",
      "odot;": "⊙",
      "odsold;": "⦼",
      "OElig;": "Œ",
      "oelig;": "œ",
      "ofcir;": "⦿",
      "Ofr;": "𝔒",
      "ofr;": "𝔬",
      "ogon;": "˛",
      "Ograve;": "Ò",
      Ograve: "Ò",
      "ograve;": "ò",
      ograve: "ò",
      "ogt;": "⧁",
      "ohbar;": "⦵",
      "ohm;": "Ω",
      "oint;": "∮",
      "olarr;": "↺",
      "olcir;": "⦾",
      "olcross;": "⦻",
      "oline;": "‾",
      "olt;": "⧀",
      "Omacr;": "Ō",
      "omacr;": "ō",
      "Omega;": "Ω",
      "omega;": "ω",
      "Omicron;": "Ο",
      "omicron;": "ο",
      "omid;": "⦶",
      "ominus;": "⊖",
      "Oopf;": "𝕆",
      "oopf;": "𝕠",
      "opar;": "⦷",
      "OpenCurlyDoubleQuote;": "“",
      "OpenCurlyQuote;": "‘",
      "operp;": "⦹",
      "oplus;": "⊕",
      "Or;": "⩔",
      "or;": "∨",
      "orarr;": "↻",
      "ord;": "⩝",
      "order;": "ℴ",
      "orderof;": "ℴ",
      "ordf;": "ª",
      ordf: "ª",
      "ordm;": "º",
      ordm: "º",
      "origof;": "⊶",
      "oror;": "⩖",
      "orslope;": "⩗",
      "orv;": "⩛",
      "oS;": "Ⓢ",
      "Oscr;": "𝒪",
      "oscr;": "ℴ",
      "Oslash;": "Ø",
      Oslash: "Ø",
      "oslash;": "ø",
      oslash: "ø",
      "osol;": "⊘",
      "Otilde;": "Õ",
      Otilde: "Õ",
      "otilde;": "õ",
      otilde: "õ",
      "Otimes;": "⨷",
      "otimes;": "⊗",
      "otimesas;": "⨶",
      "Ouml;": "Ö",
      Ouml: "Ö",
      "ouml;": "ö",
      ouml: "ö",
      "ovbar;": "⌽",
      "OverBar;": "‾",
      "OverBrace;": "⏞",
      "OverBracket;": "⎴",
      "OverParenthesis;": "⏜",
      "par;": "∥",
      "para;": "¶",
      para: "¶",
      "parallel;": "∥",
      "parsim;": "⫳",
      "parsl;": "⫽",
      "part;": "∂",
      "PartialD;": "∂",
      "Pcy;": "П",
      "pcy;": "п",
      "percnt;": "%",
      "period;": ".",
      "permil;": "‰",
      "perp;": "⊥",
      "pertenk;": "‱",
      "Pfr;": "𝔓",
      "pfr;": "𝔭",
      "Phi;": "Φ",
      "phi;": "φ",
      "phiv;": "ϕ",
      "phmmat;": "ℳ",
      "phone;": "☎",
      "Pi;": "Π",
      "pi;": "π",
      "pitchfork;": "⋔",
      "piv;": "ϖ",
      "planck;": "ℏ",
      "planckh;": "ℎ",
      "plankv;": "ℏ",
      "plus;": "+",
      "plusacir;": "⨣",
      "plusb;": "⊞",
      "pluscir;": "⨢",
      "plusdo;": "∔",
      "plusdu;": "⨥",
      "pluse;": "⩲",
      "PlusMinus;": "±",
      "plusmn;": "±",
      plusmn: "±",
      "plussim;": "⨦",
      "plustwo;": "⨧",
      "pm;": "±",
      "Poincareplane;": "ℌ",
      "pointint;": "⨕",
      "Popf;": "ℙ",
      "popf;": "𝕡",
      "pound;": "£",
      pound: "£",
      "Pr;": "⪻",
      "pr;": "≺",
      "prap;": "⪷",
      "prcue;": "≼",
      "prE;": "⪳",
      "pre;": "⪯",
      "prec;": "≺",
      "precapprox;": "⪷",
      "preccurlyeq;": "≼",
      "Precedes;": "≺",
      "PrecedesEqual;": "⪯",
      "PrecedesSlantEqual;": "≼",
      "PrecedesTilde;": "≾",
      "preceq;": "⪯",
      "precnapprox;": "⪹",
      "precneqq;": "⪵",
      "precnsim;": "⋨",
      "precsim;": "≾",
      "Prime;": "″",
      "prime;": "′",
      "primes;": "ℙ",
      "prnap;": "⪹",
      "prnE;": "⪵",
      "prnsim;": "⋨",
      "prod;": "∏",
      "Product;": "∏",
      "profalar;": "⌮",
      "profline;": "⌒",
      "profsurf;": "⌓",
      "prop;": "∝",
      "Proportion;": "∷",
      "Proportional;": "∝",
      "propto;": "∝",
      "prsim;": "≾",
      "prurel;": "⊰",
      "Pscr;": "𝒫",
      "pscr;": "𝓅",
      "Psi;": "Ψ",
      "psi;": "ψ",
      "puncsp;": " ",
      "Qfr;": "𝔔",
      "qfr;": "𝔮",
      "qint;": "⨌",
      "Qopf;": "ℚ",
      "qopf;": "𝕢",
      "qprime;": "⁗",
      "Qscr;": "𝒬",
      "qscr;": "𝓆",
      "quaternions;": "ℍ",
      "quatint;": "⨖",
      "quest;": "?",
      "questeq;": "≟",
      "QUOT;": '"',
      QUOT: '"',
      "quot;": '"',
      quot: '"',
      "rAarr;": "⇛",
      "race;": "∽̱",
      "Racute;": "Ŕ",
      "racute;": "ŕ",
      "radic;": "√",
      "raemptyv;": "⦳",
      "Rang;": "⟫",
      "rang;": "⟩",
      "rangd;": "⦒",
      "range;": "⦥",
      "rangle;": "⟩",
      "raquo;": "»",
      raquo: "»",
      "Rarr;": "↠",
      "rArr;": "⇒",
      "rarr;": "→",
      "rarrap;": "⥵",
      "rarrb;": "⇥",
      "rarrbfs;": "⤠",
      "rarrc;": "⤳",
      "rarrfs;": "⤞",
      "rarrhk;": "↪",
      "rarrlp;": "↬",
      "rarrpl;": "⥅",
      "rarrsim;": "⥴",
      "Rarrtl;": "⤖",
      "rarrtl;": "↣",
      "rarrw;": "↝",
      "rAtail;": "⤜",
      "ratail;": "⤚",
      "ratio;": "∶",
      "rationals;": "ℚ",
      "RBarr;": "⤐",
      "rBarr;": "⤏",
      "rbarr;": "⤍",
      "rbbrk;": "❳",
      "rbrace;": "}",
      "rbrack;": "]",
      "rbrke;": "⦌",
      "rbrksld;": "⦎",
      "rbrkslu;": "⦐",
      "Rcaron;": "Ř",
      "rcaron;": "ř",
      "Rcedil;": "Ŗ",
      "rcedil;": "ŗ",
      "rceil;": "⌉",
      "rcub;": "}",
      "Rcy;": "Р",
      "rcy;": "р",
      "rdca;": "⤷",
      "rdldhar;": "⥩",
      "rdquo;": "”",
      "rdquor;": "”",
      "rdsh;": "↳",
      "Re;": "ℜ",
      "real;": "ℜ",
      "realine;": "ℛ",
      "realpart;": "ℜ",
      "reals;": "ℝ",
      "rect;": "▭",
      "REG;": "®",
      REG: "®",
      "reg;": "®",
      reg: "®",
      "ReverseElement;": "∋",
      "ReverseEquilibrium;": "⇋",
      "ReverseUpEquilibrium;": "⥯",
      "rfisht;": "⥽",
      "rfloor;": "⌋",
      "Rfr;": "ℜ",
      "rfr;": "𝔯",
      "rHar;": "⥤",
      "rhard;": "⇁",
      "rharu;": "⇀",
      "rharul;": "⥬",
      "Rho;": "Ρ",
      "rho;": "ρ",
      "rhov;": "ϱ",
      "RightAngleBracket;": "⟩",
      "RightArrow;": "→",
      "Rightarrow;": "⇒",
      "rightarrow;": "→",
      "RightArrowBar;": "⇥",
      "RightArrowLeftArrow;": "⇄",
      "rightarrowtail;": "↣",
      "RightCeiling;": "⌉",
      "RightDoubleBracket;": "⟧",
      "RightDownTeeVector;": "⥝",
      "RightDownVector;": "⇂",
      "RightDownVectorBar;": "⥕",
      "RightFloor;": "⌋",
      "rightharpoondown;": "⇁",
      "rightharpoonup;": "⇀",
      "rightleftarrows;": "⇄",
      "rightleftharpoons;": "⇌",
      "rightrightarrows;": "⇉",
      "rightsquigarrow;": "↝",
      "RightTee;": "⊢",
      "RightTeeArrow;": "↦",
      "RightTeeVector;": "⥛",
      "rightthreetimes;": "⋌",
      "RightTriangle;": "⊳",
      "RightTriangleBar;": "⧐",
      "RightTriangleEqual;": "⊵",
      "RightUpDownVector;": "⥏",
      "RightUpTeeVector;": "⥜",
      "RightUpVector;": "↾",
      "RightUpVectorBar;": "⥔",
      "RightVector;": "⇀",
      "RightVectorBar;": "⥓",
      "ring;": "˚",
      "risingdotseq;": "≓",
      "rlarr;": "⇄",
      "rlhar;": "⇌",
      "rlm;": "‏",
      "rmoust;": "⎱",
      "rmoustache;": "⎱",
      "rnmid;": "⫮",
      "roang;": "⟭",
      "roarr;": "⇾",
      "robrk;": "⟧",
      "ropar;": "⦆",
      "Ropf;": "ℝ",
      "ropf;": "𝕣",
      "roplus;": "⨮",
      "rotimes;": "⨵",
      "RoundImplies;": "⥰",
      "rpar;": ")",
      "rpargt;": "⦔",
      "rppolint;": "⨒",
      "rrarr;": "⇉",
      "Rrightarrow;": "⇛",
      "rsaquo;": "›",
      "Rscr;": "ℛ",
      "rscr;": "𝓇",
      "Rsh;": "↱",
      "rsh;": "↱",
      "rsqb;": "]",
      "rsquo;": "’",
      "rsquor;": "’",
      "rthree;": "⋌",
      "rtimes;": "⋊",
      "rtri;": "▹",
      "rtrie;": "⊵",
      "rtrif;": "▸",
      "rtriltri;": "⧎",
      "RuleDelayed;": "⧴",
      "ruluhar;": "⥨",
      "rx;": "℞",
      "Sacute;": "Ś",
      "sacute;": "ś",
      "sbquo;": "‚",
      "Sc;": "⪼",
      "sc;": "≻",
      "scap;": "⪸",
      "Scaron;": "Š",
      "scaron;": "š",
      "sccue;": "≽",
      "scE;": "⪴",
      "sce;": "⪰",
      "Scedil;": "Ş",
      "scedil;": "ş",
      "Scirc;": "Ŝ",
      "scirc;": "ŝ",
      "scnap;": "⪺",
      "scnE;": "⪶",
      "scnsim;": "⋩",
      "scpolint;": "⨓",
      "scsim;": "≿",
      "Scy;": "С",
      "scy;": "с",
      "sdot;": "⋅",
      "sdotb;": "⊡",
      "sdote;": "⩦",
      "searhk;": "⤥",
      "seArr;": "⇘",
      "searr;": "↘",
      "searrow;": "↘",
      "sect;": "§",
      sect: "§",
      "semi;": ";",
      "seswar;": "⤩",
      "setminus;": "∖",
      "setmn;": "∖",
      "sext;": "✶",
      "Sfr;": "𝔖",
      "sfr;": "𝔰",
      "sfrown;": "⌢",
      "sharp;": "♯",
      "SHCHcy;": "Щ",
      "shchcy;": "щ",
      "SHcy;": "Ш",
      "shcy;": "ш",
      "ShortDownArrow;": "↓",
      "ShortLeftArrow;": "←",
      "shortmid;": "∣",
      "shortparallel;": "∥",
      "ShortRightArrow;": "→",
      "ShortUpArrow;": "↑",
      "shy;": "­",
      shy: "­",
      "Sigma;": "Σ",
      "sigma;": "σ",
      "sigmaf;": "ς",
      "sigmav;": "ς",
      "sim;": "∼",
      "simdot;": "⩪",
      "sime;": "≃",
      "simeq;": "≃",
      "simg;": "⪞",
      "simgE;": "⪠",
      "siml;": "⪝",
      "simlE;": "⪟",
      "simne;": "≆",
      "simplus;": "⨤",
      "simrarr;": "⥲",
      "slarr;": "←",
      "SmallCircle;": "∘",
      "smallsetminus;": "∖",
      "smashp;": "⨳",
      "smeparsl;": "⧤",
      "smid;": "∣",
      "smile;": "⌣",
      "smt;": "⪪",
      "smte;": "⪬",
      "smtes;": "⪬︀",
      "SOFTcy;": "Ь",
      "softcy;": "ь",
      "sol;": "/",
      "solb;": "⧄",
      "solbar;": "⌿",
      "Sopf;": "𝕊",
      "sopf;": "𝕤",
      "spades;": "♠",
      "spadesuit;": "♠",
      "spar;": "∥",
      "sqcap;": "⊓",
      "sqcaps;": "⊓︀",
      "sqcup;": "⊔",
      "sqcups;": "⊔︀",
      "Sqrt;": "√",
      "sqsub;": "⊏",
      "sqsube;": "⊑",
      "sqsubset;": "⊏",
      "sqsubseteq;": "⊑",
      "sqsup;": "⊐",
      "sqsupe;": "⊒",
      "sqsupset;": "⊐",
      "sqsupseteq;": "⊒",
      "squ;": "□",
      "Square;": "□",
      "square;": "□",
      "SquareIntersection;": "⊓",
      "SquareSubset;": "⊏",
      "SquareSubsetEqual;": "⊑",
      "SquareSuperset;": "⊐",
      "SquareSupersetEqual;": "⊒",
      "SquareUnion;": "⊔",
      "squarf;": "▪",
      "squf;": "▪",
      "srarr;": "→",
      "Sscr;": "𝒮",
      "sscr;": "𝓈",
      "ssetmn;": "∖",
      "ssmile;": "⌣",
      "sstarf;": "⋆",
      "Star;": "⋆",
      "star;": "☆",
      "starf;": "★",
      "straightepsilon;": "ϵ",
      "straightphi;": "ϕ",
      "strns;": "¯",
      "Sub;": "⋐",
      "sub;": "⊂",
      "subdot;": "⪽",
      "subE;": "⫅",
      "sube;": "⊆",
      "subedot;": "⫃",
      "submult;": "⫁",
      "subnE;": "⫋",
      "subne;": "⊊",
      "subplus;": "⪿",
      "subrarr;": "⥹",
      "Subset;": "⋐",
      "subset;": "⊂",
      "subseteq;": "⊆",
      "subseteqq;": "⫅",
      "SubsetEqual;": "⊆",
      "subsetneq;": "⊊",
      "subsetneqq;": "⫋",
      "subsim;": "⫇",
      "subsub;": "⫕",
      "subsup;": "⫓",
      "succ;": "≻",
      "succapprox;": "⪸",
      "succcurlyeq;": "≽",
      "Succeeds;": "≻",
      "SucceedsEqual;": "⪰",
      "SucceedsSlantEqual;": "≽",
      "SucceedsTilde;": "≿",
      "succeq;": "⪰",
      "succnapprox;": "⪺",
      "succneqq;": "⪶",
      "succnsim;": "⋩",
      "succsim;": "≿",
      "SuchThat;": "∋",
      "Sum;": "∑",
      "sum;": "∑",
      "sung;": "♪",
      "Sup;": "⋑",
      "sup;": "⊃",
      "sup1;": "¹",
      sup1: "¹",
      "sup2;": "²",
      sup2: "²",
      "sup3;": "³",
      sup3: "³",
      "supdot;": "⪾",
      "supdsub;": "⫘",
      "supE;": "⫆",
      "supe;": "⊇",
      "supedot;": "⫄",
      "Superset;": "⊃",
      "SupersetEqual;": "⊇",
      "suphsol;": "⟉",
      "suphsub;": "⫗",
      "suplarr;": "⥻",
      "supmult;": "⫂",
      "supnE;": "⫌",
      "supne;": "⊋",
      "supplus;": "⫀",
      "Supset;": "⋑",
      "supset;": "⊃",
      "supseteq;": "⊇",
      "supseteqq;": "⫆",
      "supsetneq;": "⊋",
      "supsetneqq;": "⫌",
      "supsim;": "⫈",
      "supsub;": "⫔",
      "supsup;": "⫖",
      "swarhk;": "⤦",
      "swArr;": "⇙",
      "swarr;": "↙",
      "swarrow;": "↙",
      "swnwar;": "⤪",
      "szlig;": "ß",
      szlig: "ß",
      "Tab;": "	",
      "target;": "⌖",
      "Tau;": "Τ",
      "tau;": "τ",
      "tbrk;": "⎴",
      "Tcaron;": "Ť",
      "tcaron;": "ť",
      "Tcedil;": "Ţ",
      "tcedil;": "ţ",
      "Tcy;": "Т",
      "tcy;": "т",
      "tdot;": "⃛",
      "telrec;": "⌕",
      "Tfr;": "𝔗",
      "tfr;": "𝔱",
      "there4;": "∴",
      "Therefore;": "∴",
      "therefore;": "∴",
      "Theta;": "Θ",
      "theta;": "θ",
      "thetasym;": "ϑ",
      "thetav;": "ϑ",
      "thickapprox;": "≈",
      "thicksim;": "∼",
      "ThickSpace;": "  ",
      "thinsp;": " ",
      "ThinSpace;": " ",
      "thkap;": "≈",
      "thksim;": "∼",
      "THORN;": "Þ",
      THORN: "Þ",
      "thorn;": "þ",
      thorn: "þ",
      "Tilde;": "∼",
      "tilde;": "˜",
      "TildeEqual;": "≃",
      "TildeFullEqual;": "≅",
      "TildeTilde;": "≈",
      "times;": "×",
      times: "×",
      "timesb;": "⊠",
      "timesbar;": "⨱",
      "timesd;": "⨰",
      "tint;": "∭",
      "toea;": "⤨",
      "top;": "⊤",
      "topbot;": "⌶",
      "topcir;": "⫱",
      "Topf;": "𝕋",
      "topf;": "𝕥",
      "topfork;": "⫚",
      "tosa;": "⤩",
      "tprime;": "‴",
      "TRADE;": "™",
      "trade;": "™",
      "triangle;": "▵",
      "triangledown;": "▿",
      "triangleleft;": "◃",
      "trianglelefteq;": "⊴",
      "triangleq;": "≜",
      "triangleright;": "▹",
      "trianglerighteq;": "⊵",
      "tridot;": "◬",
      "trie;": "≜",
      "triminus;": "⨺",
      "TripleDot;": "⃛",
      "triplus;": "⨹",
      "trisb;": "⧍",
      "tritime;": "⨻",
      "trpezium;": "⏢",
      "Tscr;": "𝒯",
      "tscr;": "𝓉",
      "TScy;": "Ц",
      "tscy;": "ц",
      "TSHcy;": "Ћ",
      "tshcy;": "ћ",
      "Tstrok;": "Ŧ",
      "tstrok;": "ŧ",
      "twixt;": "≬",
      "twoheadleftarrow;": "↞",
      "twoheadrightarrow;": "↠",
      "Uacute;": "Ú",
      Uacute: "Ú",
      "uacute;": "ú",
      uacute: "ú",
      "Uarr;": "↟",
      "uArr;": "⇑",
      "uarr;": "↑",
      "Uarrocir;": "⥉",
      "Ubrcy;": "Ў",
      "ubrcy;": "ў",
      "Ubreve;": "Ŭ",
      "ubreve;": "ŭ",
      "Ucirc;": "Û",
      Ucirc: "Û",
      "ucirc;": "û",
      ucirc: "û",
      "Ucy;": "У",
      "ucy;": "у",
      "udarr;": "⇅",
      "Udblac;": "Ű",
      "udblac;": "ű",
      "udhar;": "⥮",
      "ufisht;": "⥾",
      "Ufr;": "𝔘",
      "ufr;": "𝔲",
      "Ugrave;": "Ù",
      Ugrave: "Ù",
      "ugrave;": "ù",
      ugrave: "ù",
      "uHar;": "⥣",
      "uharl;": "↿",
      "uharr;": "↾",
      "uhblk;": "▀",
      "ulcorn;": "⌜",
      "ulcorner;": "⌜",
      "ulcrop;": "⌏",
      "ultri;": "◸",
      "Umacr;": "Ū",
      "umacr;": "ū",
      "uml;": "¨",
      uml: "¨",
      "UnderBar;": "_",
      "UnderBrace;": "⏟",
      "UnderBracket;": "⎵",
      "UnderParenthesis;": "⏝",
      "Union;": "⋃",
      "UnionPlus;": "⊎",
      "Uogon;": "Ų",
      "uogon;": "ų",
      "Uopf;": "𝕌",
      "uopf;": "𝕦",
      "UpArrow;": "↑",
      "Uparrow;": "⇑",
      "uparrow;": "↑",
      "UpArrowBar;": "⤒",
      "UpArrowDownArrow;": "⇅",
      "UpDownArrow;": "↕",
      "Updownarrow;": "⇕",
      "updownarrow;": "↕",
      "UpEquilibrium;": "⥮",
      "upharpoonleft;": "↿",
      "upharpoonright;": "↾",
      "uplus;": "⊎",
      "UpperLeftArrow;": "↖",
      "UpperRightArrow;": "↗",
      "Upsi;": "ϒ",
      "upsi;": "υ",
      "upsih;": "ϒ",
      "Upsilon;": "Υ",
      "upsilon;": "υ",
      "UpTee;": "⊥",
      "UpTeeArrow;": "↥",
      "upuparrows;": "⇈",
      "urcorn;": "⌝",
      "urcorner;": "⌝",
      "urcrop;": "⌎",
      "Uring;": "Ů",
      "uring;": "ů",
      "urtri;": "◹",
      "Uscr;": "𝒰",
      "uscr;": "𝓊",
      "utdot;": "⋰",
      "Utilde;": "Ũ",
      "utilde;": "ũ",
      "utri;": "▵",
      "utrif;": "▴",
      "uuarr;": "⇈",
      "Uuml;": "Ü",
      Uuml: "Ü",
      "uuml;": "ü",
      uuml: "ü",
      "uwangle;": "⦧",
      "vangrt;": "⦜",
      "varepsilon;": "ϵ",
      "varkappa;": "ϰ",
      "varnothing;": "∅",
      "varphi;": "ϕ",
      "varpi;": "ϖ",
      "varpropto;": "∝",
      "vArr;": "⇕",
      "varr;": "↕",
      "varrho;": "ϱ",
      "varsigma;": "ς",
      "varsubsetneq;": "⊊︀",
      "varsubsetneqq;": "⫋︀",
      "varsupsetneq;": "⊋︀",
      "varsupsetneqq;": "⫌︀",
      "vartheta;": "ϑ",
      "vartriangleleft;": "⊲",
      "vartriangleright;": "⊳",
      "Vbar;": "⫫",
      "vBar;": "⫨",
      "vBarv;": "⫩",
      "Vcy;": "В",
      "vcy;": "в",
      "VDash;": "⊫",
      "Vdash;": "⊩",
      "vDash;": "⊨",
      "vdash;": "⊢",
      "Vdashl;": "⫦",
      "Vee;": "⋁",
      "vee;": "∨",
      "veebar;": "⊻",
      "veeeq;": "≚",
      "vellip;": "⋮",
      "Verbar;": "‖",
      "verbar;": "|",
      "Vert;": "‖",
      "vert;": "|",
      "VerticalBar;": "∣",
      "VerticalLine;": "|",
      "VerticalSeparator;": "❘",
      "VerticalTilde;": "≀",
      "VeryThinSpace;": " ",
      "Vfr;": "𝔙",
      "vfr;": "𝔳",
      "vltri;": "⊲",
      "vnsub;": "⊂⃒",
      "vnsup;": "⊃⃒",
      "Vopf;": "𝕍",
      "vopf;": "𝕧",
      "vprop;": "∝",
      "vrtri;": "⊳",
      "Vscr;": "𝒱",
      "vscr;": "𝓋",
      "vsubnE;": "⫋︀",
      "vsubne;": "⊊︀",
      "vsupnE;": "⫌︀",
      "vsupne;": "⊋︀",
      "Vvdash;": "⊪",
      "vzigzag;": "⦚",
      "Wcirc;": "Ŵ",
      "wcirc;": "ŵ",
      "wedbar;": "⩟",
      "Wedge;": "⋀",
      "wedge;": "∧",
      "wedgeq;": "≙",
      "weierp;": "℘",
      "Wfr;": "𝔚",
      "wfr;": "𝔴",
      "Wopf;": "𝕎",
      "wopf;": "𝕨",
      "wp;": "℘",
      "wr;": "≀",
      "wreath;": "≀",
      "Wscr;": "𝒲",
      "wscr;": "𝓌",
      "xcap;": "⋂",
      "xcirc;": "◯",
      "xcup;": "⋃",
      "xdtri;": "▽",
      "Xfr;": "𝔛",
      "xfr;": "𝔵",
      "xhArr;": "⟺",
      "xharr;": "⟷",
      "Xi;": "Ξ",
      "xi;": "ξ",
      "xlArr;": "⟸",
      "xlarr;": "⟵",
      "xmap;": "⟼",
      "xnis;": "⋻",
      "xodot;": "⨀",
      "Xopf;": "𝕏",
      "xopf;": "𝕩",
      "xoplus;": "⨁",
      "xotime;": "⨂",
      "xrArr;": "⟹",
      "xrarr;": "⟶",
      "Xscr;": "𝒳",
      "xscr;": "𝓍",
      "xsqcup;": "⨆",
      "xuplus;": "⨄",
      "xutri;": "△",
      "xvee;": "⋁",
      "xwedge;": "⋀",
      "Yacute;": "Ý",
      Yacute: "Ý",
      "yacute;": "ý",
      yacute: "ý",
      "YAcy;": "Я",
      "yacy;": "я",
      "Ycirc;": "Ŷ",
      "ycirc;": "ŷ",
      "Ycy;": "Ы",
      "ycy;": "ы",
      "yen;": "¥",
      yen: "¥",
      "Yfr;": "𝔜",
      "yfr;": "𝔶",
      "YIcy;": "Ї",
      "yicy;": "ї",
      "Yopf;": "𝕐",
      "yopf;": "𝕪",
      "Yscr;": "𝒴",
      "yscr;": "𝓎",
      "YUcy;": "Ю",
      "yucy;": "ю",
      "Yuml;": "Ÿ",
      "yuml;": "ÿ",
      yuml: "ÿ",
      "Zacute;": "Ź",
      "zacute;": "ź",
      "Zcaron;": "Ž",
      "zcaron;": "ž",
      "Zcy;": "З",
      "zcy;": "з",
      "Zdot;": "Ż",
      "zdot;": "ż",
      "zeetrf;": "ℨ",
      "ZeroWidthSpace;": "​",
      "Zeta;": "Ζ",
      "zeta;": "ζ",
      "Zfr;": "ℨ",
      "zfr;": "𝔷",
      "ZHcy;": "Ж",
      "zhcy;": "ж",
      "zigrarr;": "⇝",
      "Zopf;": "ℤ",
      "zopf;": "𝕫",
      "Zscr;": "𝒵",
      "zscr;": "𝓏",
      "zwj;": "‍",
      "zwnj;": "‌"
    };
  }
});

// node_modules/ent/decode.js
var require_decode = __commonJS({
  "node_modules/ent/decode.js"(exports2, module2) {
    var punycode = require_punycode();
    var entities = require_entities();
    module2.exports = decode;
    function decode(str) {
      if (typeof str !== "string") {
        throw new TypeError("Expected a String");
      }
      return str.replace(/&(#?[^;\W]+;?)/g, function(_, match) {
        var m;
        if (m = /^#(\d+);?$/.exec(match)) {
          return punycode.ucs2.encode([parseInt(m[1], 10)]);
        } else if (m = /^#[Xx]([A-Fa-f0-9]+);?/.exec(match)) {
          return punycode.ucs2.encode([parseInt(m[1], 16)]);
        } else {
          var hasSemi = /;$/.test(match);
          var withoutSemi = hasSemi ? match.replace(/;$/, "") : match;
          var target = entities[withoutSemi] || hasSemi && entities[match];
          if (typeof target === "number") {
            return punycode.ucs2.encode([target]);
          } else if (typeof target === "string") {
            return target;
          } else {
            return "&" + match;
          }
        }
      });
    }
  }
});

// node_modules/ent/index.js
var require_ent = __commonJS({
  "node_modules/ent/index.js"(exports2) {
    exports2.encode = require_encode();
    exports2.decode = require_decode();
  }
});

// browser-external:child_process
var require_child_process = __commonJS({
  "browser-external:child_process"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "child_process" has been externalized for browser compatibility. Cannot access "child_process.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:https
var require_https = __commonJS({
  "browser-external:https"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "https" has been externalized for browser compatibility. Cannot access "https.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/gaxios/node_modules/node-fetch/browser.js
var require_browser = __commonJS({
  "node_modules/gaxios/node_modules/node-fetch/browser.js"(exports2, module2) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var globalObject = getGlobal();
    module2.exports = exports2 = globalObject.fetch;
    if (globalObject.fetch) {
      exports2.default = globalObject.fetch.bind(globalObject);
    }
    exports2.Headers = globalObject.Headers;
    exports2.Request = globalObject.Request;
    exports2.Response = globalObject.Response;
  }
});

// browser-external:querystring
var require_querystring = __commonJS({
  "browser-external:querystring"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "querystring" has been externalized for browser compatibility. Cannot access "querystring.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/gaxios/node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/gaxios/node_modules/is-stream/index.js"(exports2, module2) {
    "use strict";
    var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
    isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
    module2.exports = isStream;
  }
});

// browser-external:url
var require_url = __commonJS({
  "browser-external:url"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "url" has been externalized for browser compatibility. Cannot access "url.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/gaxios/build/src/common.js
var require_common = __commonJS({
  "node_modules/gaxios/build/src/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultErrorRedactor = exports2.GaxiosError = void 0;
    var url_1 = require_url();
    var GaxiosError = class extends Error {
      constructor(message, config, response, error) {
        super(message);
        this.config = config;
        this.response = response;
        this.error = error;
        if (this.response) {
          try {
            this.response.data = translateData(config.responseType, response === null || response === void 0 ? void 0 : response.data);
          } catch (_a) {
          }
          this.status = this.response.status;
        }
        if (error && "code" in error && error.code) {
          this.code = error.code;
        }
        if (config.errorRedactor) {
          const errorRedactor = config.errorRedactor;
          this.config = { ...config };
          if (this.response) {
            this.response = { ...this.response, config: { ...this.response.config } };
          }
          const results = errorRedactor({ config, response });
          this.config = { ...config, ...results.config };
          if (this.response) {
            this.response = { ...this.response, ...results.response, config };
          }
        }
      }
    };
    exports2.GaxiosError = GaxiosError;
    function translateData(responseType, data) {
      switch (responseType) {
        case "stream":
          return data;
        case "json":
          return JSON.parse(JSON.stringify(data));
        case "arraybuffer":
          return JSON.parse(Buffer.from(data).toString("utf8"));
        case "blob":
          return JSON.parse(data.text());
        default:
          return data;
      }
    }
    function defaultErrorRedactor(data) {
      const REDACT = "<<REDACTED> - See `errorRedactor` option in `gaxios` for configuration>.";
      function redactHeaders(headers) {
        if (!headers)
          return;
        for (const key of Object.keys(headers)) {
          if (/^authentication$/.test(key)) {
            headers[key] = REDACT;
          }
        }
      }
      function redactString(obj, key) {
        if (typeof obj === "object" && obj !== null && typeof obj[key] === "string") {
          const text = obj[key];
          if (/grant_type=/.test(text) || /assertion=/.test(text)) {
            obj[key] = REDACT;
          }
        }
      }
      function redactObject(obj) {
        if (typeof obj === "object" && obj !== null) {
          if ("grant_type" in obj) {
            obj["grant_type"] = REDACT;
          }
          if ("assertion" in obj) {
            obj["assertion"] = REDACT;
          }
        }
      }
      if (data.config) {
        redactHeaders(data.config.headers);
        redactString(data.config, "data");
        redactObject(data.config.data);
        redactString(data.config, "body");
        redactObject(data.config.body);
        try {
          const url = new url_1.URL(data.config.url || "");
          if (url.searchParams.has("token")) {
            url.searchParams.set("token", REDACT);
          }
          data.config.url = url.toString();
        } catch (_a) {
        }
      }
      if (data.response) {
        defaultErrorRedactor({ config: data.response.config });
        redactHeaders(data.response.headers);
        redactString(data.response, "data");
        redactObject(data.response.data);
      }
      return data;
    }
    exports2.defaultErrorRedactor = defaultErrorRedactor;
  }
});

// node_modules/gaxios/build/src/retry.js
var require_retry = __commonJS({
  "node_modules/gaxios/build/src/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryConfig = void 0;
    async function getRetryConfig(err) {
      var _a;
      let config = getConfig(err);
      if (!err || !err.config || !config && !err.config.retry) {
        return { shouldRetry: false };
      }
      config = config || {};
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      config.retry = config.retry === void 0 || config.retry === null ? 3 : config.retry;
      config.httpMethodsToRetry = config.httpMethodsToRetry || [
        "GET",
        "HEAD",
        "PUT",
        "OPTIONS",
        "DELETE"
      ];
      config.noResponseRetries = config.noResponseRetries === void 0 || config.noResponseRetries === null ? 2 : config.noResponseRetries;
      const retryRanges = [
        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
        // 1xx - Retry (Informational, request still processing)
        // 2xx - Do not retry (Success)
        // 3xx - Do not retry (Redirect)
        // 4xx - Do not retry (Client errors)
        // 429 - Retry ("Too Many Requests")
        // 5xx - Retry (Server errors)
        [100, 199],
        [429, 429],
        [500, 599]
      ];
      config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;
      err.config.retryConfig = config;
      const shouldRetryFn = config.shouldRetry || shouldRetryRequest;
      if (!await shouldRetryFn(err)) {
        return { shouldRetry: false, config: err.config };
      }
      const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;
      const delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1e3;
      err.config.retryConfig.currentRetryAttempt += 1;
      const backoff = config.retryBackoff ? config.retryBackoff(err, delay) : new Promise((resolve) => {
        setTimeout(resolve, delay);
      });
      if (config.onRetryAttempt) {
        config.onRetryAttempt(err);
      }
      await backoff;
      return { shouldRetry: true, config: err.config };
    }
    exports2.getRetryConfig = getRetryConfig;
    function shouldRetryRequest(err) {
      var _a;
      const config = getConfig(err);
      if (err.name === "AbortError" || ((_a = err.error) === null || _a === void 0 ? void 0 : _a.name) === "AbortError") {
        return false;
      }
      if (!config || config.retry === 0) {
        return false;
      }
      if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {
        return false;
      }
      if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {
        return false;
      }
      if (err.response && err.response.status) {
        let isInRange = false;
        for (const [min, max] of config.statusCodesToRetry) {
          const status = err.response.status;
          if (status >= min && status <= max) {
            isInRange = true;
            break;
          }
        }
        if (!isInRange) {
          return false;
        }
      }
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      if (config.currentRetryAttempt >= config.retry) {
        return false;
      }
      return true;
    }
    function getConfig(err) {
      if (err && err.config && err.config.retryConfig) {
        return err.config.retryConfig;
      }
      return;
    }
  }
});

// browser-external:net
var require_net = __commonJS({
  "browser-external:net"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "net" has been externalized for browser compatibility. Cannot access "net.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:tls
var require_tls = __commonJS({
  "browser-external:tls"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "tls" has been externalized for browser compatibility. Cannot access "tls.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:assert
var require_assert = __commonJS({
  "browser-external:assert"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "assert" has been externalized for browser compatibility. Cannot access "assert.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common2 = __commonJS({
  "node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser2 = __commonJS({
  "node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common2()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// browser-external:http
var require_http = __commonJS({
  "browser-external:http"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "http" has been externalized for browser compatibility. Cannot access "http.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/agent-base/dist/helpers.js
var require_helpers = __commonJS({
  "node_modules/agent-base/dist/helpers.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.req = exports2.json = exports2.toBuffer = void 0;
    var http = __importStar(require_http());
    var https = __importStar(require_https());
    async function toBuffer(stream) {
      let length = 0;
      const chunks = [];
      for await (const chunk of stream) {
        length += chunk.length;
        chunks.push(chunk);
      }
      return Buffer.concat(chunks, length);
    }
    exports2.toBuffer = toBuffer;
    async function json(stream) {
      const buf = await toBuffer(stream);
      const str = buf.toString("utf8");
      try {
        return JSON.parse(str);
      } catch (_err) {
        const err = _err;
        err.message += ` (input: ${str})`;
        throw err;
      }
    }
    exports2.json = json;
    function req(url, opts = {}) {
      const href = typeof url === "string" ? url : url.href;
      const req2 = (href.startsWith("https:") ? https : http).request(url, opts);
      const promise = new Promise((resolve, reject) => {
        req2.once("response", resolve).once("error", reject).end();
      });
      req2.then = promise.then.bind(promise);
      return req2;
    }
    exports2.req = req;
  }
});

// node_modules/agent-base/dist/index.js
var require_dist = __commonJS({
  "node_modules/agent-base/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Agent = void 0;
    var http = __importStar(require_http());
    __exportStar(require_helpers(), exports2);
    var INTERNAL = Symbol("AgentBaseInternalState");
    var Agent = class extends http.Agent {
      constructor(opts) {
        super(opts);
        this[INTERNAL] = {};
      }
      /**
       * Determine whether this is an `http` or `https` request.
       */
      isSecureEndpoint(options) {
        if (options) {
          if (typeof options.secureEndpoint === "boolean") {
            return options.secureEndpoint;
          }
          if (typeof options.protocol === "string") {
            return options.protocol === "https:";
          }
        }
        const { stack } = new Error();
        if (typeof stack !== "string")
          return false;
        return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
      }
      createSocket(req, options, cb) {
        const connectOpts = {
          ...options,
          secureEndpoint: this.isSecureEndpoint(options)
        };
        Promise.resolve().then(() => this.connect(req, connectOpts)).then((socket) => {
          if (socket instanceof http.Agent) {
            return socket.addRequest(req, connectOpts);
          }
          this[INTERNAL].currentSocket = socket;
          super.createSocket(req, options, cb);
        }, cb);
      }
      createConnection() {
        const socket = this[INTERNAL].currentSocket;
        this[INTERNAL].currentSocket = void 0;
        if (!socket) {
          throw new Error("No socket was returned in the `connect()` function");
        }
        return socket;
      }
      get defaultPort() {
        return this[INTERNAL].defaultPort ?? (this.protocol === "https:" ? 443 : 80);
      }
      set defaultPort(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].defaultPort = v;
        }
      }
      get protocol() {
        return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? "https:" : "http:");
      }
      set protocol(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].protocol = v;
        }
      }
    };
    exports2.Agent = Agent;
  }
});

// node_modules/https-proxy-agent/dist/parse-proxy-response.js
var require_parse_proxy_response = __commonJS({
  "node_modules/https-proxy-agent/dist/parse-proxy-response.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseProxyResponse = void 0;
    var debug_1 = __importDefault(require_browser2());
    var debug = (0, debug_1.default)("https-proxy-agent:parse-proxy-response");
    function parseProxyResponse(socket) {
      return new Promise((resolve, reject) => {
        let buffersLength = 0;
        const buffers = [];
        function read() {
          const b = socket.read();
          if (b)
            ondata(b);
          else
            socket.once("readable", read);
        }
        function cleanup() {
          socket.removeListener("end", onend);
          socket.removeListener("error", onerror);
          socket.removeListener("readable", read);
        }
        function onend() {
          cleanup();
          debug("onend");
          reject(new Error("Proxy connection ended before receiving CONNECT response"));
        }
        function onerror(err) {
          cleanup();
          debug("onerror %o", err);
          reject(err);
        }
        function ondata(b) {
          buffers.push(b);
          buffersLength += b.length;
          const buffered = Buffer.concat(buffers, buffersLength);
          const endOfHeaders = buffered.indexOf("\r\n\r\n");
          if (endOfHeaders === -1) {
            debug("have not received end of HTTP headers yet...");
            read();
            return;
          }
          const headerParts = buffered.slice(0, endOfHeaders).toString("ascii").split("\r\n");
          const firstLine = headerParts.shift();
          if (!firstLine) {
            socket.destroy();
            return reject(new Error("No header received from proxy CONNECT response"));
          }
          const firstLineParts = firstLine.split(" ");
          const statusCode = +firstLineParts[1];
          const statusText = firstLineParts.slice(2).join(" ");
          const headers = {};
          for (const header of headerParts) {
            if (!header)
              continue;
            const firstColon = header.indexOf(":");
            if (firstColon === -1) {
              socket.destroy();
              return reject(new Error(`Invalid header from proxy CONNECT response: "${header}"`));
            }
            const key = header.slice(0, firstColon).toLowerCase();
            const value = header.slice(firstColon + 1).trimStart();
            const current = headers[key];
            if (typeof current === "string") {
              headers[key] = [current, value];
            } else if (Array.isArray(current)) {
              current.push(value);
            } else {
              headers[key] = value;
            }
          }
          debug("got proxy server response: %o %o", firstLine, headers);
          cleanup();
          resolve({
            connect: {
              statusCode,
              statusText,
              headers
            },
            buffered
          });
        }
        socket.on("error", onerror);
        socket.on("end", onend);
        read();
      });
    }
    exports2.parseProxyResponse = parseProxyResponse;
  }
});

// node_modules/https-proxy-agent/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/https-proxy-agent/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpsProxyAgent = void 0;
    var net = __importStar(require_net());
    var tls = __importStar(require_tls());
    var assert_1 = __importDefault(require_assert());
    var debug_1 = __importDefault(require_browser2());
    var agent_base_1 = require_dist();
    var parse_proxy_response_1 = require_parse_proxy_response();
    var debug = (0, debug_1.default)("https-proxy-agent");
    var HttpsProxyAgent = class extends agent_base_1.Agent {
      constructor(proxy, opts) {
        super(opts);
        this.options = { path: void 0 };
        this.proxy = typeof proxy === "string" ? new URL(proxy) : proxy;
        this.proxyHeaders = (opts == null ? void 0 : opts.headers) ?? {};
        debug("Creating new HttpsProxyAgent instance: %o", this.proxy.href);
        const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, "");
        const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === "https:" ? 443 : 80;
        this.connectOpts = {
          // Attempt to negotiate http/1.1 for proxy servers that support http/2
          ALPNProtocols: ["http/1.1"],
          ...opts ? omit(opts, "headers") : null,
          host,
          port
        };
      }
      /**
       * Called when the node-core HTTP client library is creating a
       * new HTTP request.
       */
      async connect(req, opts) {
        const { proxy } = this;
        if (!opts.host) {
          throw new TypeError('No "host" provided');
        }
        let socket;
        if (proxy.protocol === "https:") {
          debug("Creating `tls.Socket`: %o", this.connectOpts);
          const servername = this.connectOpts.servername || this.connectOpts.host;
          socket = tls.connect({
            ...this.connectOpts,
            servername: servername && net.isIP(servername) ? void 0 : servername
          });
        } else {
          debug("Creating `net.Socket`: %o", this.connectOpts);
          socket = net.connect(this.connectOpts);
        }
        const headers = typeof this.proxyHeaders === "function" ? this.proxyHeaders() : { ...this.proxyHeaders };
        const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;
        let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\r
`;
        if (proxy.username || proxy.password) {
          const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
          headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
        }
        headers.Host = `${host}:${opts.port}`;
        if (!headers["Proxy-Connection"]) {
          headers["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close";
        }
        for (const name of Object.keys(headers)) {
          payload += `${name}: ${headers[name]}\r
`;
        }
        const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);
        socket.write(`${payload}\r
`);
        const { connect, buffered } = await proxyResponsePromise;
        req.emit("proxyConnect", connect);
        this.emit("proxyConnect", connect, req);
        if (connect.statusCode === 200) {
          req.once("socket", resume);
          if (opts.secureEndpoint) {
            debug("Upgrading socket connection to TLS");
            const servername = opts.servername || opts.host;
            return tls.connect({
              ...omit(opts, "host", "path", "port"),
              socket,
              servername: net.isIP(servername) ? void 0 : servername
            });
          }
          return socket;
        }
        socket.destroy();
        const fakeSocket = new net.Socket({ writable: false });
        fakeSocket.readable = true;
        req.once("socket", (s) => {
          debug("Replaying proxy buffer for failed request");
          (0, assert_1.default)(s.listenerCount("data") > 0);
          s.push(buffered);
          s.push(null);
        });
        return fakeSocket;
      }
    };
    HttpsProxyAgent.protocols = ["http", "https"];
    exports2.HttpsProxyAgent = HttpsProxyAgent;
    function resume(socket) {
      socket.resume();
    }
    function omit(obj, ...keys) {
      const ret = {};
      let key;
      for (key in obj) {
        if (!keys.includes(key)) {
          ret[key] = obj[key];
        }
      }
      return ret;
    }
  }
});

// node_modules/gaxios/build/src/gaxios.js
var require_gaxios = __commonJS({
  "node_modules/gaxios/build/src/gaxios.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Gaxios = void 0;
    var extend_1 = __importDefault(require_extend());
    var https_1 = require_https();
    var node_fetch_1 = __importDefault(require_browser());
    var querystring_1 = __importDefault(require_querystring());
    var is_stream_1 = __importDefault(require_is_stream());
    var url_1 = require_url();
    var common_1 = require_common();
    var retry_1 = require_retry();
    var https_proxy_agent_1 = require_dist2();
    var fetch = hasFetch() ? window.fetch : node_fetch_1.default;
    function hasWindow() {
      return typeof window !== "undefined" && !!window;
    }
    function hasFetch() {
      return hasWindow() && !!window.fetch;
    }
    function hasBuffer() {
      return typeof Buffer !== "undefined";
    }
    function hasHeader(options, header) {
      return !!getHeader(options, header);
    }
    function getHeader(options, header) {
      header = header.toLowerCase();
      for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {
        if (header === key.toLowerCase()) {
          return options.headers[key];
        }
      }
      return void 0;
    }
    var HttpsProxyAgent;
    function loadProxy() {
      var _a, _b, _c, _d;
      const proxy = ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.HTTPS_PROXY) || ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.https_proxy) || ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c.HTTP_PROXY) || ((_d = process === null || process === void 0 ? void 0 : process.env) === null || _d === void 0 ? void 0 : _d.http_proxy);
      if (proxy) {
        HttpsProxyAgent = https_proxy_agent_1.HttpsProxyAgent;
      }
      return proxy;
    }
    loadProxy();
    function skipProxy(url) {
      var _a;
      const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;
      if (!noProxyEnv) {
        return false;
      }
      const noProxyUrls = noProxyEnv.split(",");
      const parsedURL = new url_1.URL(url);
      return !!noProxyUrls.find((url2) => {
        if (url2.startsWith("*.") || url2.startsWith(".")) {
          url2 = url2.replace(/^\*\./, ".");
          return parsedURL.hostname.endsWith(url2);
        } else {
          return url2 === parsedURL.origin || url2 === parsedURL.hostname;
        }
      });
    }
    function getProxy(url) {
      if (skipProxy(url)) {
        return void 0;
      } else {
        return loadProxy();
      }
    }
    var Gaxios = class {
      /**
       * The Gaxios class is responsible for making HTTP requests.
       * @param defaults The default set of options to be used for this instance.
       */
      constructor(defaults) {
        this.agentCache = /* @__PURE__ */ new Map();
        this.defaults = defaults || {};
      }
      /**
       * Perform an HTTP request with the given options.
       * @param opts Set of HTTP options that will be used for this HTTP request.
       */
      async request(opts = {}) {
        opts = this.validateOpts(opts);
        return this._request(opts);
      }
      async _defaultAdapter(opts) {
        const fetchImpl = opts.fetchImplementation || fetch;
        const res = await fetchImpl(opts.url, opts);
        const data = await this.getResponseData(opts, res);
        return this.translateResponse(opts, res, data);
      }
      /**
       * Internal, retryable version of the `request` method.
       * @param opts Set of HTTP options that will be used for this HTTP request.
       */
      async _request(opts = {}) {
        try {
          let translatedResponse;
          if (opts.adapter) {
            translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));
          } else {
            translatedResponse = await this._defaultAdapter(opts);
          }
          if (!opts.validateStatus(translatedResponse.status)) {
            if (opts.responseType === "stream") {
              let response = "";
              await new Promise((resolve) => {
                (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on("data", (chunk) => {
                  response += chunk;
                });
                (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on("end", resolve);
              });
              translatedResponse.data = response;
            }
            throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);
          }
          return translatedResponse;
        } catch (e) {
          const err = e instanceof common_1.GaxiosError ? e : new common_1.GaxiosError(e.message, opts, void 0, e);
          const { shouldRetry, config } = await (0, retry_1.getRetryConfig)(err);
          if (shouldRetry && config) {
            err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;
            return this._request(err.config);
          }
          throw err;
        }
      }
      async getResponseData(opts, res) {
        switch (opts.responseType) {
          case "stream":
            return res.body;
          case "json": {
            let data = await res.text();
            try {
              data = JSON.parse(data);
            } catch (_a) {
            }
            return data;
          }
          case "arraybuffer":
            return res.arrayBuffer();
          case "blob":
            return res.blob();
          case "text":
            return res.text();
          default:
            return this.getResponseDataFromContentType(res);
        }
      }
      /**
       * Validates the options, and merges them with defaults.
       * @param opts The original options passed from the client.
       */
      validateOpts(options) {
        const opts = (0, extend_1.default)(true, {}, this.defaults, options);
        if (!opts.url) {
          throw new Error("URL is required.");
        }
        const baseUrl = opts.baseUrl || opts.baseURL;
        if (baseUrl) {
          opts.url = baseUrl + opts.url;
        }
        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;
        if (opts.params && Object.keys(opts.params).length > 0) {
          let additionalQueryParams = opts.paramsSerializer(opts.params);
          if (additionalQueryParams.startsWith("?")) {
            additionalQueryParams = additionalQueryParams.slice(1);
          }
          const prefix = opts.url.includes("?") ? "&" : "?";
          opts.url = opts.url + prefix + additionalQueryParams;
        }
        if (typeof options.maxContentLength === "number") {
          opts.size = options.maxContentLength;
        }
        if (typeof options.maxRedirects === "number") {
          opts.follow = options.maxRedirects;
        }
        opts.headers = opts.headers || {};
        if (opts.data) {
          const isFormData = typeof FormData === "undefined" ? false : (opts === null || opts === void 0 ? void 0 : opts.data) instanceof FormData;
          if (is_stream_1.default.readable(opts.data)) {
            opts.body = opts.data;
          } else if (hasBuffer() && Buffer.isBuffer(opts.data)) {
            opts.body = opts.data;
            if (!hasHeader(opts, "Content-Type")) {
              opts.headers["Content-Type"] = "application/json";
            }
          } else if (typeof opts.data === "object") {
            if (!isFormData) {
              if (getHeader(opts, "content-type") === "application/x-www-form-urlencoded") {
                opts.body = opts.paramsSerializer(opts.data);
              } else {
                if (!hasHeader(opts, "Content-Type")) {
                  opts.headers["Content-Type"] = "application/json";
                }
                opts.body = JSON.stringify(opts.data);
              }
            }
          } else {
            opts.body = opts.data;
          }
        }
        opts.validateStatus = opts.validateStatus || this.validateStatus;
        opts.responseType = opts.responseType || "unknown";
        if (!opts.headers["Accept"] && opts.responseType === "json") {
          opts.headers["Accept"] = "application/json";
        }
        opts.method = opts.method || "GET";
        const proxy = getProxy(opts.url);
        if (proxy) {
          if (this.agentCache.has(proxy)) {
            opts.agent = this.agentCache.get(proxy);
          } else {
            if (opts.cert && opts.key) {
              const parsedURL = new url_1.URL(proxy);
              opts.agent = new HttpsProxyAgent({
                port: parsedURL.port,
                host: parsedURL.host,
                protocol: parsedURL.protocol,
                cert: opts.cert,
                key: opts.key
              });
            } else {
              opts.agent = new HttpsProxyAgent(proxy);
            }
            this.agentCache.set(proxy, opts.agent);
          }
        } else if (opts.cert && opts.key) {
          if (this.agentCache.has(opts.key)) {
            opts.agent = this.agentCache.get(opts.key);
          } else {
            opts.agent = new https_1.Agent({
              cert: opts.cert,
              key: opts.key
            });
            this.agentCache.set(opts.key, opts.agent);
          }
        }
        if (typeof opts.errorRedactor !== "function" && opts.errorRedactor !== false) {
          opts.errorRedactor = common_1.defaultErrorRedactor;
        }
        return opts;
      }
      /**
       * By default, throw for any non-2xx status code
       * @param status status code from the HTTP response
       */
      validateStatus(status) {
        return status >= 200 && status < 300;
      }
      /**
       * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)
       * @param params key value pars to encode
       */
      paramsSerializer(params) {
        return querystring_1.default.stringify(params);
      }
      translateResponse(opts, res, data) {
        const headers = {};
        res.headers.forEach((value, key) => {
          headers[key] = value;
        });
        return {
          config: opts,
          data,
          headers,
          status: res.status,
          statusText: res.statusText,
          // XMLHttpRequestLike
          request: {
            responseURL: res.url
          }
        };
      }
      /**
       * Attempts to parse a response by looking at the Content-Type header.
       * @param {FetchResponse} response the HTTP response.
       * @returns {Promise<any>} a promise that resolves to the response data.
       */
      async getResponseDataFromContentType(response) {
        let contentType = response.headers.get("Content-Type");
        if (contentType === null) {
          return response.text();
        }
        contentType = contentType.toLowerCase();
        if (contentType.includes("application/json")) {
          let data = await response.text();
          try {
            data = JSON.parse(data);
          } catch (_a) {
          }
          return data;
        } else if (contentType.includes("text/plain") || contentType.includes("text/html")) {
          return response.text();
        } else {
          return response.blob();
        }
      }
    };
    exports2.Gaxios = Gaxios;
  }
});

// node_modules/gaxios/build/src/index.js
var require_src3 = __commonJS({
  "node_modules/gaxios/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.request = exports2.instance = exports2.Gaxios = exports2.GaxiosError = void 0;
    var gaxios_1 = require_gaxios();
    Object.defineProperty(exports2, "Gaxios", { enumerable: true, get: function() {
      return gaxios_1.Gaxios;
    } });
    var common_1 = require_common();
    Object.defineProperty(exports2, "GaxiosError", { enumerable: true, get: function() {
      return common_1.GaxiosError;
    } });
    exports2.instance = new gaxios_1.Gaxios();
    async function request(opts) {
      return exports2.instance.request(opts);
    }
    exports2.request = request;
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports2, module2) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: " ",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2))
            return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++)
                  ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v)))
                return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0)
                e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0)
                return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            else
              e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++)
            ;
          for (len = str.length; str.charCodeAt(--len) === 48; )
            ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0)
                i += LOG_BASE;
              if (i < len) {
                if (i)
                  x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0")
                ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object")
                  FORMAT = v;
                else
                  throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true)
            return false;
          if (!BigNumber2.DEBUG)
            return true;
          var i, n, c = v.c, e = v.e, s = v.s;
          out:
            if ({}.toString.call(c) == "[object Array]") {
              if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                if (c[0] === 0) {
                  if (e === 0 && c.length === 1)
                    return true;
                  break out;
                }
                i = (e + 1) % LOG_BASE;
                if (i < 1)
                  i += LOG_BASE;
                if (String(c[0]).length == i) {
                  for (i = 0; i < c.length; i++) {
                    n = c[i];
                    if (n < 0 || n >= BASE || n !== mathfloor(n))
                      break out;
                  }
                  if (n !== 0)
                    return true;
                }
              }
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
              return true;
            }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null)
              dp = DECIMAL_PLACES;
            else
              intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i < k; ) {
                  v = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i < k; ) {
                  v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k; ) {
                v = random53bitInt();
                if (v < 9e15)
                  c[i++] = v % 1e14;
              }
            }
            k = c[--i];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
            for (; c[i] === 0; c.pop(), i--)
              ;
            if (i < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
                ;
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++)
                ;
              if (i < LOG_BASE)
                e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; )
            sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
                ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null)
                    arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k = xc.length;
            for (; xc[--k] == 0; xc.pop())
              ;
            if (!xc[0])
              return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; )
                ;
              for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]))
                ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = function() {
          function multiply(x, k, base) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
            if (carry)
              x = [carry].concat(x);
            return x;
          }
          function compare2(a, b, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1))
              ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q = new BigNumber2(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++)
              ;
            if (yc[i] > (xc[i] || 0))
              e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0)
                ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2)
                yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL)
                    rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base)
                      n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL)
                    prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0])
                qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++)
                ;
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          if (!n.c)
            return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++)
                ;
              str = toExponential(str, e);
            } else {
              i -= ne;
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0)
                  for (str += "."; i--; str += "0")
                    ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len)
                    str += ".";
                  for (; i--; str += "0")
                    ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i = 1, x = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            y = new BigNumber2(args[i]);
            if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e) {
          var i = 1, j = c.length;
          for (; !c[--j]; c.pop())
            ;
          for (j = c[0]; j >= 10; j /= 10, i++)
            ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
                if (b) {
                  base = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s)
                  return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
                ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0))
                      ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++)
                    ;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++)
                      ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++)
                      ;
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE)
                        xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE)
                      break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop())
                ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null)
            return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0)
            x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c))
            return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v])
            for (; v % 10 == 0; v /= 10, n--)
              ;
          if (n < 0)
            n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null)
            m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s)
              return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp)
              x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1)
              k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg)
              n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c)
                break;
              if (k) {
                if (y.c.length > k)
                  y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0)
                break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0)
                  break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k)
                x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp)
            return y;
          if (nIsNeg)
            y = ONE.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0))
              ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i = xc.length);
          if (b > 0)
            for (; b--; xc[i++] = 0)
              ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b)
                ;
              --xc[i];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye)
            ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber2(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1)
            y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0))
            ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k = xcL, j = i + k; j > i; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0])
              return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0))
              ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c))
            return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--)
              ;
            for (v = c[0]; v >= 10; v /= 10, n++)
              ;
          }
          if (sd && x.e + 1 > n)
            n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0)
              n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3)
              s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e)
                  --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1)
                intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0)
                intPart += groupSeparator + intDigits.slice(i);
              if (isNeg)
                intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc)
            return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1)
              break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null)
            intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0)
                str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0])
              str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null)
          BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for (; i < j; ) {
          s = a[i++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s)
            ;
          r += s;
        }
        for (j = r.length; r.charCodeAt(--j) === 48; )
          ;
        return r.slice(0, j + 1 || 1);
      }
      function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        if (!i || !j)
          return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b)
          return a ? b ? 0 : -j : i;
        if (i != j)
          return i;
        a = i < 0;
        b = k == l;
        if (!xc || !yc)
          return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b)
          return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i = 0; i < j; i++)
          if (xc[i] != yc[i])
            return xc[i] > yc[i] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z) {
        var len, zs;
        if (e < 0) {
          for (zs = z + "."; ++e; zs += z)
            ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z)
              ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports2);
  }
});

// node_modules/json-bigint/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/json-bigint/lib/stringify.js"(exports2, module2) {
    var BigNumber = require_bignumber();
    var JSON2 = module2.exports;
    (function() {
      "use strict";
      function f(n) {
        return n < 10 ? "0" + n : n;
      }
      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        // table of character substitutions
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
      }, rep;
      function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
          var c = meta[a];
          return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
      }
      function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key], isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        if (typeof rep === "function") {
          value = rep.call(holder, key, value);
        }
        switch (typeof value) {
          case "string":
            if (isBigNumber) {
              return value;
            } else {
              return quote(value);
            }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
          case "null":
          case "bigint":
            return String(value);
          case "object":
            if (!value) {
              return "null";
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
              length = value.length;
              for (i = 0; i < length; i += 1) {
                partial[i] = str(i, value) || "null";
              }
              v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
              gap = mind;
              return v;
            }
            if (rep && typeof rep === "object") {
              length = rep.length;
              for (i = 0; i < length; i += 1) {
                if (typeof rep[i] === "string") {
                  k = rep[i];
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                  }
                }
              }
            } else {
              Object.keys(value).forEach(function(k2) {
                var v2 = str(k2, value);
                if (v2) {
                  partial.push(quote(k2) + (gap ? ": " : ":") + v2);
                }
              });
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
      }
      if (typeof JSON2.stringify !== "function") {
        JSON2.stringify = function(value, replacer, space) {
          var i;
          gap = "";
          indent = "";
          if (typeof space === "number") {
            for (i = 0; i < space; i += 1) {
              indent += " ";
            }
          } else if (typeof space === "string") {
            indent = space;
          }
          rep = replacer;
          if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
            throw new Error("JSON.stringify");
          }
          return str("", { "": value });
        };
      }
    })();
  }
});

// node_modules/json-bigint/lib/parse.js
var require_parse = __commonJS({
  "node_modules/json-bigint/lib/parse.js"(exports2, module2) {
    var BigNumber = null;
    var suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
    var suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;
    var json_parse = function(options) {
      "use strict";
      var _options = {
        strict: false,
        // not being strict means do not generate syntax errors for "duplicate key"
        storeAsString: false,
        // toggles whether the values should be stored as BigNumber (default) or a string
        alwaysParseAsBig: false,
        // toggles whether all numbers should be Big
        useNativeBigInt: false,
        // toggles whether to use native BigInt instead of bignumber.js
        protoAction: "error",
        constructorAction: "error"
      };
      if (options !== void 0 && options !== null) {
        if (options.strict === true) {
          _options.strict = true;
        }
        if (options.storeAsString === true) {
          _options.storeAsString = true;
        }
        _options.alwaysParseAsBig = options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
        _options.useNativeBigInt = options.useNativeBigInt === true ? options.useNativeBigInt : false;
        if (typeof options.constructorAction !== "undefined") {
          if (options.constructorAction === "error" || options.constructorAction === "ignore" || options.constructorAction === "preserve") {
            _options.constructorAction = options.constructorAction;
          } else {
            throw new Error(
              `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`
            );
          }
        }
        if (typeof options.protoAction !== "undefined") {
          if (options.protoAction === "error" || options.protoAction === "ignore" || options.protoAction === "preserve") {
            _options.protoAction = options.protoAction;
          } else {
            throw new Error(
              `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`
            );
          }
        }
      }
      var at, ch, escapee = {
        '"': '"',
        "\\": "\\",
        "/": "/",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	"
      }, text, error = function(m) {
        throw {
          name: "SyntaxError",
          message: m,
          at,
          text
        };
      }, next = function(c) {
        if (c && c !== ch) {
          error("Expected '" + c + "' instead of '" + ch + "'");
        }
        ch = text.charAt(at);
        at += 1;
        return ch;
      }, number = function() {
        var number2, string2 = "";
        if (ch === "-") {
          string2 = "-";
          next("-");
        }
        while (ch >= "0" && ch <= "9") {
          string2 += ch;
          next();
        }
        if (ch === ".") {
          string2 += ".";
          while (next() && ch >= "0" && ch <= "9") {
            string2 += ch;
          }
        }
        if (ch === "e" || ch === "E") {
          string2 += ch;
          next();
          if (ch === "-" || ch === "+") {
            string2 += ch;
            next();
          }
          while (ch >= "0" && ch <= "9") {
            string2 += ch;
            next();
          }
        }
        number2 = +string2;
        if (!isFinite(number2)) {
          error("Bad number");
        } else {
          if (BigNumber == null)
            BigNumber = require_bignumber();
          if (string2.length > 15)
            return _options.storeAsString ? string2 : _options.useNativeBigInt ? BigInt(string2) : new BigNumber(string2);
          else
            return !_options.alwaysParseAsBig ? number2 : _options.useNativeBigInt ? BigInt(number2) : new BigNumber(number2);
        }
      }, string = function() {
        var hex, i, string2 = "", uffff;
        if (ch === '"') {
          var startAt = at;
          while (next()) {
            if (ch === '"') {
              if (at - 1 > startAt)
                string2 += text.substring(startAt, at - 1);
              next();
              return string2;
            }
            if (ch === "\\") {
              if (at - 1 > startAt)
                string2 += text.substring(startAt, at - 1);
              next();
              if (ch === "u") {
                uffff = 0;
                for (i = 0; i < 4; i += 1) {
                  hex = parseInt(next(), 16);
                  if (!isFinite(hex)) {
                    break;
                  }
                  uffff = uffff * 16 + hex;
                }
                string2 += String.fromCharCode(uffff);
              } else if (typeof escapee[ch] === "string") {
                string2 += escapee[ch];
              } else {
                break;
              }
              startAt = at;
            }
          }
        }
        error("Bad string");
      }, white = function() {
        while (ch && ch <= " ") {
          next();
        }
      }, word = function() {
        switch (ch) {
          case "t":
            next("t");
            next("r");
            next("u");
            next("e");
            return true;
          case "f":
            next("f");
            next("a");
            next("l");
            next("s");
            next("e");
            return false;
          case "n":
            next("n");
            next("u");
            next("l");
            next("l");
            return null;
        }
        error("Unexpected '" + ch + "'");
      }, value, array = function() {
        var array2 = [];
        if (ch === "[") {
          next("[");
          white();
          if (ch === "]") {
            next("]");
            return array2;
          }
          while (ch) {
            array2.push(value());
            white();
            if (ch === "]") {
              next("]");
              return array2;
            }
            next(",");
            white();
          }
        }
        error("Bad array");
      }, object = function() {
        var key, object2 = /* @__PURE__ */ Object.create(null);
        if (ch === "{") {
          next("{");
          white();
          if (ch === "}") {
            next("}");
            return object2;
          }
          while (ch) {
            key = string();
            white();
            next(":");
            if (_options.strict === true && Object.hasOwnProperty.call(object2, key)) {
              error('Duplicate key "' + key + '"');
            }
            if (suspectProtoRx.test(key) === true) {
              if (_options.protoAction === "error") {
                error("Object contains forbidden prototype property");
              } else if (_options.protoAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else if (suspectConstructorRx.test(key) === true) {
              if (_options.constructorAction === "error") {
                error("Object contains forbidden constructor property");
              } else if (_options.constructorAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else {
              object2[key] = value();
            }
            white();
            if (ch === "}") {
              next("}");
              return object2;
            }
            next(",");
            white();
          }
        }
        error("Bad object");
      };
      value = function() {
        white();
        switch (ch) {
          case "{":
            return object();
          case "[":
            return array();
          case '"':
            return string();
          case "-":
            return number();
          default:
            return ch >= "0" && ch <= "9" ? number() : word();
        }
      };
      return function(source, reviver) {
        var result;
        text = source + "";
        at = 0;
        ch = " ";
        result = value();
        white();
        if (ch) {
          error("Syntax error");
        }
        return typeof reviver === "function" ? function walk(holder, key) {
          var k, v, value2 = holder[key];
          if (value2 && typeof value2 === "object") {
            Object.keys(value2).forEach(function(k2) {
              v = walk(value2, k2);
              if (v !== void 0) {
                value2[k2] = v;
              } else {
                delete value2[k2];
              }
            });
          }
          return reviver.call(holder, key, value2);
        }({ "": result }, "") : result;
      };
    };
    module2.exports = json_parse;
  }
});

// node_modules/json-bigint/index.js
var require_json_bigint = __commonJS({
  "node_modules/json-bigint/index.js"(exports2, module2) {
    var json_stringify = require_stringify().stringify;
    var json_parse = require_parse();
    module2.exports = function(options) {
      return {
        parse: json_parse(options),
        stringify: json_stringify
      };
    };
    module2.exports.parse = json_parse();
    module2.exports.stringify = json_stringify;
  }
});

// browser-external:os
var require_os = __commonJS({
  "browser-external:os"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "os" has been externalized for browser compatibility. Cannot access "os.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/gcp-metadata/build/src/gcp-residency.js
var require_gcp_residency = __commonJS({
  "node_modules/gcp-metadata/build/src/gcp-residency.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.detectGCPResidency = exports2.isGoogleComputeEngine = exports2.isGoogleComputeEngineMACAddress = exports2.isGoogleComputeEngineLinux = exports2.isGoogleCloudServerless = exports2.GCE_LINUX_BIOS_PATHS = void 0;
    var fs_1 = require_fs();
    var os_1 = require_os();
    exports2.GCE_LINUX_BIOS_PATHS = {
      BIOS_DATE: "/sys/class/dmi/id/bios_date",
      BIOS_VENDOR: "/sys/class/dmi/id/bios_vendor"
    };
    var GCE_MAC_ADDRESS_REGEX = /^42:01/;
    function isGoogleCloudServerless() {
      const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;
      return !!isGFEnvironment;
    }
    exports2.isGoogleCloudServerless = isGoogleCloudServerless;
    function isGoogleComputeEngineLinux() {
      if ((0, os_1.platform)() !== "linux")
        return false;
      try {
        (0, fs_1.statSync)(exports2.GCE_LINUX_BIOS_PATHS.BIOS_DATE);
        const biosVendor = (0, fs_1.readFileSync)(exports2.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, "utf8");
        return /Google/.test(biosVendor);
      } catch (_a) {
        return false;
      }
    }
    exports2.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;
    function isGoogleComputeEngineMACAddress() {
      const interfaces = (0, os_1.networkInterfaces)();
      for (const item of Object.values(interfaces)) {
        if (!item)
          continue;
        for (const { mac } of item) {
          if (GCE_MAC_ADDRESS_REGEX.test(mac)) {
            return true;
          }
        }
      }
      return false;
    }
    exports2.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;
    function isGoogleComputeEngine() {
      return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();
    }
    exports2.isGoogleComputeEngine = isGoogleComputeEngine;
    function detectGCPResidency() {
      return isGoogleCloudServerless() || isGoogleComputeEngine();
    }
    exports2.detectGCPResidency = detectGCPResidency;
  }
});

// node_modules/gcp-metadata/build/src/index.js
var require_src4 = __commonJS({
  "node_modules/gcp-metadata/build/src/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestTimeout = exports2.setGCPResidency = exports2.getGCPResidency = exports2.gcpResidencyCache = exports2.resetIsAvailableCache = exports2.isAvailable = exports2.project = exports2.instance = exports2.METADATA_SERVER_DETECTION = exports2.HEADERS = exports2.HEADER_VALUE = exports2.HEADER_NAME = exports2.SECONDARY_HOST_ADDRESS = exports2.HOST_ADDRESS = exports2.BASE_PATH = void 0;
    var gaxios_1 = require_src3();
    var jsonBigint = require_json_bigint();
    var gcp_residency_1 = require_gcp_residency();
    exports2.BASE_PATH = "/computeMetadata/v1";
    exports2.HOST_ADDRESS = "http://169.254.169.254";
    exports2.SECONDARY_HOST_ADDRESS = "http://metadata.google.internal.";
    exports2.HEADER_NAME = "Metadata-Flavor";
    exports2.HEADER_VALUE = "Google";
    exports2.HEADERS = Object.freeze({ [exports2.HEADER_NAME]: exports2.HEADER_VALUE });
    exports2.METADATA_SERVER_DETECTION = Object.freeze({
      "assume-present": "don't try to ping the metadata server, but assume it's present",
      none: "don't try to ping the metadata server, but don't try to use it either",
      "bios-only": "treat the result of a BIOS probe as canonical (don't fall back to pinging)",
      "ping-only": "skip the BIOS probe, and go straight to pinging"
    });
    function getBaseUrl(baseUrl) {
      if (!baseUrl) {
        baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports2.HOST_ADDRESS;
      }
      if (!/^https?:\/\//.test(baseUrl)) {
        baseUrl = `http://${baseUrl}`;
      }
      return new URL(exports2.BASE_PATH, baseUrl).href;
    }
    function validate(options) {
      Object.keys(options).forEach((key) => {
        switch (key) {
          case "params":
          case "property":
          case "headers":
            break;
          case "qs":
            throw new Error("'qs' is not a valid configuration option. Please use 'params' instead.");
          default:
            throw new Error(`'${key}' is not a valid configuration option.`);
        }
      });
    }
    async function metadataAccessor(type, options, noResponseRetries = 3, fastFail = false) {
      options = options || {};
      if (typeof options === "string") {
        options = { property: options };
      }
      let property = "";
      if (typeof options === "object" && options.property) {
        property = "/" + options.property;
      }
      validate(options);
      try {
        const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;
        const res = await requestMethod({
          url: `${getBaseUrl()}/${type}${property}`,
          headers: Object.assign({}, exports2.HEADERS, options.headers),
          retryConfig: { noResponseRetries },
          params: options.params,
          responseType: "text",
          timeout: requestTimeout()
        });
        if (res.headers[exports2.HEADER_NAME.toLowerCase()] !== exports2.HEADER_VALUE) {
          throw new Error(`Invalid response from metadata service: incorrect ${exports2.HEADER_NAME} header.`);
        } else if (!res.data) {
          throw new Error("Invalid response from the metadata service");
        }
        if (typeof res.data === "string") {
          try {
            return jsonBigint.parse(res.data);
          } catch (_a) {
          }
        }
        return res.data;
      } catch (e) {
        const err = e;
        if (err.response && err.response.status !== 200) {
          err.message = `Unsuccessful response status code. ${err.message}`;
        }
        throw e;
      }
    }
    async function fastFailMetadataRequest(options) {
      const secondaryOptions = {
        ...options,
        url: options.url.replace(getBaseUrl(), getBaseUrl(exports2.SECONDARY_HOST_ADDRESS))
      };
      let responded = false;
      const r1 = (0, gaxios_1.request)(options).then((res) => {
        responded = true;
        return res;
      }).catch((err) => {
        if (responded) {
          return r2;
        } else {
          responded = true;
          throw err;
        }
      });
      const r2 = (0, gaxios_1.request)(secondaryOptions).then((res) => {
        responded = true;
        return res;
      }).catch((err) => {
        if (responded) {
          return r1;
        } else {
          responded = true;
          throw err;
        }
      });
      return Promise.race([r1, r2]);
    }
    function instance(options) {
      return metadataAccessor("instance", options);
    }
    exports2.instance = instance;
    function project(options) {
      return metadataAccessor("project", options);
    }
    exports2.project = project;
    function detectGCPAvailableRetries() {
      return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;
    }
    var cachedIsAvailableResponse;
    async function isAvailable() {
      if (process.env.METADATA_SERVER_DETECTION) {
        const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();
        if (!(value in exports2.METADATA_SERVER_DETECTION)) {
          throw new RangeError(`Unknown \`METADATA_SERVER_DETECTION\` env variable. Got \`${value}\`, but it should be \`${Object.keys(exports2.METADATA_SERVER_DETECTION).join("`, `")}\`, or unset`);
        }
        switch (value) {
          case "assume-present":
            return true;
          case "none":
            return false;
          case "bios-only":
            return getGCPResidency();
          case "ping-only":
        }
      }
      try {
        if (cachedIsAvailableResponse === void 0) {
          cachedIsAvailableResponse = metadataAccessor(
            "instance",
            void 0,
            detectGCPAvailableRetries(),
            // If the default HOST_ADDRESS has been overridden, we should not
            // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in
            // a non-GCP environment):
            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST)
          );
        }
        await cachedIsAvailableResponse;
        return true;
      } catch (e) {
        const err = e;
        if (process.env.DEBUG_AUTH) {
          console.info(err);
        }
        if (err.type === "request-timeout") {
          return false;
        }
        if (err.response && err.response.status === 404) {
          return false;
        } else {
          if (!(err.response && err.response.status === 404) && // A warning is emitted if we see an unexpected err.code, or err.code
          // is not populated:
          (!err.code || ![
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "ENETUNREACH",
            "ENOENT",
            "ENOTFOUND",
            "ECONNREFUSED"
          ].includes(err.code))) {
            let code = "UNKNOWN";
            if (err.code)
              code = err.code;
            process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, "MetadataLookupWarning");
          }
          return false;
        }
      }
    }
    exports2.isAvailable = isAvailable;
    function resetIsAvailableCache() {
      cachedIsAvailableResponse = void 0;
    }
    exports2.resetIsAvailableCache = resetIsAvailableCache;
    exports2.gcpResidencyCache = null;
    function getGCPResidency() {
      if (exports2.gcpResidencyCache === null) {
        setGCPResidency();
      }
      return exports2.gcpResidencyCache;
    }
    exports2.getGCPResidency = getGCPResidency;
    function setGCPResidency(value = null) {
      exports2.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();
    }
    exports2.setGCPResidency = setGCPResidency;
    function requestTimeout() {
      return getGCPResidency() ? 0 : 3e3;
    }
    exports2.requestTimeout = requestTimeout;
    __exportStar(require_gcp_residency(), exports2);
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/google-auth-library/build/src/crypto/browser/crypto.js
var require_crypto = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/browser/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BrowserCrypto = void 0;
    var base64js = require_base64_js();
    var crypto_1 = require_crypto4();
    var BrowserCrypto = class {
      constructor() {
        if (typeof window === "undefined" || window.crypto === void 0 || window.crypto.subtle === void 0) {
          throw new Error("SubtleCrypto not found. Make sure it's an https:// website.");
        }
      }
      async sha256DigestBase64(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return base64js.fromByteArray(new Uint8Array(outputBuffer));
      }
      randomBytesBase64(count) {
        const array = new Uint8Array(count);
        window.crypto.getRandomValues(array);
        return base64js.fromByteArray(array);
      }
      static padBase64(base64) {
        while (base64.length % 4 !== 0) {
          base64 += "=";
        }
        return base64;
      }
      async verify(pubkey, data, signature) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const signatureArray = base64js.toByteArray(BrowserCrypto.padBase64(signature));
        const cryptoKey = await window.crypto.subtle.importKey("jwk", pubkey, algo, true, ["verify"]);
        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);
        return result;
      }
      async sign(privateKey, data) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const cryptoKey = await window.crypto.subtle.importKey("jwk", privateKey, algo, true, ["sign"]);
        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);
        return base64js.fromByteArray(new Uint8Array(result));
      }
      decodeBase64StringUtf8(base64) {
        const uint8array = base64js.toByteArray(BrowserCrypto.padBase64(base64));
        const result = new TextDecoder().decode(uint8array);
        return result;
      }
      encodeBase64StringUtf8(text) {
        const uint8array = new TextEncoder().encode(text);
        const result = base64js.fromByteArray(uint8array);
        return result;
      }
      /**
       * Computes the SHA-256 hash of the provided string.
       * @param str The plain text string to hash.
       * @return A promise that resolves with the SHA-256 hash of the provided
       *   string in hexadecimal encoding.
       */
      async sha256DigestHex(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);
      }
      /**
       * Computes the HMAC hash of a message using the provided crypto key and the
       * SHA-256 algorithm.
       * @param key The secret crypto key in utf-8 or ArrayBuffer format.
       * @param msg The plain text message.
       * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer
       *   format.
       */
      async signWithHmacSha256(key, msg) {
        const rawKey = typeof key === "string" ? key : String.fromCharCode(...new Uint16Array(key));
        const enc = new TextEncoder();
        const cryptoKey = await window.crypto.subtle.importKey("raw", enc.encode(rawKey), {
          name: "HMAC",
          hash: {
            name: "SHA-256"
          }
        }, false, ["sign"]);
        return window.crypto.subtle.sign("HMAC", cryptoKey, enc.encode(msg));
      }
    };
    exports2.BrowserCrypto = BrowserCrypto;
  }
});

// browser-external:crypto
var require_crypto2 = __commonJS({
  "browser-external:crypto"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/google-auth-library/build/src/crypto/node/crypto.js
var require_crypto3 = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/node/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeCrypto = void 0;
    var crypto2 = require_crypto2();
    var NodeCrypto = class {
      async sha256DigestBase64(str) {
        return crypto2.createHash("sha256").update(str).digest("base64");
      }
      randomBytesBase64(count) {
        return crypto2.randomBytes(count).toString("base64");
      }
      async verify(pubkey, data, signature) {
        const verifier = crypto2.createVerify("sha256");
        verifier.update(data);
        verifier.end();
        return verifier.verify(pubkey, signature, "base64");
      }
      async sign(privateKey, data) {
        const signer = crypto2.createSign("RSA-SHA256");
        signer.update(data);
        signer.end();
        return signer.sign(privateKey, "base64");
      }
      decodeBase64StringUtf8(base64) {
        return Buffer.from(base64, "base64").toString("utf-8");
      }
      encodeBase64StringUtf8(text) {
        return Buffer.from(text, "utf-8").toString("base64");
      }
      /**
       * Computes the SHA-256 hash of the provided string.
       * @param str The plain text string to hash.
       * @return A promise that resolves with the SHA-256 hash of the provided
       *   string in hexadecimal encoding.
       */
      async sha256DigestHex(str) {
        return crypto2.createHash("sha256").update(str).digest("hex");
      }
      /**
       * Computes the HMAC hash of a message using the provided crypto key and the
       * SHA-256 algorithm.
       * @param key The secret crypto key in utf-8 or ArrayBuffer format.
       * @param msg The plain text message.
       * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer
       *   format.
       */
      async signWithHmacSha256(key, msg) {
        const cryptoKey = typeof key === "string" ? key : toBuffer(key);
        return toArrayBuffer(crypto2.createHmac("sha256", cryptoKey).update(msg).digest());
      }
    };
    exports2.NodeCrypto = NodeCrypto;
    function toArrayBuffer(buffer) {
      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);
    }
    function toBuffer(arrayBuffer) {
      return Buffer.from(arrayBuffer);
    }
  }
});

// node_modules/google-auth-library/build/src/crypto/crypto.js
var require_crypto4 = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromArrayBufferToHex = exports2.hasBrowserCrypto = exports2.createCrypto = void 0;
    var crypto_1 = require_crypto();
    var crypto_2 = require_crypto3();
    function createCrypto() {
      if (hasBrowserCrypto()) {
        return new crypto_1.BrowserCrypto();
      }
      return new crypto_2.NodeCrypto();
    }
    exports2.createCrypto = createCrypto;
    function hasBrowserCrypto() {
      return typeof window !== "undefined" && typeof window.crypto !== "undefined" && typeof window.crypto.subtle !== "undefined";
    }
    exports2.hasBrowserCrypto = hasBrowserCrypto;
    function fromArrayBufferToHex(arrayBuffer) {
      const byteArray = Array.from(new Uint8Array(arrayBuffer));
      return byteArray.map((byte) => {
        return byte.toString(16).padStart(2, "0");
      }).join("");
    }
    exports2.fromArrayBufferToHex = fromArrayBufferToHex;
  }
});

// node_modules/google-auth-library/build/src/options.js
var require_options = __commonJS({
  "node_modules/google-auth-library/build/src/options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validate = void 0;
    function validate(options) {
      const vpairs = [
        { invalid: "uri", expected: "url" },
        { invalid: "json", expected: "data" },
        { invalid: "qs", expected: "params" }
      ];
      for (const pair of vpairs) {
        if (options[pair.invalid]) {
          const e = `'${pair.invalid}' is not a valid configuration option. Please use '${pair.expected}' instead. This library is using Axios for requests. Please see https://github.com/axios/axios to learn more about the valid request options.`;
          throw new Error(e);
        }
      }
    }
    exports2.validate = validate;
  }
});

// node_modules/google-auth-library/package.json
var require_package = __commonJS({
  "node_modules/google-auth-library/package.json"(exports2, module2) {
    module2.exports = {
      name: "google-auth-library",
      version: "9.0.0",
      author: "Google Inc.",
      description: "Google APIs Authentication Client Library for Node.js",
      engines: {
        node: ">=14"
      },
      main: "./build/src/index.js",
      types: "./build/src/index.d.ts",
      repository: "googleapis/google-auth-library-nodejs.git",
      keywords: [
        "google",
        "api",
        "google apis",
        "client",
        "client library"
      ],
      dependencies: {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        gaxios: "^6.0.0",
        "gcp-metadata": "^6.0.0",
        gtoken: "^7.0.0",
        jws: "^4.0.0",
        "lru-cache": "^6.0.0"
      },
      devDependencies: {
        "@compodoc/compodoc": "^1.1.7",
        "@types/base64-js": "^1.2.5",
        "@types/chai": "^4.1.7",
        "@types/jws": "^3.1.0",
        "@types/lru-cache": "^5.0.0",
        "@types/mocha": "^9.0.0",
        "@types/mv": "^2.1.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^20.4.2",
        "@types/sinon": "^10.0.0",
        "assert-rejects": "^1.0.0",
        c8: "^8.0.0",
        chai: "^4.2.0",
        codecov: "^3.0.2",
        execa: "^5.0.0",
        gts: "^3.1.1",
        "is-docker": "^2.0.0",
        karma: "^6.0.0",
        "karma-chrome-launcher": "^3.0.0",
        "karma-coverage": "^2.0.0",
        "karma-firefox-launcher": "^2.0.0",
        "karma-mocha": "^2.0.0",
        "karma-sourcemap-loader": "^0.4.0",
        "karma-webpack": "^5.0.0",
        keypair: "^1.0.4",
        linkinator: "^4.0.0",
        mocha: "^9.2.2",
        mv: "^2.1.1",
        ncp: "^2.0.0",
        nock: "^13.0.0",
        "null-loader": "^4.0.0",
        puppeteer: "^19.0.0",
        sinon: "^15.0.0",
        "ts-loader": "^8.0.0",
        typescript: "^5.1.6",
        webpack: "^5.21.2",
        "webpack-cli": "^4.0.0"
      },
      files: [
        "build/src",
        "!build/src/**/*.map"
      ],
      scripts: {
        test: "c8 mocha build/test",
        clean: "gts clean",
        prepare: "npm run compile",
        lint: "gts check",
        compile: "tsc -p .",
        fix: "gts fix",
        pretest: "npm run compile",
        docs: "compodoc src/",
        "samples-setup": "cd samples/ && npm link ../ && npm run setup && cd ../",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        "system-test": "mocha build/system-test --timeout 60000",
        "presystem-test": "npm run compile",
        webpack: "webpack",
        "browser-test": "karma start",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        prelint: "cd samples; npm link ../; npm install",
        precompile: "gts clean"
      },
      license: "Apache-2.0"
    };
  }
});

// node_modules/google-auth-library/build/src/transporters.js
var require_transporters = __commonJS({
  "node_modules/google-auth-library/build/src/transporters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultTransporter = void 0;
    var gaxios_1 = require_src3();
    var options_1 = require_options();
    var pkg = require_package();
    var PRODUCT_NAME = "google-api-nodejs-client";
    var DefaultTransporter = class {
      /**
       * Configures request options before making a request.
       * @param opts GaxiosOptions options.
       * @return Configured options.
       */
      configure(opts = {}) {
        opts.headers = opts.headers || {};
        if (typeof window === "undefined") {
          const uaValue = opts.headers["User-Agent"];
          if (!uaValue) {
            opts.headers["User-Agent"] = DefaultTransporter.USER_AGENT;
          } else if (!uaValue.includes(`${PRODUCT_NAME}/`)) {
            opts.headers["User-Agent"] = `${uaValue} ${DefaultTransporter.USER_AGENT}`;
          }
          if (!opts.headers["x-goog-api-client"]) {
            const nodeVersion = process.version.replace(/^v/, "");
            opts.headers["x-goog-api-client"] = `gl-node/${nodeVersion}`;
          }
        }
        return opts;
      }
      /**
       * Makes a request using Gaxios with given options.
       * @param opts GaxiosOptions options.
       * @param callback optional callback that contains GaxiosResponse object.
       * @return GaxiosPromise, assuming no callback is passed.
       */
      request(opts) {
        opts = this.configure(opts);
        (0, options_1.validate)(opts);
        return (0, gaxios_1.request)(opts).catch((e) => {
          throw this.processError(e);
        });
      }
      /**
       * Changes the error to include details from the body.
       */
      processError(e) {
        const res = e.response;
        const err = e;
        const body = res ? res.data : null;
        if (res && body && body.error && res.status !== 200) {
          if (typeof body.error === "string") {
            err.message = body.error;
            err.status = res.status;
          } else if (Array.isArray(body.error.errors)) {
            err.message = body.error.errors.map((err2) => err2.message).join("\n");
            err.code = body.error.code;
            err.errors = body.error.errors;
          } else {
            err.message = body.error.message;
            err.code = body.error.code;
          }
        } else if (res && res.status >= 400) {
          err.message = body;
          err.status = res.status;
        }
        return err;
      }
    };
    exports2.DefaultTransporter = DefaultTransporter;
    DefaultTransporter.USER_AGENT = `${PRODUCT_NAME}/${pkg.version}`;
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require_buffer();
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js
var require_param_bytes_for_alg = __commonJS({
  "node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js"(exports2, module2) {
    "use strict";
    function getParamSize(keySize) {
      var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
      return result;
    }
    var paramBytesForAlg = {
      ES256: getParamSize(256),
      ES384: getParamSize(384),
      ES512: getParamSize(521)
    };
    function getParamBytesForAlg(alg) {
      var paramBytes = paramBytesForAlg[alg];
      if (paramBytes) {
        return paramBytes;
      }
      throw new Error('Unknown algorithm "' + alg + '"');
    }
    module2.exports = getParamBytesForAlg;
  }
});

// node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js
var require_ecdsa_sig_formatter = __commonJS({
  "node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js"(exports2, module2) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var getParamBytesForAlg = require_param_bytes_for_alg();
    var MAX_OCTET = 128;
    var CLASS_UNIVERSAL = 0;
    var PRIMITIVE_BIT = 32;
    var TAG_SEQ = 16;
    var TAG_INT = 2;
    var ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;
    var ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
    function base64Url(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function signatureAsBuffer(signature) {
      if (Buffer2.isBuffer(signature)) {
        return signature;
      } else if ("string" === typeof signature) {
        return Buffer2.from(signature, "base64");
      }
      throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
    }
    function derToJose(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var maxEncodedParamLength = paramBytes + 1;
      var inputLength = signature.length;
      var offset = 0;
      if (signature[offset++] !== ENCODED_TAG_SEQ) {
        throw new Error('Could not find expected "seq"');
      }
      var seqLength = signature[offset++];
      if (seqLength === (MAX_OCTET | 1)) {
        seqLength = signature[offset++];
      }
      if (inputLength - offset < seqLength) {
        throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
      }
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "r"');
      }
      var rLength = signature[offset++];
      if (inputLength - offset - 2 < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
      }
      if (maxEncodedParamLength < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var rOffset = offset;
      offset += rLength;
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "s"');
      }
      var sLength = signature[offset++];
      if (inputLength - offset !== sLength) {
        throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
      }
      if (maxEncodedParamLength < sLength) {
        throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var sOffset = offset;
      offset += sLength;
      if (offset !== inputLength) {
        throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
      }
      var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
      var dst = Buffer2.allocUnsafe(rPadding + rLength + sPadding + sLength);
      for (offset = 0; offset < rPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
      offset = paramBytes;
      for (var o = offset; offset < o + sPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
      dst = dst.toString("base64");
      dst = base64Url(dst);
      return dst;
    }
    function countPadding(buf, start, stop) {
      var padding = 0;
      while (start + padding < stop && buf[start + padding] === 0) {
        ++padding;
      }
      var needsSign = buf[start + padding] >= MAX_OCTET;
      if (needsSign) {
        --padding;
      }
      return padding;
    }
    function joseToDer(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var signatureBytes = signature.length;
      if (signatureBytes !== paramBytes * 2) {
        throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
      }
      var rPadding = countPadding(signature, 0, paramBytes);
      var sPadding = countPadding(signature, paramBytes, signature.length);
      var rLength = paramBytes - rPadding;
      var sLength = paramBytes - sPadding;
      var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
      var shortLength = rsBytes < MAX_OCTET;
      var dst = Buffer2.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
      var offset = 0;
      dst[offset++] = ENCODED_TAG_SEQ;
      if (shortLength) {
        dst[offset++] = rsBytes;
      } else {
        dst[offset++] = MAX_OCTET | 1;
        dst[offset++] = rsBytes & 255;
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = rLength;
      if (rPadding < 0) {
        dst[offset++] = 0;
        offset += signature.copy(dst, offset, 0, paramBytes);
      } else {
        offset += signature.copy(dst, offset, rPadding, paramBytes);
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = sLength;
      if (sPadding < 0) {
        dst[offset++] = 0;
        signature.copy(dst, offset, paramBytes);
      } else {
        signature.copy(dst, offset, paramBytes + sPadding);
      }
      return dst;
    }
    module2.exports = {
      derToJose,
      joseToDer
    };
  }
});

// node_modules/google-auth-library/build/src/auth/authclient.js
var require_authclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/authclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthClient = void 0;
    var events_1 = require_events();
    var transporters_1 = require_transporters();
    var AuthClient = class extends events_1.EventEmitter {
      constructor() {
        super(...arguments);
        this.transporter = new transporters_1.DefaultTransporter();
        this.credentials = {};
        this.eagerRefreshThresholdMillis = 5 * 60 * 1e3;
        this.forceRefreshOnFailure = false;
      }
      /**
       * Sets the auth credentials.
       */
      setCredentials(credentials) {
        this.credentials = credentials;
      }
      /**
       * Append additional headers, e.g., x-goog-user-project, shared across the
       * classes inheriting AuthClient. This method should be used by any method
       * that overrides getRequestMetadataAsync(), which is a shared helper for
       * setting request information in both gRPC and HTTP API calls.
       *
       * @param headers object to append additional headers to.
       */
      addSharedMetadataHeaders(headers) {
        if (!headers["x-goog-user-project"] && // don't override a value the user sets.
        this.quotaProjectId) {
          headers["x-goog-user-project"] = this.quotaProjectId;
        }
        return headers;
      }
    };
    exports2.AuthClient = AuthClient;
  }
});

// node_modules/google-auth-library/build/src/auth/loginticket.js
var require_loginticket = __commonJS({
  "node_modules/google-auth-library/build/src/auth/loginticket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoginTicket = void 0;
    var LoginTicket = class {
      /**
       * Create a simple class to extract user ID from an ID Token
       *
       * @param {string} env Envelope of the jwt
       * @param {TokenPayload} pay Payload of the jwt
       * @constructor
       */
      constructor(env, pay) {
        this.envelope = env;
        this.payload = pay;
      }
      getEnvelope() {
        return this.envelope;
      }
      getPayload() {
        return this.payload;
      }
      /**
       * Create a simple class to extract user ID from an ID Token
       *
       * @return The user ID
       */
      getUserId() {
        const payload = this.getPayload();
        if (payload && payload.sub) {
          return payload.sub;
        }
        return null;
      }
      /**
       * Returns attributes from the login ticket.  This can contain
       * various information about the user session.
       *
       * @return The envelope and payload
       */
      getAttributes() {
        return { envelope: this.getEnvelope(), payload: this.getPayload() };
      }
    };
    exports2.LoginTicket = LoginTicket;
  }
});

// node_modules/google-auth-library/build/src/auth/oauth2client.js
var require_oauth2client = __commonJS({
  "node_modules/google-auth-library/build/src/auth/oauth2client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OAuth2Client = exports2.CertificateFormat = exports2.CodeChallengeMethod = void 0;
    var gaxios_1 = require_src3();
    var querystring = require_querystring();
    var stream = require_stream();
    var formatEcdsa = require_ecdsa_sig_formatter();
    var crypto_1 = require_crypto4();
    var authclient_1 = require_authclient();
    var loginticket_1 = require_loginticket();
    var CodeChallengeMethod;
    (function(CodeChallengeMethod2) {
      CodeChallengeMethod2["Plain"] = "plain";
      CodeChallengeMethod2["S256"] = "S256";
    })(CodeChallengeMethod || (exports2.CodeChallengeMethod = CodeChallengeMethod = {}));
    var CertificateFormat;
    (function(CertificateFormat2) {
      CertificateFormat2["PEM"] = "PEM";
      CertificateFormat2["JWK"] = "JWK";
    })(CertificateFormat || (exports2.CertificateFormat = CertificateFormat = {}));
    var OAuth2Client = class extends authclient_1.AuthClient {
      constructor(optionsOrClientId, clientSecret, redirectUri) {
        super();
        this.certificateCache = {};
        this.certificateExpiry = null;
        this.certificateCacheFormat = CertificateFormat.PEM;
        this.refreshTokenPromises = /* @__PURE__ */ new Map();
        const opts = optionsOrClientId && typeof optionsOrClientId === "object" ? optionsOrClientId : { clientId: optionsOrClientId, clientSecret, redirectUri };
        this._clientId = opts.clientId;
        this._clientSecret = opts.clientSecret;
        this.redirectUri = opts.redirectUri;
        this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis || 5 * 60 * 1e3;
        this.forceRefreshOnFailure = !!opts.forceRefreshOnFailure;
      }
      /**
       * Generates URL for consent page landing.
       * @param opts Options.
       * @return URL to consent page.
       */
      generateAuthUrl(opts = {}) {
        if (opts.code_challenge_method && !opts.code_challenge) {
          throw new Error("If a code_challenge_method is provided, code_challenge must be included.");
        }
        opts.response_type = opts.response_type || "code";
        opts.client_id = opts.client_id || this._clientId;
        opts.redirect_uri = opts.redirect_uri || this.redirectUri;
        if (Array.isArray(opts.scope)) {
          opts.scope = opts.scope.join(" ");
        }
        const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;
        return rootUrl + "?" + querystring.stringify(opts);
      }
      generateCodeVerifier() {
        throw new Error("generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.");
      }
      /**
       * Convenience method to automatically generate a code_verifier, and its
       * resulting SHA256. If used, this must be paired with a S256
       * code_challenge_method.
       *
       * For a full example see:
       * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js
       */
      async generateCodeVerifierAsync() {
        const crypto2 = (0, crypto_1.createCrypto)();
        const randomString = crypto2.randomBytesBase64(96);
        const codeVerifier = randomString.replace(/\+/g, "~").replace(/=/g, "_").replace(/\//g, "-");
        const unencodedCodeChallenge = await crypto2.sha256DigestBase64(codeVerifier);
        const codeChallenge = unencodedCodeChallenge.split("=")[0].replace(/\+/g, "-").replace(/\//g, "_");
        return { codeVerifier, codeChallenge };
      }
      getToken(codeOrOptions, callback) {
        const options = typeof codeOrOptions === "string" ? { code: codeOrOptions } : codeOrOptions;
        if (callback) {
          this.getTokenAsync(options).then((r) => callback(null, r.tokens, r.res), (e) => callback(e, null, e.response));
        } else {
          return this.getTokenAsync(options);
        }
      }
      async getTokenAsync(options) {
        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;
        const values = {
          code: options.code,
          client_id: options.client_id || this._clientId,
          client_secret: this._clientSecret,
          redirect_uri: options.redirect_uri || this.redirectUri,
          grant_type: "authorization_code",
          code_verifier: options.codeVerifier
        };
        const res = await this.transporter.request({
          method: "POST",
          url,
          data: querystring.stringify(values),
          headers: { "Content-Type": "application/x-www-form-urlencoded" }
        });
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      /**
       * Refreshes the access token.
       * @param refresh_token Existing refresh token.
       * @private
       */
      async refreshToken(refreshToken) {
        if (!refreshToken) {
          return this.refreshTokenNoCache(refreshToken);
        }
        if (this.refreshTokenPromises.has(refreshToken)) {
          return this.refreshTokenPromises.get(refreshToken);
        }
        const p = this.refreshTokenNoCache(refreshToken).then((r) => {
          this.refreshTokenPromises.delete(refreshToken);
          return r;
        }, (e) => {
          this.refreshTokenPromises.delete(refreshToken);
          throw e;
        });
        this.refreshTokenPromises.set(refreshToken, p);
        return p;
      }
      async refreshTokenNoCache(refreshToken) {
        var _a;
        if (!refreshToken) {
          throw new Error("No refresh token is set.");
        }
        const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;
        const data = {
          refresh_token: refreshToken,
          client_id: this._clientId,
          client_secret: this._clientSecret,
          grant_type: "refresh_token"
        };
        let res;
        try {
          res = await this.transporter.request({
            method: "POST",
            url,
            data: querystring.stringify(data),
            headers: { "Content-Type": "application/x-www-form-urlencoded" }
          });
        } catch (e) {
          if (e instanceof gaxios_1.GaxiosError && e.message === "invalid_grant" && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) && /ReAuth/i.test(e.response.data.error_description)) {
            e.message = JSON.stringify(e.response.data);
          }
          throw e;
        }
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      refreshAccessToken(callback) {
        if (callback) {
          this.refreshAccessTokenAsync().then((r) => callback(null, r.credentials, r.res), callback);
        } else {
          return this.refreshAccessTokenAsync();
        }
      }
      async refreshAccessTokenAsync() {
        const r = await this.refreshToken(this.credentials.refresh_token);
        const tokens = r.tokens;
        tokens.refresh_token = this.credentials.refresh_token;
        this.credentials = tokens;
        return { credentials: this.credentials, res: r.res };
      }
      getAccessToken(callback) {
        if (callback) {
          this.getAccessTokenAsync().then((r) => callback(null, r.token, r.res), callback);
        } else {
          return this.getAccessTokenAsync();
        }
      }
      async getAccessTokenAsync() {
        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();
        if (shouldRefresh) {
          if (!this.credentials.refresh_token) {
            if (this.refreshHandler) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
                this.setCredentials(refreshedAccessToken);
                return { token: this.credentials.access_token };
              }
            } else {
              throw new Error("No refresh token or refresh handler callback is set.");
            }
          }
          const r = await this.refreshAccessTokenAsync();
          if (!r.credentials || r.credentials && !r.credentials.access_token) {
            throw new Error("Could not refresh access token.");
          }
          return { token: r.credentials.access_token, res: r.res };
        } else {
          return { token: this.credentials.access_token };
        }
      }
      /**
       * The main authentication interface.  It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * In OAuth2Client, the result has the form:
       * { Authorization: 'Bearer <access_token_value>' }
       * @param url The optional url being authorized
       */
      async getRequestHeaders(url) {
        const headers = (await this.getRequestMetadataAsync(url)).headers;
        return headers;
      }
      async getRequestMetadataAsync(url) {
        const thisCreds = this.credentials;
        if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {
          throw new Error("No access, refresh token, API key or refresh handler callback is set.");
        }
        if (thisCreds.access_token && !this.isTokenExpiring()) {
          thisCreds.token_type = thisCreds.token_type || "Bearer";
          const headers2 = {
            Authorization: thisCreds.token_type + " " + thisCreds.access_token
          };
          return { headers: this.addSharedMetadataHeaders(headers2) };
        }
        if (this.refreshHandler) {
          const refreshedAccessToken = await this.processAndValidateRefreshHandler();
          if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
            this.setCredentials(refreshedAccessToken);
            const headers2 = {
              Authorization: "Bearer " + this.credentials.access_token
            };
            return { headers: this.addSharedMetadataHeaders(headers2) };
          }
        }
        if (this.apiKey) {
          return { headers: { "X-Goog-Api-Key": this.apiKey } };
        }
        let r = null;
        let tokens = null;
        try {
          r = await this.refreshToken(thisCreds.refresh_token);
          tokens = r.tokens;
        } catch (err) {
          const e = err;
          if (e.response && (e.response.status === 403 || e.response.status === 404)) {
            e.message = `Could not refresh access token: ${e.message}`;
          }
          throw e;
        }
        const credentials = this.credentials;
        credentials.token_type = credentials.token_type || "Bearer";
        tokens.refresh_token = credentials.refresh_token;
        this.credentials = tokens;
        const headers = {
          Authorization: credentials.token_type + " " + tokens.access_token
        };
        return { headers: this.addSharedMetadataHeaders(headers), res: r.res };
      }
      /**
       * Generates an URL to revoke the given token.
       * @param token The existing token to be revoked.
       */
      static getRevokeTokenUrl(token) {
        const parameters = querystring.stringify({ token });
        return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;
      }
      revokeToken(token, callback) {
        const opts = {
          url: OAuth2Client.getRevokeTokenUrl(token),
          method: "POST"
        };
        if (callback) {
          this.transporter.request(opts).then((r) => callback(null, r), callback);
        } else {
          return this.transporter.request(opts);
        }
      }
      revokeCredentials(callback) {
        if (callback) {
          this.revokeCredentialsAsync().then((res) => callback(null, res), callback);
        } else {
          return this.revokeCredentialsAsync();
        }
      }
      async revokeCredentialsAsync() {
        const token = this.credentials.access_token;
        this.credentials = {};
        if (token) {
          return this.revokeToken(token);
        } else {
          throw new Error("No access token to revoke.");
        }
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      async requestAsync(opts, retry = false) {
        let r2;
        try {
          const r = await this.getRequestMetadataAsync(opts.url);
          opts.headers = opts.headers || {};
          if (r.headers && r.headers["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = r.headers["x-goog-user-project"];
          }
          if (r.headers && r.headers.Authorization) {
            opts.headers.Authorization = r.headers.Authorization;
          }
          if (this.apiKey) {
            opts.headers["X-Goog-Api-Key"] = this.apiKey;
          }
          r2 = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);
            const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {
              await this.refreshAccessTokenAsync();
              return this.requestAsync(opts, true);
            } else if (!retry && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
                this.setCredentials(refreshedAccessToken);
              }
              return this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return r2;
      }
      verifyIdToken(options, callback) {
        if (callback && typeof callback !== "function") {
          throw new Error("This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.");
        }
        if (callback) {
          this.verifyIdTokenAsync(options).then((r) => callback(null, r), callback);
        } else {
          return this.verifyIdTokenAsync(options);
        }
      }
      async verifyIdTokenAsync(options) {
        if (!options.idToken) {
          throw new Error("The verifyIdToken method requires an ID Token");
        }
        const response = await this.getFederatedSignonCertsAsync();
        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);
        return login;
      }
      /**
       * Obtains information about the provisioned access token.  Especially useful
       * if you want to check the scopes that were provisioned to a given token.
       *
       * @param accessToken Required.  The Access Token for which you want to get
       * user info.
       */
      async getTokenInfo(accessToken) {
        const { data } = await this.transporter.request({
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            Authorization: `Bearer ${accessToken}`
          },
          url: OAuth2Client.GOOGLE_TOKEN_INFO_URL
        });
        const info = Object.assign({
          expiry_date: (/* @__PURE__ */ new Date()).getTime() + data.expires_in * 1e3,
          scopes: data.scope.split(" ")
        }, data);
        delete info.expires_in;
        delete info.scope;
        return info;
      }
      getFederatedSignonCerts(callback) {
        if (callback) {
          this.getFederatedSignonCertsAsync().then((r) => callback(null, r.certs, r.res), callback);
        } else {
          return this.getFederatedSignonCertsAsync();
        }
      }
      async getFederatedSignonCertsAsync() {
        const nowTime = (/* @__PURE__ */ new Date()).getTime();
        const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;
        if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {
          return { certs: this.certificateCache, format };
        }
        let res;
        let url;
        switch (format) {
          case CertificateFormat.PEM:
            url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;
            break;
          case CertificateFormat.JWK:
            url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        try {
          res = await this.transporter.request({ url });
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Failed to retrieve verification certificates: ${e.message}`;
          }
          throw e;
        }
        const cacheControl = res ? res.headers["cache-control"] : void 0;
        let cacheAge = -1;
        if (cacheControl) {
          const pattern = new RegExp("max-age=([0-9]*)");
          const regexResult = pattern.exec(cacheControl);
          if (regexResult && regexResult.length === 2) {
            cacheAge = Number(regexResult[1]) * 1e3;
          }
        }
        let certificates = {};
        switch (format) {
          case CertificateFormat.PEM:
            certificates = res.data;
            break;
          case CertificateFormat.JWK:
            for (const key of res.data.keys) {
              certificates[key.kid] = key;
            }
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        const now = /* @__PURE__ */ new Date();
        this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);
        this.certificateCache = certificates;
        this.certificateCacheFormat = format;
        return { certs: certificates, format, res };
      }
      getIapPublicKeys(callback) {
        if (callback) {
          this.getIapPublicKeysAsync().then((r) => callback(null, r.pubkeys, r.res), callback);
        } else {
          return this.getIapPublicKeysAsync();
        }
      }
      async getIapPublicKeysAsync() {
        let res;
        const url = OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_;
        try {
          res = await this.transporter.request({ url });
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Failed to retrieve verification certificates: ${e.message}`;
          }
          throw e;
        }
        return { pubkeys: res.data, res };
      }
      verifySignedJwtWithCerts() {
        throw new Error("verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.");
      }
      /**
       * Verify the id token is signed with the correct certificate
       * and is from the correct audience.
       * @param jwt The jwt to verify (The ID Token in this case).
       * @param certs The array of certs to test the jwt against.
       * @param requiredAudience The audience to test the jwt against.
       * @param issuers The allowed issuers of the jwt (Optional).
       * @param maxExpiry The max expiry the certificate can be (Optional).
       * @return Returns a promise resolving to LoginTicket on verification.
       */
      async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {
        const crypto2 = (0, crypto_1.createCrypto)();
        if (!maxExpiry) {
          maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;
        }
        const segments = jwt.split(".");
        if (segments.length !== 3) {
          throw new Error("Wrong number of segments in token: " + jwt);
        }
        const signed = segments[0] + "." + segments[1];
        let signature = segments[2];
        let envelope;
        let payload;
        try {
          envelope = JSON.parse(crypto2.decodeBase64StringUtf8(segments[0]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;
          }
          throw err;
        }
        if (!envelope) {
          throw new Error("Can't parse token envelope: " + segments[0]);
        }
        try {
          payload = JSON.parse(crypto2.decodeBase64StringUtf8(segments[1]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token payload '${segments[0]}`;
          }
          throw err;
        }
        if (!payload) {
          throw new Error("Can't parse token payload: " + segments[1]);
        }
        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {
          throw new Error("No pem found for envelope: " + JSON.stringify(envelope));
        }
        const cert = certs[envelope.kid];
        if (envelope.alg === "ES256") {
          signature = formatEcdsa.joseToDer(signature, "ES256").toString("base64");
        }
        const verified = await crypto2.verify(cert, signed, signature);
        if (!verified) {
          throw new Error("Invalid token signature: " + jwt);
        }
        if (!payload.iat) {
          throw new Error("No issue time in token: " + JSON.stringify(payload));
        }
        if (!payload.exp) {
          throw new Error("No expiration time in token: " + JSON.stringify(payload));
        }
        const iat = Number(payload.iat);
        if (isNaN(iat))
          throw new Error("iat field using invalid format");
        const exp = Number(payload.exp);
        if (isNaN(exp))
          throw new Error("exp field using invalid format");
        const now = (/* @__PURE__ */ new Date()).getTime() / 1e3;
        if (exp >= now + maxExpiry) {
          throw new Error("Expiration time too far in future: " + JSON.stringify(payload));
        }
        const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;
        const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;
        if (now < earliest) {
          throw new Error("Token used too early, " + now + " < " + earliest + ": " + JSON.stringify(payload));
        }
        if (now > latest) {
          throw new Error("Token used too late, " + now + " > " + latest + ": " + JSON.stringify(payload));
        }
        if (issuers && issuers.indexOf(payload.iss) < 0) {
          throw new Error("Invalid issuer, expected one of [" + issuers + "], but got " + payload.iss);
        }
        if (typeof requiredAudience !== "undefined" && requiredAudience !== null) {
          const aud = payload.aud;
          let audVerified = false;
          if (requiredAudience.constructor === Array) {
            audVerified = requiredAudience.indexOf(aud) > -1;
          } else {
            audVerified = aud === requiredAudience;
          }
          if (!audVerified) {
            throw new Error("Wrong recipient, payload audience != requiredAudience");
          }
        }
        return new loginticket_1.LoginTicket(envelope, payload);
      }
      /**
       * Returns a promise that resolves with AccessTokenResponse type if
       * refreshHandler is defined.
       * If not, nothing is returned.
       */
      async processAndValidateRefreshHandler() {
        if (this.refreshHandler) {
          const accessTokenResponse = await this.refreshHandler();
          if (!accessTokenResponse.access_token) {
            throw new Error("No access token is returned by the refreshHandler callback.");
          }
          return accessTokenResponse;
        }
        return;
      }
      /**
       * Returns true if a token is expired or will expire within
       * eagerRefreshThresholdMillismilliseconds.
       * If there is no expiry time, assumes the token is not expired or expiring.
       */
      isTokenExpiring() {
        const expiryDate = this.credentials.expiry_date;
        return expiryDate ? expiryDate <= (/* @__PURE__ */ new Date()).getTime() + this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.OAuth2Client = OAuth2Client;
    OAuth2Client.GOOGLE_TOKEN_INFO_URL = "https://oauth2.googleapis.com/tokeninfo";
    OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = "https://accounts.google.com/o/oauth2/v2/auth";
    OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = "https://oauth2.googleapis.com/token";
    OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = "https://oauth2.googleapis.com/revoke";
    OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = "https://www.googleapis.com/oauth2/v1/certs";
    OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = "https://www.googleapis.com/oauth2/v3/certs";
    OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_ = "https://www.gstatic.com/iap/verify/public_key";
    OAuth2Client.CLOCK_SKEW_SECS_ = 300;
    OAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;
    OAuth2Client.ISSUERS_ = [
      "accounts.google.com",
      "https://accounts.google.com"
    ];
  }
});

// node_modules/google-auth-library/build/src/auth/computeclient.js
var require_computeclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/computeclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Compute = void 0;
    var gaxios_1 = require_src3();
    var gcpMetadata = require_src4();
    var oauth2client_1 = require_oauth2client();
    var Compute = class extends oauth2client_1.OAuth2Client {
      /**
       * Google Compute Engine service account credentials.
       *
       * Retrieve access token from the metadata server.
       * See: https://developers.google.com/compute/docs/authentication
       */
      constructor(options = {}) {
        super(options);
        this.credentials = { expiry_date: 1, refresh_token: "compute-placeholder" };
        this.serviceAccountEmail = options.serviceAccountEmail || "default";
        this.scopes = Array.isArray(options.scopes) ? options.scopes : options.scopes ? [options.scopes] : [];
      }
      /**
       * Refreshes the access token.
       * @param refreshToken Unused parameter
       */
      async refreshTokenNoCache(refreshToken) {
        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;
        let data;
        try {
          const instanceOptions = {
            property: tokenPath
          };
          if (this.scopes.length > 0) {
            instanceOptions.params = {
              scopes: this.scopes.join(",")
            };
          }
          data = await gcpMetadata.instance(instanceOptions);
        } catch (e) {
          if (e instanceof gaxios_1.GaxiosError) {
            e.message = `Could not refresh access token: ${e.message}`;
            this.wrapError(e);
          }
          throw e;
        }
        const tokens = data;
        if (data && data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res: null };
      }
      /**
       * Fetches an ID token.
       * @param targetAudience the audience for the fetched ID token.
       */
      async fetchIdToken(targetAudience) {
        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity?format=full&audience=${targetAudience}`;
        let idToken;
        try {
          const instanceOptions = {
            property: idTokenPath
          };
          idToken = await gcpMetadata.instance(instanceOptions);
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Could not fetch ID token: ${e.message}`;
          }
          throw e;
        }
        return idToken;
      }
      wrapError(e) {
        const res = e.response;
        if (res && res.status) {
          e.status = res.status;
          if (res.status === 403) {
            e.message = "A Forbidden error was returned while attempting to retrieve an access token for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have the correct permission scopes specified: " + e.message;
          } else if (res.status === 404) {
            e.message = "A Not Found error was returned while attempting to retrieve an accesstoken for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have any permission scopes specified: " + e.message;
          }
        }
      }
    };
    exports2.Compute = Compute;
  }
});

// node_modules/google-auth-library/build/src/auth/idtokenclient.js
var require_idtokenclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/idtokenclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdTokenClient = void 0;
    var oauth2client_1 = require_oauth2client();
    var IdTokenClient = class extends oauth2client_1.OAuth2Client {
      /**
       * Google ID Token client
       *
       * Retrieve access token from the metadata server.
       * See: https://developers.google.com/compute/docs/authentication
       */
      constructor(options) {
        super();
        this.targetAudience = options.targetAudience;
        this.idTokenProvider = options.idTokenProvider;
      }
      async getRequestMetadataAsync(url) {
        if (!this.credentials.id_token || !this.credentials.expiry_date || this.isTokenExpiring()) {
          const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);
          this.credentials = {
            id_token: idToken,
            expiry_date: this.getIdTokenExpiryDate(idToken)
          };
        }
        const headers = {
          Authorization: "Bearer " + this.credentials.id_token
        };
        return { headers };
      }
      getIdTokenExpiryDate(idToken) {
        const payloadB64 = idToken.split(".")[1];
        if (payloadB64) {
          const payload = JSON.parse(Buffer.from(payloadB64, "base64").toString("ascii"));
          return payload.exp * 1e3;
        }
      }
    };
    exports2.IdTokenClient = IdTokenClient;
  }
});

// node_modules/google-auth-library/build/src/auth/envDetect.js
var require_envDetect = __commonJS({
  "node_modules/google-auth-library/build/src/auth/envDetect.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnv = exports2.clear = exports2.GCPEnv = void 0;
    var gcpMetadata = require_src4();
    var GCPEnv;
    (function(GCPEnv2) {
      GCPEnv2["APP_ENGINE"] = "APP_ENGINE";
      GCPEnv2["KUBERNETES_ENGINE"] = "KUBERNETES_ENGINE";
      GCPEnv2["CLOUD_FUNCTIONS"] = "CLOUD_FUNCTIONS";
      GCPEnv2["COMPUTE_ENGINE"] = "COMPUTE_ENGINE";
      GCPEnv2["CLOUD_RUN"] = "CLOUD_RUN";
      GCPEnv2["NONE"] = "NONE";
    })(GCPEnv || (exports2.GCPEnv = GCPEnv = {}));
    var envPromise;
    function clear() {
      envPromise = void 0;
    }
    exports2.clear = clear;
    async function getEnv() {
      if (envPromise) {
        return envPromise;
      }
      envPromise = getEnvMemoized();
      return envPromise;
    }
    exports2.getEnv = getEnv;
    async function getEnvMemoized() {
      let env = GCPEnv.NONE;
      if (isAppEngine()) {
        env = GCPEnv.APP_ENGINE;
      } else if (isCloudFunction()) {
        env = GCPEnv.CLOUD_FUNCTIONS;
      } else if (await isComputeEngine()) {
        if (await isKubernetesEngine()) {
          env = GCPEnv.KUBERNETES_ENGINE;
        } else if (isCloudRun()) {
          env = GCPEnv.CLOUD_RUN;
        } else {
          env = GCPEnv.COMPUTE_ENGINE;
        }
      } else {
        env = GCPEnv.NONE;
      }
      return env;
    }
    function isAppEngine() {
      return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);
    }
    function isCloudFunction() {
      return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);
    }
    function isCloudRun() {
      return !!process.env.K_CONFIGURATION;
    }
    async function isKubernetesEngine() {
      try {
        await gcpMetadata.instance("attributes/cluster-name");
        return true;
      } catch (e) {
        return false;
      }
    }
    async function isComputeEngine() {
      return gcpMetadata.isAvailable();
    }
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports2, module2) {
    module2.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({
  "node_modules/jws/lib/data-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var Stream = require_stream();
    var util = require_util();
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer2.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer2.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util.inherits(DataStream, Stream);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer2.concat([this.buffer, Buffer2.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  }
});

// node_modules/buffer-equal-constant-time/index.js
var require_buffer_equal_constant_time = __commonJS({
  "node_modules/buffer-equal-constant-time/index.js"(exports2, module2) {
    "use strict";
    var Buffer2 = require_buffer().Buffer;
    var SlowBuffer = require_buffer().SlowBuffer;
    module2.exports = bufferEq;
    function bufferEq(a, b) {
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      var c = 0;
      for (var i = 0; i < a.length; i++) {
        c |= a[i] ^ b[i];
      }
      return c === 0;
    }
    bufferEq.install = function() {
      Buffer2.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
        return bufferEq(this, that);
      };
    };
    var origBufEqual = Buffer2.prototype.equal;
    var origSlowBufEqual = SlowBuffer.prototype.equal;
    bufferEq.restore = function() {
      Buffer2.prototype.equal = origBufEqual;
      SlowBuffer.prototype.equal = origSlowBufEqual;
    };
  }
});

// node_modules/jwa/index.js
var require_jwa = __commonJS({
  "node_modules/jwa/index.js"(exports2, module2) {
    var bufferEqual = require_buffer_equal_constant_time();
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto2 = require_crypto2();
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util = require_util();
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto2.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i = 0; i < padding; ++i) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util.format.bind(util, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer2.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto2.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return bufferEqual(Buffer2.from(signature), Buffer2.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({
  "node_modules/jws/lib/tostring.js"(exports2, module2) {
    var Buffer2 = require_buffer().Buffer;
    module2.exports = function toString(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer2.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({
  "node_modules/jws/lib/sign-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require_stream();
    var toString = require_tostring();
    var util = require_util();
    function base64url(string, encoding) {
      return Buffer2.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString(header), "binary");
      var encodedPayload = base64url(toString(payload), encoding);
      return util.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util.inherits(SignStream, Stream);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  }
});

// node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({
  "node_modules/jws/lib/verify-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require_stream();
    var toString = require_tostring();
    var util = require_util();
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer2.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer2.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream, Stream);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  }
});

// node_modules/jws/index.js
var require_jws = __commonJS({
  "node_modules/jws/index.js"(exports2) {
    var SignStream = require_sign_stream();
    var VerifyStream = require_verify_stream();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports2.ALGORITHMS = ALGORITHMS;
    exports2.sign = SignStream.sign;
    exports2.verify = VerifyStream.verify;
    exports2.decode = VerifyStream.decode;
    exports2.isValid = VerifyStream.isValid;
    exports2.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports2.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  }
});

// node_modules/gtoken/build/src/index.js
var require_src5 = __commonJS({
  "node_modules/gtoken/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleToken = void 0;
    var fs = require_fs();
    var gaxios_1 = require_src3();
    var jws = require_jws();
    var path = require_path();
    var util_1 = require_util();
    var readFile = fs.readFile ? (0, util_1.promisify)(fs.readFile) : async () => {
      throw new ErrorWithCode("use key rather than keyFile.", "MISSING_CREDENTIALS");
    };
    var GOOGLE_TOKEN_URL = "https://www.googleapis.com/oauth2/v4/token";
    var GOOGLE_REVOKE_TOKEN_URL = "https://accounts.google.com/o/oauth2/revoke?token=";
    var ErrorWithCode = class extends Error {
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    var GoogleToken = class {
      get accessToken() {
        return this.rawToken ? this.rawToken.access_token : void 0;
      }
      get idToken() {
        return this.rawToken ? this.rawToken.id_token : void 0;
      }
      get tokenType() {
        return this.rawToken ? this.rawToken.token_type : void 0;
      }
      get refreshToken() {
        return this.rawToken ? this.rawToken.refresh_token : void 0;
      }
      /**
       * Create a GoogleToken.
       *
       * @param options  Configuration object.
       */
      constructor(options) {
        this.transporter = {
          request: (opts) => (0, gaxios_1.request)(opts)
        };
        this.configure(options);
      }
      /**
       * Returns whether the token has expired.
       *
       * @return true if the token has expired, false otherwise.
       */
      hasExpired() {
        const now = (/* @__PURE__ */ new Date()).getTime();
        if (this.rawToken && this.expiresAt) {
          return now >= this.expiresAt;
        } else {
          return true;
        }
      }
      /**
       * Returns whether the token will expire within eagerRefreshThresholdMillis
       *
       * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.
       */
      isTokenExpiring() {
        var _a;
        const now = (/* @__PURE__ */ new Date()).getTime();
        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;
        if (this.rawToken && this.expiresAt) {
          return this.expiresAt <= now + eagerRefreshThresholdMillis;
        } else {
          return true;
        }
      }
      getToken(callback, opts = {}) {
        if (typeof callback === "object") {
          opts = callback;
          callback = void 0;
        }
        opts = Object.assign({
          forceRefresh: false
        }, opts);
        if (callback) {
          const cb = callback;
          this.getTokenAsync(opts).then((t) => cb(null, t), callback);
          return;
        }
        return this.getTokenAsync(opts);
      }
      /**
       * Given a keyFile, extract the key and client email if available
       * @param keyFile Path to a json, pem, or p12 file that contains the key.
       * @returns an object with privateKey and clientEmail properties
       */
      async getCredentials(keyFile) {
        const ext = path.extname(keyFile);
        switch (ext) {
          case ".json": {
            const key = await readFile(keyFile, "utf8");
            const body = JSON.parse(key);
            const privateKey = body.private_key;
            const clientEmail = body.client_email;
            if (!privateKey || !clientEmail) {
              throw new ErrorWithCode("private_key and client_email are required.", "MISSING_CREDENTIALS");
            }
            return { privateKey, clientEmail };
          }
          case ".der":
          case ".crt":
          case ".pem": {
            const privateKey = await readFile(keyFile, "utf8");
            return { privateKey };
          }
          case ".p12":
          case ".pfx": {
            throw new ErrorWithCode("*.p12 certificates are not supported after v6.1.2. Consider utilizing *.json format or converting *.p12 to *.pem using the OpenSSL CLI.", "UNKNOWN_CERTIFICATE_TYPE");
          }
          default:
            throw new ErrorWithCode("Unknown certificate type. Type is determined based on file extension. Current supported extensions are *.json, and *.pem.", "UNKNOWN_CERTIFICATE_TYPE");
        }
      }
      async getTokenAsync(opts) {
        if (this.inFlightRequest && !opts.forceRefresh) {
          return this.inFlightRequest;
        }
        try {
          return await (this.inFlightRequest = this.getTokenAsyncInner(opts));
        } finally {
          this.inFlightRequest = void 0;
        }
      }
      async getTokenAsyncInner(opts) {
        if (this.isTokenExpiring() === false && opts.forceRefresh === false) {
          return Promise.resolve(this.rawToken);
        }
        if (!this.key && !this.keyFile) {
          throw new Error("No key or keyFile set.");
        }
        if (!this.key && this.keyFile) {
          const creds = await this.getCredentials(this.keyFile);
          this.key = creds.privateKey;
          this.iss = creds.clientEmail || this.iss;
          if (!creds.clientEmail) {
            this.ensureEmail();
          }
        }
        return this.requestToken();
      }
      ensureEmail() {
        if (!this.iss) {
          throw new ErrorWithCode("email is required.", "MISSING_CREDENTIALS");
        }
      }
      revokeToken(callback) {
        if (callback) {
          this.revokeTokenAsync().then(() => callback(), callback);
          return;
        }
        return this.revokeTokenAsync();
      }
      async revokeTokenAsync() {
        if (!this.accessToken) {
          throw new Error("No token to revoke.");
        }
        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;
        await this.transporter.request({ url });
        this.configure({
          email: this.iss,
          sub: this.sub,
          key: this.key,
          keyFile: this.keyFile,
          scope: this.scope,
          additionalClaims: this.additionalClaims
        });
      }
      /**
       * Configure the GoogleToken for re-use.
       * @param  {object} options Configuration object.
       */
      configure(options = {}) {
        this.keyFile = options.keyFile;
        this.key = options.key;
        this.rawToken = void 0;
        this.iss = options.email || options.iss;
        this.sub = options.sub;
        this.additionalClaims = options.additionalClaims;
        if (typeof options.scope === "object") {
          this.scope = options.scope.join(" ");
        } else {
          this.scope = options.scope;
        }
        this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;
        if (options.transporter) {
          this.transporter = options.transporter;
        }
      }
      /**
       * Request the token from Google.
       */
      async requestToken() {
        var _a, _b;
        const iat = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
        const additionalClaims = this.additionalClaims || {};
        const payload = Object.assign({
          iss: this.iss,
          scope: this.scope,
          aud: GOOGLE_TOKEN_URL,
          exp: iat + 3600,
          iat,
          sub: this.sub
        }, additionalClaims);
        const signedJWT = jws.sign({
          header: { alg: "RS256" },
          payload,
          secret: this.key
        });
        try {
          const r = await this.transporter.request({
            method: "POST",
            url: GOOGLE_TOKEN_URL,
            data: {
              grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
              assertion: signedJWT
            },
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            responseType: "json"
          });
          this.rawToken = r.data;
          this.expiresAt = r.data.expires_in === null || r.data.expires_in === void 0 ? void 0 : (iat + r.data.expires_in) * 1e3;
          return this.rawToken;
        } catch (e) {
          this.rawToken = void 0;
          this.tokenExpires = void 0;
          const body = e.response && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) ? (_b = e.response) === null || _b === void 0 ? void 0 : _b.data : {};
          if (body.error) {
            const desc = body.error_description ? `: ${body.error_description}` : "";
            e.message = `${body.error}${desc}`;
          }
          throw e;
        }
      }
    };
    exports2.GoogleToken = GoogleToken;
  }
});

// node_modules/google-auth-library/node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "node_modules/google-auth-library/node_modules/yallist/iterator.js"(exports2, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/google-auth-library/node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/google-auth-library/node_modules/yallist/yallist.js"(exports2, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/google-auth-library/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "node_modules/google-auth-library/node_modules/lru-cache/index.js"(exports2, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      // resize the cache when the max changes.
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      // resize the cache when the lengthCalculator changes.
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  }
});

// node_modules/google-auth-library/build/src/auth/jwtaccess.js
var require_jwtaccess = __commonJS({
  "node_modules/google-auth-library/build/src/auth/jwtaccess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWTAccess = void 0;
    var jws = require_jws();
    var LRU = require_lru_cache();
    var DEFAULT_HEADER = {
      alg: "RS256",
      typ: "JWT"
    };
    var JWTAccess = class {
      /**
       * JWTAccess service account credentials.
       *
       * Create a new access token by using the credential to create a new JWT token
       * that's recognized as the access token.
       *
       * @param email the service account email address.
       * @param key the private key that will be used to sign the token.
       * @param keyId the ID of the private key used to sign the token.
       */
      constructor(email, key, keyId, eagerRefreshThresholdMillis) {
        this.cache = new LRU({
          max: 500,
          maxAge: 60 * 60 * 1e3
        });
        this.email = email;
        this.key = key;
        this.keyId = keyId;
        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1e3;
      }
      /**
       * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url
       *
       * @param url The URI being authorized.
       * @param scopes The scope or scopes being authorized
       * @returns A string that returns the cached key.
       */
      getCachedKey(url, scopes) {
        let cacheKey = url;
        if (scopes && Array.isArray(scopes) && scopes.length) {
          cacheKey = url ? `${url}_${scopes.join("_")}` : `${scopes.join("_")}`;
        } else if (typeof scopes === "string") {
          cacheKey = url ? `${url}_${scopes}` : scopes;
        }
        if (!cacheKey) {
          throw Error("Scopes or url must be provided");
        }
        return cacheKey;
      }
      /**
       * Get a non-expired access token, after refreshing if necessary.
       *
       * @param url The URI being authorized.
       * @param additionalClaims An object with a set of additional claims to
       * include in the payload.
       * @returns An object that includes the authorization header.
       */
      getRequestHeaders(url, additionalClaims, scopes) {
        const key = this.getCachedKey(url, scopes);
        const cachedToken = this.cache.get(key);
        const now = Date.now();
        if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {
          return cachedToken.headers;
        }
        const iat = Math.floor(Date.now() / 1e3);
        const exp = JWTAccess.getExpirationTime(iat);
        let defaultClaims;
        if (Array.isArray(scopes)) {
          scopes = scopes.join(" ");
        }
        if (scopes) {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            scope: scopes,
            exp,
            iat
          };
        } else {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            aud: url,
            exp,
            iat
          };
        }
        if (additionalClaims) {
          for (const claim in defaultClaims) {
            if (additionalClaims[claim]) {
              throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);
            }
          }
        }
        const header = this.keyId ? { ...DEFAULT_HEADER, kid: this.keyId } : DEFAULT_HEADER;
        const payload = Object.assign(defaultClaims, additionalClaims);
        const signedJWT = jws.sign({ header, payload, secret: this.key });
        const headers = { Authorization: `Bearer ${signedJWT}` };
        this.cache.set(key, {
          expiration: exp * 1e3,
          headers
        });
        return headers;
      }
      /**
       * Returns an expiration time for the JWT token.
       *
       * @param iat The issued at time for the JWT.
       * @returns An expiration time for the JWT.
       */
      static getExpirationTime(iat) {
        const exp = iat + 3600;
        return exp;
      }
      /**
       * Create a JWTAccess credentials instance using the given input options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            reject(new Error("Must pass in a stream containing the service account auth settings."));
          }
          let s = "";
          inputStream.setEncoding("utf8").on("data", (chunk) => s += chunk).on("error", reject).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              resolve();
            } catch (err) {
              reject(err);
            }
          });
        });
      }
    };
    exports2.JWTAccess = JWTAccess;
  }
});

// node_modules/google-auth-library/build/src/auth/jwtclient.js
var require_jwtclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/jwtclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWT = void 0;
    var gtoken_1 = require_src5();
    var jwtaccess_1 = require_jwtaccess();
    var oauth2client_1 = require_oauth2client();
    var JWT = class extends oauth2client_1.OAuth2Client {
      constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {
        const opts = optionsOrEmail && typeof optionsOrEmail === "object" ? optionsOrEmail : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };
        super({
          eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
          forceRefreshOnFailure: opts.forceRefreshOnFailure
        });
        this.email = opts.email;
        this.keyFile = opts.keyFile;
        this.key = opts.key;
        this.keyId = opts.keyId;
        this.scopes = opts.scopes;
        this.subject = opts.subject;
        this.additionalClaims = opts.additionalClaims;
        this.credentials = { refresh_token: "jwt-placeholder", expiry_date: 1 };
      }
      /**
       * Creates a copy of the credential with the specified scopes.
       * @param scopes List of requested scopes or a single scope.
       * @return The cloned instance.
       */
      createScoped(scopes) {
        return new JWT({
          email: this.email,
          keyFile: this.keyFile,
          key: this.key,
          keyId: this.keyId,
          scopes,
          subject: this.subject,
          additionalClaims: this.additionalClaims
        });
      }
      /**
       * Obtains the metadata to be sent with the request.
       *
       * @param url the URI being authorized.
       */
      async getRequestMetadataAsync(url) {
        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;
        const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes();
        if (!this.apiKey && useSelfSignedJWT) {
          if (this.additionalClaims && this.additionalClaims.target_audience) {
            const { tokens } = await this.refreshToken();
            return {
              headers: this.addSharedMetadataHeaders({
                Authorization: `Bearer ${tokens.id_token}`
              })
            };
          } else {
            if (!this.access) {
              this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);
            }
            let scopes;
            if (this.hasUserScopes()) {
              scopes = this.scopes;
            } else if (!url) {
              scopes = this.defaultScopes;
            }
            const headers = await this.access.getRequestHeaders(
              url !== null && url !== void 0 ? url : void 0,
              this.additionalClaims,
              // Scopes take precedent over audience for signing,
              // so we only provide them if useJWTAccessWithScope is on
              this.useJWTAccessWithScope ? scopes : void 0
            );
            return { headers: this.addSharedMetadataHeaders(headers) };
          }
        } else if (this.hasAnyScopes() || this.apiKey) {
          return super.getRequestMetadataAsync(url);
        } else {
          return { headers: {} };
        }
      }
      /**
       * Fetches an ID token.
       * @param targetAudience the audience for the fetched ID token.
       */
      async fetchIdToken(targetAudience) {
        const gtoken = new gtoken_1.GoogleToken({
          iss: this.email,
          sub: this.subject,
          scope: this.scopes || this.defaultScopes,
          keyFile: this.keyFile,
          key: this.key,
          additionalClaims: { target_audience: targetAudience },
          transporter: this.transporter
        });
        await gtoken.getToken({
          forceRefresh: true
        });
        if (!gtoken.idToken) {
          throw new Error("Unknown error: Failed to fetch ID token");
        }
        return gtoken.idToken;
      }
      /**
       * Determine if there are currently scopes available.
       */
      hasUserScopes() {
        if (!this.scopes) {
          return false;
        }
        return this.scopes.length > 0;
      }
      /**
       * Are there any default or user scopes defined.
       */
      hasAnyScopes() {
        if (this.scopes && this.scopes.length > 0)
          return true;
        if (this.defaultScopes && this.defaultScopes.length > 0)
          return true;
        return false;
      }
      authorize(callback) {
        if (callback) {
          this.authorizeAsync().then((r) => callback(null, r), callback);
        } else {
          return this.authorizeAsync();
        }
      }
      async authorizeAsync() {
        const result = await this.refreshToken();
        if (!result) {
          throw new Error("No result returned");
        }
        this.credentials = result.tokens;
        this.credentials.refresh_token = "jwt-placeholder";
        this.key = this.gtoken.key;
        this.email = this.gtoken.iss;
        return result.tokens;
      }
      /**
       * Refreshes the access token.
       * @param refreshToken ignored
       * @private
       */
      async refreshTokenNoCache(refreshToken) {
        const gtoken = this.createGToken();
        const token = await gtoken.getToken({
          forceRefresh: this.isTokenExpiring()
        });
        const tokens = {
          access_token: token.access_token,
          token_type: "Bearer",
          expiry_date: gtoken.expiresAt,
          id_token: gtoken.idToken
        };
        this.emit("tokens", tokens);
        return { res: null, tokens };
      }
      /**
       * Create a gToken if it doesn't already exist.
       */
      createGToken() {
        if (!this.gtoken) {
          this.gtoken = new gtoken_1.GoogleToken({
            iss: this.email,
            sub: this.subject,
            scope: this.scopes || this.defaultScopes,
            keyFile: this.keyFile,
            key: this.key,
            additionalClaims: this.additionalClaims,
            transporter: this.transporter
          });
        }
        return this.gtoken;
      }
      /**
       * Create a JWT credentials instance using the given input options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
        this.quotaProjectId = json.quota_project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the service account auth settings.");
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              resolve();
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Creates a JWT credentials instance using an API Key for authentication.
       * @param apiKey The API Key in string form.
       */
      fromAPIKey(apiKey) {
        if (typeof apiKey !== "string") {
          throw new Error("Must provide an API Key string.");
        }
        this.apiKey = apiKey;
      }
      /**
       * Using the key or keyFile on the JWT client, obtain an object that contains
       * the key and the client email.
       */
      async getCredentials() {
        if (this.key) {
          return { private_key: this.key, client_email: this.email };
        } else if (this.keyFile) {
          const gtoken = this.createGToken();
          const creds = await gtoken.getCredentials(this.keyFile);
          return { private_key: creds.privateKey, client_email: creds.clientEmail };
        }
        throw new Error("A key or a keyFile must be provided to getCredentials.");
      }
    };
    exports2.JWT = JWT;
  }
});

// node_modules/google-auth-library/build/src/auth/refreshclient.js
var require_refreshclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/refreshclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserRefreshClient = exports2.USER_REFRESH_ACCOUNT_TYPE = void 0;
    var oauth2client_1 = require_oauth2client();
    exports2.USER_REFRESH_ACCOUNT_TYPE = "authorized_user";
    var UserRefreshClient = class extends oauth2client_1.OAuth2Client {
      constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {
        const opts = optionsOrClientId && typeof optionsOrClientId === "object" ? optionsOrClientId : {
          clientId: optionsOrClientId,
          clientSecret,
          refreshToken,
          eagerRefreshThresholdMillis,
          forceRefreshOnFailure
        };
        super({
          clientId: opts.clientId,
          clientSecret: opts.clientSecret,
          eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
          forceRefreshOnFailure: opts.forceRefreshOnFailure
        });
        this._refreshToken = opts.refreshToken;
        this.credentials.refresh_token = opts.refreshToken;
      }
      /**
       * Refreshes the access token.
       * @param refreshToken An ignored refreshToken..
       * @param callback Optional callback.
       */
      async refreshTokenNoCache(refreshToken) {
        return super.refreshTokenNoCache(this._refreshToken);
      }
      /**
       * Create a UserRefreshClient credentials instance using the given input
       * options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the user refresh token");
        }
        if (json.type !== "authorized_user") {
          throw new Error('The incoming JSON object does not have the "authorized_user" type');
        }
        if (!json.client_id) {
          throw new Error("The incoming JSON object does not contain a client_id field");
        }
        if (!json.client_secret) {
          throw new Error("The incoming JSON object does not contain a client_secret field");
        }
        if (!json.refresh_token) {
          throw new Error("The incoming JSON object does not contain a refresh_token field");
        }
        this._clientId = json.client_id;
        this._clientSecret = json.client_secret;
        this._refreshToken = json.refresh_token;
        this.credentials.refresh_token = json.refresh_token;
        this.quotaProjectId = json.quota_project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      async fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            return reject(new Error("Must pass in a stream containing the user refresh token."));
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              return resolve();
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
    };
    exports2.UserRefreshClient = UserRefreshClient;
  }
});

// node_modules/google-auth-library/build/src/auth/impersonated.js
var require_impersonated = __commonJS({
  "node_modules/google-auth-library/build/src/auth/impersonated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Impersonated = exports2.IMPERSONATED_ACCOUNT_TYPE = void 0;
    var oauth2client_1 = require_oauth2client();
    var gaxios_1 = require_src3();
    exports2.IMPERSONATED_ACCOUNT_TYPE = "impersonated_service_account";
    var Impersonated = class extends oauth2client_1.OAuth2Client {
      /**
       * Impersonated service account credentials.
       *
       * Create a new access token by impersonating another service account.
       *
       * Impersonated Credentials allowing credentials issued to a user or
       * service account to impersonate another. The source project using
       * Impersonated Credentials must enable the "IAMCredentials" API.
       * Also, the target service account must grant the orginating principal
       * the "Service Account Token Creator" IAM role.
       *
       * @param {object} options - The configuration object.
       * @param {object} [options.sourceClient] the source credential used as to
       * acquire the impersonated credentials.
       * @param {string} [options.targetPrincipal] the service account to
       * impersonate.
       * @param {string[]} [options.delegates] the chained list of delegates
       * required to grant the final access_token. If set, the sequence of
       * identities must have "Service Account Token Creator" capability granted to
       * the preceding identity. For example, if set to [serviceAccountB,
       * serviceAccountC], the sourceCredential must have the Token Creator role on
       * serviceAccountB. serviceAccountB must have the Token Creator on
       * serviceAccountC. Finally, C must have Token Creator on target_principal.
       * If left unset, sourceCredential must have that role on targetPrincipal.
       * @param {string[]} [options.targetScopes] scopes to request during the
       * authorization grant.
       * @param {number} [options.lifetime] number of seconds the delegated
       * credential should be valid for up to 3600 seconds by default, or 43,200
       * seconds by extending the token's lifetime, see:
       * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth
       * @param {string} [options.endpoint] api endpoint override.
       */
      constructor(options = {}) {
        var _a, _b, _c, _d, _e, _f;
        super(options);
        this.credentials = {
          expiry_date: 1,
          refresh_token: "impersonated-placeholder"
        };
        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();
        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : "";
        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];
        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];
        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;
        this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : "https://iamcredentials.googleapis.com";
      }
      /**
       * Refreshes the access token.
       * @param refreshToken Unused parameter
       */
      async refreshToken(refreshToken) {
        var _a, _b, _c, _d, _e, _f;
        try {
          await this.sourceClient.getAccessToken();
          const name = "projects/-/serviceAccounts/" + this.targetPrincipal;
          const u = `${this.endpoint}/v1/${name}:generateAccessToken`;
          const body = {
            delegates: this.delegates,
            scope: this.targetScopes,
            lifetime: this.lifetime + "s"
          };
          const res = await this.sourceClient.request({
            url: u,
            data: body,
            method: "POST"
          });
          const tokenResponse = res.data;
          this.credentials.access_token = tokenResponse.accessToken;
          this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);
          return {
            tokens: this.credentials,
            res
          };
        } catch (error) {
          if (!(error instanceof Error))
            throw error;
          let status = 0;
          let message = "";
          if (error instanceof gaxios_1.GaxiosError) {
            status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;
            message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;
          }
          if (status && message) {
            error.message = `${status}: unable to impersonate: ${message}`;
            throw error;
          } else {
            error.message = `unable to impersonate: ${error}`;
            throw error;
          }
        }
      }
      /**
       * Generates an OpenID Connect ID token for a service account.
       *
       * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken Reference Documentation}
       *
       * @param targetAudience the audience for the fetched ID token.
       * @param options the for the request
       * @return an OpenID Connect ID token
       */
      async fetchIdToken(targetAudience, options) {
        var _a;
        await this.sourceClient.getAccessToken();
        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;
        const u = `${this.endpoint}/v1/${name}:generateIdToken`;
        const body = {
          delegates: this.delegates,
          audience: targetAudience,
          includeEmail: (_a = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _a !== void 0 ? _a : true
        };
        const res = await this.sourceClient.request({
          url: u,
          data: body,
          method: "POST"
        });
        return res.data.token;
      }
    };
    exports2.Impersonated = Impersonated;
  }
});

// node_modules/google-auth-library/build/src/auth/oauth2common.js
var require_oauth2common = __commonJS({
  "node_modules/google-auth-library/build/src/auth/oauth2common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorFromOAuthErrorResponse = exports2.OAuthClientAuthHandler = void 0;
    var querystring = require_querystring();
    var crypto_1 = require_crypto4();
    var METHODS_SUPPORTING_REQUEST_BODY = ["PUT", "POST", "PATCH"];
    var OAuthClientAuthHandler = class {
      /**
       * Instantiates an OAuth client authentication handler.
       * @param clientAuthentication The client auth credentials.
       */
      constructor(clientAuthentication) {
        this.clientAuthentication = clientAuthentication;
        this.crypto = (0, crypto_1.createCrypto)();
      }
      /**
       * Applies client authentication on the OAuth request's headers or POST
       * body but does not process the request.
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       * @param bearerToken The optional bearer token to use for authentication.
       *   When this is used, no client authentication credentials are needed.
       */
      applyClientAuthenticationOptions(opts, bearerToken) {
        this.injectAuthenticatedHeaders(opts, bearerToken);
        if (!bearerToken) {
          this.injectAuthenticatedRequestBody(opts);
        }
      }
      /**
       * Applies client authentication on the request's header if either
       * basic authentication or bearer token authentication is selected.
       *
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       * @param bearerToken The optional bearer token to use for authentication.
       *   When this is used, no client authentication credentials are needed.
       */
      injectAuthenticatedHeaders(opts, bearerToken) {
        var _a;
        if (bearerToken) {
          opts.headers = opts.headers || {};
          Object.assign(opts.headers, {
            Authorization: `Bearer ${bearerToken}}`
          });
        } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === "basic") {
          opts.headers = opts.headers || {};
          const clientId = this.clientAuthentication.clientId;
          const clientSecret = this.clientAuthentication.clientSecret || "";
          const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);
          Object.assign(opts.headers, {
            Authorization: `Basic ${base64EncodedCreds}`
          });
        }
      }
      /**
       * Applies client authentication on the request's body if request-body
       * client authentication is selected.
       *
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       */
      injectAuthenticatedRequestBody(opts) {
        var _a;
        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === "request-body") {
          const method = (opts.method || "GET").toUpperCase();
          if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {
            let contentType;
            const headers = opts.headers || {};
            for (const key in headers) {
              if (key.toLowerCase() === "content-type" && headers[key]) {
                contentType = headers[key].toLowerCase();
                break;
              }
            }
            if (contentType === "application/x-www-form-urlencoded") {
              opts.data = opts.data || "";
              const data = querystring.parse(opts.data);
              Object.assign(data, {
                client_id: this.clientAuthentication.clientId,
                client_secret: this.clientAuthentication.clientSecret || ""
              });
              opts.data = querystring.stringify(data);
            } else if (contentType === "application/json") {
              opts.data = opts.data || {};
              Object.assign(opts.data, {
                client_id: this.clientAuthentication.clientId,
                client_secret: this.clientAuthentication.clientSecret || ""
              });
            } else {
              throw new Error(`${contentType} content-types are not supported with ${this.clientAuthentication.confidentialClientType} client authentication`);
            }
          } else {
            throw new Error(`${method} HTTP method does not support ${this.clientAuthentication.confidentialClientType} client authentication`);
          }
        }
      }
    };
    exports2.OAuthClientAuthHandler = OAuthClientAuthHandler;
    function getErrorFromOAuthErrorResponse(resp, err) {
      const errorCode = resp.error;
      const errorDescription = resp.error_description;
      const errorUri = resp.error_uri;
      let message = `Error code ${errorCode}`;
      if (typeof errorDescription !== "undefined") {
        message += `: ${errorDescription}`;
      }
      if (typeof errorUri !== "undefined") {
        message += ` - ${errorUri}`;
      }
      const newError = new Error(message);
      if (err) {
        const keys = Object.keys(err);
        if (err.stack) {
          keys.push("stack");
        }
        keys.forEach((key) => {
          if (key !== "message") {
            Object.defineProperty(newError, key, {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              value: err[key],
              writable: false,
              enumerable: true
            });
          }
        });
      }
      return newError;
    }
    exports2.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;
  }
});

// node_modules/google-auth-library/build/src/auth/stscredentials.js
var require_stscredentials = __commonJS({
  "node_modules/google-auth-library/build/src/auth/stscredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StsCredentials = void 0;
    var gaxios_1 = require_src3();
    var querystring = require_querystring();
    var transporters_1 = require_transporters();
    var oauth2common_1 = require_oauth2common();
    var StsCredentials = class extends oauth2common_1.OAuthClientAuthHandler {
      /**
       * Initializes an STS credentials instance.
       * @param tokenExchangeEndpoint The token exchange endpoint.
       * @param clientAuthentication The client authentication credentials if
       *   available.
       */
      constructor(tokenExchangeEndpoint, clientAuthentication) {
        super(clientAuthentication);
        this.tokenExchangeEndpoint = tokenExchangeEndpoint;
        this.transporter = new transporters_1.DefaultTransporter();
      }
      /**
       * Exchanges the provided token for another type of token based on the
       * rfc8693 spec.
       * @param stsCredentialsOptions The token exchange options used to populate
       *   the token exchange request.
       * @param additionalHeaders Optional additional headers to pass along the
       *   request.
       * @param options Optional additional GCP-specific non-spec defined options
       *   to send with the request.
       *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`
       * @return A promise that resolves with the token exchange response containing
       *   the requested token and its expiration time.
       */
      async exchangeToken(stsCredentialsOptions, additionalHeaders, options) {
        var _a, _b, _c;
        const values = {
          grant_type: stsCredentialsOptions.grantType,
          resource: stsCredentialsOptions.resource,
          audience: stsCredentialsOptions.audience,
          scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(" "),
          requested_token_type: stsCredentialsOptions.requestedTokenType,
          subject_token: stsCredentialsOptions.subjectToken,
          subject_token_type: stsCredentialsOptions.subjectTokenType,
          actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,
          actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,
          // Non-standard GCP-specific options.
          options: options && JSON.stringify(options)
        };
        Object.keys(values).forEach((key) => {
          if (typeof values[key] === "undefined") {
            delete values[key];
          }
        });
        const headers = {
          "Content-Type": "application/x-www-form-urlencoded"
        };
        Object.assign(headers, additionalHeaders || {});
        const opts = {
          url: this.tokenExchangeEndpoint,
          method: "POST",
          headers,
          data: querystring.stringify(values),
          responseType: "json"
        };
        this.applyClientAuthenticationOptions(opts);
        try {
          const response = await this.transporter.request(opts);
          const stsSuccessfulResponse = response.data;
          stsSuccessfulResponse.res = response;
          return stsSuccessfulResponse;
        } catch (error) {
          if (error instanceof gaxios_1.GaxiosError && error.response) {
            throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(
              error.response.data,
              // Preserve other fields from the original error.
              error
            );
          }
          throw error;
        }
      }
    };
    exports2.StsCredentials = StsCredentials;
  }
});

// node_modules/google-auth-library/build/src/auth/baseexternalclient.js
var require_baseexternalclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/baseexternalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseExternalAccountClient = exports2.CLOUD_RESOURCE_MANAGER = exports2.EXTERNAL_ACCOUNT_TYPE = exports2.EXPIRATION_TIME_OFFSET = void 0;
    var stream = require_stream();
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var DEFAULT_OAUTH_SCOPE = "https://www.googleapis.com/auth/cloud-platform";
    var DEFAULT_TOKEN_LIFESPAN = 3600;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    exports2.EXTERNAL_ACCOUNT_TYPE = "external_account";
    exports2.CLOUD_RESOURCE_MANAGER = "https://cloudresourcemanager.googleapis.com/v1/projects/";
    var WORKFORCE_AUDIENCE_PATTERN = "//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+";
    var BaseExternalAccountClient = class extends authclient_1.AuthClient {
      /**
       * Instantiate a BaseExternalAccountClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        var _a, _b;
        super();
        if (options.type !== exports2.EXTERNAL_ACCOUNT_TYPE) {
          throw new Error(`Expected "${exports2.EXTERNAL_ACCOUNT_TYPE}" type but received "${options.type}"`);
        }
        this.clientAuth = options.client_id ? {
          confidentialClientType: "basic",
          clientId: options.client_id,
          clientSecret: options.client_secret
        } : void 0;
        this.stsCredential = new sts.StsCredentials(options.token_url, this.clientAuth);
        this.scopes = [DEFAULT_OAUTH_SCOPE];
        this.cachedAccessToken = null;
        this.audience = options.audience;
        this.subjectTokenType = options.subject_token_type;
        this.quotaProjectId = options.quota_project_id;
        this.workforcePoolUserProject = options.workforce_pool_user_project;
        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);
        if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {
          throw new Error("workforcePoolUserProject should not be set for non-workforce pool credentials.");
        }
        this.serviceAccountImpersonationUrl = options.service_account_impersonation_url;
        this.serviceAccountImpersonationLifetime = (_b = (_a = options.service_account_impersonation) === null || _a === void 0 ? void 0 : _a.token_lifetime_seconds) !== null && _b !== void 0 ? _b : DEFAULT_TOKEN_LIFESPAN;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = exports2.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
        this.projectId = null;
        this.projectNumber = this.getProjectNumber(this.audience);
        this.universeDomain = options.universe_domain;
      }
      /** The service account email to be impersonated, if available. */
      getServiceAccountEmail() {
        var _a;
        if (this.serviceAccountImpersonationUrl) {
          const re = /serviceAccounts\/(?<email>[^:]+):generateAccessToken$/;
          const result = re.exec(this.serviceAccountImpersonationUrl);
          return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;
        }
        return null;
      }
      /**
       * Provides a mechanism to inject GCP access tokens directly.
       * When the provided credential expires, a new credential, using the
       * external account options, is retrieved.
       * @param credentials The Credentials object to set on the current client.
       */
      setCredentials(credentials) {
        super.setCredentials(credentials);
        this.cachedAccessToken = credentials;
      }
      /**
       * @return A promise that resolves with the current GCP access token
       *   response. If the current credential is expired, a new one is retrieved.
       */
      async getAccessToken() {
        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedAccessToken.access_token,
          res: this.cachedAccessToken.res
        };
      }
      /**
       * The main authentication interface. It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * The result has the form:
       * { Authorization: 'Bearer <access_token_value>' }
       */
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * @return A promise that resolves with the project ID corresponding to the
       *   current workload identity pool or current workforce pool if
       *   determinable. For workforce pool credential, it returns the project ID
       *   corresponding to the workforcePoolUserProject.
       *   This is introduced to match the current pattern of using the Auth
       *   library:
       *   const projectId = await auth.getProjectId();
       *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;
       *   const res = await client.request({ url });
       *   The resource may not have permission
       *   (resourcemanager.projects.get) to call this API or the required
       *   scopes may not be selected:
       *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes
       */
      async getProjectId() {
        const projectNumber = this.projectNumber || this.workforcePoolUserProject;
        if (this.projectId) {
          return this.projectId;
        } else if (projectNumber) {
          const headers = await this.getRequestHeaders();
          const response = await this.transporter.request({
            headers,
            url: `${exports2.CLOUD_RESOURCE_MANAGER}${projectNumber}`,
            responseType: "json"
          });
          this.projectId = response.data.projectId;
          return this.projectId;
        }
        return null;
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param retry Whether the current attempt is a retry after a failed attempt.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * External credentials are exchanged for GCP access tokens via the token
       * exchange endpoint and other settings provided in the client options
       * object.
       * If the service_account_impersonation_url is provided, an additional
       * step to exchange the external account GCP access token for a service
       * account impersonated token is performed.
       * @return A promise that resolves with the fresh GCP access tokens.
       */
      async refreshAccessTokenAsync() {
        const subjectToken = await this.retrieveSubjectToken();
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          audience: this.audience,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: this.subjectTokenType,
          // generateAccessToken requires the provided access token to have
          // scopes:
          // https://www.googleapis.com/auth/iam or
          // https://www.googleapis.com/auth/cloud-platform
          // The new service account access token scopes will match the user
          // provided ones.
          scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()
        };
        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? { userProject: this.workforcePoolUserProject } : void 0;
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, void 0, additionalOptions);
        if (this.serviceAccountImpersonationUrl) {
          this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);
        } else if (stsResponse.expires_in) {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            expiry_date: (/* @__PURE__ */ new Date()).getTime() + stsResponse.expires_in * 1e3,
            res: stsResponse.res
          };
        } else {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            res: stsResponse.res
          };
        }
        this.credentials = {};
        Object.assign(this.credentials, this.cachedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedAccessToken.expiry_date,
          access_token: this.cachedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedAccessToken;
      }
      /**
       * Returns the workload identity pool project number if it is determinable
       * from the audience resource name.
       * @param audience The STS audience used to determine the project number.
       * @return The project number associated with the workload identity pool, if
       *   this can be determined from the STS audience field. Otherwise, null is
       *   returned.
       */
      getProjectNumber(audience) {
        const match = audience.match(/\/projects\/([^/]+)/);
        if (!match) {
          return null;
        }
        return match[1];
      }
      /**
       * Exchanges an external account GCP access token for a service
       * account impersonated access token using iamcredentials
       * GenerateAccessToken API.
       * @param token The access token to exchange for a service account access
       *   token.
       * @return A promise that resolves with the service account impersonated
       *   credentials response.
       */
      async getImpersonatedAccessToken(token) {
        const opts = {
          url: this.serviceAccountImpersonationUrl,
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
          },
          data: {
            scope: this.getScopesArray(),
            lifetime: this.serviceAccountImpersonationLifetime + "s"
          },
          responseType: "json"
        };
        const response = await this.transporter.request(opts);
        const successResponse = response.data;
        return {
          access_token: successResponse.accessToken,
          // Convert from ISO format to timestamp.
          expiry_date: new Date(successResponse.expireTime).getTime(),
          res: response
        };
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param accessToken The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(accessToken) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
      /**
       * @return The list of scopes for the requested GCP access token.
       */
      getScopesArray() {
        if (typeof this.scopes === "string") {
          return [this.scopes];
        } else if (typeof this.scopes === "undefined") {
          return [DEFAULT_OAUTH_SCOPE];
        } else {
          return this.scopes;
        }
      }
    };
    exports2.BaseExternalAccountClient = BaseExternalAccountClient;
  }
});

// node_modules/google-auth-library/build/src/auth/identitypoolclient.js
var require_identitypoolclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/identitypoolclient.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdentityPoolClient = void 0;
    var fs = require_fs();
    var util_1 = require_util();
    var baseexternalclient_1 = require_baseexternalclient();
    var readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : () => {
    });
    var realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : () => {
    });
    var lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : () => {
    });
    var IdentityPoolClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      /**
       * Instantiate an IdentityPoolClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid file-sourced or
       * url-sourced credential or a workforce pool user project is provided
       * with a non workforce audience.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        var _a2, _b2;
        super(options, additionalOptions);
        this.file = options.credential_source.file;
        this.url = options.credential_source.url;
        this.headers = options.credential_source.headers;
        if (!this.file && !this.url) {
          throw new Error('No valid Identity Pool "credential_source" provided');
        }
        this.formatType = ((_a2 = options.credential_source.format) === null || _a2 === void 0 ? void 0 : _a2.type) || "text";
        this.formatSubjectTokenFieldName = (_b2 = options.credential_source.format) === null || _b2 === void 0 ? void 0 : _b2.subject_token_field_name;
        if (this.formatType !== "json" && this.formatType !== "text") {
          throw new Error(`Invalid credential_source format "${this.formatType}"`);
        }
        if (this.formatType === "json" && !this.formatSubjectTokenFieldName) {
          throw new Error("Missing subject_token_field_name for JSON credential_source format");
        }
      }
      /**
       * Triggered when a external subject token is needed to be exchanged for a GCP
       * access token via GCP STS endpoint.
       * This uses the `options.credential_source` object to figure out how
       * to retrieve the token using the current environment. In this case,
       * this either retrieves the local credential from a file location (k8s
       * workload) or by sending a GET request to a local metadata server (Azure
       * workloads).
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (this.file) {
          return await this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);
        }
        return await this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);
      }
      /**
       * Looks up the external subject token in the file path provided and
       * resolves with that token.
       * @param file The file path where the external credential is located.
       * @param formatType The token file or URL response type (JSON or text).
       * @param formatSubjectTokenFieldName For JSON response types, this is the
       *   subject_token field name. For Azure, this is access_token. For text
       *   response types, this is ignored.
       * @return A promise that resolves with the external subject token.
       */
      async getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {
        try {
          filePath = await realpath(filePath);
          if (!(await lstat(filePath)).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        let subjectToken;
        const rawText = await readFile(filePath, { encoding: "utf8" });
        if (formatType === "text") {
          subjectToken = rawText;
        } else if (formatType === "json" && formatSubjectTokenFieldName) {
          const json = JSON.parse(rawText);
          subjectToken = json[formatSubjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source file");
        }
        return subjectToken;
      }
      /**
       * Sends a GET request to the URL provided and resolves with the returned
       * external subject token.
       * @param url The URL to call to retrieve the subject token. This is typically
       *   a local metadata server.
       * @param formatType The token file or URL response type (JSON or text).
       * @param formatSubjectTokenFieldName For JSON response types, this is the
       *   subject_token field name. For Azure, this is access_token. For text
       *   response types, this is ignored.
       * @param headers The optional additional headers to send with the request to
       *   the metadata server url.
       * @return A promise that resolves with the external subject token.
       */
      async getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {
        const opts = {
          url,
          method: "GET",
          headers,
          responseType: formatType
        };
        let subjectToken;
        if (formatType === "text") {
          const response = await this.transporter.request(opts);
          subjectToken = response.data;
        } else if (formatType === "json" && formatSubjectTokenFieldName) {
          const response = await this.transporter.request(opts);
          subjectToken = response.data[formatSubjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source URL");
        }
        return subjectToken;
      }
    };
    exports2.IdentityPoolClient = IdentityPoolClient;
  }
});

// node_modules/google-auth-library/build/src/auth/awsrequestsigner.js
var require_awsrequestsigner = __commonJS({
  "node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsRequestSigner = void 0;
    var crypto_1 = require_crypto4();
    var AWS_ALGORITHM = "AWS4-HMAC-SHA256";
    var AWS_REQUEST_TYPE = "aws4_request";
    var AwsRequestSigner = class {
      /**
       * Instantiates an AWS API request signer used to send authenticated signed
       * requests to AWS APIs based on the AWS Signature Version 4 signing process.
       * This also provides a mechanism to generate the signed request without
       * sending it.
       * @param getCredentials A mechanism to retrieve AWS security credentials
       *   when needed.
       * @param region The AWS region to use.
       */
      constructor(getCredentials, region) {
        this.getCredentials = getCredentials;
        this.region = region;
        this.crypto = (0, crypto_1.createCrypto)();
      }
      /**
       * Generates the signed request for the provided HTTP request for calling
       * an AWS API. This follows the steps described at:
       * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html
       * @param amzOptions The AWS request options that need to be signed.
       * @return A promise that resolves with the GaxiosOptions containing the
       *   signed HTTP request parameters.
       */
      async getRequestOptions(amzOptions) {
        if (!amzOptions.url) {
          throw new Error('"url" is required in "amzOptions"');
        }
        const requestPayloadData = typeof amzOptions.data === "object" ? JSON.stringify(amzOptions.data) : amzOptions.data;
        const url = amzOptions.url;
        const method = amzOptions.method || "GET";
        const requestPayload = amzOptions.body || requestPayloadData;
        const additionalAmzHeaders = amzOptions.headers;
        const awsSecurityCredentials = await this.getCredentials();
        const uri = new URL(url);
        const headerMap = await generateAuthenticationHeaderMap({
          crypto: this.crypto,
          host: uri.host,
          canonicalUri: uri.pathname,
          canonicalQuerystring: uri.search.substr(1),
          method,
          region: this.region,
          securityCredentials: awsSecurityCredentials,
          requestPayload,
          additionalAmzHeaders
        });
        const headers = Object.assign(
          // Add x-amz-date if available.
          headerMap.amzDate ? { "x-amz-date": headerMap.amzDate } : {},
          {
            Authorization: headerMap.authorizationHeader,
            host: uri.host
          },
          additionalAmzHeaders || {}
        );
        if (awsSecurityCredentials.token) {
          Object.assign(headers, {
            "x-amz-security-token": awsSecurityCredentials.token
          });
        }
        const awsSignedReq = {
          url,
          method,
          headers
        };
        if (typeof requestPayload !== "undefined") {
          awsSignedReq.body = requestPayload;
        }
        return awsSignedReq;
      }
    };
    exports2.AwsRequestSigner = AwsRequestSigner;
    async function sign(crypto2, key, msg) {
      return await crypto2.signWithHmacSha256(key, msg);
    }
    async function getSigningKey(crypto2, key, dateStamp, region, serviceName) {
      const kDate = await sign(crypto2, `AWS4${key}`, dateStamp);
      const kRegion = await sign(crypto2, kDate, region);
      const kService = await sign(crypto2, kRegion, serviceName);
      const kSigning = await sign(crypto2, kService, "aws4_request");
      return kSigning;
    }
    async function generateAuthenticationHeaderMap(options) {
      const additionalAmzHeaders = options.additionalAmzHeaders || {};
      const requestPayload = options.requestPayload || "";
      const serviceName = options.host.split(".")[0];
      const now = /* @__PURE__ */ new Date();
      const amzDate = now.toISOString().replace(/[-:]/g, "").replace(/\.[0-9]+/, "");
      const dateStamp = now.toISOString().replace(/[-]/g, "").replace(/T.*/, "");
      const reformattedAdditionalAmzHeaders = {};
      Object.keys(additionalAmzHeaders).forEach((key) => {
        reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];
      });
      if (options.securityCredentials.token) {
        reformattedAdditionalAmzHeaders["x-amz-security-token"] = options.securityCredentials.token;
      }
      const amzHeaders = Object.assign(
        {
          host: options.host
        },
        // Previously the date was not fixed with x-amz- and could be provided manually.
        // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req
        reformattedAdditionalAmzHeaders.date ? {} : { "x-amz-date": amzDate },
        reformattedAdditionalAmzHeaders
      );
      let canonicalHeaders = "";
      const signedHeadersList = Object.keys(amzHeaders).sort();
      signedHeadersList.forEach((key) => {
        canonicalHeaders += `${key}:${amzHeaders[key]}
`;
      });
      const signedHeaders = signedHeadersList.join(";");
      const payloadHash = await options.crypto.sha256DigestHex(requestPayload);
      const canonicalRequest = `${options.method}
${options.canonicalUri}
${options.canonicalQuerystring}
${canonicalHeaders}
${signedHeaders}
${payloadHash}`;
      const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;
      const stringToSign = `${AWS_ALGORITHM}
${amzDate}
${credentialScope}
` + await options.crypto.sha256DigestHex(canonicalRequest);
      const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);
      const signature = await sign(options.crypto, signingKey, stringToSign);
      const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;
      return {
        // Do not return x-amz-date if date is available.
        amzDate: reformattedAdditionalAmzHeaders.date ? void 0 : amzDate,
        authorizationHeader,
        canonicalQuerystring: options.canonicalQuerystring
      };
    }
  }
});

// node_modules/google-auth-library/build/src/auth/awsclient.js
var require_awsclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/awsclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsClient = void 0;
    var awsrequestsigner_1 = require_awsrequestsigner();
    var baseexternalclient_1 = require_baseexternalclient();
    var AwsClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      /**
       * Instantiates an AwsClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid AWS credential.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        super(options, additionalOptions);
        this.environmentId = options.credential_source.environment_id;
        this.regionUrl = options.credential_source.region_url;
        this.securityCredentialsUrl = options.credential_source.url;
        this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;
        this.imdsV2SessionTokenUrl = options.credential_source.imdsv2_session_token_url;
        this.awsRequestSigner = null;
        this.region = "";
        this.validateEnvironmentId();
      }
      validateEnvironmentId() {
        var _a;
        const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\d+)$/);
        if (!match || !this.regionalCredVerificationUrl) {
          throw new Error('No valid AWS "credential_source" provided');
        } else if (parseInt(match[2], 10) !== 1) {
          throw new Error(`aws version "${match[2]}" is not supported in the current build.`);
        }
      }
      /**
       * Triggered when an external subject token is needed to be exchanged for a
       * GCP access token via GCP STS endpoint.
       * This uses the `options.credential_source` object to figure out how
       * to retrieve the token using the current environment. In this case,
       * this uses a serialized AWS signed request to the STS GetCallerIdentity
       * endpoint.
       * The logic is summarized as:
       * 1. If imdsv2_session_token_url is provided in the credential source, then
       *    fetch the aws session token and include it in the headers of the
       *    metadata requests. This is a requirement for IDMSv2 but optional
       *    for IDMSv1.
       * 2. Retrieve AWS region from availability-zone.
       * 3a. Check AWS credentials in environment variables. If not found, get
       *     from security-credentials endpoint.
       * 3b. Get AWS credentials from security-credentials endpoint. In order
       *     to retrieve this, the AWS role needs to be determined by calling
       *     security-credentials endpoint without any argument. Then the
       *     credentials can be retrieved via: security-credentials/role_name
       * 4. Generate the signed request to AWS STS GetCallerIdentity action.
       * 5. Inject x-goog-cloud-target-resource into header and serialize the
       *    signed request. This will be the subject-token to pass to GCP STS.
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (!this.awsRequestSigner) {
          const metadataHeaders = {};
          if (this.shouldUseMetadataServer() && this.imdsV2SessionTokenUrl) {
            metadataHeaders["x-aws-ec2-metadata-token"] = await this.getImdsV2SessionToken();
          }
          this.region = await this.getAwsRegion(metadataHeaders);
          this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {
            if (this.securityCredentialsFromEnv) {
              return this.securityCredentialsFromEnv;
            }
            const roleName = await this.getAwsRoleName(metadataHeaders);
            const awsCreds = await this.getAwsSecurityCredentials(roleName, metadataHeaders);
            return {
              accessKeyId: awsCreds.AccessKeyId,
              secretAccessKey: awsCreds.SecretAccessKey,
              token: awsCreds.Token
            };
          }, this.region);
        }
        const options = await this.awsRequestSigner.getRequestOptions({
          url: this.regionalCredVerificationUrl.replace("{region}", this.region),
          method: "POST"
        });
        const reformattedHeader = [];
        const extendedHeaders = Object.assign({
          // The full, canonical resource name of the workload identity pool
          // provider, with or without the HTTPS prefix.
          // Including this header as part of the signature is recommended to
          // ensure data integrity.
          "x-goog-cloud-target-resource": this.audience
        }, options.headers);
        for (const key in extendedHeaders) {
          reformattedHeader.push({
            key,
            value: extendedHeaders[key]
          });
        }
        return encodeURIComponent(JSON.stringify({
          url: options.url,
          method: options.method,
          headers: reformattedHeader
        }));
      }
      /**
       * @return A promise that resolves with the IMDSv2 Session Token.
       */
      async getImdsV2SessionToken() {
        const opts = {
          url: this.imdsV2SessionTokenUrl,
          method: "PUT",
          responseType: "text",
          headers: { "x-aws-ec2-metadata-token-ttl-seconds": "300" }
        };
        const response = await this.transporter.request(opts);
        return response.data;
      }
      /**
       * @param headers The headers to be used in the metadata request.
       * @return A promise that resolves with the current AWS region.
       */
      async getAwsRegion(headers) {
        if (this.regionFromEnv) {
          return this.regionFromEnv;
        }
        if (!this.regionUrl) {
          throw new Error('Unable to determine AWS region due to missing "options.credential_source.region_url"');
        }
        const opts = {
          url: this.regionUrl,
          method: "GET",
          responseType: "text",
          headers
        };
        const response = await this.transporter.request(opts);
        return response.data.substr(0, response.data.length - 1);
      }
      /**
       * @param headers The headers to be used in the metadata request.
       * @return A promise that resolves with the assigned role to the current
       *   AWS VM. This is needed for calling the security-credentials endpoint.
       */
      async getAwsRoleName(headers) {
        if (!this.securityCredentialsUrl) {
          throw new Error('Unable to determine AWS role name due to missing "options.credential_source.url"');
        }
        const opts = {
          url: this.securityCredentialsUrl,
          method: "GET",
          responseType: "text",
          headers
        };
        const response = await this.transporter.request(opts);
        return response.data;
      }
      /**
       * Retrieves the temporary AWS credentials by calling the security-credentials
       * endpoint as specified in the `credential_source` object.
       * @param roleName The role attached to the current VM.
       * @param headers The headers to be used in the metadata request.
       * @return A promise that resolves with the temporary AWS credentials
       *   needed for creating the GetCallerIdentity signed request.
       */
      async getAwsSecurityCredentials(roleName, headers) {
        const response = await this.transporter.request({
          url: `${this.securityCredentialsUrl}/${roleName}`,
          responseType: "json",
          headers
        });
        return response.data;
      }
      shouldUseMetadataServer() {
        return !this.regionFromEnv || !this.securityCredentialsFromEnv;
      }
      get regionFromEnv() {
        return process.env["AWS_REGION"] || process.env["AWS_DEFAULT_REGION"] || null;
      }
      get securityCredentialsFromEnv() {
        if (process.env["AWS_ACCESS_KEY_ID"] && process.env["AWS_SECRET_ACCESS_KEY"]) {
          return {
            accessKeyId: process.env["AWS_ACCESS_KEY_ID"],
            secretAccessKey: process.env["AWS_SECRET_ACCESS_KEY"],
            token: process.env["AWS_SESSION_TOKEN"]
          };
        }
        return null;
      }
    };
    exports2.AwsClient = AwsClient;
    AwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = "169.254.169.254";
    AwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = "fd00:ec2::254";
  }
});

// node_modules/google-auth-library/build/src/auth/executable-response.js
var require_executable_response = __commonJS({
  "node_modules/google-auth-library/build/src/auth/executable-response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidSubjectTokenError = exports2.InvalidMessageFieldError = exports2.InvalidCodeFieldError = exports2.InvalidTokenTypeFieldError = exports2.InvalidExpirationTimeFieldError = exports2.InvalidSuccessFieldError = exports2.InvalidVersionFieldError = exports2.ExecutableResponseError = exports2.ExecutableResponse = void 0;
    var SAML_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:saml2";
    var OIDC_SUBJECT_TOKEN_TYPE1 = "urn:ietf:params:oauth:token-type:id_token";
    var OIDC_SUBJECT_TOKEN_TYPE2 = "urn:ietf:params:oauth:token-type:jwt";
    var ExecutableResponse = class {
      /**
       * Instantiates an ExecutableResponse instance using the provided JSON object
       * from the output of the executable.
       * @param responseJson Response from a 3rd party executable, loaded from a
       * run of the executable or a cached output file.
       */
      constructor(responseJson) {
        if (!responseJson.version) {
          throw new InvalidVersionFieldError("Executable response must contain a 'version' field.");
        }
        if (responseJson.success === void 0) {
          throw new InvalidSuccessFieldError("Executable response must contain a 'success' field.");
        }
        this.version = responseJson.version;
        this.success = responseJson.success;
        if (this.success) {
          this.expirationTime = responseJson.expiration_time;
          this.tokenType = responseJson.token_type;
          if (this.tokenType !== SAML_SUBJECT_TOKEN_TYPE && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE1 && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE2) {
            throw new InvalidTokenTypeFieldError(`Executable response must contain a 'token_type' field when successful and it must be one of ${OIDC_SUBJECT_TOKEN_TYPE1}, ${OIDC_SUBJECT_TOKEN_TYPE2}, or ${SAML_SUBJECT_TOKEN_TYPE}.`);
          }
          if (this.tokenType === SAML_SUBJECT_TOKEN_TYPE) {
            if (!responseJson.saml_response) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'saml_response' field when token_type=${SAML_SUBJECT_TOKEN_TYPE}.`);
            }
            this.subjectToken = responseJson.saml_response;
          } else {
            if (!responseJson.id_token) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'id_token' field when token_type=${OIDC_SUBJECT_TOKEN_TYPE1} or ${OIDC_SUBJECT_TOKEN_TYPE2}.`);
            }
            this.subjectToken = responseJson.id_token;
          }
        } else {
          if (!responseJson.code) {
            throw new InvalidCodeFieldError("Executable response must contain a 'code' field when unsuccessful.");
          }
          if (!responseJson.message) {
            throw new InvalidMessageFieldError("Executable response must contain a 'message' field when unsuccessful.");
          }
          this.errorCode = responseJson.code;
          this.errorMessage = responseJson.message;
        }
      }
      /**
       * @return A boolean representing if the response has a valid token. Returns
       * true when the response was successful and the token is not expired.
       */
      isValid() {
        return !this.isExpired() && this.success;
      }
      /**
       * @return A boolean representing if the response is expired. Returns true if the
       * provided timeout has passed.
       */
      isExpired() {
        return this.expirationTime !== void 0 && this.expirationTime < Math.round(Date.now() / 1e3);
      }
    };
    exports2.ExecutableResponse = ExecutableResponse;
    var ExecutableResponseError = class extends Error {
      constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableResponseError = ExecutableResponseError;
    var InvalidVersionFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidVersionFieldError = InvalidVersionFieldError;
    var InvalidSuccessFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidSuccessFieldError = InvalidSuccessFieldError;
    var InvalidExpirationTimeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidExpirationTimeFieldError = InvalidExpirationTimeFieldError;
    var InvalidTokenTypeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidTokenTypeFieldError = InvalidTokenTypeFieldError;
    var InvalidCodeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidCodeFieldError = InvalidCodeFieldError;
    var InvalidMessageFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidMessageFieldError = InvalidMessageFieldError;
    var InvalidSubjectTokenError = class extends ExecutableResponseError {
    };
    exports2.InvalidSubjectTokenError = InvalidSubjectTokenError;
  }
});

// node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js
var require_pluggable_auth_handler = __commonJS({
  "node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthHandler = void 0;
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    var executable_response_1 = require_executable_response();
    var childProcess = require_child_process();
    var fs = require_fs();
    var PluggableAuthHandler = class {
      /**
       * Instantiates a PluggableAuthHandler instance using the provided
       * PluggableAuthHandlerOptions object.
       */
      constructor(options) {
        if (!options.command) {
          throw new Error("No command provided.");
        }
        this.commandComponents = PluggableAuthHandler.parseCommand(options.command);
        this.timeoutMillis = options.timeoutMillis;
        if (!this.timeoutMillis) {
          throw new Error("No timeoutMillis provided.");
        }
        this.outputFile = options.outputFile;
      }
      /**
       * Calls user provided executable to get a 3rd party subject token and
       * returns the response.
       * @param envMap a Map of additional Environment Variables required for
       *   the executable.
       * @return A promise that resolves with the executable response.
       */
      retrieveResponseFromExecutable(envMap) {
        return new Promise((resolve, reject) => {
          const child = childProcess.spawn(this.commandComponents[0], this.commandComponents.slice(1), {
            env: { ...process.env, ...Object.fromEntries(envMap) }
          });
          let output = "";
          child.stdout.on("data", (data) => {
            output += data;
          });
          child.stderr.on("data", (err) => {
            output += err;
          });
          const timeout = setTimeout(() => {
            child.removeAllListeners();
            child.kill();
            return reject(new Error("The executable failed to finish within the timeout specified."));
          }, this.timeoutMillis);
          child.on("close", (code) => {
            clearTimeout(timeout);
            if (code === 0) {
              try {
                const responseJson = JSON.parse(output);
                const response = new executable_response_1.ExecutableResponse(responseJson);
                return resolve(response);
              } catch (error) {
                if (error instanceof executable_response_1.ExecutableResponseError) {
                  return reject(error);
                }
                return reject(new executable_response_1.ExecutableResponseError(`The executable returned an invalid response: ${output}`));
              }
            } else {
              return reject(new pluggable_auth_client_1.ExecutableError(output, code.toString()));
            }
          });
        });
      }
      /**
       * Checks user provided output file for response from previous run of
       * executable and return the response if it exists, is formatted correctly, and is not expired.
       */
      async retrieveCachedResponse() {
        if (!this.outputFile || this.outputFile.length === 0) {
          return void 0;
        }
        let filePath;
        try {
          filePath = await fs.promises.realpath(this.outputFile);
        } catch (_a) {
          return void 0;
        }
        if (!(await fs.promises.lstat(filePath)).isFile()) {
          return void 0;
        }
        const responseString = await fs.promises.readFile(filePath, {
          encoding: "utf8"
        });
        if (responseString === "") {
          return void 0;
        }
        try {
          const responseJson = JSON.parse(responseString);
          const response = new executable_response_1.ExecutableResponse(responseJson);
          if (response.isValid()) {
            return new executable_response_1.ExecutableResponse(responseJson);
          }
          return void 0;
        } catch (error) {
          if (error instanceof executable_response_1.ExecutableResponseError) {
            throw error;
          }
          throw new executable_response_1.ExecutableResponseError(`The output file contained an invalid response: ${responseString}`);
        }
      }
      /**
       * Parses given command string into component array, splitting on spaces unless
       * spaces are between quotation marks.
       */
      static parseCommand(command) {
        const components = command.match(/(?:[^\s"]+|"[^"]*")+/g);
        if (!components) {
          throw new Error(`Provided command: "${command}" could not be parsed.`);
        }
        for (let i = 0; i < components.length; i++) {
          if (components[i][0] === '"' && components[i].slice(-1) === '"') {
            components[i] = components[i].slice(1, -1);
          }
        }
        return components;
      }
    };
    exports2.PluggableAuthHandler = PluggableAuthHandler;
  }
});

// node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js
var require_pluggable_auth_client = __commonJS({
  "node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthClient = exports2.ExecutableError = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var executable_response_1 = require_executable_response();
    var pluggable_auth_handler_1 = require_pluggable_auth_handler();
    var ExecutableError = class extends Error {
      constructor(message, code) {
        super(`The executable failed with exit code: ${code} and error message: ${message}.`);
        this.code = code;
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableError = ExecutableError;
    var DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1e3;
    var MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1e3;
    var MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1e3;
    var GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = "GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES";
    var MAXIMUM_EXECUTABLE_VERSION = 1;
    var PluggableAuthClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      /**
       * Instantiates a PluggableAuthClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid pluggable auth credential.
       * @param options The external account options object typically loaded from
       *   the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        super(options, additionalOptions);
        if (!options.credential_source.executable) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        this.command = options.credential_source.executable.command;
        if (!this.command) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        if (options.credential_source.executable.timeout_millis === void 0) {
          this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;
        } else {
          this.timeoutMillis = options.credential_source.executable.timeout_millis;
          if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {
            throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);
          }
        }
        this.outputFile = options.credential_source.executable.output_file;
        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({
          command: this.command,
          timeoutMillis: this.timeoutMillis,
          outputFile: this.outputFile
        });
      }
      /**
       * Triggered when an external subject token is needed to be exchanged for a
       * GCP access token via GCP STS endpoint.
       * This uses the `options.credential_source` object to figure out how
       * to retrieve the token using the current environment. In this case,
       * this calls a user provided executable which returns the subject token.
       * The logic is summarized as:
       * 1. Validated that the executable is allowed to run. The
       *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to
       *    1 for security reasons.
       * 2. If an output file is specified by the user, check the file location
       *    for a response. If the file exists and contains a valid response,
       *    return the subject token from the file.
       * 3. Call the provided executable and return response.
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== "1") {
          throw new Error("Pluggable Auth executables need to be explicitly allowed to run by setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment Variable to 1.");
        }
        let executableResponse = void 0;
        if (this.outputFile) {
          executableResponse = await this.handler.retrieveCachedResponse();
        }
        if (!executableResponse) {
          const envMap = /* @__PURE__ */ new Map();
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE", this.audience);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE", this.subjectTokenType);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE", "0");
          if (this.outputFile) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE", this.outputFile);
          }
          const serviceAccountEmail = this.getServiceAccountEmail();
          if (serviceAccountEmail) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL", serviceAccountEmail);
          }
          executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);
        }
        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {
          throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);
        }
        if (!executableResponse.success) {
          throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);
        }
        if (this.outputFile) {
          if (!executableResponse.expirationTime) {
            throw new executable_response_1.InvalidExpirationTimeFieldError("The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.");
          }
        }
        if (executableResponse.isExpired()) {
          throw new Error("Executable response is expired.");
        }
        return executableResponse.subjectToken;
      }
    };
    exports2.PluggableAuthClient = PluggableAuthClient;
  }
});

// node_modules/google-auth-library/build/src/auth/externalclient.js
var require_externalclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/externalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalAccountClient = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var identitypoolclient_1 = require_identitypoolclient();
    var awsclient_1 = require_awsclient();
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    var ExternalAccountClient = class {
      constructor() {
        throw new Error("ExternalAccountClients should be initialized via: ExternalAccountClient.fromJSON(), directly via explicit constructors, eg. new AwsClient(options), new IdentityPoolClient(options), newPluggableAuthClientOptions, or via new GoogleAuth(options).getClient()");
      }
      /**
       * This static method will instantiate the
       * corresponding type of external account credential depending on the
       * underlying credential source.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       * @return A BaseExternalAccountClient instance or null if the options
       *   provided do not correspond to an external account credential.
       */
      static fromJSON(options, additionalOptions) {
        var _a, _b;
        if (options && options.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          if ((_a = options.credential_source) === null || _a === void 0 ? void 0 : _a.environment_id) {
            return new awsclient_1.AwsClient(options, additionalOptions);
          } else if ((_b = options.credential_source) === null || _b === void 0 ? void 0 : _b.executable) {
            return new pluggable_auth_client_1.PluggableAuthClient(options, additionalOptions);
          } else {
            return new identitypoolclient_1.IdentityPoolClient(options, additionalOptions);
          }
        } else {
          return null;
        }
      }
    };
    exports2.ExternalAccountClient = ExternalAccountClient;
  }
});

// node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js
var require_externalAccountAuthorizedUserClient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalAccountAuthorizedUserClient = exports2.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;
    var authclient_1 = require_authclient();
    var oauth2common_1 = require_oauth2common();
    var gaxios_1 = require_src3();
    var stream = require_stream();
    var baseexternalclient_1 = require_baseexternalclient();
    exports2.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = "external_account_authorized_user";
    var ExternalAccountAuthorizedUserHandler = class extends oauth2common_1.OAuthClientAuthHandler {
      /**
       * Initializes an ExternalAccountAuthorizedUserHandler instance.
       * @param url The URL of the token refresh endpoint.
       * @param transporter The transporter to use for the refresh request.
       * @param clientAuthentication The client authentication credentials to use
       *   for the refresh request.
       */
      constructor(url, transporter, clientAuthentication) {
        super(clientAuthentication);
        this.url = url;
        this.transporter = transporter;
      }
      /**
       * Requests a new access token from the token_url endpoint using the provided
       *   refresh token.
       * @param refreshToken The refresh token to use to generate a new access token.
       * @param additionalHeaders Optional additional headers to pass along the
       *   request.
       * @return A promise that resolves with the token refresh response containing
       *   the requested access token and its expiration time.
       */
      async refreshToken(refreshToken, additionalHeaders) {
        const values = new URLSearchParams({
          grant_type: "refresh_token",
          refresh_token: refreshToken
        });
        const headers = {
          "Content-Type": "application/x-www-form-urlencoded",
          ...additionalHeaders
        };
        const opts = {
          url: this.url,
          method: "POST",
          headers,
          data: values.toString(),
          responseType: "json"
        };
        this.applyClientAuthenticationOptions(opts);
        try {
          const response = await this.transporter.request(opts);
          const tokenRefreshResponse = response.data;
          tokenRefreshResponse.res = response;
          return tokenRefreshResponse;
        } catch (error) {
          if (error instanceof gaxios_1.GaxiosError && error.response) {
            throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(
              error.response.data,
              // Preserve other fields from the original error.
              error
            );
          }
          throw error;
        }
      }
    };
    var ExternalAccountAuthorizedUserClient = class extends authclient_1.AuthClient {
      /**
       * Instantiates an ExternalAccountAuthorizedUserClient instances using the
       * provided JSON object loaded from a credentials files.
       * An error is throws if the credential is not valid.
       * @param options The external account authorized user option object typically
       *   from the external accoutn authorized user JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        super();
        this.refreshToken = options.refresh_token;
        const clientAuth = {
          confidentialClientType: "basic",
          clientId: options.client_id,
          clientSecret: options.client_secret
        };
        this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler(options.token_url, this.transporter, clientAuth);
        this.cachedAccessToken = null;
        this.quotaProjectId = options.quota_project_id;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
      }
      async getAccessToken() {
        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedAccessToken.access_token,
          res: this.cachedAccessToken.res
        };
      }
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param retry Whether the current attempt is a retry after a failed attempt.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * @return A promise that resolves with the refreshed credential.
       */
      async refreshAccessTokenAsync() {
        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);
        this.cachedAccessToken = {
          access_token: refreshResponse.access_token,
          expiry_date: (/* @__PURE__ */ new Date()).getTime() + refreshResponse.expires_in * 1e3,
          res: refreshResponse.res
        };
        if (refreshResponse.refresh_token !== void 0) {
          this.refreshToken = refreshResponse.refresh_token;
        }
        return this.cachedAccessToken;
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param credentials The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(credentials) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;
  }
});

// node_modules/google-auth-library/build/src/auth/googleauth.js
var require_googleauth = __commonJS({
  "node_modules/google-auth-library/build/src/auth/googleauth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.CLOUD_SDK_CLIENT_ID = void 0;
    var child_process_1 = require_child_process();
    var fs = require_fs();
    var gcpMetadata = require_src4();
    var os = require_os();
    var path = require_path();
    var crypto_1 = require_crypto4();
    var transporters_1 = require_transporters();
    var computeclient_1 = require_computeclient();
    var idtokenclient_1 = require_idtokenclient();
    var envDetect_1 = require_envDetect();
    var jwtclient_1 = require_jwtclient();
    var refreshclient_1 = require_refreshclient();
    var impersonated_1 = require_impersonated();
    var externalclient_1 = require_externalclient();
    var baseexternalclient_1 = require_baseexternalclient();
    var externalAccountAuthorizedUserClient_1 = require_externalAccountAuthorizedUserClient();
    exports2.CLOUD_SDK_CLIENT_ID = "764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com";
    var GoogleAuthExceptionMessages = {
      NO_PROJECT_ID_FOUND: "Unable to detect a Project Id in the current environment. \nTo learn more about authentication and Google APIs, visit: \nhttps://cloud.google.com/docs/authentication/getting-started"
    };
    var GoogleAuth = class {
      // Note:  this properly is only public to satisify unit tests.
      // https://github.com/Microsoft/TypeScript/issues/5228
      get isGCE() {
        return this.checkIsGCE;
      }
      constructor(opts) {
        this.checkIsGCE = void 0;
        this.jsonContent = null;
        this.cachedCredential = null;
        opts = opts || {};
        this._cachedProjectId = opts.projectId || null;
        this.cachedCredential = opts.authClient || null;
        this.keyFilename = opts.keyFilename || opts.keyFile;
        this.scopes = opts.scopes;
        this.jsonContent = opts.credentials || null;
        this.clientOptions = opts.clientOptions;
      }
      // GAPIC client libraries should always use self-signed JWTs. The following
      // variables are set on the JWT client in order to indicate the type of library,
      // and sign the JWT with the correct audience and scopes (if not supplied).
      setGapicJWTValues(client) {
        client.defaultServicePath = this.defaultServicePath;
        client.useJWTAccessWithScope = this.useJWTAccessWithScope;
        client.defaultScopes = this.defaultScopes;
      }
      getProjectId(callback) {
        if (callback) {
          this.getProjectIdAsync().then((r) => callback(null, r), callback);
        } else {
          return this.getProjectIdAsync();
        }
      }
      /**
       * A temporary method for internal `getProjectId` usages where `null` is
       * acceptable. In a future major release, `getProjectId` should return `null`
       * (as the `Promise<string | null>` base signature describes) and this private
       * method should be removed.
       *
       * @returns Promise that resolves with project id (or `null`)
       */
      async getProjectIdOptional() {
        try {
          return await this.getProjectId();
        } catch (e) {
          if (e instanceof Error && e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {
            return null;
          } else {
            throw e;
          }
        }
      }
      /*
       * A private method for finding and caching a projectId.
       *
       * Supports environments in order of precedence:
       * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable
       * - GOOGLE_APPLICATION_CREDENTIALS JSON file
       * - Cloud SDK: `gcloud config config-helper --format json`
       * - GCE project ID from metadata server
       *
       * @returns projectId
       */
      async findAndCacheProjectId() {
        let projectId = null;
        projectId || (projectId = await this.getProductionProjectId());
        projectId || (projectId = await this.getFileProjectId());
        projectId || (projectId = await this.getDefaultServiceProjectId());
        projectId || (projectId = await this.getGCEProjectId());
        projectId || (projectId = await this.getExternalAccountClientProjectId());
        if (projectId) {
          this._cachedProjectId = projectId;
          return projectId;
        } else {
          throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);
        }
      }
      async getProjectIdAsync() {
        if (this._cachedProjectId) {
          return this._cachedProjectId;
        }
        if (!this._findProjectIdPromise) {
          this._findProjectIdPromise = this.findAndCacheProjectId();
        }
        return this._findProjectIdPromise;
      }
      /**
       * @returns Any scopes (user-specified or default scopes specified by the
       *   client library) that need to be set on the current Auth client.
       */
      getAnyScopes() {
        return this.scopes || this.defaultScopes;
      }
      getApplicationDefault(optionsOrCallback = {}, callback) {
        let options;
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.getApplicationDefaultAsync(options).then((r) => callback(null, r.credential, r.projectId), callback);
        } else {
          return this.getApplicationDefaultAsync(options);
        }
      }
      async getApplicationDefaultAsync(options = {}) {
        if (this.cachedCredential) {
          return await this.prepareAndCacheADC(this.cachedCredential);
        }
        const quotaProjectIdOverride = process.env["GOOGLE_CLOUD_QUOTA_PROJECT"];
        let credential;
        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);
        }
        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);
        }
        let isGCE;
        try {
          isGCE = await this._checkIsGCE();
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Unexpected error determining execution environment: ${e.message}`;
          }
          throw e;
        }
        if (!isGCE) {
          throw new Error("Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.");
        }
        options.scopes = this.getAnyScopes();
        return await this.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);
      }
      async prepareAndCacheADC(credential, quotaProjectIdOverride) {
        const projectId = await this.getProjectIdOptional();
        if (quotaProjectIdOverride) {
          credential.quotaProjectId = quotaProjectIdOverride;
        }
        this.cachedCredential = credential;
        return { credential, projectId };
      }
      /**
       * Determines whether the auth layer is running on Google Compute Engine.
       * Checks for GCP Residency, then fallback to checking if metadata server
       * is available.
       *
       * @returns A promise that resolves with the boolean.
       * @api private
       */
      async _checkIsGCE() {
        if (this.checkIsGCE === void 0) {
          this.checkIsGCE = gcpMetadata.getGCPResidency() || await gcpMetadata.isAvailable();
        }
        return this.checkIsGCE;
      }
      /**
       * Attempts to load default credentials from the environment variable path..
       * @returns Promise that resolves with the OAuth2Client or null.
       * @api private
       */
      async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {
        const credentialsPath = process.env["GOOGLE_APPLICATION_CREDENTIALS"] || process.env["google_application_credentials"];
        if (!credentialsPath || credentialsPath.length === 0) {
          return null;
        }
        try {
          return this._getApplicationCredentialsFromFilePath(credentialsPath, options);
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;
          }
          throw e;
        }
      }
      /**
       * Attempts to load default credentials from a well-known file location
       * @return Promise that resolves with the OAuth2Client or null.
       * @api private
       */
      async _tryGetApplicationCredentialsFromWellKnownFile(options) {
        let location = null;
        if (this._isWindows()) {
          location = process.env["APPDATA"];
        } else {
          const home = process.env["HOME"];
          if (home) {
            location = path.join(home, ".config");
          }
        }
        if (location) {
          location = path.join(location, "gcloud", "application_default_credentials.json");
          if (!fs.existsSync(location)) {
            location = null;
          }
        }
        if (!location) {
          return null;
        }
        const client = await this._getApplicationCredentialsFromFilePath(location, options);
        return client;
      }
      /**
       * Attempts to load default credentials from a file at the given path..
       * @param filePath The path to the file to read.
       * @returns Promise that resolves with the OAuth2Client
       * @api private
       */
      async _getApplicationCredentialsFromFilePath(filePath, options = {}) {
        if (!filePath || filePath.length === 0) {
          throw new Error("The file path is invalid.");
        }
        try {
          filePath = fs.realpathSync(filePath);
          if (!fs.lstatSync(filePath).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        const readStream = fs.createReadStream(filePath);
        return this.fromStream(readStream, options);
      }
      /**
       * Create a credentials instance using a given impersonated input options.
       * @param json The impersonated input object.
       * @returns JWT or UserRefresh Client with data
       */
      fromImpersonatedJSON(json) {
        var _a, _b, _c, _d;
        if (!json) {
          throw new Error("Must pass in a JSON object containing an  impersonated refresh token");
        }
        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          throw new Error(`The incoming JSON object does not have the "${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}" type`);
        }
        if (!json.source_credentials) {
          throw new Error("The incoming JSON object does not contain a source_credentials field");
        }
        if (!json.service_account_impersonation_url) {
          throw new Error("The incoming JSON object does not contain a service_account_impersonation_url field");
        }
        const sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);
        const targetPrincipal = (_b = (_a = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.target;
        if (!targetPrincipal) {
          throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);
        }
        const targetScopes = (_c = this.getAnyScopes()) !== null && _c !== void 0 ? _c : [];
        const client = new impersonated_1.Impersonated({
          delegates: (_d = json.delegates) !== null && _d !== void 0 ? _d : [],
          sourceClient,
          targetPrincipal,
          targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes]
        });
        return client;
      }
      /**
       * Create a credentials instance using the given input options.
       * @param json The input object.
       * @param options The JWT or UserRefresh options for the client
       * @returns JWT or UserRefresh Client with data
       */
      fromJSON(json, options = {}) {
        let client;
        options = options || {};
        if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {
          client = new refreshclient_1.UserRefreshClient(options);
          client.fromJSON(json);
        } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          client = this.fromImpersonatedJSON(json);
        } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          client = externalclient_1.ExternalAccountClient.fromJSON(json, options);
          client.scopes = this.getAnyScopes();
        } else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {
          client = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient(json, options);
        } else {
          options.scopes = this.scopes;
          client = new jwtclient_1.JWT(options);
          this.setGapicJWTValues(client);
          client.fromJSON(json);
        }
        return client;
      }
      /**
       * Return a JWT or UserRefreshClient from JavaScript object, caching both the
       * object used to instantiate and the client.
       * @param json The input object.
       * @param options The JWT or UserRefresh options for the client
       * @returns JWT or UserRefresh Client with data
       */
      _cacheClientFromJSON(json, options) {
        const client = this.fromJSON(json, options);
        this.jsonContent = json;
        this.cachedCredential = client;
        return client;
      }
      fromStream(inputStream, optionsOrCallback = {}, callback) {
        let options = {};
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.fromStreamAsync(inputStream, options).then((r) => callback(null, r), callback);
        } else {
          return this.fromStreamAsync(inputStream, options);
        }
      }
      fromStreamAsync(inputStream, options) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the Google auth settings.");
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              try {
                const data = JSON.parse(s);
                const r = this._cacheClientFromJSON(data, options);
                return resolve(r);
              } catch (err) {
                if (!this.keyFilename)
                  throw err;
                const client = new jwtclient_1.JWT({
                  ...this.clientOptions,
                  keyFile: this.keyFilename
                });
                this.cachedCredential = client;
                this.setGapicJWTValues(client);
                return resolve(client);
              }
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
      /**
       * Create a credentials instance using the given API key string.
       * @param apiKey The API key string
       * @param options An optional options object.
       * @returns A JWT loaded from the key
       */
      fromAPIKey(apiKey, options) {
        options = options || {};
        const client = new jwtclient_1.JWT(options);
        client.fromAPIKey(apiKey);
        return client;
      }
      /**
       * Determines whether the current operating system is Windows.
       * @api private
       */
      _isWindows() {
        const sys = os.platform();
        if (sys && sys.length >= 3) {
          if (sys.substring(0, 3).toLowerCase() === "win") {
            return true;
          }
        }
        return false;
      }
      /**
       * Run the Google Cloud SDK command that prints the default project ID
       */
      async getDefaultServiceProjectId() {
        return new Promise((resolve) => {
          (0, child_process_1.exec)("gcloud config config-helper --format json", (err, stdout) => {
            if (!err && stdout) {
              try {
                const projectId = JSON.parse(stdout).configuration.properties.core.project;
                resolve(projectId);
                return;
              } catch (e) {
              }
            }
            resolve(null);
          });
        });
      }
      /**
       * Loads the project id from environment variables.
       * @api private
       */
      getProductionProjectId() {
        return process.env["GCLOUD_PROJECT"] || process.env["GOOGLE_CLOUD_PROJECT"] || process.env["gcloud_project"] || process.env["google_cloud_project"];
      }
      /**
       * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.
       * @api private
       */
      async getFileProjectId() {
        if (this.cachedCredential) {
          return this.cachedCredential.projectId;
        }
        if (this.keyFilename) {
          const creds = await this.getClient();
          if (creds && creds.projectId) {
            return creds.projectId;
          }
        }
        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();
        if (r) {
          return r.projectId;
        } else {
          return null;
        }
      }
      /**
       * Gets the project ID from external account client if available.
       */
      async getExternalAccountClientProjectId() {
        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          return null;
        }
        const creds = await this.getClient();
        return await creds.getProjectId();
      }
      /**
       * Gets the Compute Engine project ID if it can be inferred.
       */
      async getGCEProjectId() {
        try {
          const r = await gcpMetadata.project("project-id");
          return r;
        } catch (e) {
          return null;
        }
      }
      getCredentials(callback) {
        if (callback) {
          this.getCredentialsAsync().then((r) => callback(null, r), callback);
        } else {
          return this.getCredentialsAsync();
        }
      }
      async getCredentialsAsync() {
        const client = await this.getClient();
        if (client instanceof baseexternalclient_1.BaseExternalAccountClient) {
          const serviceAccountEmail = client.getServiceAccountEmail();
          if (serviceAccountEmail) {
            return { client_email: serviceAccountEmail };
          }
        }
        if (this.jsonContent) {
          const credential = {
            client_email: this.jsonContent.client_email,
            private_key: this.jsonContent.private_key
          };
          return credential;
        }
        const isGCE = await this._checkIsGCE();
        if (!isGCE) {
          throw new Error("Unknown error.");
        }
        const data = await gcpMetadata.instance({
          property: "service-accounts/",
          params: { recursive: "true" }
        });
        if (!data || !data.default || !data.default.email) {
          throw new Error("Failure from metadata server.");
        }
        return { client_email: data.default.email };
      }
      /**
       * Automatically obtain a client based on the provided configuration.  If no
       * options were passed, use Application Default Credentials.
       */
      async getClient() {
        if (!this.cachedCredential) {
          if (this.jsonContent) {
            this._cacheClientFromJSON(this.jsonContent, this.clientOptions);
          } else if (this.keyFilename) {
            const filePath = path.resolve(this.keyFilename);
            const stream = fs.createReadStream(filePath);
            await this.fromStreamAsync(stream, this.clientOptions);
          } else {
            await this.getApplicationDefaultAsync(this.clientOptions);
          }
        }
        return this.cachedCredential;
      }
      /**
       * Creates a client which will fetch an ID token for authorization.
       * @param targetAudience the audience for the fetched ID token.
       * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.
       */
      async getIdTokenClient(targetAudience) {
        const client = await this.getClient();
        if (!("fetchIdToken" in client)) {
          throw new Error("Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.");
        }
        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });
      }
      /**
       * Automatically obtain application default credentials, and return
       * an access token for making requests.
       */
      async getAccessToken() {
        const client = await this.getClient();
        return (await client.getAccessToken()).token;
      }
      /**
       * Obtain the HTTP headers that will provide authorization for a given
       * request.
       */
      async getRequestHeaders(url) {
        const client = await this.getClient();
        return client.getRequestHeaders(url);
      }
      /**
       * Obtain credentials for a request, then attach the appropriate headers to
       * the request options.
       * @param opts Axios or Request options on which to attach the headers
       */
      async authorizeRequest(opts) {
        opts = opts || {};
        const url = opts.url || opts.uri;
        const client = await this.getClient();
        const headers = await client.getRequestHeaders(url);
        opts.headers = Object.assign(opts.headers || {}, headers);
        return opts;
      }
      /**
       * Automatically obtain application default credentials, and make an
       * HTTP request using the given options.
       * @param opts Axios request options for the HTTP request.
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      async request(opts) {
        const client = await this.getClient();
        return client.request(opts);
      }
      /**
       * Determine the compute environment in which the code is running.
       */
      getEnv() {
        return (0, envDetect_1.getEnv)();
      }
      /**
       * Sign the given data with the current private key, or go out
       * to the IAM API to sign it.
       * @param data The data to be signed.
       */
      async sign(data) {
        const client = await this.getClient();
        const crypto2 = (0, crypto_1.createCrypto)();
        if (client instanceof jwtclient_1.JWT && client.key) {
          const sign = await crypto2.sign(client.key, data);
          return sign;
        }
        const creds = await this.getCredentials();
        if (!creds.client_email) {
          throw new Error("Cannot sign data without `client_email`.");
        }
        return this.signBlob(crypto2, creds.client_email, data);
      }
      async signBlob(crypto2, emailOrUniqueId, data) {
        const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${emailOrUniqueId}:signBlob`;
        const res = await this.request({
          method: "POST",
          url,
          data: {
            payload: crypto2.encodeBase64StringUtf8(data)
          }
        });
        return res.data.signedBlob;
      }
    };
    exports2.GoogleAuth = GoogleAuth;
    GoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;
  }
});

// node_modules/google-auth-library/build/src/auth/iam.js
var require_iam = __commonJS({
  "node_modules/google-auth-library/build/src/auth/iam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IAMAuth = void 0;
    var IAMAuth = class {
      /**
       * IAM credentials.
       *
       * @param selector the iam authority selector
       * @param token the token
       * @constructor
       */
      constructor(selector, token) {
        this.selector = selector;
        this.token = token;
        this.selector = selector;
        this.token = token;
      }
      /**
       * Acquire the HTTP headers required to make an authenticated request.
       */
      getRequestHeaders() {
        return {
          "x-goog-iam-authority-selector": this.selector,
          "x-goog-iam-authorization-token": this.token
        };
      }
    };
    exports2.IAMAuth = IAMAuth;
  }
});

// node_modules/google-auth-library/build/src/auth/downscopedclient.js
var require_downscopedclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/downscopedclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DownscopedClient = exports2.EXPIRATION_TIME_OFFSET = exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;
    var stream = require_stream();
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var STS_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var STS_ACCESS_TOKEN_URL = "https://sts.googleapis.com/v1/token";
    exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    var DownscopedClient = class extends authclient_1.AuthClient {
      /**
       * Instantiates a downscoped client object using the provided source
       * AuthClient and credential access boundary rules.
       * To downscope permissions of a source AuthClient, a Credential Access
       * Boundary that specifies which resources the new credential can access, as
       * well as an upper bound on the permissions that are available on each
       * resource, has to be defined. A downscoped client can then be instantiated
       * using the source AuthClient and the Credential Access Boundary.
       * @param authClient The source AuthClient to be downscoped based on the
       *   provided Credential Access Boundary rules.
       * @param credentialAccessBoundary The Credential Access Boundary which
       *   contains a list of access boundary rules. Each rule contains information
       *   on the resource that the rule applies to, the upper bound of the
       *   permissions that are available on that resource and an optional
       *   condition to further restrict permissions.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       * @param quotaProjectId Optional quota project id for setting up in the
       *   x-goog-user-project header.
       */
      constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId) {
        super();
        this.authClient = authClient;
        this.credentialAccessBoundary = credentialAccessBoundary;
        if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {
          throw new Error("At least one access boundary rule needs to be defined.");
        } else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length > exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT) {
          throw new Error(`The provided access boundary has more than ${exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);
        }
        for (const rule of credentialAccessBoundary.accessBoundary.accessBoundaryRules) {
          if (rule.availablePermissions.length === 0) {
            throw new Error("At least one permission should be defined in access boundary rules.");
          }
        }
        this.stsCredential = new sts.StsCredentials(STS_ACCESS_TOKEN_URL);
        this.cachedDownscopedAccessToken = null;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = exports2.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
        this.quotaProjectId = quotaProjectId;
      }
      /**
       * Provides a mechanism to inject Downscoped access tokens directly.
       * The expiry_date field is required to facilitate determination of the token
       * expiration which would make it easier for the token consumer to handle.
       * @param credentials The Credentials object to set on the current client.
       */
      setCredentials(credentials) {
        if (!credentials.expiry_date) {
          throw new Error("The access token expiry_date field is missing in the provided credentials.");
        }
        super.setCredentials(credentials);
        this.cachedDownscopedAccessToken = credentials;
      }
      async getAccessToken() {
        if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedDownscopedAccessToken.access_token,
          expirationTime: this.cachedDownscopedAccessToken.expiry_date,
          res: this.cachedDownscopedAccessToken.res
        };
      }
      /**
       * The main authentication interface. It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * The result has the form:
       * { Authorization: 'Bearer <access_token_value>' }
       */
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param retry Whether the current attempt is a retry after a failed attempt.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * GCP access tokens are retrieved from authclient object/source credential.
       * Then GCP access tokens are exchanged for downscoped access tokens via the
       * token exchange endpoint.
       * @return A promise that resolves with the fresh downscoped access token.
       */
      async refreshAccessTokenAsync() {
        var _a;
        const subjectToken = (await this.authClient.getAccessToken()).token;
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: STS_SUBJECT_TOKEN_TYPE
        };
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, void 0, this.credentialAccessBoundary);
        const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;
        const expiryDate = stsResponse.expires_in ? (/* @__PURE__ */ new Date()).getTime() + stsResponse.expires_in * 1e3 : sourceCredExpireDate;
        this.cachedDownscopedAccessToken = {
          access_token: stsResponse.access_token,
          expiry_date: expiryDate,
          res: stsResponse.res
        };
        this.credentials = {};
        Object.assign(this.credentials, this.cachedDownscopedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedDownscopedAccessToken.expiry_date,
          access_token: this.cachedDownscopedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedDownscopedAccessToken;
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param downscopedAccessToken The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(downscopedAccessToken) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.DownscopedClient = DownscopedClient;
  }
});

// node_modules/google-auth-library/build/src/index.js
var require_src6 = __commonJS({
  "node_modules/google-auth-library/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.auth = exports2.DefaultTransporter = exports2.PluggableAuthClient = exports2.DownscopedClient = exports2.BaseExternalAccountClient = exports2.ExternalAccountClient = exports2.IdentityPoolClient = exports2.AwsClient = exports2.UserRefreshClient = exports2.LoginTicket = exports2.OAuth2Client = exports2.CodeChallengeMethod = exports2.Impersonated = exports2.JWT = exports2.JWTAccess = exports2.IdTokenClient = exports2.IAMAuth = exports2.GCPEnv = exports2.Compute = exports2.AuthClient = void 0;
    var googleauth_1 = require_googleauth();
    Object.defineProperty(exports2, "GoogleAuth", { enumerable: true, get: function() {
      return googleauth_1.GoogleAuth;
    } });
    var authclient_1 = require_authclient();
    Object.defineProperty(exports2, "AuthClient", { enumerable: true, get: function() {
      return authclient_1.AuthClient;
    } });
    var computeclient_1 = require_computeclient();
    Object.defineProperty(exports2, "Compute", { enumerable: true, get: function() {
      return computeclient_1.Compute;
    } });
    var envDetect_1 = require_envDetect();
    Object.defineProperty(exports2, "GCPEnv", { enumerable: true, get: function() {
      return envDetect_1.GCPEnv;
    } });
    var iam_1 = require_iam();
    Object.defineProperty(exports2, "IAMAuth", { enumerable: true, get: function() {
      return iam_1.IAMAuth;
    } });
    var idtokenclient_1 = require_idtokenclient();
    Object.defineProperty(exports2, "IdTokenClient", { enumerable: true, get: function() {
      return idtokenclient_1.IdTokenClient;
    } });
    var jwtaccess_1 = require_jwtaccess();
    Object.defineProperty(exports2, "JWTAccess", { enumerable: true, get: function() {
      return jwtaccess_1.JWTAccess;
    } });
    var jwtclient_1 = require_jwtclient();
    Object.defineProperty(exports2, "JWT", { enumerable: true, get: function() {
      return jwtclient_1.JWT;
    } });
    var impersonated_1 = require_impersonated();
    Object.defineProperty(exports2, "Impersonated", { enumerable: true, get: function() {
      return impersonated_1.Impersonated;
    } });
    var oauth2client_1 = require_oauth2client();
    Object.defineProperty(exports2, "CodeChallengeMethod", { enumerable: true, get: function() {
      return oauth2client_1.CodeChallengeMethod;
    } });
    Object.defineProperty(exports2, "OAuth2Client", { enumerable: true, get: function() {
      return oauth2client_1.OAuth2Client;
    } });
    var loginticket_1 = require_loginticket();
    Object.defineProperty(exports2, "LoginTicket", { enumerable: true, get: function() {
      return loginticket_1.LoginTicket;
    } });
    var refreshclient_1 = require_refreshclient();
    Object.defineProperty(exports2, "UserRefreshClient", { enumerable: true, get: function() {
      return refreshclient_1.UserRefreshClient;
    } });
    var awsclient_1 = require_awsclient();
    Object.defineProperty(exports2, "AwsClient", { enumerable: true, get: function() {
      return awsclient_1.AwsClient;
    } });
    var identitypoolclient_1 = require_identitypoolclient();
    Object.defineProperty(exports2, "IdentityPoolClient", { enumerable: true, get: function() {
      return identitypoolclient_1.IdentityPoolClient;
    } });
    var externalclient_1 = require_externalclient();
    Object.defineProperty(exports2, "ExternalAccountClient", { enumerable: true, get: function() {
      return externalclient_1.ExternalAccountClient;
    } });
    var baseexternalclient_1 = require_baseexternalclient();
    Object.defineProperty(exports2, "BaseExternalAccountClient", { enumerable: true, get: function() {
      return baseexternalclient_1.BaseExternalAccountClient;
    } });
    var downscopedclient_1 = require_downscopedclient();
    Object.defineProperty(exports2, "DownscopedClient", { enumerable: true, get: function() {
      return downscopedclient_1.DownscopedClient;
    } });
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    Object.defineProperty(exports2, "PluggableAuthClient", { enumerable: true, get: function() {
      return pluggable_auth_client_1.PluggableAuthClient;
    } });
    var transporters_1 = require_transporters();
    Object.defineProperty(exports2, "DefaultTransporter", { enumerable: true, get: function() {
      return transporters_1.DefaultTransporter;
    } });
    var auth = new googleauth_1.GoogleAuth();
    exports2.auth = auth;
  }
});

// node_modules/retry-request/index.js
var require_retry_request = __commonJS({
  "node_modules/retry-request/index.js"(exports2, module2) {
    "use strict";
    var { PassThrough } = require_stream();
    var debug = require_browser2()("retry-request");
    var extend = require_extend();
    var DEFAULTS = {
      objectMode: false,
      retries: 2,
      /*
        The maximum time to delay in seconds. If retryDelayMultiplier results in a
        delay greater than maxRetryDelay, retries should delay by maxRetryDelay
        seconds instead.
      */
      maxRetryDelay: 64,
      /*
        The multiplier by which to increase the delay time between the completion of
        failed requests, and the initiation of the subsequent retrying request.
      */
      retryDelayMultiplier: 2,
      /*
        The length of time to keep retrying in seconds. The last sleep period will
        be shortened as necessary, so that the last retry runs at deadline (and not
        considerably beyond it).  The total time starting from when the initial
        request is sent, after which an error will be returned, regardless of the
        retrying attempts made meanwhile.
       */
      totalTimeout: 600,
      noResponseRetries: 2,
      currentRetryAttempt: 0,
      shouldRetryFn: function(response) {
        const retryRanges = [
          // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
          // 1xx - Retry (Informational, request still processing)
          // 2xx - Do not retry (Success)
          // 3xx - Do not retry (Redirect)
          // 4xx - Do not retry (Client errors)
          // 429 - Retry ("Too Many Requests")
          // 5xx - Retry (Server errors)
          [100, 199],
          [429, 429],
          [500, 599]
        ];
        const statusCode = response.statusCode;
        debug(`Response status: ${statusCode}`);
        let range;
        while (range = retryRanges.shift()) {
          if (statusCode >= range[0] && statusCode <= range[1]) {
            return true;
          }
        }
      }
    };
    function retryRequest(requestOpts, opts, callback) {
      const streamMode = typeof arguments[arguments.length - 1] !== "function";
      if (typeof opts === "function") {
        callback = opts;
      }
      const manualCurrentRetryAttemptWasSet = opts && typeof opts.currentRetryAttempt === "number";
      opts = extend({}, DEFAULTS, opts);
      if (typeof opts.request === "undefined") {
        try {
          opts.request = __require("request");
        } catch (e) {
          throw new Error("A request library must be provided to retry-request.");
        }
      }
      let currentRetryAttempt = opts.currentRetryAttempt;
      let numNoResponseAttempts = 0;
      let streamResponseHandled = false;
      let retryStream;
      let requestStream;
      let delayStream;
      let activeRequest;
      const retryRequest2 = {
        abort: function() {
          if (activeRequest && activeRequest.abort) {
            activeRequest.abort();
          }
        }
      };
      if (streamMode) {
        retryStream = new PassThrough({ objectMode: opts.objectMode });
        retryStream.abort = resetStreams;
      }
      const timeOfFirstRequest = Date.now();
      if (currentRetryAttempt > 0) {
        retryAfterDelay(currentRetryAttempt);
      } else {
        makeRequest();
      }
      if (streamMode) {
        return retryStream;
      } else {
        return retryRequest2;
      }
      function resetStreams() {
        delayStream = null;
        if (requestStream) {
          requestStream.abort && requestStream.abort();
          requestStream.cancel && requestStream.cancel();
          if (requestStream.destroy) {
            requestStream.destroy();
          } else if (requestStream.end) {
            requestStream.end();
          }
        }
      }
      function makeRequest() {
        currentRetryAttempt++;
        debug(`Current retry attempt: ${currentRetryAttempt}`);
        if (streamMode) {
          streamResponseHandled = false;
          delayStream = new PassThrough({ objectMode: opts.objectMode });
          requestStream = opts.request(requestOpts);
          setImmediate(() => {
            retryStream.emit("request");
          });
          requestStream.on("error", (err) => {
            if (streamResponseHandled) {
              return;
            }
            streamResponseHandled = true;
            onResponse(err);
          }).on("response", (resp, body) => {
            if (streamResponseHandled) {
              return;
            }
            streamResponseHandled = true;
            onResponse(null, resp, body);
          }).on("complete", retryStream.emit.bind(retryStream, "complete"));
          requestStream.pipe(delayStream);
        } else {
          activeRequest = opts.request(requestOpts, onResponse);
        }
      }
      function retryAfterDelay(currentRetryAttempt2) {
        if (streamMode) {
          resetStreams();
        }
        const nextRetryDelay = getNextRetryDelay({
          maxRetryDelay: opts.maxRetryDelay,
          retryDelayMultiplier: opts.retryDelayMultiplier,
          retryNumber: currentRetryAttempt2,
          timeOfFirstRequest,
          totalTimeout: opts.totalTimeout
        });
        debug(`Next retry delay: ${nextRetryDelay}`);
        if (nextRetryDelay <= 0) {
          numNoResponseAttempts = opts.noResponseRetries + 1;
          return;
        }
        setTimeout(makeRequest, nextRetryDelay);
      }
      function onResponse(err, response, body) {
        if (err) {
          numNoResponseAttempts++;
          if (numNoResponseAttempts <= opts.noResponseRetries) {
            retryAfterDelay(numNoResponseAttempts);
          } else {
            if (streamMode) {
              retryStream.emit("error", err);
              retryStream.end();
            } else {
              callback(err, response, body);
            }
          }
          return;
        }
        const adjustedCurrentRetryAttempt = manualCurrentRetryAttemptWasSet ? currentRetryAttempt : currentRetryAttempt - 1;
        if (adjustedCurrentRetryAttempt < opts.retries && opts.shouldRetryFn(response)) {
          retryAfterDelay(currentRetryAttempt);
          return;
        }
        if (streamMode) {
          retryStream.emit("response", response);
          delayStream.pipe(retryStream);
          requestStream.on("error", (err2) => {
            retryStream.destroy(err2);
          });
        } else {
          callback(err, response, body);
        }
      }
    }
    module2.exports = retryRequest;
    function getNextRetryDelay(config) {
      const {
        maxRetryDelay,
        retryDelayMultiplier,
        retryNumber,
        timeOfFirstRequest,
        totalTimeout
      } = config;
      const maxRetryDelayMs = maxRetryDelay * 1e3;
      const totalTimeoutMs = totalTimeout * 1e3;
      const jitter = Math.floor(Math.random() * 1e3);
      const calculatedNextRetryDelay = Math.pow(retryDelayMultiplier, retryNumber) * 1e3 + jitter;
      const maxAllowableDelayMs = totalTimeoutMs - (Date.now() - timeOfFirstRequest);
      return Math.min(
        calculatedNextRetryDelay,
        maxAllowableDelayMs,
        maxRetryDelayMs
      );
    }
    module2.exports.getNextRetryDelay = getNextRetryDelay;
  }
});

// node_modules/teeny-request/node_modules/node-fetch/browser.js
var require_browser3 = __commonJS({
  "node_modules/teeny-request/node_modules/node-fetch/browser.js"(exports2, module2) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var globalObject = getGlobal();
    module2.exports = exports2 = globalObject.fetch;
    if (globalObject.fetch) {
      exports2.default = globalObject.fetch.bind(globalObject);
    }
    exports2.Headers = globalObject.Headers;
    exports2.Request = globalObject.Request;
    exports2.Response = globalObject.Response;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/rng.js
var require_rng = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/rng.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = rng;
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      if (!getRandomValues) {
        getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
        if (!getRandomValues) {
          throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
      }
      return getRandomValues(rnds8);
    }
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/regex.js
var require_regex = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/regex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/validate.js
var require_validate = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/stringify.js
var require_stringify2 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/stringify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    exports2.unsafeStringify = unsafeStringify;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    function unsafeStringify(arr, offset = 0) {
      return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
    }
    function stringify(arr, offset = 0) {
      const uuid = unsafeStringify(arr, offset);
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v1.js
var require_v1 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.unsafeStringify)(b);
    }
    var _default = v1;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/parse.js
var require_parse2 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/parse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v35.js
var require_v35 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v35.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.URL = exports2.DNS = void 0;
    exports2.default = v35;
    var _stringify = require_stringify2();
    var _parse = _interopRequireDefault(require_parse2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports2.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports2.URL = URL2;
    function v35(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.unsafeStringify)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/md5.js
var require_md5 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/md5.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function md5(bytes) {
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = new Uint8Array(msg.length);
        for (let i = 0; i < msg.length; ++i) {
          bytes[i] = msg.charCodeAt(i);
        }
      }
      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    function md5ToHexEncodedArray(input) {
      const output = [];
      const length32 = input.length * 32;
      const hexTab = "0123456789abcdef";
      for (let i = 0; i < length32; i += 8) {
        const x = input[i >> 5] >>> i % 32 & 255;
        const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
        output.push(hex);
      }
      return output;
    }
    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    function wordsToMd5(x, len) {
      x[len >> 5] |= 128 << len % 32;
      x[getOutputLength(len) - 1] = len;
      let a = 1732584193;
      let b = -271733879;
      let c = -1732584194;
      let d = 271733878;
      for (let i = 0; i < x.length; i += 16) {
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return [a, b, c, d];
    }
    function bytesToWords(input) {
      if (input.length === 0) {
        return [];
      }
      const length8 = input.length * 8;
      const output = new Uint32Array(getOutputLength(length8));
      for (let i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input[i / 8] & 255) << i % 32;
      }
      return output;
    }
    function safeAdd(x, y) {
      const lsw = (x & 65535) + (y & 65535);
      const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    var _default = md5;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v3.js
var require_v3 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/native.js
var require_native = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/native.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var _default = {
      randomUUID
    };
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v4.js
var require_v4 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _native = _interopRequireDefault(require_native());
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      if (_native.default.randomUUID && !buf && !options) {
        return _native.default.randomUUID();
      }
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(rnds);
    }
    var _default = v4;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/sha1.js
var require_sha1 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/sha1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;
        case 1:
          return x ^ y ^ z;
        case 2:
          return x & y ^ x & z ^ y & z;
        case 3:
          return x ^ y ^ z;
      }
    }
    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }
    function sha1(bytes) {
      const K = [1518500249, 1859775393, 2400959708, 3395469782];
      const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = [];
        for (let i = 0; i < msg.length; ++i) {
          bytes.push(msg.charCodeAt(i));
        }
      } else if (!Array.isArray(bytes)) {
        bytes = Array.prototype.slice.call(bytes);
      }
      bytes.push(128);
      const l = bytes.length / 4 + 2;
      const N = Math.ceil(l / 16);
      const M = new Array(N);
      for (let i = 0; i < N; ++i) {
        const arr = new Uint32Array(16);
        for (let j = 0; j < 16; ++j) {
          arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        }
        M[i] = arr;
      }
      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
      for (let i = 0; i < N; ++i) {
        const W = new Uint32Array(80);
        for (let t = 0; t < 16; ++t) {
          W[t] = M[i][t];
        }
        for (let t = 16; t < 80; ++t) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for (let t = 0; t < 80; ++t) {
          const s = Math.floor(t / 20);
          const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }
      return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
    }
    var _default = sha1;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v5.js
var require_v5 = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/v5.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/nil.js
var require_nil = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/nil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/version.js
var require_version = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/version.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.slice(14, 15), 16);
    }
    var _default = version;
    exports2.default = _default;
  }
});

// node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/index.js
var require_commonjs_browser = __commonJS({
  "node_modules/teeny-request/node_modules/uuid/dist/commonjs-browser/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", {
      value: true
    });
    Object.defineProperty(exports2, "NIL", {
      enumerable: true,
      get: function get() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports2, "parse", {
      enumerable: true,
      get: function get() {
        return _parse.default;
      }
    });
    Object.defineProperty(exports2, "stringify", {
      enumerable: true,
      get: function get() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports2, "v1", {
      enumerable: true,
      get: function get() {
        return _v.default;
      }
    });
    Object.defineProperty(exports2, "v3", {
      enumerable: true,
      get: function get() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports2, "v4", {
      enumerable: true,
      get: function get() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports2, "v5", {
      enumerable: true,
      get: function get() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports2, "validate", {
      enumerable: true,
      get: function get() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports2, "version", {
      enumerable: true,
      get: function get() {
        return _version.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify2());
    var _parse = _interopRequireDefault(require_parse2());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@tootallnate/once/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@tootallnate/once/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function once(emitter, name, { signal } = {}) {
      return new Promise((resolve, reject) => {
        function cleanup() {
          signal === null || signal === void 0 ? void 0 : signal.removeEventListener("abort", cleanup);
          emitter.removeListener(name, onEvent);
          emitter.removeListener("error", onError);
        }
        function onEvent(...args) {
          cleanup();
          resolve(args);
        }
        function onError(err) {
          cleanup();
          reject(err);
        }
        signal === null || signal === void 0 ? void 0 : signal.addEventListener("abort", cleanup);
        emitter.on(name, onEvent);
        emitter.on("error", onError);
      });
    }
    exports2.default = once;
  }
});

// node_modules/http-proxy-agent/node_modules/agent-base/dist/src/promisify.js
var require_promisify = __commonJS({
  "node_modules/http-proxy-agent/node_modules/agent-base/dist/src/promisify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function promisify(fn) {
      return function(req, opts) {
        return new Promise((resolve, reject) => {
          fn.call(this, req, opts, (err, rtn) => {
            if (err) {
              reject(err);
            } else {
              resolve(rtn);
            }
          });
        });
      };
    }
    exports2.default = promisify;
  }
});

// node_modules/http-proxy-agent/node_modules/agent-base/dist/src/index.js
var require_src7 = __commonJS({
  "node_modules/http-proxy-agent/node_modules/agent-base/dist/src/index.js"(exports2, module2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    var events_1 = require_events();
    var debug_1 = __importDefault(require_browser2());
    var promisify_1 = __importDefault(require_promisify());
    var debug = debug_1.default("agent-base");
    function isAgent(v) {
      return Boolean(v) && typeof v.addRequest === "function";
    }
    function isSecureEndpoint() {
      const { stack } = new Error();
      if (typeof stack !== "string")
        return false;
      return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
    }
    function createAgent(callback, opts) {
      return new createAgent.Agent(callback, opts);
    }
    (function(createAgent2) {
      class Agent extends events_1.EventEmitter {
        constructor(callback, _opts) {
          super();
          let opts = _opts;
          if (typeof callback === "function") {
            this.callback = callback;
          } else if (callback) {
            opts = callback;
          }
          this.timeout = null;
          if (opts && typeof opts.timeout === "number") {
            this.timeout = opts.timeout;
          }
          this.maxFreeSockets = 1;
          this.maxSockets = 1;
          this.maxTotalSockets = Infinity;
          this.sockets = {};
          this.freeSockets = {};
          this.requests = {};
          this.options = {};
        }
        get defaultPort() {
          if (typeof this.explicitDefaultPort === "number") {
            return this.explicitDefaultPort;
          }
          return isSecureEndpoint() ? 443 : 80;
        }
        set defaultPort(v) {
          this.explicitDefaultPort = v;
        }
        get protocol() {
          if (typeof this.explicitProtocol === "string") {
            return this.explicitProtocol;
          }
          return isSecureEndpoint() ? "https:" : "http:";
        }
        set protocol(v) {
          this.explicitProtocol = v;
        }
        callback(req, opts, fn) {
          throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        /**
         * Called by node-core's "_http_client.js" module when creating
         * a new HTTP request with this Agent instance.
         *
         * @api public
         */
        addRequest(req, _opts) {
          const opts = Object.assign({}, _opts);
          if (typeof opts.secureEndpoint !== "boolean") {
            opts.secureEndpoint = isSecureEndpoint();
          }
          if (opts.host == null) {
            opts.host = "localhost";
          }
          if (opts.port == null) {
            opts.port = opts.secureEndpoint ? 443 : 80;
          }
          if (opts.protocol == null) {
            opts.protocol = opts.secureEndpoint ? "https:" : "http:";
          }
          if (opts.host && opts.path) {
            delete opts.path;
          }
          delete opts.agent;
          delete opts.hostname;
          delete opts._defaultAgent;
          delete opts.defaultPort;
          delete opts.createConnection;
          req._last = true;
          req.shouldKeepAlive = false;
          let timedOut = false;
          let timeoutId = null;
          const timeoutMs = opts.timeout || this.timeout;
          const onerror = (err) => {
            if (req._hadError)
              return;
            req.emit("error", err);
            req._hadError = true;
          };
          const ontimeout = () => {
            timeoutId = null;
            timedOut = true;
            const err = new Error(`A "socket" was not created for HTTP request before ${timeoutMs}ms`);
            err.code = "ETIMEOUT";
            onerror(err);
          };
          const callbackError = (err) => {
            if (timedOut)
              return;
            if (timeoutId !== null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            onerror(err);
          };
          const onsocket = (socket) => {
            if (timedOut)
              return;
            if (timeoutId != null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            if (isAgent(socket)) {
              debug("Callback returned another Agent instance %o", socket.constructor.name);
              socket.addRequest(req, opts);
              return;
            }
            if (socket) {
              socket.once("free", () => {
                this.freeSocket(socket, opts);
              });
              req.onSocket(socket);
              return;
            }
            const err = new Error(`no Duplex stream was returned to agent-base for \`${req.method} ${req.path}\``);
            onerror(err);
          };
          if (typeof this.callback !== "function") {
            onerror(new Error("`callback` is not defined"));
            return;
          }
          if (!this.promisifiedCallback) {
            if (this.callback.length >= 3) {
              debug("Converting legacy callback function to promise");
              this.promisifiedCallback = promisify_1.default(this.callback);
            } else {
              this.promisifiedCallback = this.callback;
            }
          }
          if (typeof timeoutMs === "number" && timeoutMs > 0) {
            timeoutId = setTimeout(ontimeout, timeoutMs);
          }
          if ("port" in opts && typeof opts.port !== "number") {
            opts.port = Number(opts.port);
          }
          try {
            debug("Resolving socket for %o request: %o", opts.protocol, `${req.method} ${req.path}`);
            Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
          } catch (err) {
            Promise.reject(err).catch(callbackError);
          }
        }
        freeSocket(socket, opts) {
          debug("Freeing socket %o %o", socket.constructor.name, opts);
          socket.destroy();
        }
        destroy() {
          debug("Destroying agent %o", this.constructor.name);
        }
      }
      createAgent2.Agent = Agent;
      createAgent2.prototype = createAgent2.Agent.prototype;
    })(createAgent || (createAgent = {}));
    module2.exports = createAgent;
  }
});

// node_modules/http-proxy-agent/dist/agent.js
var require_agent = __commonJS({
  "node_modules/http-proxy-agent/dist/agent.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var net_1 = __importDefault(require_net());
    var tls_1 = __importDefault(require_tls());
    var url_1 = __importDefault(require_url());
    var debug_1 = __importDefault(require_browser2());
    var once_1 = __importDefault(require_dist3());
    var agent_base_1 = require_src7();
    var debug = (0, debug_1.default)("http-proxy-agent");
    function isHTTPS(protocol) {
      return typeof protocol === "string" ? /^https:?$/i.test(protocol) : false;
    }
    var HttpProxyAgent = class extends agent_base_1.Agent {
      constructor(_opts) {
        let opts;
        if (typeof _opts === "string") {
          opts = url_1.default.parse(_opts);
        } else {
          opts = _opts;
        }
        if (!opts) {
          throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
        }
        debug("Creating new HttpProxyAgent instance: %o", opts);
        super(opts);
        const proxy = Object.assign({}, opts);
        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);
        proxy.host = proxy.hostname || proxy.host;
        if (typeof proxy.port === "string") {
          proxy.port = parseInt(proxy.port, 10);
        }
        if (!proxy.port && proxy.host) {
          proxy.port = this.secureProxy ? 443 : 80;
        }
        if (proxy.host && proxy.path) {
          delete proxy.path;
          delete proxy.pathname;
        }
        this.proxy = proxy;
      }
      /**
       * Called when the node-core HTTP client library is creating a
       * new HTTP request.
       *
       * @api protected
       */
      callback(req, opts) {
        return __awaiter(this, void 0, void 0, function* () {
          const { proxy, secureProxy } = this;
          const parsed = url_1.default.parse(req.path);
          if (!parsed.protocol) {
            parsed.protocol = "http:";
          }
          if (!parsed.hostname) {
            parsed.hostname = opts.hostname || opts.host || null;
          }
          if (parsed.port == null && typeof opts.port) {
            parsed.port = String(opts.port);
          }
          if (parsed.port === "80") {
            parsed.port = "";
          }
          req.path = url_1.default.format(parsed);
          if (proxy.auth) {
            req.setHeader("Proxy-Authorization", `Basic ${Buffer.from(proxy.auth).toString("base64")}`);
          }
          let socket;
          if (secureProxy) {
            debug("Creating `tls.Socket`: %o", proxy);
            socket = tls_1.default.connect(proxy);
          } else {
            debug("Creating `net.Socket`: %o", proxy);
            socket = net_1.default.connect(proxy);
          }
          if (req._header) {
            let first;
            let endOfHeaders;
            debug("Regenerating stored HTTP header string for request");
            req._header = null;
            req._implicitHeader();
            if (req.output && req.output.length > 0) {
              debug("Patching connection write() output buffer with updated header");
              first = req.output[0];
              endOfHeaders = first.indexOf("\r\n\r\n") + 4;
              req.output[0] = req._header + first.substring(endOfHeaders);
              debug("Output buffer: %o", req.output);
            } else if (req.outputData && req.outputData.length > 0) {
              debug("Patching connection write() output buffer with updated header");
              first = req.outputData[0].data;
              endOfHeaders = first.indexOf("\r\n\r\n") + 4;
              req.outputData[0].data = req._header + first.substring(endOfHeaders);
              debug("Output buffer: %o", req.outputData[0].data);
            }
          }
          yield (0, once_1.default)(socket, "connect");
          return socket;
        });
      }
    };
    exports2.default = HttpProxyAgent;
  }
});

// node_modules/http-proxy-agent/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/http-proxy-agent/dist/index.js"(exports2, module2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    var agent_1 = __importDefault(require_agent());
    function createHttpProxyAgent(opts) {
      return new agent_1.default(opts);
    }
    (function(createHttpProxyAgent2) {
      createHttpProxyAgent2.HttpProxyAgent = agent_1.default;
      createHttpProxyAgent2.prototype = agent_1.default.prototype;
    })(createHttpProxyAgent || (createHttpProxyAgent = {}));
    module2.exports = createHttpProxyAgent;
  }
});

// node_modules/teeny-request/node_modules/agent-base/dist/src/promisify.js
var require_promisify2 = __commonJS({
  "node_modules/teeny-request/node_modules/agent-base/dist/src/promisify.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function promisify(fn) {
      return function(req, opts) {
        return new Promise((resolve, reject) => {
          fn.call(this, req, opts, (err, rtn) => {
            if (err) {
              reject(err);
            } else {
              resolve(rtn);
            }
          });
        });
      };
    }
    exports2.default = promisify;
  }
});

// node_modules/teeny-request/node_modules/agent-base/dist/src/index.js
var require_src8 = __commonJS({
  "node_modules/teeny-request/node_modules/agent-base/dist/src/index.js"(exports2, module2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    var events_1 = require_events();
    var debug_1 = __importDefault(require_browser2());
    var promisify_1 = __importDefault(require_promisify2());
    var debug = debug_1.default("agent-base");
    function isAgent(v) {
      return Boolean(v) && typeof v.addRequest === "function";
    }
    function isSecureEndpoint() {
      const { stack } = new Error();
      if (typeof stack !== "string")
        return false;
      return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
    }
    function createAgent(callback, opts) {
      return new createAgent.Agent(callback, opts);
    }
    (function(createAgent2) {
      class Agent extends events_1.EventEmitter {
        constructor(callback, _opts) {
          super();
          let opts = _opts;
          if (typeof callback === "function") {
            this.callback = callback;
          } else if (callback) {
            opts = callback;
          }
          this.timeout = null;
          if (opts && typeof opts.timeout === "number") {
            this.timeout = opts.timeout;
          }
          this.maxFreeSockets = 1;
          this.maxSockets = 1;
          this.maxTotalSockets = Infinity;
          this.sockets = {};
          this.freeSockets = {};
          this.requests = {};
          this.options = {};
        }
        get defaultPort() {
          if (typeof this.explicitDefaultPort === "number") {
            return this.explicitDefaultPort;
          }
          return isSecureEndpoint() ? 443 : 80;
        }
        set defaultPort(v) {
          this.explicitDefaultPort = v;
        }
        get protocol() {
          if (typeof this.explicitProtocol === "string") {
            return this.explicitProtocol;
          }
          return isSecureEndpoint() ? "https:" : "http:";
        }
        set protocol(v) {
          this.explicitProtocol = v;
        }
        callback(req, opts, fn) {
          throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
        }
        /**
         * Called by node-core's "_http_client.js" module when creating
         * a new HTTP request with this Agent instance.
         *
         * @api public
         */
        addRequest(req, _opts) {
          const opts = Object.assign({}, _opts);
          if (typeof opts.secureEndpoint !== "boolean") {
            opts.secureEndpoint = isSecureEndpoint();
          }
          if (opts.host == null) {
            opts.host = "localhost";
          }
          if (opts.port == null) {
            opts.port = opts.secureEndpoint ? 443 : 80;
          }
          if (opts.protocol == null) {
            opts.protocol = opts.secureEndpoint ? "https:" : "http:";
          }
          if (opts.host && opts.path) {
            delete opts.path;
          }
          delete opts.agent;
          delete opts.hostname;
          delete opts._defaultAgent;
          delete opts.defaultPort;
          delete opts.createConnection;
          req._last = true;
          req.shouldKeepAlive = false;
          let timedOut = false;
          let timeoutId = null;
          const timeoutMs = opts.timeout || this.timeout;
          const onerror = (err) => {
            if (req._hadError)
              return;
            req.emit("error", err);
            req._hadError = true;
          };
          const ontimeout = () => {
            timeoutId = null;
            timedOut = true;
            const err = new Error(`A "socket" was not created for HTTP request before ${timeoutMs}ms`);
            err.code = "ETIMEOUT";
            onerror(err);
          };
          const callbackError = (err) => {
            if (timedOut)
              return;
            if (timeoutId !== null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            onerror(err);
          };
          const onsocket = (socket) => {
            if (timedOut)
              return;
            if (timeoutId != null) {
              clearTimeout(timeoutId);
              timeoutId = null;
            }
            if (isAgent(socket)) {
              debug("Callback returned another Agent instance %o", socket.constructor.name);
              socket.addRequest(req, opts);
              return;
            }
            if (socket) {
              socket.once("free", () => {
                this.freeSocket(socket, opts);
              });
              req.onSocket(socket);
              return;
            }
            const err = new Error(`no Duplex stream was returned to agent-base for \`${req.method} ${req.path}\``);
            onerror(err);
          };
          if (typeof this.callback !== "function") {
            onerror(new Error("`callback` is not defined"));
            return;
          }
          if (!this.promisifiedCallback) {
            if (this.callback.length >= 3) {
              debug("Converting legacy callback function to promise");
              this.promisifiedCallback = promisify_1.default(this.callback);
            } else {
              this.promisifiedCallback = this.callback;
            }
          }
          if (typeof timeoutMs === "number" && timeoutMs > 0) {
            timeoutId = setTimeout(ontimeout, timeoutMs);
          }
          if ("port" in opts && typeof opts.port !== "number") {
            opts.port = Number(opts.port);
          }
          try {
            debug("Resolving socket for %o request: %o", opts.protocol, `${req.method} ${req.path}`);
            Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
          } catch (err) {
            Promise.reject(err).catch(callbackError);
          }
        }
        freeSocket(socket, opts) {
          debug("Freeing socket %o %o", socket.constructor.name, opts);
          socket.destroy();
        }
        destroy() {
          debug("Destroying agent %o", this.constructor.name);
        }
      }
      createAgent2.Agent = Agent;
      createAgent2.prototype = createAgent2.Agent.prototype;
    })(createAgent || (createAgent = {}));
    module2.exports = createAgent;
  }
});

// node_modules/teeny-request/node_modules/https-proxy-agent/dist/parse-proxy-response.js
var require_parse_proxy_response2 = __commonJS({
  "node_modules/teeny-request/node_modules/https-proxy-agent/dist/parse-proxy-response.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var debug_1 = __importDefault(require_browser2());
    var debug = debug_1.default("https-proxy-agent:parse-proxy-response");
    function parseProxyResponse(socket) {
      return new Promise((resolve, reject) => {
        let buffersLength = 0;
        const buffers = [];
        function read() {
          const b = socket.read();
          if (b)
            ondata(b);
          else
            socket.once("readable", read);
        }
        function cleanup() {
          socket.removeListener("end", onend);
          socket.removeListener("error", onerror);
          socket.removeListener("close", onclose);
          socket.removeListener("readable", read);
        }
        function onclose(err) {
          debug("onclose had error %o", err);
        }
        function onend() {
          debug("onend");
        }
        function onerror(err) {
          cleanup();
          debug("onerror %o", err);
          reject(err);
        }
        function ondata(b) {
          buffers.push(b);
          buffersLength += b.length;
          const buffered = Buffer.concat(buffers, buffersLength);
          const endOfHeaders = buffered.indexOf("\r\n\r\n");
          if (endOfHeaders === -1) {
            debug("have not received end of HTTP headers yet...");
            read();
            return;
          }
          const firstLine = buffered.toString("ascii", 0, buffered.indexOf("\r\n"));
          const statusCode = +firstLine.split(" ")[1];
          debug("got proxy server response: %o", firstLine);
          resolve({
            statusCode,
            buffered
          });
        }
        socket.on("error", onerror);
        socket.on("close", onclose);
        socket.on("end", onend);
        read();
      });
    }
    exports2.default = parseProxyResponse;
  }
});

// node_modules/teeny-request/node_modules/https-proxy-agent/dist/agent.js
var require_agent2 = __commonJS({
  "node_modules/teeny-request/node_modules/https-proxy-agent/dist/agent.js"(exports2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var net_1 = __importDefault(require_net());
    var tls_1 = __importDefault(require_tls());
    var url_1 = __importDefault(require_url());
    var assert_1 = __importDefault(require_assert());
    var debug_1 = __importDefault(require_browser2());
    var agent_base_1 = require_src8();
    var parse_proxy_response_1 = __importDefault(require_parse_proxy_response2());
    var debug = debug_1.default("https-proxy-agent:agent");
    var HttpsProxyAgent = class extends agent_base_1.Agent {
      constructor(_opts) {
        let opts;
        if (typeof _opts === "string") {
          opts = url_1.default.parse(_opts);
        } else {
          opts = _opts;
        }
        if (!opts) {
          throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
        }
        debug("creating new HttpsProxyAgent instance: %o", opts);
        super(opts);
        const proxy = Object.assign({}, opts);
        this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);
        proxy.host = proxy.hostname || proxy.host;
        if (typeof proxy.port === "string") {
          proxy.port = parseInt(proxy.port, 10);
        }
        if (!proxy.port && proxy.host) {
          proxy.port = this.secureProxy ? 443 : 80;
        }
        if (this.secureProxy && !("ALPNProtocols" in proxy)) {
          proxy.ALPNProtocols = ["http 1.1"];
        }
        if (proxy.host && proxy.path) {
          delete proxy.path;
          delete proxy.pathname;
        }
        this.proxy = proxy;
      }
      /**
       * Called when the node-core HTTP client library is creating a
       * new HTTP request.
       *
       * @api protected
       */
      callback(req, opts) {
        return __awaiter(this, void 0, void 0, function* () {
          const { proxy, secureProxy } = this;
          let socket;
          if (secureProxy) {
            debug("Creating `tls.Socket`: %o", proxy);
            socket = tls_1.default.connect(proxy);
          } else {
            debug("Creating `net.Socket`: %o", proxy);
            socket = net_1.default.connect(proxy);
          }
          const headers = Object.assign({}, proxy.headers);
          const hostname = `${opts.host}:${opts.port}`;
          let payload = `CONNECT ${hostname} HTTP/1.1\r
`;
          if (proxy.auth) {
            headers["Proxy-Authorization"] = `Basic ${Buffer.from(proxy.auth).toString("base64")}`;
          }
          let { host, port, secureEndpoint } = opts;
          if (!isDefaultPort(port, secureEndpoint)) {
            host += `:${port}`;
          }
          headers.Host = host;
          headers.Connection = "close";
          for (const name of Object.keys(headers)) {
            payload += `${name}: ${headers[name]}\r
`;
          }
          const proxyResponsePromise = parse_proxy_response_1.default(socket);
          socket.write(`${payload}\r
`);
          const { statusCode, buffered } = yield proxyResponsePromise;
          if (statusCode === 200) {
            req.once("socket", resume);
            if (opts.secureEndpoint) {
              debug("Upgrading socket connection to TLS");
              const servername = opts.servername || opts.host;
              return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, "host", "hostname", "path", "port")), {
                socket,
                servername
              }));
            }
            return socket;
          }
          socket.destroy();
          const fakeSocket = new net_1.default.Socket({ writable: false });
          fakeSocket.readable = true;
          req.once("socket", (s) => {
            debug("replaying proxy buffer for failed request");
            assert_1.default(s.listenerCount("data") > 0);
            s.push(buffered);
            s.push(null);
          });
          return fakeSocket;
        });
      }
    };
    exports2.default = HttpsProxyAgent;
    function resume(socket) {
      socket.resume();
    }
    function isDefaultPort(port, secure) {
      return Boolean(!secure && port === 80 || secure && port === 443);
    }
    function isHTTPS(protocol) {
      return typeof protocol === "string" ? /^https:?$/i.test(protocol) : false;
    }
    function omit(obj, ...keys) {
      const ret = {};
      let key;
      for (key in obj) {
        if (!keys.includes(key)) {
          ret[key] = obj[key];
        }
      }
      return ret;
    }
  }
});

// node_modules/teeny-request/node_modules/https-proxy-agent/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/teeny-request/node_modules/https-proxy-agent/dist/index.js"(exports2, module2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    var agent_1 = __importDefault(require_agent2());
    function createHttpsProxyAgent(opts) {
      return new agent_1.default(opts);
    }
    (function(createHttpsProxyAgent2) {
      createHttpsProxyAgent2.HttpsProxyAgent = agent_1.default;
      createHttpsProxyAgent2.prototype = agent_1.default.prototype;
    })(createHttpsProxyAgent || (createHttpsProxyAgent = {}));
    module2.exports = createHttpsProxyAgent;
  }
});

// node_modules/teeny-request/build/src/agents.js
var require_agents = __commonJS({
  "node_modules/teeny-request/build/src/agents.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAgent = exports2.pool = void 0;
    var http_1 = require_http();
    var https_1 = require_https();
    var url_1 = require_url();
    exports2.pool = /* @__PURE__ */ new Map();
    function shouldUseProxyForURI(uri) {
      const noProxyEnv = process.env.NO_PROXY || process.env.no_proxy;
      if (!noProxyEnv) {
        return true;
      }
      const givenURI = new URL(uri);
      for (const noProxyRaw of noProxyEnv.split(",")) {
        const noProxy = noProxyRaw.trim();
        if (noProxy === givenURI.origin || noProxy === givenURI.hostname) {
          return false;
        } else if (noProxy.startsWith("*.") || noProxy.startsWith(".")) {
          const noProxyWildcard = noProxy.replace(/^\*\./, ".");
          if (givenURI.hostname.endsWith(noProxyWildcard)) {
            return false;
          }
        }
      }
      return true;
    }
    function getAgent(uri, reqOpts) {
      const isHttp = uri.startsWith("http://");
      const proxy = reqOpts.proxy || process.env.HTTP_PROXY || process.env.http_proxy || process.env.HTTPS_PROXY || process.env.https_proxy;
      const poolOptions = Object.assign({}, reqOpts.pool);
      const manuallyProvidedProxy = !!reqOpts.proxy;
      const shouldUseProxy = manuallyProvidedProxy || shouldUseProxyForURI(uri);
      if (proxy && shouldUseProxy) {
        const Agent = isHttp ? require_dist4() : require_dist5();
        const proxyOpts = { ...(0, url_1.parse)(proxy), ...poolOptions };
        return new Agent(proxyOpts);
      }
      let key = isHttp ? "http" : "https";
      if (reqOpts.forever) {
        key += ":forever";
        if (!exports2.pool.has(key)) {
          const Agent = isHttp ? http_1.Agent : https_1.Agent;
          exports2.pool.set(key, new Agent({ ...poolOptions, keepAlive: true }));
        }
      }
      return exports2.pool.get(key);
    }
    exports2.getAgent = getAgent;
  }
});

// node_modules/teeny-request/build/src/TeenyStatistics.js
var require_TeenyStatistics = __commonJS({
  "node_modules/teeny-request/build/src/TeenyStatistics.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TeenyStatistics = exports2.TeenyStatisticsWarning = void 0;
    var TeenyStatisticsWarning = class extends Error {
      /**
       * @param {string} message
       */
      constructor(message) {
        super(message);
        this.threshold = 0;
        this.type = "";
        this.value = 0;
        this.name = this.constructor.name;
        Error.captureStackTrace(this, this.constructor);
      }
    };
    exports2.TeenyStatisticsWarning = TeenyStatisticsWarning;
    TeenyStatisticsWarning.CONCURRENT_REQUESTS = "ConcurrentRequestsExceededWarning";
    var TeenyStatistics = class {
      /**
       * @param {TeenyStatisticsOptions} [opts]
       */
      constructor(opts) {
        this._concurrentRequests = 0;
        this._didConcurrentRequestWarn = false;
        this._options = TeenyStatistics._prepareOptions(opts);
      }
      /**
       * Returns a copy of the current options.
       * @return {TeenyStatisticsOptions}
       */
      getOptions() {
        return Object.assign({}, this._options);
      }
      /**
       * Change configured statistics options. This will not preserve unspecified
       *   options that were previously specified, i.e. this is a reset of options.
       * @param {TeenyStatisticsOptions} [opts]
       * @returns {TeenyStatisticsConfig} The previous options.
       * @see _prepareOptions
       */
      setOptions(opts) {
        const oldOpts = this._options;
        this._options = TeenyStatistics._prepareOptions(opts);
        return oldOpts;
      }
      /**
       * @readonly
       * @return {TeenyStatisticsCounters}
       */
      get counters() {
        return {
          concurrentRequests: this._concurrentRequests
        };
      }
      /**
       * @description Should call this right before making a request.
       */
      requestStarting() {
        this._concurrentRequests++;
        if (this._options.concurrentRequests > 0 && this._concurrentRequests >= this._options.concurrentRequests && !this._didConcurrentRequestWarn) {
          this._didConcurrentRequestWarn = true;
          const warning = new TeenyStatisticsWarning("Possible excessive concurrent requests detected. " + this._concurrentRequests + " requests in-flight, which exceeds the configured threshold of " + this._options.concurrentRequests + ". Use the TEENY_REQUEST_WARN_CONCURRENT_REQUESTS environment variable or the concurrentRequests option of teeny-request to increase or disable (0) this warning.");
          warning.type = TeenyStatisticsWarning.CONCURRENT_REQUESTS;
          warning.value = this._concurrentRequests;
          warning.threshold = this._options.concurrentRequests;
          process.emitWarning(warning);
        }
      }
      /**
       * @description When using `requestStarting`, call this after the request
       *   has finished.
       */
      requestFinished() {
        this._concurrentRequests--;
      }
      /**
       * Configuration Precedence:
       *   1. Dependency inversion via defined option.
       *   2. Global numeric environment variable.
       *   3. Built-in default.
       * This will not preserve unspecified options previously specified.
       * @param {TeenyStatisticsOptions} [opts]
       * @returns {TeenyStatisticsOptions}
       * @private
       */
      static _prepareOptions({ concurrentRequests: diConcurrentRequests } = {}) {
        let concurrentRequests = this.DEFAULT_WARN_CONCURRENT_REQUESTS;
        const envConcurrentRequests = Number(process.env.TEENY_REQUEST_WARN_CONCURRENT_REQUESTS);
        if (diConcurrentRequests !== void 0) {
          concurrentRequests = diConcurrentRequests;
        } else if (!Number.isNaN(envConcurrentRequests)) {
          concurrentRequests = envConcurrentRequests;
        }
        return { concurrentRequests };
      }
    };
    exports2.TeenyStatistics = TeenyStatistics;
    TeenyStatistics.DEFAULT_WARN_CONCURRENT_REQUESTS = 5e3;
  }
});

// node_modules/stubs/index.js
var require_stubs = __commonJS({
  "node_modules/stubs/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function stubs(obj, method, cfg, stub) {
      if (!obj || !method || !obj[method])
        throw new Error("You must provide an object and a key for an existing method");
      if (!stub) {
        stub = cfg;
        cfg = {};
      }
      stub = stub || function() {
      };
      cfg.callthrough = cfg.callthrough || false;
      cfg.calls = cfg.calls || 0;
      var norevert = cfg.calls === 0;
      var cached = obj[method].bind(obj);
      obj[method] = function() {
        var args = [].slice.call(arguments);
        var returnVal;
        if (cfg.callthrough)
          returnVal = cached.apply(obj, args);
        returnVal = stub.apply(obj, args) || returnVal;
        if (!norevert && --cfg.calls === 0)
          obj[method] = cached;
        return returnVal;
      };
    };
  }
});

// node_modules/stream-events/index.js
var require_stream_events = __commonJS({
  "node_modules/stream-events/index.js"(exports2, module2) {
    "use strict";
    var stubs = require_stubs();
    function StreamEvents(stream) {
      stream = stream || this;
      var cfg = {
        callthrough: true,
        calls: 1
      };
      stubs(stream, "_read", cfg, stream.emit.bind(stream, "reading"));
      stubs(stream, "_write", cfg, stream.emit.bind(stream, "writing"));
      return stream;
    }
    module2.exports = StreamEvents;
  }
});

// node_modules/teeny-request/build/src/index.js
var require_src9 = __commonJS({
  "node_modules/teeny-request/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.teenyRequest = exports2.RequestError = void 0;
    var node_fetch_1 = require_browser3();
    var stream_1 = require_stream();
    var uuid = require_commonjs_browser();
    var agents_1 = require_agents();
    var TeenyStatistics_1 = require_TeenyStatistics();
    var streamEvents = require_stream_events();
    var RequestError = class extends Error {
    };
    exports2.RequestError = RequestError;
    function requestToFetchOptions(reqOpts) {
      const options = {
        method: reqOpts.method || "GET",
        ...reqOpts.timeout && { timeout: reqOpts.timeout },
        ...typeof reqOpts.gzip === "boolean" && { compress: reqOpts.gzip }
      };
      if (typeof reqOpts.json === "object") {
        reqOpts.headers = reqOpts.headers || {};
        reqOpts.headers["Content-Type"] = "application/json";
        options.body = JSON.stringify(reqOpts.json);
      } else {
        if (Buffer.isBuffer(reqOpts.body)) {
          options.body = reqOpts.body;
        } else if (typeof reqOpts.body !== "string") {
          options.body = JSON.stringify(reqOpts.body);
        } else {
          options.body = reqOpts.body;
        }
      }
      options.headers = reqOpts.headers;
      let uri = reqOpts.uri || reqOpts.url;
      if (!uri) {
        throw new Error("Missing uri or url in reqOpts.");
      }
      if (reqOpts.useQuerystring === true || typeof reqOpts.qs === "object") {
        const qs = require_querystring();
        const params = qs.stringify(reqOpts.qs);
        uri = uri + "?" + params;
      }
      options.agent = (0, agents_1.getAgent)(uri, reqOpts);
      return { uri, options };
    }
    function fetchToRequestResponse(opts, res) {
      const request = {};
      request.agent = opts.agent || false;
      request.headers = opts.headers || {};
      request.href = res.url;
      const resHeaders = {};
      res.headers.forEach((value, key) => resHeaders[key] = value);
      const response = Object.assign(res.body, {
        statusCode: res.status,
        statusMessage: res.statusText,
        request,
        body: res.body,
        headers: resHeaders,
        toJSON: () => ({ headers: resHeaders })
      });
      return response;
    }
    function createMultipartStream(boundary, multipart) {
      const finale = `--${boundary}--`;
      const stream = new stream_1.PassThrough();
      for (const part of multipart) {
        const preamble = `--${boundary}\r
Content-Type: ${part["Content-Type"]}\r
\r
`;
        stream.write(preamble);
        if (typeof part.body === "string") {
          stream.write(part.body);
          stream.write("\r\n");
        } else {
          part.body.pipe(stream, { end: false });
          part.body.on("end", () => {
            stream.write("\r\n");
            stream.write(finale);
            stream.end();
          });
        }
      }
      return stream;
    }
    function teenyRequest(reqOpts, callback) {
      const { uri, options } = requestToFetchOptions(reqOpts);
      const multipart = reqOpts.multipart;
      if (reqOpts.multipart && multipart.length === 2) {
        if (!callback) {
          throw new Error("Multipart without callback is not implemented.");
        }
        const boundary = uuid.v4();
        options.headers["Content-Type"] = `multipart/related; boundary=${boundary}`;
        options.body = createMultipartStream(boundary, multipart);
        teenyRequest.stats.requestStarting();
        (0, node_fetch_1.default)(uri, options).then((res) => {
          teenyRequest.stats.requestFinished();
          const header = res.headers.get("content-type");
          const response = fetchToRequestResponse(options, res);
          const body = response.body;
          if (header === "application/json" || header === "application/json; charset=utf-8") {
            res.json().then((json) => {
              response.body = json;
              callback(null, response, json);
            }, (err) => {
              callback(err, response, body);
            });
            return;
          }
          res.text().then((text) => {
            response.body = text;
            callback(null, response, text);
          }, (err) => {
            callback(err, response, body);
          });
        }, (err) => {
          teenyRequest.stats.requestFinished();
          callback(err, null, null);
        });
        return;
      }
      if (callback === void 0) {
        const requestStream = streamEvents(new stream_1.PassThrough());
        let responseStream;
        requestStream.once("reading", () => {
          if (responseStream) {
            (0, stream_1.pipeline)(responseStream, requestStream, () => {
            });
          } else {
            requestStream.once("response", () => {
              (0, stream_1.pipeline)(responseStream, requestStream, () => {
              });
            });
          }
        });
        options.compress = false;
        teenyRequest.stats.requestStarting();
        (0, node_fetch_1.default)(uri, options).then((res) => {
          teenyRequest.stats.requestFinished();
          responseStream = res.body;
          responseStream.on("error", (err) => {
            requestStream.emit("error", err);
          });
          const response = fetchToRequestResponse(options, res);
          requestStream.emit("response", response);
        }, (err) => {
          teenyRequest.stats.requestFinished();
          requestStream.emit("error", err);
        });
        return requestStream;
      }
      teenyRequest.stats.requestStarting();
      (0, node_fetch_1.default)(uri, options).then((res) => {
        teenyRequest.stats.requestFinished();
        const header = res.headers.get("content-type");
        const response = fetchToRequestResponse(options, res);
        const body = response.body;
        if (header === "application/json" || header === "application/json; charset=utf-8") {
          if (response.statusCode === 204) {
            callback(null, response, body);
            return;
          }
          res.json().then((json) => {
            response.body = json;
            callback(null, response, json);
          }, (err) => {
            callback(err, response, body);
          });
          return;
        }
        res.text().then((text) => {
          const response2 = fetchToRequestResponse(options, res);
          response2.body = text;
          callback(null, response2, text);
        }, (err) => {
          callback(err, response, body);
        });
      }, (err) => {
        teenyRequest.stats.requestFinished();
        callback(err, null, null);
      });
      return;
    }
    exports2.teenyRequest = teenyRequest;
    teenyRequest.defaults = (defaults) => {
      return (reqOpts, callback) => {
        const opts = { ...defaults, ...reqOpts };
        if (callback === void 0) {
          return teenyRequest(opts);
        }
        teenyRequest(opts, callback);
      };
    };
    teenyRequest.stats = new TeenyStatistics_1.TeenyStatistics();
    teenyRequest.resetStats = () => {
      teenyRequest.stats = new TeenyStatistics_1.TeenyStatistics(teenyRequest.stats.getOptions());
    };
  }
});

// node_modules/@google-cloud/common/build/src/service.js
var require_service = __commonJS({
  "node_modules/@google-cloud/common/build/src/service.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Service = exports2.DEFAULT_PROJECT_ID_TOKEN = void 0;
    var arrify = require_arrify();
    var extend = require_extend();
    var util_1 = require_util2();
    exports2.DEFAULT_PROJECT_ID_TOKEN = "{{projectId}}";
    var Service = class {
      /**
       * Service is a base class, meant to be inherited from by a "service," like
       * BigQuery or Storage.
       *
       * This handles making authenticated requests by exposing a `makeReq_`
       * function.
       *
       * @constructor
       * @alias module:common/service
       *
       * @param {object} config - Configuration object.
       * @param {string} config.baseUrl - The base URL to make API requests to.
       * @param {string[]} config.scopes - The scopes required for the request.
       * @param {object=} options - [Configuration object](#/docs).
       */
      constructor(config, options = {}) {
        this.baseUrl = config.baseUrl;
        this.apiEndpoint = config.apiEndpoint;
        this.timeout = options.timeout;
        this.globalInterceptors = arrify(options.interceptors_);
        this.interceptors = [];
        this.packageJson = config.packageJson;
        this.projectId = options.projectId || exports2.DEFAULT_PROJECT_ID_TOKEN;
        this.projectIdRequired = config.projectIdRequired !== false;
        this.providedUserAgent = options.userAgent;
        const reqCfg = extend({}, config, {
          projectIdRequired: this.projectIdRequired,
          projectId: this.projectId,
          authClient: options.authClient,
          credentials: options.credentials,
          keyFile: options.keyFilename,
          email: options.email,
          token: options.token
        });
        this.makeAuthenticatedRequest = util_1.util.makeAuthenticatedRequestFactory(reqCfg);
        this.authClient = this.makeAuthenticatedRequest.authClient;
        this.getCredentials = this.makeAuthenticatedRequest.getCredentials;
        const isCloudFunctionEnv = !!process.env.FUNCTION_NAME;
        if (isCloudFunctionEnv) {
          this.interceptors.push({
            request(reqOpts) {
              reqOpts.forever = false;
              return reqOpts;
            }
          });
        }
      }
      /**
       * Return the user's custom request interceptors.
       */
      getRequestInterceptors() {
        return [].slice.call(this.globalInterceptors).concat(this.interceptors).filter((interceptor) => typeof interceptor.request === "function").map((interceptor) => interceptor.request);
      }
      getProjectId(callback) {
        if (!callback) {
          return this.getProjectIdAsync();
        }
        this.getProjectIdAsync().then((p) => callback(null, p), callback);
      }
      async getProjectIdAsync() {
        const projectId = await this.authClient.getProjectId();
        if (this.projectId === exports2.DEFAULT_PROJECT_ID_TOKEN && projectId) {
          this.projectId = projectId;
        }
        return this.projectId;
      }
      request_(reqOpts, callback) {
        reqOpts = extend(true, {}, reqOpts, { timeout: this.timeout });
        const isAbsoluteUrl = reqOpts.uri.indexOf("http") === 0;
        const uriComponents = [this.baseUrl];
        if (this.projectIdRequired) {
          if (reqOpts.projectId) {
            uriComponents.push("projects");
            uriComponents.push(reqOpts.projectId);
          } else {
            uriComponents.push("projects");
            uriComponents.push(this.projectId);
          }
        }
        uriComponents.push(reqOpts.uri);
        if (isAbsoluteUrl) {
          uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));
        }
        reqOpts.uri = uriComponents.map((uriComponent) => {
          const trimSlashesRegex = /^\/*|\/*$/g;
          return uriComponent.replace(trimSlashesRegex, "");
        }).join("/").replace(/\/:/g, ":");
        const requestInterceptors = this.getRequestInterceptors();
        arrify(reqOpts.interceptors_).forEach((interceptor) => {
          if (typeof interceptor.request === "function") {
            requestInterceptors.push(interceptor.request);
          }
        });
        requestInterceptors.forEach((requestInterceptor) => {
          reqOpts = requestInterceptor(reqOpts);
        });
        delete reqOpts.interceptors_;
        const pkg = this.packageJson;
        let userAgent = util_1.util.getUserAgentFromPackageJson(pkg);
        if (this.providedUserAgent) {
          userAgent = `${this.providedUserAgent} ${userAgent}`;
        }
        reqOpts.headers = extend({}, reqOpts.headers, {
          "User-Agent": userAgent,
          "x-goog-api-client": `gl-node/${process.versions.node} gccl/${pkg.version}`
        });
        if (reqOpts.shouldReturnStream) {
          return this.makeAuthenticatedRequest(reqOpts);
        } else {
          this.makeAuthenticatedRequest(reqOpts, callback);
        }
      }
      /**
       * Make an authenticated API request.
       *
       * @param {object} reqOpts - Request options that are passed to `request`.
       * @param {string} reqOpts.uri - A URI relative to the baseUrl.
       * @param {function} callback - The callback function passed to `request`.
       */
      request(reqOpts, callback) {
        Service.prototype.request_.call(this, reqOpts, callback);
      }
      /**
       * Make an authenticated API request.
       *
       * @param {object} reqOpts - Request options that are passed to `request`.
       * @param {string} reqOpts.uri - A URI relative to the baseUrl.
       */
      requestStream(reqOpts) {
        const opts = extend(true, reqOpts, { shouldReturnStream: true });
        return Service.prototype.request_.call(this, opts);
      }
    };
    exports2.Service = Service;
  }
});

// node_modules/readable-stream/lib/internal/streams/stream-browser.js
var require_stream_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports2, module2) {
    module2.exports = require_events().EventEmitter;
  }
});

// node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports2, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require_buffer();
    var Buffer2 = _require.Buffer;
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next)
            ret += s + p.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-stream/errors-browser.js
var require_errors_browser = __commonJS({
  "node_modules/readable-stream/errors-browser.js"(exports2, module2) {
    "use strict";
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
          return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
      }(Base);
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(typeof actual);
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/state.js"(exports2, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/util-deprecate/browser.js
var require_browser4 = __commonJS({
  "node_modules/util-deprecate/browser.js"(exports2, module2) {
    module2.exports = deprecate;
    function deprecate(fn, msg) {
      if (config("noDeprecation")) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (config("throwDeprecation")) {
            throw new Error(msg);
          } else if (config("traceDeprecation")) {
            console.trace(msg);
          } else {
            console.warn(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    }
    function config(name) {
      try {
        if (!global.localStorage)
          return false;
      } catch (_) {
        return false;
      }
      var val = global.localStorage[name];
      if (null == val)
        return false;
      return String(val).toLowerCase() === "true";
    }
  }
});

// node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-stream/lib/_stream_writable.js"(exports2, module2) {
    "use strict";
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_browser4()
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits_browser()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj)
        keys2.push(key);
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits_browser()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports2) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports2.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "�";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "�";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "�";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "�";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports2, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/readable-stream/lib/internal/streams/from-browser.js
var require_from_browser = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports2, module2) {
    module2.exports = function() {
      throw new Error("Readable.from is not available in the browser");
    };
  }
});

// node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-stream/lib/_stream_readable.js"(exports2, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require_events().EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream_browser();
    var Buffer2 = require_buffer().Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require_util();
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors_browser().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits_browser()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++)
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from_browser();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-stream/lib/_stream_transform.js"(exports2, module2) {
    "use strict";
    module2.exports = Transform;
    var _require$codes = require_errors_browser().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits_browser()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module2) {
    "use strict";
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits_browser()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports2, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors_browser().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/readable-stream/readable-browser.js
var require_readable_browser = __commonJS({
  "node_modules/readable-stream/readable-browser.js"(exports2, module2) {
    exports2 = module2.exports = require_stream_readable();
    exports2.Stream = exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable();
    exports2.Duplex = require_stream_duplex();
    exports2.Transform = require_stream_transform();
    exports2.PassThrough = require_stream_passthrough();
    exports2.finished = require_end_of_stream();
    exports2.pipeline = require_pipeline();
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports2, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports2, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/end-of-stream/index.js
var require_end_of_stream2 = __commonJS({
  "node_modules/end-of-stream/index.js"(exports2, module2) {
    var once = require_once();
    var noop = function() {
    };
    var isRequest = function(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    };
    var isChildProcess = function(stream) {
      return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
    };
    var eos = function(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var ws = stream._writableState;
      var rs = stream._readableState;
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var cancelled = false;
      var onlegacyfinish = function() {
        if (!stream.writable)
          onfinish();
      };
      var onfinish = function() {
        writable = false;
        if (!readable)
          callback.call(stream);
      };
      var onend = function() {
        readable = false;
        if (!writable)
          callback.call(stream);
      };
      var onexit = function(exitCode) {
        callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
      };
      var onerror = function(err) {
        callback.call(stream, err);
      };
      var onclose = function() {
        process.nextTick(onclosenexttick);
      };
      var onclosenexttick = function() {
        if (cancelled)
          return;
        if (readable && !(rs && (rs.ended && !rs.destroyed)))
          return callback.call(stream, new Error("premature close"));
        if (writable && !(ws && (ws.ended && !ws.destroyed)))
          return callback.call(stream, new Error("premature close"));
      };
      var onrequest = function() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !ws) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      if (isChildProcess(stream))
        stream.on("exit", onexit);
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        cancelled = true;
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("exit", onexit);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    };
    module2.exports = eos;
  }
});

// node_modules/stream-shift/index.js
var require_stream_shift = __commonJS({
  "node_modules/stream-shift/index.js"(exports2, module2) {
    module2.exports = shift;
    function shift(stream) {
      var rs = stream._readableState;
      if (!rs)
        return null;
      return rs.objectMode || typeof stream._duplexState === "number" ? stream.read() : stream.read(getStateLength(rs));
    }
    function getStateLength(state) {
      if (state.buffer.length) {
        if (state.buffer.head) {
          return state.buffer.head.data.length;
        }
        return state.buffer[0].length;
      }
      return state.length;
    }
  }
});

// node_modules/duplexify/index.js
var require_duplexify = __commonJS({
  "node_modules/duplexify/index.js"(exports2, module2) {
    var stream = require_readable_browser();
    var eos = require_end_of_stream2();
    var inherits = require_inherits_browser();
    var shift = require_stream_shift();
    var SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from([0]) : new Buffer([0]);
    var onuncork = function(self2, fn) {
      if (self2._corked)
        self2.once("uncork", fn);
      else
        fn();
    };
    var autoDestroy = function(self2, err) {
      if (self2._autoDestroy)
        self2.destroy(err);
    };
    var destroyer = function(self2, end2) {
      return function(err) {
        if (err)
          autoDestroy(self2, err.message === "premature close" ? null : err);
        else if (end2 && !self2._ended)
          self2.end();
      };
    };
    var end = function(ws, fn) {
      if (!ws)
        return fn();
      if (ws._writableState && ws._writableState.finished)
        return fn();
      if (ws._writableState)
        return ws.end(fn);
      ws.end();
      fn();
    };
    var noop = function() {
    };
    var toStreams2 = function(rs) {
      return new stream.Readable({ objectMode: true, highWaterMark: 16 }).wrap(rs);
    };
    var Duplexify = function(writable, readable, opts) {
      if (!(this instanceof Duplexify))
        return new Duplexify(writable, readable, opts);
      stream.Duplex.call(this, opts);
      this._writable = null;
      this._readable = null;
      this._readable2 = null;
      this._autoDestroy = !opts || opts.autoDestroy !== false;
      this._forwardDestroy = !opts || opts.destroy !== false;
      this._forwardEnd = !opts || opts.end !== false;
      this._corked = 1;
      this._ondrain = null;
      this._drained = false;
      this._forwarding = false;
      this._unwrite = null;
      this._unread = null;
      this._ended = false;
      this.destroyed = false;
      if (writable)
        this.setWritable(writable);
      if (readable)
        this.setReadable(readable);
    };
    inherits(Duplexify, stream.Duplex);
    Duplexify.obj = function(writable, readable, opts) {
      if (!opts)
        opts = {};
      opts.objectMode = true;
      opts.highWaterMark = 16;
      return new Duplexify(writable, readable, opts);
    };
    Duplexify.prototype.cork = function() {
      if (++this._corked === 1)
        this.emit("cork");
    };
    Duplexify.prototype.uncork = function() {
      if (this._corked && --this._corked === 0)
        this.emit("uncork");
    };
    Duplexify.prototype.setWritable = function(writable) {
      if (this._unwrite)
        this._unwrite();
      if (this.destroyed) {
        if (writable && writable.destroy)
          writable.destroy();
        return;
      }
      if (writable === null || writable === false) {
        this.end();
        return;
      }
      var self2 = this;
      var unend = eos(writable, { writable: true, readable: false }, destroyer(this, this._forwardEnd));
      var ondrain = function() {
        var ondrain2 = self2._ondrain;
        self2._ondrain = null;
        if (ondrain2)
          ondrain2();
      };
      var clear = function() {
        self2._writable.removeListener("drain", ondrain);
        unend();
      };
      if (this._unwrite)
        process.nextTick(ondrain);
      this._writable = writable;
      this._writable.on("drain", ondrain);
      this._unwrite = clear;
      this.uncork();
    };
    Duplexify.prototype.setReadable = function(readable) {
      if (this._unread)
        this._unread();
      if (this.destroyed) {
        if (readable && readable.destroy)
          readable.destroy();
        return;
      }
      if (readable === null || readable === false) {
        this.push(null);
        this.resume();
        return;
      }
      var self2 = this;
      var unend = eos(readable, { writable: false, readable: true }, destroyer(this));
      var onreadable = function() {
        self2._forward();
      };
      var onend = function() {
        self2.push(null);
      };
      var clear = function() {
        self2._readable2.removeListener("readable", onreadable);
        self2._readable2.removeListener("end", onend);
        unend();
      };
      this._drained = true;
      this._readable = readable;
      this._readable2 = readable._readableState ? readable : toStreams2(readable);
      this._readable2.on("readable", onreadable);
      this._readable2.on("end", onend);
      this._unread = clear;
      this._forward();
    };
    Duplexify.prototype._read = function() {
      this._drained = true;
      this._forward();
    };
    Duplexify.prototype._forward = function() {
      if (this._forwarding || !this._readable2 || !this._drained)
        return;
      this._forwarding = true;
      var data;
      while (this._drained && (data = shift(this._readable2)) !== null) {
        if (this.destroyed)
          continue;
        this._drained = this.push(data);
      }
      this._forwarding = false;
    };
    Duplexify.prototype.destroy = function(err, cb) {
      if (!cb)
        cb = noop;
      if (this.destroyed)
        return cb(null);
      this.destroyed = true;
      var self2 = this;
      process.nextTick(function() {
        self2._destroy(err);
        cb(null);
      });
    };
    Duplexify.prototype._destroy = function(err) {
      if (err) {
        var ondrain = this._ondrain;
        this._ondrain = null;
        if (ondrain)
          ondrain(err);
        else
          this.emit("error", err);
      }
      if (this._forwardDestroy) {
        if (this._readable && this._readable.destroy)
          this._readable.destroy();
        if (this._writable && this._writable.destroy)
          this._writable.destroy();
      }
      this.emit("close");
    };
    Duplexify.prototype._write = function(data, enc, cb) {
      if (this.destroyed)
        return;
      if (this._corked)
        return onuncork(this, this._write.bind(this, data, enc, cb));
      if (data === SIGNAL_FLUSH)
        return this._finish(cb);
      if (!this._writable)
        return cb();
      if (this._writable.write(data) === false)
        this._ondrain = cb;
      else if (!this.destroyed)
        cb();
    };
    Duplexify.prototype._finish = function(cb) {
      var self2 = this;
      this.emit("preend");
      onuncork(this, function() {
        end(self2._forwardEnd && self2._writable, function() {
          if (self2._writableState.prefinished === false)
            self2._writableState.prefinished = true;
          self2.emit("prefinish");
          onuncork(self2, cb);
        });
      });
    };
    Duplexify.prototype.end = function(data, enc, cb) {
      if (typeof data === "function")
        return this.end(null, null, data);
      if (typeof enc === "function")
        return this.end(data, null, enc);
      this._ended = true;
      if (data)
        this.write(data);
      if (!this._writableState.ending && !this._writableState.destroyed)
        this.write(SIGNAL_FLUSH);
      return stream.Writable.prototype.end.call(this, cb);
    };
    module2.exports = Duplexify;
  }
});

// node_modules/@google-cloud/common/build/src/util.js
var require_util2 = __commonJS({
  "node_modules/@google-cloud/common/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.util = exports2.Util = exports2.PartialFailureError = exports2.ApiError = void 0;
    var projectify_1 = require_src2();
    var ent = require_ent();
    var extend = require_extend();
    var google_auth_library_1 = require_src6();
    var retryRequest = require_retry_request();
    var stream_1 = require_stream();
    var teeny_request_1 = require_src9();
    var service_1 = require_service();
    var duplexify = require_duplexify();
    var requestDefaults = {
      timeout: 6e4,
      gzip: true,
      forever: true,
      pool: {
        maxSockets: Infinity
      }
    };
    var AUTO_RETRY_DEFAULT = true;
    var MAX_RETRY_DEFAULT = 3;
    var ApiError = class extends Error {
      constructor(errorBodyOrMessage) {
        super();
        if (typeof errorBodyOrMessage !== "object") {
          this.message = errorBodyOrMessage || "";
          return;
        }
        const errorBody = errorBodyOrMessage;
        this.code = errorBody.code;
        this.errors = errorBody.errors;
        this.response = errorBody.response;
        try {
          this.errors = JSON.parse(this.response.body).error.errors;
        } catch (e) {
          this.errors = errorBody.errors;
        }
        this.message = ApiError.createMultiErrorMessage(errorBody, this.errors);
        Error.captureStackTrace(this);
      }
      /**
       * Pieces together an error message by combining all unique error messages
       * returned from a single GoogleError
       *
       * @private
       *
       * @param {GoogleErrorBody} err The original error.
       * @param {GoogleInnerError[]} [errors] Inner errors, if any.
       * @returns {string}
       */
      static createMultiErrorMessage(err, errors) {
        const messages = /* @__PURE__ */ new Set();
        if (err.message) {
          messages.add(err.message);
        }
        if (errors && errors.length) {
          errors.forEach(({ message }) => messages.add(message));
        } else if (err.response && err.response.body) {
          messages.add(ent.decode(err.response.body.toString()));
        } else if (!err.message) {
          messages.add("A failure occurred during this request.");
        }
        let messageArr = Array.from(messages);
        if (messageArr.length > 1) {
          messageArr = messageArr.map((message, i) => `    ${i + 1}. ${message}`);
          messageArr.unshift("Multiple errors occurred during the request. Please see the `errors` array for complete details.\n");
          messageArr.push("\n");
        }
        return messageArr.join("\n");
      }
    };
    exports2.ApiError = ApiError;
    var PartialFailureError = class extends Error {
      constructor(b) {
        super();
        const errorObject = b;
        this.errors = errorObject.errors;
        this.name = "PartialFailureError";
        this.response = errorObject.response;
        this.message = ApiError.createMultiErrorMessage(errorObject, this.errors);
      }
    };
    exports2.PartialFailureError = PartialFailureError;
    var Util = class {
      constructor() {
        this.ApiError = ApiError;
        this.PartialFailureError = PartialFailureError;
      }
      /**
       * No op.
       *
       * @example
       * function doSomething(callback) {
       *   callback = callback || noop;
       * }
       */
      noop() {
      }
      /**
       * Uniformly process an API response.
       *
       * @param {*} err - Error value.
       * @param {*} resp - Response value.
       * @param {*} body - Body value.
       * @param {function} callback - The callback function.
       */
      handleResp(err, resp, body, callback) {
        callback = callback || util.noop;
        const parsedResp = extend(true, { err: err || null }, resp && util.parseHttpRespMessage(resp), body && util.parseHttpRespBody(body));
        if (!parsedResp.err && resp && typeof parsedResp.body === "object") {
          parsedResp.resp.body = parsedResp.body;
        }
        if (parsedResp.err && resp) {
          parsedResp.err.response = resp;
        }
        callback(parsedResp.err, parsedResp.body, parsedResp.resp);
      }
      /**
       * Sniff an incoming HTTP response message for errors.
       *
       * @param {object} httpRespMessage - An incoming HTTP response message from `request`.
       * @return {object} parsedHttpRespMessage - The parsed response.
       * @param {?error} parsedHttpRespMessage.err - An error detected.
       * @param {object} parsedHttpRespMessage.resp - The original response object.
       */
      parseHttpRespMessage(httpRespMessage) {
        const parsedHttpRespMessage = {
          resp: httpRespMessage
        };
        if (httpRespMessage.statusCode < 200 || httpRespMessage.statusCode > 299) {
          parsedHttpRespMessage.err = new ApiError({
            errors: new Array(),
            code: httpRespMessage.statusCode,
            message: httpRespMessage.statusMessage,
            response: httpRespMessage
          });
        }
        return parsedHttpRespMessage;
      }
      /**
       * Parse the response body from an HTTP request.
       *
       * @param {object} body - The response body.
       * @return {object} parsedHttpRespMessage - The parsed response.
       * @param {?error} parsedHttpRespMessage.err - An error detected.
       * @param {object} parsedHttpRespMessage.body - The original body value provided
       *     will try to be JSON.parse'd. If it's successful, the parsed value will
       * be returned here, otherwise the original value and an error will be returned.
       */
      parseHttpRespBody(body) {
        const parsedHttpRespBody = {
          body
        };
        if (typeof body === "string") {
          try {
            parsedHttpRespBody.body = JSON.parse(body);
          } catch (err) {
            parsedHttpRespBody.body = body;
          }
        }
        if (parsedHttpRespBody.body && parsedHttpRespBody.body.error) {
          parsedHttpRespBody.err = new ApiError(parsedHttpRespBody.body.error);
        }
        return parsedHttpRespBody;
      }
      /**
       * Take a Duplexify stream, fetch an authenticated connection header, and
       * create an outgoing writable stream.
       *
       * @param {Duplexify} dup - Duplexify stream.
       * @param {object} options - Configuration object.
       * @param {module:common/connection} options.connection - A connection instance used to get a token with and send the request through.
       * @param {object} options.metadata - Metadata to send at the head of the request.
       * @param {object} options.request - Request object, in the format of a standard Node.js http.request() object.
       * @param {string=} options.request.method - Default: "POST".
       * @param {string=} options.request.qs.uploadType - Default: "multipart".
       * @param {string=} options.streamContentType - Default: "application/octet-stream".
       * @param {function} onComplete - Callback, executed after the writable Request stream has completed.
       */
      makeWritableStream(dup, options, onComplete) {
        onComplete = onComplete || util.noop;
        const writeStream = new ProgressStream();
        writeStream.on("progress", (evt) => dup.emit("progress", evt));
        dup.setWritable(writeStream);
        const defaultReqOpts = {
          method: "POST",
          qs: {
            uploadType: "multipart"
          },
          timeout: 0,
          maxRetries: 0
        };
        const metadata = options.metadata || {};
        const reqOpts = extend(true, defaultReqOpts, options.request, {
          multipart: [
            {
              "Content-Type": "application/json",
              body: JSON.stringify(metadata)
            },
            {
              "Content-Type": metadata.contentType || "application/octet-stream",
              body: writeStream
            }
          ]
        });
        options.makeAuthenticatedRequest(reqOpts, {
          onAuthenticated(err, authenticatedReqOpts) {
            if (err) {
              dup.destroy(err);
              return;
            }
            const request = teeny_request_1.teenyRequest.defaults(requestDefaults);
            request(authenticatedReqOpts, (err2, resp, body) => {
              util.handleResp(err2, resp, body, (err3, data) => {
                if (err3) {
                  dup.destroy(err3);
                  return;
                }
                dup.emit("response", resp);
                onComplete(data);
              });
            });
          }
        });
      }
      /**
       * Returns true if the API request should be retried, given the error that was
       * given the first time the request was attempted. This is used for rate limit
       * related errors as well as intermittent server errors.
       *
       * @param {error} err - The API error to check if it is appropriate to retry.
       * @return {boolean} True if the API request should be retried, false otherwise.
       */
      shouldRetryRequest(err) {
        if (err) {
          if ([408, 429, 500, 502, 503, 504].indexOf(err.code) !== -1) {
            return true;
          }
          if (err.errors) {
            for (const e of err.errors) {
              const reason = e.reason;
              if (reason === "rateLimitExceeded") {
                return true;
              }
              if (reason === "userRateLimitExceeded") {
                return true;
              }
              if (reason && reason.includes("EAI_AGAIN")) {
                return true;
              }
            }
          }
        }
        return false;
      }
      /**
       * Get a function for making authenticated requests.
       *
       * @param {object} config - Configuration object.
       * @param {boolean=} config.autoRetry - Automatically retry requests if the
       *     response is related to rate limits or certain intermittent server
       * errors. We will exponentially backoff subsequent requests by default.
       * (default: true)
       * @param {object=} config.credentials - Credentials object.
       * @param {boolean=} config.customEndpoint - If true, just return the provided request options. Default: false.
       * @param {boolean=} config.useAuthWithCustomEndpoint - If true, will authenticate when using a custom endpoint. Default: false.
       * @param {string=} config.email - Account email address, required for PEM/P12 usage.
       * @param {number=} config.maxRetries - Maximum number of automatic retries attempted before returning the error. (default: 3)
       * @param {string=} config.keyFile - Path to a .json, .pem, or .p12 keyfile.
       * @param {array} config.scopes - Array of scopes required for the API.
       */
      makeAuthenticatedRequestFactory(config) {
        const googleAutoAuthConfig = extend({}, config);
        if (googleAutoAuthConfig.projectId === service_1.DEFAULT_PROJECT_ID_TOKEN) {
          delete googleAutoAuthConfig.projectId;
        }
        let authClient;
        if (googleAutoAuthConfig.authClient instanceof google_auth_library_1.GoogleAuth) {
          authClient = googleAutoAuthConfig.authClient;
        } else {
          const config2 = {
            ...googleAutoAuthConfig,
            authClient: googleAutoAuthConfig.authClient
          };
          authClient = new google_auth_library_1.GoogleAuth(config2);
        }
        function makeAuthenticatedRequest(reqOpts, optionsOrCallback) {
          let stream;
          let projectId;
          const reqConfig = extend({}, config);
          let activeRequest_;
          if (!optionsOrCallback) {
            stream = duplexify();
            reqConfig.stream = stream;
          }
          const options = typeof optionsOrCallback === "object" ? optionsOrCallback : void 0;
          const callback = typeof optionsOrCallback === "function" ? optionsOrCallback : void 0;
          async function setProjectId() {
            projectId = await authClient.getProjectId();
          }
          const onAuthenticated = async (err, authenticatedReqOpts) => {
            const authLibraryError = err;
            const autoAuthFailed = err && err.message.indexOf("Could not load the default credentials") > -1;
            if (autoAuthFailed) {
              authenticatedReqOpts = reqOpts;
            }
            if (!err || autoAuthFailed) {
              try {
                authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);
                err = null;
              } catch (e) {
                if (e instanceof projectify_1.MissingProjectIdError) {
                  try {
                    await setProjectId();
                    authenticatedReqOpts = util.decorateRequest(authenticatedReqOpts, projectId);
                    err = null;
                  } catch (e2) {
                    err = err || e2;
                  }
                } else {
                  err = err || e;
                }
              }
            }
            if (err) {
              if (stream) {
                stream.destroy(err);
              } else {
                const fn = options && options.onAuthenticated ? options.onAuthenticated : callback;
                fn(err);
              }
              return;
            }
            if (options && options.onAuthenticated) {
              options.onAuthenticated(null, authenticatedReqOpts);
            } else {
              activeRequest_ = util.makeRequest(authenticatedReqOpts, reqConfig, (apiResponseError, ...params) => {
                if (apiResponseError && apiResponseError.code === 401 && authLibraryError) {
                  apiResponseError = authLibraryError;
                }
                callback(apiResponseError, ...params);
              });
            }
          };
          const prepareRequest = async () => {
            try {
              const getProjectId = async () => {
                if (config.projectId && config.projectId !== service_1.DEFAULT_PROJECT_ID_TOKEN) {
                  return config.projectId;
                }
                if (config.projectIdRequired === false) {
                  return service_1.DEFAULT_PROJECT_ID_TOKEN;
                }
                return setProjectId();
              };
              const authorizeRequest = async () => {
                if (reqConfig.customEndpoint && !reqConfig.useAuthWithCustomEndpoint) {
                  return reqOpts;
                } else {
                  return authClient.authorizeRequest(reqOpts);
                }
              };
              const [_projectId, authorizedReqOpts] = await Promise.all([
                getProjectId(),
                authorizeRequest()
              ]);
              if (_projectId) {
                projectId = _projectId;
              }
              return onAuthenticated(null, authorizedReqOpts);
            } catch (e) {
              return onAuthenticated(e);
            }
          };
          prepareRequest();
          if (stream) {
            return stream;
          }
          return {
            abort() {
              setImmediate(() => {
                if (activeRequest_) {
                  activeRequest_.abort();
                  activeRequest_ = null;
                }
              });
            }
          };
        }
        const mar = makeAuthenticatedRequest;
        mar.getCredentials = authClient.getCredentials.bind(authClient);
        mar.authClient = authClient;
        return mar;
      }
      /**
       * Make a request through the `retryRequest` module with built-in error
       * handling and exponential back off.
       *
       * @param {object} reqOpts - Request options in the format `request` expects.
       * @param {object=} config - Configuration object.
       * @param {boolean=} config.autoRetry - Automatically retry requests if the
       *     response is related to rate limits or certain intermittent server
       * errors. We will exponentially backoff subsequent requests by default.
       * (default: true)
       * @param {number=} config.maxRetries - Maximum number of automatic retries
       *     attempted before returning the error. (default: 3)
       * @param {object=} config.request - HTTP module for request calls.
       * @param {function} callback - The callback function.
       */
      makeRequest(reqOpts, config, callback) {
        var _a, _b, _c, _d, _e, _f, _g;
        let autoRetryValue = AUTO_RETRY_DEFAULT;
        if (config.autoRetry !== void 0 && ((_a = config.retryOptions) === null || _a === void 0 ? void 0 : _a.autoRetry) !== void 0) {
          throw new ApiError("autoRetry is deprecated. Use retryOptions.autoRetry instead.");
        } else if (config.autoRetry !== void 0) {
          autoRetryValue = config.autoRetry;
        } else if (((_b = config.retryOptions) === null || _b === void 0 ? void 0 : _b.autoRetry) !== void 0) {
          autoRetryValue = config.retryOptions.autoRetry;
        }
        let maxRetryValue = MAX_RETRY_DEFAULT;
        if (config.maxRetries && ((_c = config.retryOptions) === null || _c === void 0 ? void 0 : _c.maxRetries)) {
          throw new ApiError("maxRetries is deprecated. Use retryOptions.maxRetries instead.");
        } else if (config.maxRetries) {
          maxRetryValue = config.maxRetries;
        } else if ((_d = config.retryOptions) === null || _d === void 0 ? void 0 : _d.maxRetries) {
          maxRetryValue = config.retryOptions.maxRetries;
        }
        const options = {
          request: teeny_request_1.teenyRequest.defaults(requestDefaults),
          retries: autoRetryValue !== false ? maxRetryValue : 0,
          noResponseRetries: autoRetryValue !== false ? maxRetryValue : 0,
          shouldRetryFn(httpRespMessage) {
            var _a2, _b2;
            const err = util.parseHttpRespMessage(httpRespMessage).err;
            if ((_a2 = config.retryOptions) === null || _a2 === void 0 ? void 0 : _a2.retryableErrorFn) {
              return err && ((_b2 = config.retryOptions) === null || _b2 === void 0 ? void 0 : _b2.retryableErrorFn(err));
            }
            return err && util.shouldRetryRequest(err);
          },
          maxRetryDelay: (_e = config.retryOptions) === null || _e === void 0 ? void 0 : _e.maxRetryDelay,
          retryDelayMultiplier: (_f = config.retryOptions) === null || _f === void 0 ? void 0 : _f.retryDelayMultiplier,
          totalTimeout: (_g = config.retryOptions) === null || _g === void 0 ? void 0 : _g.totalTimeout
        };
        if (typeof reqOpts.maxRetries === "number") {
          options.retries = reqOpts.maxRetries;
        }
        if (!config.stream) {
          return retryRequest(reqOpts, options, (err, response, body) => {
            util.handleResp(err, response, body, callback);
          });
        }
        const dup = config.stream;
        let requestStream;
        const isGetRequest = (reqOpts.method || "GET").toUpperCase() === "GET";
        if (isGetRequest) {
          requestStream = retryRequest(reqOpts, options);
          dup.setReadable(requestStream);
        } else {
          requestStream = options.request(reqOpts);
          dup.setWritable(requestStream);
        }
        requestStream.on("error", dup.destroy.bind(dup)).on("response", dup.emit.bind(dup, "response")).on("complete", dup.emit.bind(dup, "complete"));
        dup.abort = requestStream.abort;
        return dup;
      }
      /**
       * Decorate the options about to be made in a request.
       *
       * @param {object} reqOpts - The options to be passed to `request`.
       * @param {string} projectId - The project ID.
       * @return {object} reqOpts - The decorated reqOpts.
       */
      decorateRequest(reqOpts, projectId) {
        delete reqOpts.autoPaginate;
        delete reqOpts.autoPaginateVal;
        delete reqOpts.objectMode;
        if (reqOpts.qs !== null && typeof reqOpts.qs === "object") {
          delete reqOpts.qs.autoPaginate;
          delete reqOpts.qs.autoPaginateVal;
          reqOpts.qs = (0, projectify_1.replaceProjectIdToken)(reqOpts.qs, projectId);
        }
        if (Array.isArray(reqOpts.multipart)) {
          reqOpts.multipart = reqOpts.multipart.map((part) => {
            return (0, projectify_1.replaceProjectIdToken)(part, projectId);
          });
        }
        if (reqOpts.json !== null && typeof reqOpts.json === "object") {
          delete reqOpts.json.autoPaginate;
          delete reqOpts.json.autoPaginateVal;
          reqOpts.json = (0, projectify_1.replaceProjectIdToken)(reqOpts.json, projectId);
        }
        reqOpts.uri = (0, projectify_1.replaceProjectIdToken)(reqOpts.uri, projectId);
        return reqOpts;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      isCustomType(unknown, module3) {
        function getConstructorName(obj) {
          return obj.constructor && obj.constructor.name.toLowerCase();
        }
        const moduleNameParts = module3.split("/");
        const parentModuleName = moduleNameParts[0] && moduleNameParts[0].toLowerCase();
        const subModuleName = moduleNameParts[1] && moduleNameParts[1].toLowerCase();
        if (subModuleName && getConstructorName(unknown) !== subModuleName) {
          return false;
        }
        let walkingModule = unknown;
        while (true) {
          if (getConstructorName(walkingModule) === parentModuleName) {
            return true;
          }
          walkingModule = walkingModule.parent;
          if (!walkingModule) {
            return false;
          }
        }
      }
      /**
       * Create a properly-formatted User-Agent string from a package.json file.
       *
       * @param {object} packageJson - A module's package.json file.
       * @return {string} userAgent - The formatted User-Agent string.
       */
      getUserAgentFromPackageJson(packageJson) {
        const hyphenatedPackageName = packageJson.name.replace("@google-cloud", "gcloud-node").replace("/", "-");
        return hyphenatedPackageName + "/" + packageJson.version;
      }
      /**
       * Given two parameters, figure out if this is either:
       *  - Just a callback function
       *  - An options object, and then a callback function
       * @param optionsOrCallback An options object or callback.
       * @param cb A potentially undefined callback.
       */
      maybeOptionsOrCallback(optionsOrCallback, cb) {
        return typeof optionsOrCallback === "function" ? [{}, optionsOrCallback] : [optionsOrCallback, cb];
      }
    };
    exports2.Util = Util;
    var ProgressStream = class extends stream_1.Transform {
      constructor() {
        super(...arguments);
        this.bytesRead = 0;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      _transform(chunk, encoding, callback) {
        this.bytesRead += chunk.length;
        this.emit("progress", { bytesWritten: this.bytesRead, contentLength: "*" });
        this.push(chunk);
        callback();
      }
    };
    var util = new Util();
    exports2.util = util;
  }
});

// node_modules/@google-cloud/common/build/src/service-object.js
var require_service_object = __commonJS({
  "node_modules/@google-cloud/common/build/src/service-object.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServiceObject = void 0;
    var promisify_1 = require_src();
    var arrify = require_arrify();
    var events_1 = require_events();
    var extend = require_extend();
    var util_1 = require_util2();
    var ServiceObject = class extends events_1.EventEmitter {
      /*
       * @constructor
       * @alias module:common/service-object
       *
       * @private
       *
       * @param {object} config - Configuration object.
       * @param {string} config.baseUrl - The base URL to make API requests to.
       * @param {string} config.createMethod - The method which creates this object.
       * @param {string=} config.id - The identifier of the object. For example, the
       *     name of a Storage bucket or Pub/Sub topic.
       * @param {object=} config.methods - A map of each method name that should be inherited.
       * @param {object} config.methods[].reqOpts - Default request options for this
       *     particular method. A common use case is when `setMetadata` requires a
       *     `PUT` method to override the default `PATCH`.
       * @param {object} config.parent - The parent service instance. For example, an
       *     instance of Storage if the object is Bucket.
       */
      constructor(config) {
        super();
        this.metadata = {};
        this.baseUrl = config.baseUrl;
        this.parent = config.parent;
        this.id = config.id;
        this.createMethod = config.createMethod;
        this.methods = config.methods || {};
        this.interceptors = [];
        this.pollIntervalMs = config.pollIntervalMs;
        this.projectId = config.projectId;
        if (config.methods) {
          Object.getOwnPropertyNames(ServiceObject.prototype).filter((methodName) => {
            return (
              // All ServiceObjects need `request` and `getRequestInterceptors`.
              // clang-format off
              !/^request/.test(methodName) && !/^getRequestInterceptors/.test(methodName) && // clang-format on
              // The ServiceObject didn't redefine the method.
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              this[methodName] === // eslint-disable-next-line @typescript-eslint/no-explicit-any
              ServiceObject.prototype[methodName] && // This method isn't wanted.
              !config.methods[methodName]
            );
          }).forEach((methodName) => {
            this[methodName] = void 0;
          });
        }
      }
      create(optionsOrCallback, callback) {
        const self2 = this;
        const args = [this.id];
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        }
        if (typeof optionsOrCallback === "object") {
          args.push(optionsOrCallback);
        }
        function onCreate(...args2) {
          const [err, instance] = args2;
          if (!err) {
            self2.metadata = instance.metadata;
            args2[1] = self2;
          }
          callback(...args2);
        }
        args.push(onCreate);
        this.createMethod.apply(null, args);
      }
      delete(optionsOrCallback, cb) {
        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);
        const ignoreNotFound = options.ignoreNotFound;
        delete options.ignoreNotFound;
        const methodConfig = typeof this.methods.delete === "object" && this.methods.delete || {};
        const reqOpts = extend(true, {
          method: "DELETE",
          uri: ""
        }, methodConfig.reqOpts, {
          qs: options
        });
        ServiceObject.prototype.request.call(this, reqOpts, (err, ...args) => {
          if (err) {
            if (err.code === 404 && ignoreNotFound) {
              err = null;
            }
          }
          callback(err, ...args);
        });
      }
      exists(optionsOrCallback, cb) {
        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);
        this.get(options, (err) => {
          if (err) {
            if (err.code === 404) {
              callback(null, false);
            } else {
              callback(err);
            }
            return;
          }
          callback(null, true);
        });
      }
      get(optionsOrCallback, cb) {
        const self2 = this;
        const [opts, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);
        const options = Object.assign({}, opts);
        const autoCreate = options.autoCreate && typeof this.create === "function";
        delete options.autoCreate;
        function onCreate(err, instance, apiResponse) {
          if (err) {
            if (err.code === 409) {
              self2.get(options, callback);
              return;
            }
            callback(err, null, apiResponse);
            return;
          }
          callback(null, instance, apiResponse);
        }
        this.getMetadata(options, (err, metadata) => {
          if (err) {
            if (err.code === 404 && autoCreate) {
              const args = [];
              if (Object.keys(options).length > 0) {
                args.push(options);
              }
              args.push(onCreate);
              self2.create(...args);
              return;
            }
            callback(err, null, metadata);
            return;
          }
          callback(null, self2, metadata);
        });
      }
      getMetadata(optionsOrCallback, cb) {
        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);
        const methodConfig = typeof this.methods.getMetadata === "object" && this.methods.getMetadata || {};
        const reqOpts = extend(true, {
          uri: ""
        }, methodConfig.reqOpts, {
          qs: options
        });
        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {
          this.metadata = body;
          callback(err, this.metadata, res);
        });
      }
      /**
       * Return the user's custom request interceptors.
       */
      getRequestInterceptors() {
        const localInterceptors = this.interceptors.filter((interceptor) => typeof interceptor.request === "function").map((interceptor) => interceptor.request);
        return this.parent.getRequestInterceptors().concat(localInterceptors);
      }
      setMetadata(metadata, optionsOrCallback, cb) {
        const [options, callback] = util_1.util.maybeOptionsOrCallback(optionsOrCallback, cb);
        const methodConfig = typeof this.methods.setMetadata === "object" && this.methods.setMetadata || {};
        const reqOpts = extend(true, {}, {
          method: "PATCH",
          uri: ""
        }, methodConfig.reqOpts, {
          json: metadata,
          qs: options
        });
        ServiceObject.prototype.request.call(this, reqOpts, (err, body, res) => {
          this.metadata = body;
          callback(err, this.metadata, res);
        });
      }
      request_(reqOpts, callback) {
        reqOpts = extend(true, {}, reqOpts);
        if (this.projectId) {
          reqOpts.projectId = this.projectId;
        }
        const isAbsoluteUrl = reqOpts.uri.indexOf("http") === 0;
        const uriComponents = [this.baseUrl, this.id || "", reqOpts.uri];
        if (isAbsoluteUrl) {
          uriComponents.splice(0, uriComponents.indexOf(reqOpts.uri));
        }
        reqOpts.uri = uriComponents.filter((x) => x.trim()).map((uriComponent) => {
          const trimSlashesRegex = /^\/*|\/*$/g;
          return uriComponent.replace(trimSlashesRegex, "");
        }).join("/");
        const childInterceptors = arrify(reqOpts.interceptors_);
        const localInterceptors = [].slice.call(this.interceptors);
        reqOpts.interceptors_ = childInterceptors.concat(localInterceptors);
        if (reqOpts.shouldReturnStream) {
          return this.parent.requestStream(reqOpts);
        }
        this.parent.request(reqOpts, callback);
      }
      request(reqOpts, callback) {
        this.request_(reqOpts, callback);
      }
      /**
       * Make an authenticated API request.
       *
       * @param {object} reqOpts - Request options that are passed to `request`.
       * @param {string} reqOpts.uri - A URI relative to the baseUrl.
       */
      requestStream(reqOpts) {
        const opts = extend(true, reqOpts, { shouldReturnStream: true });
        return this.request_(opts);
      }
    };
    exports2.ServiceObject = ServiceObject;
    (0, promisify_1.promisifyAll)(ServiceObject, { exclude: ["getRequestInterceptors"] });
  }
});

// node_modules/@google-cloud/common/build/src/operation.js
var require_operation = __commonJS({
  "node_modules/@google-cloud/common/build/src/operation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Operation = void 0;
    var service_object_1 = require_service_object();
    var util_1 = require_util();
    var Operation = class extends service_object_1.ServiceObject {
      /**
       * An Operation object allows you to interact with APIs that take longer to
       * process things.
       *
       * @constructor
       * @alias module:common/operation
       *
       * @param {object} config - Configuration object.
       * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.
       */
      constructor(config) {
        const methods = {
          /**
           * Checks to see if an operation exists.
           */
          exists: true,
          /**
           * Retrieves the operation.
           */
          get: true,
          /**
           * Retrieves metadata for the operation.
           */
          getMetadata: {
            reqOpts: {
              name: config.id
            }
          }
        };
        config = Object.assign({
          baseUrl: ""
        }, config);
        config.methods = config.methods || methods;
        super(config);
        this.completeListeners = 0;
        this.hasActiveListeners = false;
        this.listenForEvents_();
      }
      /**
       * Wraps the `complete` and `error` events in a Promise.
       *
       * @return {Promise}
       */
      promise() {
        return new Promise((resolve, reject) => {
          this.on("error", reject).on("complete", (metadata) => {
            resolve([metadata]);
          });
        });
      }
      /**
       * Begin listening for events on the operation. This method keeps track of how
       * many "complete" listeners are registered and removed, making sure polling
       * is handled automatically.
       *
       * As long as there is one active "complete" listener, the connection is open.
       * When there are no more listeners, the polling stops.
       *
       * @private
       */
      listenForEvents_() {
        this.on("newListener", (event) => {
          if (event === "complete") {
            this.completeListeners++;
            if (!this.hasActiveListeners) {
              this.hasActiveListeners = true;
              this.startPolling_();
            }
          }
        });
        this.on("removeListener", (event) => {
          if (event === "complete" && --this.completeListeners === 0) {
            this.hasActiveListeners = false;
          }
        });
      }
      /**
       * Poll for a status update. Returns null for an incomplete
       * status, and metadata for a complete status.
       *
       * @private
       */
      poll_(callback) {
        this.getMetadata((err, body) => {
          if (err || body.error) {
            callback(err || body.error);
            return;
          }
          if (!body.done) {
            callback(null);
            return;
          }
          callback(null, body);
        });
      }
      /**
       * Poll `getMetadata` to check the operation's status. This runs a loop to
       * ping the API on an interval.
       *
       * Note: This method is automatically called once a "complete" event handler
       * is registered on the operation.
       *
       * @private
       */
      async startPolling_() {
        if (!this.hasActiveListeners) {
          return;
        }
        try {
          const metadata = await (0, util_1.promisify)(this.poll_.bind(this))();
          if (!metadata) {
            setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);
            return;
          }
          this.emit("complete", metadata);
        } catch (err) {
          this.emit("error", err);
        }
      }
    };
    exports2.Operation = Operation;
  }
});

// node_modules/@google-cloud/common/build/src/index.js
var require_src10 = __commonJS({
  "node_modules/@google-cloud/common/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.util = exports2.ApiError = exports2.ServiceObject = exports2.Service = exports2.Operation = void 0;
    var operation_1 = require_operation();
    Object.defineProperty(exports2, "Operation", { enumerable: true, get: function() {
      return operation_1.Operation;
    } });
    var service_1 = require_service();
    Object.defineProperty(exports2, "Service", { enumerable: true, get: function() {
      return service_1.Service;
    } });
    var service_object_1 = require_service_object();
    Object.defineProperty(exports2, "ServiceObject", { enumerable: true, get: function() {
      return service_object_1.ServiceObject;
    } });
    var util_1 = require_util2();
    Object.defineProperty(exports2, "ApiError", { enumerable: true, get: function() {
      return util_1.ApiError;
    } });
    Object.defineProperty(exports2, "util", { enumerable: true, get: function() {
      return util_1.util;
    } });
  }
});

// node_modules/html-tags/html-tags.json
var require_html_tags = __commonJS({
  "node_modules/html-tags/html-tags.json"(exports2, module2) {
    module2.exports = [
      "a",
      "abbr",
      "address",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "bdi",
      "bdo",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "cite",
      "code",
      "col",
      "colgroup",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "div",
      "dl",
      "dt",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "img",
      "input",
      "ins",
      "kbd",
      "label",
      "legend",
      "li",
      "link",
      "main",
      "map",
      "mark",
      "math",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "nav",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "pre",
      "progress",
      "q",
      "rb",
      "rp",
      "rt",
      "rtc",
      "ruby",
      "s",
      "samp",
      "script",
      "search",
      "section",
      "select",
      "slot",
      "small",
      "source",
      "span",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "svg",
      "table",
      "tbody",
      "td",
      "template",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "u",
      "ul",
      "var",
      "video",
      "wbr"
    ];
  }
});

// node_modules/html-tags/index.js
var require_html_tags2 = __commonJS({
  "node_modules/html-tags/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_html_tags();
  }
});

// node_modules/is-html/index.js
var require_is_html = __commonJS({
  "node_modules/is-html/index.js"(exports2, module2) {
    "use strict";
    var htmlTags = require_html_tags2();
    var basic = /\s?<!doctype html>|(<html\b[^>]*>|<body\b[^>]*>|<x-[^>]+>)+/i;
    var full = new RegExp(htmlTags.map((tag) => `<${tag}\\b[^>]*>`).join("|"), "i");
    module2.exports = (string) => basic.test(string) || full.test(string);
  }
});

// node_modules/@google-cloud/translate/package.json
var require_package2 = __commonJS({
  "node_modules/@google-cloud/translate/package.json"(exports2, module2) {
    module2.exports = {
      name: "@google-cloud/translate",
      description: "Cloud Translation API Client Library for Node.js",
      version: "8.0.2",
      license: "Apache-2.0",
      author: "Google Inc.",
      engines: {
        node: ">=14.0.0"
      },
      repository: {
        type: "git",
        directory: "packages/google-cloud-translate",
        url: "https://github.com/googleapis/google-cloud-node.git"
      },
      main: "build/src/index.js",
      types: "build/src/index.d.ts",
      files: [
        "build/src",
        "build/protos",
        "!build/src/**/*.map",
        "!build/src/**/*.map"
      ],
      keywords: [
        "google apis client",
        "google api client",
        "google apis",
        "google api",
        "google",
        "google cloud platform",
        "google cloud",
        "cloud",
        "google translate",
        "translate"
      ],
      scripts: {
        clean: "gts clean",
        compile: "tsc -p . && cp -r protos build/",
        "compile-protos": "compileProtos src",
        docs: "jsdoc -c .jsdoc.js",
        "predocs-test": "npm run docs",
        "docs-test": "linkinator docs",
        fix: "gts fix",
        lint: "gts check",
        prepare: "npm run compile-protos && npm run compile",
        prelint: "cd samples; npm link ../; npm i",
        postpack: "minifyProtoJson",
        "samples-test": "cd samples/ && npm link ../ && npm i && npm test",
        "system-test": "c8 mocha build/system-test",
        test: "c8 mocha build/test"
      },
      dependencies: {
        "@google-cloud/common": "^5.0.0",
        "@google-cloud/promisify": "^4.0.0",
        arrify: "^2.0.0",
        extend: "^3.0.2",
        "google-gax": "^4.0.3",
        "is-html": "^2.0.0"
      },
      devDependencies: {
        "@types/extend": "^3.0.0",
        "@types/mocha": "^9.0.0",
        "@types/node": "^20.4.5",
        "@types/proxyquire": "^1.3.28",
        "@types/request": "^2.47.1",
        "@types/sinon": "^10.0.0",
        c8: "^8.0.1",
        codecov: "^3.0.2",
        "gapic-tools": "^0.1.8",
        "google-auth-library": "^9.0.0",
        gts: "^5.0.0",
        http2spy: "^2.0.0",
        jsdoc: "^4.0.0",
        "jsdoc-fresh": "^3.0.0",
        "jsdoc-region-tag": "^3.0.0",
        linkinator: "4.1.2",
        long: "^5.2.3",
        mocha: "^9.2.2",
        "pack-n-play": "^1.0.0-2",
        proxyquire: "^2.0.1",
        sinon: "^15.0.0",
        typescript: "^5.1.6"
      },
      homepage: "https://github.com/googleapis/google-cloud-node/tree/main/packages/google-cloud-translate"
    };
  }
});

// node_modules/@google-cloud/translate/build/src/v2/index.js
var require_v2 = __commonJS({
  "node_modules/@google-cloud/translate/build/src/v2/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Translate = void 0;
    var common_1 = require_src10();
    var promisify_1 = require_src();
    var arrify = require_arrify();
    var extend = require_extend();
    var isHtml = require_is_html();
    var PKG = require_package2();
    var Translate = class extends common_1.Service {
      constructor(options = {}) {
        options.apiEndpoint = options.apiEndpoint || "translation.googleapis.com";
        let baseUrl = `https://${options.apiEndpoint}/language/translate/v2`;
        if (process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT) {
          baseUrl = process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT.replace(/\/+$/, "");
        }
        const config = {
          apiEndpoint: options.apiEndpoint,
          baseUrl,
          scopes: ["https://www.googleapis.com/auth/cloud-platform"],
          packageJson: require_package2(),
          projectIdRequired: false
        };
        super(config, options);
        this.options = options || {};
        if (this.options.key) {
          this.key = this.options.key;
        }
      }
      /**
       * @typedef {object} DetectResult
       * @memberof v2
       * @property {string} 0.language The language code matched from the input.
       * @property {number} [0.confidence] A float 0 - 1. The higher the number, the
       *     higher the confidence in language detection. Note, this is not always
       *     returned from the API.
       * @property {object} 1 The full API response.
       */
      /**
       * @callback DetectCallback
       * @memberof v2
       * @param {?Error} err Request error, if any.
       * @param {object|object[]} results The detection results.
       * @param {string} results.language The language code matched from the input.
       * @param {number} [results.confidence] A float 0 - 1. The higher the number, the
       *     higher the confidence in language detection. Note, this is not always
       *     returned from the API.
       * @param {object} apiResponse The full API response.
       */
      /**
       * Detect the language used in a string or multiple strings.
       *
       * @see [Detect Language]{@link https://cloud.google.com/translate/v2/using_rest#detect-language}
       *
       * @param {string|string[]} input - The source string input.
       * @param {DetectCallback} [callback] Callback function.
       * @returns {Promise<DetectResponse>}
       *
       * @example
       * ```
       * const {Translate} = require('@google-cloud/translate');
       *
       * const translate = new Translate();
       *
       * //-
       * // Detect the language from a single string input.
       * //-
       * translate.detect('Hello', (err, results) => {
       *   if (!err) {
       *     // results = {
       *     //   language: 'en',
       *     //   confidence: 1,
       *     //   input: 'Hello'
       *     // }
       *   }
       * });
       *
       * //-
       * // Detect the languages used in multiple strings. Note that the results are
       * // now provided as an array.
       * //-
       * translate.detect([
       *   'Hello',
       *   'Hola'
       * ], (err, results) => {
       *   if (!err) {
       *     // results = [
       *     //   {
       *     //     language: 'en',
       *     //     confidence: 1,
       *     //     input: 'Hello'
       *     //   },
       *     //   {
       *     //     language: 'es',
       *     //     confidence: 1,
       *     //     input: 'Hola'
       *     //   }
       *     // ]
       *   }
       * });
       *
       * //-
       * // If the callback is omitted, we'll return a Promise.
       * //-
       * translate.detect('Hello').then((data) => {
       *   const results = data[0];
       *   const apiResponse = data[2];
       * });
       *
       * ```
       * @example <caption>include:samples/translate.js</caption>
       * region_tag:translate_detect_language
       * Here's a full example:
       */
      detect(input, callback) {
        const inputIsArray = Array.isArray(input);
        input = arrify(input);
        this.request({
          method: "POST",
          uri: "/detect",
          json: {
            q: input
          }
        }, (err, resp) => {
          if (err) {
            callback(err, null, resp);
            return;
          }
          let results = resp.data.detections.map((detection, index) => {
            const result = extend({}, detection[0], {
              input: input[index]
            });
            delete result.isReliable;
            return result;
          });
          if (input.length === 1 && !inputIsArray) {
            results = results[0];
          }
          callback(null, results, resp);
        });
      }
      /**
       * @typedef {object} LanguageResult
       * @memberof v2
       * @property {string} code The {@link https://en.wikipedia.org/wiki/ISO_639-1| ISO 639-1}
       *     language code.
       * @property {string} name The language name. This can be translated into your
       *     preferred language with the `target` option.
       */
      /**
       * @callback GetLanguagesCallback
       * @memberof v2
       * @param {?Error} err Request error, if any.
       * @param {object[]} results The languages supported by the API.
       * @param {string} results.code The {@link https://en.wikipedia.org/wiki/ISO_639-1| ISO 639-1}
       *     language code.
       * @param {string} results.name The language name. This can be translated into your
       *     preferred language with the `target` option.
       * @param {object} apiResponse The full API response.
       */
      /**
       * Get an array of all supported languages.
       *
       * @see [Discovering Supported Languages]{@link https://cloud.google.com/translate/v2/discovering-supported-languages-with-rest}
       *
       * @param {string} [target] Get the language names in a language other than
       *     English.
       * @param {GetLanguagesCallback} [callback] Callback function.
       * @returns {Promise<GetLanguagesResponse>}
       *
       * @example <caption>include:samples/translate.js</caption>
       * region_tag:translate_list_codes
       * Gets the language names in English:
       *
       * @example <caption>include:samples/translate.js</caption>
       * region_tag:translate_list_language_names
       * Gets the language names in a language other than English:
       */
      getLanguages(targetOrCallback, callback) {
        let target;
        if (typeof targetOrCallback === "function") {
          callback = targetOrCallback;
          target = "en";
        } else {
          target = targetOrCallback;
        }
        const reqOpts = {
          uri: "/languages",
          useQuerystring: true,
          qs: {}
        };
        if (target && typeof target === "string") {
          reqOpts.qs.target = target;
        }
        this.request(reqOpts, (err, resp) => {
          if (err) {
            callback(err, null, resp);
            return;
          }
          const languages = resp.data.languages.map((language) => {
            return {
              code: language.language,
              name: language.name
            };
          });
          callback(null, languages, resp);
        });
      }
      /**
       * Translate request options.
       *
       * @typedef {object} TranslateRequest
       * @memberof v2
       * @property {string} [format] Set the text's format as `html` or `text`.
       *     If not provided, we will try to auto-detect if the text given is HTML.
       * If not, we set the format as `text`.
       * @property {string} [from] The ISO 639-1 language code the source input
       *     is written in.
       * @property {string} [model] Set the model type requested for this
       *     translation. Please refer to the upstream documentation for possible
       *     values.
       * @property {string} to The ISO 639-1 language code to translate the
       *     input to.
       */
      /**
       * @callback TranslateCallback
       * @memberof v2
       * @param {?Error} err Request error, if any.
       * @param {object|object[]} translations If a single string input was given, a
       *     single translation is given. Otherwise, it is an array of translations.
       * @param {object} apiResponse The full API response.
       */
      /**
       * Translate a string or multiple strings into another language.
       *
       * @see {@link https://cloud.google.com/translate/v2/using_rest#Translate| Translate Text}
       *
       * @throws {Error} If `options` is provided as an object without a `to`
       *     property.
       *
       * @param {string|string[]} input The source string input.
       * @param {string|TranslateRequest} [options] If a string, it is interpreted as the
       *     target ISO 639-1 language code to translate the source input to. (e.g.
       *     `en` for English). If an object, you may also specify the source
       *     language.
       * @param {TranslateCallback} [callback] Callback function.
       * @returns {Promise<TranslateResponse>}
       *
       * @example
       * ```
       * //-
       * // Pass a string and a language code to get the translation.
       * //-
       * translate.translate('Hello', 'es', (err, translation) => {
       *   if (!err) {
       *     // translation = 'Hola'
       *   }
       * });
       *
       * //-
       * // The source language is auto-detected by default. To manually set it,
       * // provide an object.
       * //-
       * const options = {
       *   from: 'en',
       *   to: 'es'
       * };
       *
       * translate.translate('Hello', options, (err, translation) => {
       *   if (!err) {
       *     // translation = 'Hola'
       *   }
       * });
       *
       * //-
       * // Translate multiple strings of input. Note that the results are
       * // now provided as an array.
       * //-
       * const input = [
       *   'Hello',
       *   'How are you today?'
       * ];
       *
       * translate.translate(input, 'es', (err, translations) => {
       *   if (!err) {
       *     // translations = [
       *     //   'Hola',
       *     //   'Como estas hoy?'
       *     // ]
       *   }
       * });
       *
       * //-
       * // If the callback is omitted, we'll return a Promise.
       * //-
       * translate.translate('Hello', 'es').then((data) => {
       *   const translation = data[0];
       *   const apiResponse = data[1];
       * });
       *
       * ```
       * @example <caption>include:samples/translate.js</caption>
       * region_tag:translate_translate_text
       * Full translation example:
       *
       * @example <caption>include:samples/translate.js</caption>
       * region_tag:translate_text_with_model
       * Translation using the premium model:
       */
      translate(inputs, optionsOrTo, callback) {
        const inputIsArray = Array.isArray(inputs);
        const input = arrify(inputs);
        let options = {};
        if (typeof optionsOrTo === "object") {
          options = optionsOrTo;
        } else if (typeof optionsOrTo === "string") {
          options = { to: optionsOrTo };
        }
        const body = {
          q: input,
          format: options.format || (isHtml(input[0]) ? "html" : "text")
        };
        if (typeof options === "string") {
          body.target = options;
        } else {
          if (options.from) {
            body.source = options.from;
          }
          if (options.to) {
            body.target = options.to;
          }
          if (options.model) {
            body.model = options.model;
          }
        }
        if (!body.target) {
          throw new Error("A target language is required to perform a translation.");
        }
        this.request({
          method: "POST",
          uri: "",
          json: body
        }, (err, resp) => {
          if (err) {
            callback(err, null, resp);
            return;
          }
          let translations = resp.data.translations.map((x) => x.translatedText);
          if (body.q.length === 1 && !inputIsArray) {
            translations = translations[0];
          }
          callback(err, translations, resp);
        });
      }
      /**
       * A custom request implementation. Requests to this API may optionally use an
       * API key for an application, not a bearer token from a service account. This
       * means it is possible to skip the `makeAuthenticatedRequest` portion of the
       * typical request lifecycle, and manually authenticate the request here.
       *
       * @private
       *
       * @param {object} reqOpts - Request options that are passed to `request`.
       * @param {function} callback - The callback function passed to `request`.
       */
      request(reqOpts, callback) {
        if (!this.key) {
          super.request(reqOpts, callback);
          return;
        }
        reqOpts.uri = this.baseUrl + reqOpts.uri;
        reqOpts = extend(true, {}, reqOpts, {
          qs: {
            key: this.key
          },
          headers: {
            "User-Agent": common_1.util.getUserAgentFromPackageJson(PKG)
          }
        });
        common_1.util.makeRequest(reqOpts, this.options, callback);
      }
    };
    exports2.Translate = Translate;
    (0, promisify_1.promisifyAll)(Translate, { exclude: ["request"] });
  }
});

// node_modules/@google-cloud/translate/build/protos/protos.json
var require_protos = __commonJS({
  "node_modules/@google-cloud/translate/build/protos/protos.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            cloud: {
              nested: {
                translation: {
                  nested: {
                    v3: {
                      options: {
                        cc_enable_arenas: true,
                        csharp_namespace: "Google.Cloud.Translate.V3",
                        go_package: "cloud.google.com/go/translate/apiv3/translatepb;translatepb",
                        java_multiple_files: true,
                        java_outer_classname: "TranslationServiceProto",
                        java_package: "com.google.cloud.translate.v3",
                        php_namespace: "Google\\Cloud\\Translate\\V3",
                        ruby_package: "Google::Cloud::Translate::V3"
                      },
                      nested: {
                        TranslationService: {
                          options: {
                            "(google.api.default_host)": "translate.googleapis.com",
                            "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-translation"
                          },
                          methods: {
                            TranslateText: {
                              requestType: "TranslateTextRequest",
                              responseType: "TranslateTextResponse",
                              options: {
                                "(google.api.http).post": "/v3/{parent=projects/*/locations/*}:translateText",
                                "(google.api.http).body": "*",
                                "(google.api.http).additional_bindings.post": "/v3/{parent=projects/*}:translateText",
                                "(google.api.http).additional_bindings.body": "*",
                                "(google.api.method_signature)": "parent,model,mime_type,source_language_code,target_language_code,contents"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3/{parent=projects/*/locations/*}:translateText",
                                    body: "*",
                                    additional_bindings: {
                                      post: "/v3/{parent=projects/*}:translateText",
                                      body: "*"
                                    }
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,target_language_code,contents"
                                },
                                {
                                  "(google.api.method_signature)": "parent,model,mime_type,source_language_code,target_language_code,contents"
                                }
                              ]
                            },
                            DetectLanguage: {
                              requestType: "DetectLanguageRequest",
                              responseType: "DetectLanguageResponse",
                              options: {
                                "(google.api.http).post": "/v3/{parent=projects/*/locations/*}:detectLanguage",
                                "(google.api.http).body": "*",
                                "(google.api.http).additional_bindings.post": "/v3/{parent=projects/*}:detectLanguage",
                                "(google.api.http).additional_bindings.body": "*",
                                "(google.api.method_signature)": "parent,model,mime_type,content"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3/{parent=projects/*/locations/*}:detectLanguage",
                                    body: "*",
                                    additional_bindings: {
                                      post: "/v3/{parent=projects/*}:detectLanguage",
                                      body: "*"
                                    }
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,model,mime_type,content"
                                }
                              ]
                            },
                            GetSupportedLanguages: {
                              requestType: "GetSupportedLanguagesRequest",
                              responseType: "SupportedLanguages",
                              options: {
                                "(google.api.http).get": "/v3/{parent=projects/*/locations/*}/supportedLanguages",
                                "(google.api.http).additional_bindings.get": "/v3/{parent=projects/*}/supportedLanguages",
                                "(google.api.method_signature)": "parent,model,display_language_code"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v3/{parent=projects/*/locations/*}/supportedLanguages",
                                    additional_bindings: {
                                      get: "/v3/{parent=projects/*}/supportedLanguages"
                                    }
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,model,display_language_code"
                                }
                              ]
                            },
                            TranslateDocument: {
                              requestType: "TranslateDocumentRequest",
                              responseType: "TranslateDocumentResponse",
                              options: {
                                "(google.api.http).post": "/v3/{parent=projects/*/locations/*}:translateDocument",
                                "(google.api.http).body": "*"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3/{parent=projects/*/locations/*}:translateDocument",
                                    body: "*"
                                  }
                                }
                              ]
                            },
                            BatchTranslateText: {
                              requestType: "BatchTranslateTextRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v3/{parent=projects/*/locations/*}:batchTranslateText",
                                "(google.api.http).body": "*",
                                "(google.longrunning.operation_info).response_type": "BatchTranslateResponse",
                                "(google.longrunning.operation_info).metadata_type": "BatchTranslateMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3/{parent=projects/*/locations/*}:batchTranslateText",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "BatchTranslateResponse",
                                    metadata_type: "BatchTranslateMetadata"
                                  }
                                }
                              ]
                            },
                            BatchTranslateDocument: {
                              requestType: "BatchTranslateDocumentRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v3/{parent=projects/*/locations/*}:batchTranslateDocument",
                                "(google.api.http).body": "*",
                                "(google.api.method_signature)": "parent,source_language_code,target_language_codes,input_configs,output_config",
                                "(google.longrunning.operation_info).response_type": "BatchTranslateDocumentResponse",
                                "(google.longrunning.operation_info).metadata_type": "BatchTranslateDocumentMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3/{parent=projects/*/locations/*}:batchTranslateDocument",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,source_language_code,target_language_codes,input_configs,output_config"
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "BatchTranslateDocumentResponse",
                                    metadata_type: "BatchTranslateDocumentMetadata"
                                  }
                                }
                              ]
                            },
                            CreateGlossary: {
                              requestType: "CreateGlossaryRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v3/{parent=projects/*/locations/*}/glossaries",
                                "(google.api.http).body": "glossary",
                                "(google.api.method_signature)": "parent,glossary",
                                "(google.longrunning.operation_info).response_type": "Glossary",
                                "(google.longrunning.operation_info).metadata_type": "CreateGlossaryMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3/{parent=projects/*/locations/*}/glossaries",
                                    body: "glossary"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,glossary"
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "Glossary",
                                    metadata_type: "CreateGlossaryMetadata"
                                  }
                                }
                              ]
                            },
                            ListGlossaries: {
                              requestType: "ListGlossariesRequest",
                              responseType: "ListGlossariesResponse",
                              options: {
                                "(google.api.http).get": "/v3/{parent=projects/*/locations/*}/glossaries",
                                "(google.api.method_signature)": "parent"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v3/{parent=projects/*/locations/*}/glossaries"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent"
                                }
                              ]
                            },
                            GetGlossary: {
                              requestType: "GetGlossaryRequest",
                              responseType: "Glossary",
                              options: {
                                "(google.api.http).get": "/v3/{name=projects/*/locations/*/glossaries/*}",
                                "(google.api.method_signature)": "name"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v3/{name=projects/*/locations/*/glossaries/*}"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "name"
                                }
                              ]
                            },
                            DeleteGlossary: {
                              requestType: "DeleteGlossaryRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).delete": "/v3/{name=projects/*/locations/*/glossaries/*}",
                                "(google.api.method_signature)": "name",
                                "(google.longrunning.operation_info).response_type": "DeleteGlossaryResponse",
                                "(google.longrunning.operation_info).metadata_type": "DeleteGlossaryMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    delete: "/v3/{name=projects/*/locations/*/glossaries/*}"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "name"
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "DeleteGlossaryResponse",
                                    metadata_type: "DeleteGlossaryMetadata"
                                  }
                                }
                              ]
                            }
                          }
                        },
                        TranslateTextGlossaryConfig: {
                          fields: {
                            glossary: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            ignoreCase: {
                              type: "bool",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        TranslateTextRequest: {
                          fields: {
                            contents: {
                              rule: "repeated",
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            mimeType: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            targetLanguageCode: {
                              type: "string",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            parent: {
                              type: "string",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            model: {
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 10,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        TranslateTextResponse: {
                          fields: {
                            translations: {
                              rule: "repeated",
                              type: "Translation",
                              id: 1
                            },
                            glossaryTranslations: {
                              rule: "repeated",
                              type: "Translation",
                              id: 3
                            }
                          }
                        },
                        Translation: {
                          fields: {
                            translatedText: {
                              type: "string",
                              id: 1
                            },
                            model: {
                              type: "string",
                              id: 2
                            },
                            detectedLanguageCode: {
                              type: "string",
                              id: 4
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 3
                            }
                          }
                        },
                        DetectLanguageRequest: {
                          oneofs: {
                            source: {
                              oneof: [
                                "content"
                              ]
                            }
                          },
                          fields: {
                            parent: {
                              type: "string",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            model: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            content: {
                              type: "string",
                              id: 1
                            },
                            mimeType: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        DetectedLanguage: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1
                            },
                            confidence: {
                              type: "float",
                              id: 2
                            }
                          }
                        },
                        DetectLanguageResponse: {
                          fields: {
                            languages: {
                              rule: "repeated",
                              type: "DetectedLanguage",
                              id: 1
                            }
                          }
                        },
                        GetSupportedLanguagesRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            displayLanguageCode: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            model: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        SupportedLanguages: {
                          fields: {
                            languages: {
                              rule: "repeated",
                              type: "SupportedLanguage",
                              id: 1
                            }
                          }
                        },
                        SupportedLanguage: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1
                            },
                            displayName: {
                              type: "string",
                              id: 2
                            },
                            supportSource: {
                              type: "bool",
                              id: 3
                            },
                            supportTarget: {
                              type: "bool",
                              id: 4
                            }
                          }
                        },
                        GcsSource: {
                          fields: {
                            inputUri: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        InputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            mimeType: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            gcsSource: {
                              type: "GcsSource",
                              id: 2
                            }
                          }
                        },
                        GcsDestination: {
                          fields: {
                            outputUriPrefix: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        OutputConfig: {
                          oneofs: {
                            destination: {
                              oneof: [
                                "gcsDestination"
                              ]
                            }
                          },
                          fields: {
                            gcsDestination: {
                              type: "GcsDestination",
                              id: 1
                            }
                          }
                        },
                        DocumentInputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "content",
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            content: {
                              type: "bytes",
                              id: 1
                            },
                            gcsSource: {
                              type: "GcsSource",
                              id: 2
                            },
                            mimeType: {
                              type: "string",
                              id: 4
                            }
                          }
                        },
                        DocumentOutputConfig: {
                          oneofs: {
                            destination: {
                              oneof: [
                                "gcsDestination"
                              ]
                            }
                          },
                          fields: {
                            gcsDestination: {
                              type: "GcsDestination",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            mimeType: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        TranslateDocumentRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            targetLanguageCode: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            documentInputConfig: {
                              type: "DocumentInputConfig",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            documentOutputConfig: {
                              type: "DocumentOutputConfig",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            model: {
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            customizedAttribution: {
                              type: "string",
                              id: 10,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            isTranslateNativePdfOnly: {
                              type: "bool",
                              id: 11,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableShadowRemovalNativePdf: {
                              type: "bool",
                              id: 12,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableRotationCorrection: {
                              type: "bool",
                              id: 13,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        DocumentTranslation: {
                          fields: {
                            byteStreamOutputs: {
                              rule: "repeated",
                              type: "bytes",
                              id: 1
                            },
                            mimeType: {
                              type: "string",
                              id: 2
                            },
                            detectedLanguageCode: {
                              type: "string",
                              id: 3
                            }
                          }
                        },
                        TranslateDocumentResponse: {
                          fields: {
                            documentTranslation: {
                              type: "DocumentTranslation",
                              id: 1
                            },
                            glossaryDocumentTranslation: {
                              type: "DocumentTranslation",
                              id: 2
                            },
                            model: {
                              type: "string",
                              id: 3
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 4
                            }
                          }
                        },
                        BatchTranslateTextRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            targetLanguageCodes: {
                              rule: "repeated",
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            models: {
                              keyType: "string",
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            inputConfigs: {
                              rule: "repeated",
                              type: "InputConfig",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            outputConfig: {
                              type: "OutputConfig",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            glossaries: {
                              keyType: "string",
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 9,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        BatchTranslateMetadata: {
                          fields: {
                            state: {
                              type: "State",
                              id: 1
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 2
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 3
                            },
                            totalCharacters: {
                              type: "int64",
                              id: 4
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 5
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        },
                        BatchTranslateResponse: {
                          fields: {
                            totalCharacters: {
                              type: "int64",
                              id: 1
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 2
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 3
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 4
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 5
                            }
                          }
                        },
                        GlossaryInputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            gcsSource: {
                              type: "GcsSource",
                              id: 1
                            }
                          }
                        },
                        Glossary: {
                          options: {
                            "(google.api.resource).type": "translate.googleapis.com/Glossary",
                            "(google.api.resource).pattern": "projects/{project}/locations/{location}/glossaries/{glossary}"
                          },
                          oneofs: {
                            languages: {
                              oneof: [
                                "languagePair",
                                "languageCodesSet"
                              ]
                            }
                          },
                          fields: {
                            name: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            languagePair: {
                              type: "LanguageCodePair",
                              id: 3
                            },
                            languageCodesSet: {
                              type: "LanguageCodesSet",
                              id: 4
                            },
                            inputConfig: {
                              type: "GlossaryInputConfig",
                              id: 5
                            },
                            entryCount: {
                              type: "int32",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OUTPUT_ONLY"
                              }
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OUTPUT_ONLY"
                              }
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "OUTPUT_ONLY"
                              }
                            },
                            displayName: {
                              type: "string",
                              id: 9,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          },
                          nested: {
                            LanguageCodePair: {
                              fields: {
                                sourceLanguageCode: {
                                  type: "string",
                                  id: 1
                                },
                                targetLanguageCode: {
                                  type: "string",
                                  id: 2
                                }
                              }
                            },
                            LanguageCodesSet: {
                              fields: {
                                languageCodes: {
                                  rule: "repeated",
                                  type: "string",
                                  id: 1
                                }
                              }
                            }
                          }
                        },
                        CreateGlossaryRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            glossary: {
                              type: "Glossary",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        GetGlossaryRequest: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "translate.googleapis.com/Glossary"
                              }
                            }
                          }
                        },
                        DeleteGlossaryRequest: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "translate.googleapis.com/Glossary"
                              }
                            }
                          }
                        },
                        ListGlossariesRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            pageSize: {
                              type: "int32",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            pageToken: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            filter: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        ListGlossariesResponse: {
                          fields: {
                            glossaries: {
                              rule: "repeated",
                              type: "Glossary",
                              id: 1
                            },
                            nextPageToken: {
                              type: "string",
                              id: 2
                            }
                          }
                        },
                        CreateGlossaryMetadata: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1
                            },
                            state: {
                              type: "State",
                              id: 2
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 3
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        },
                        DeleteGlossaryMetadata: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1
                            },
                            state: {
                              type: "State",
                              id: 2
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 3
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        },
                        DeleteGlossaryResponse: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 2
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 3
                            }
                          }
                        },
                        BatchTranslateDocumentRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            targetLanguageCodes: {
                              rule: "repeated",
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            inputConfigs: {
                              rule: "repeated",
                              type: "BatchDocumentInputConfig",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            outputConfig: {
                              type: "BatchDocumentOutputConfig",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            models: {
                              keyType: "string",
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            glossaries: {
                              keyType: "string",
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            formatConversions: {
                              keyType: "string",
                              type: "string",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            customizedAttribution: {
                              type: "string",
                              id: 10,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableShadowRemovalNativePdf: {
                              type: "bool",
                              id: 11,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableRotationCorrection: {
                              type: "bool",
                              id: 12,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        BatchDocumentInputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            gcsSource: {
                              type: "GcsSource",
                              id: 1
                            }
                          }
                        },
                        BatchDocumentOutputConfig: {
                          oneofs: {
                            destination: {
                              oneof: [
                                "gcsDestination"
                              ]
                            }
                          },
                          fields: {
                            gcsDestination: {
                              type: "GcsDestination",
                              id: 1
                            }
                          }
                        },
                        BatchTranslateDocumentResponse: {
                          fields: {
                            totalPages: {
                              type: "int64",
                              id: 1
                            },
                            translatedPages: {
                              type: "int64",
                              id: 2
                            },
                            failedPages: {
                              type: "int64",
                              id: 3
                            },
                            totalBillablePages: {
                              type: "int64",
                              id: 4
                            },
                            totalCharacters: {
                              type: "int64",
                              id: 5
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 6
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 7
                            },
                            totalBillableCharacters: {
                              type: "int64",
                              id: 8
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 9
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 10
                            }
                          }
                        },
                        BatchTranslateDocumentMetadata: {
                          fields: {
                            state: {
                              type: "State",
                              id: 1
                            },
                            totalPages: {
                              type: "int64",
                              id: 2
                            },
                            translatedPages: {
                              type: "int64",
                              id: 3
                            },
                            failedPages: {
                              type: "int64",
                              id: 4
                            },
                            totalBillablePages: {
                              type: "int64",
                              id: 5
                            },
                            totalCharacters: {
                              type: "int64",
                              id: 6
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 7
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 8
                            },
                            totalBillableCharacters: {
                              type: "int64",
                              id: 9
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 10
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        }
                      }
                    },
                    v3beta1: {
                      options: {
                        cc_enable_arenas: true,
                        csharp_namespace: "Google.Cloud.Translate.V3Beta1",
                        go_package: "cloud.google.com/go/translation/apiv3beta1/translationpb;translationpb",
                        java_multiple_files: true,
                        java_outer_classname: "TranslationServiceProto",
                        java_package: "com.google.cloud.translate.v3beta1",
                        php_namespace: "Google\\Cloud\\Translate\\V3beta1",
                        ruby_package: "Google::Cloud::Translate::V3beta1"
                      },
                      nested: {
                        TranslationService: {
                          options: {
                            "(google.api.default_host)": "translate.googleapis.com",
                            "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/cloud-translation"
                          },
                          methods: {
                            TranslateText: {
                              requestType: "TranslateTextRequest",
                              responseType: "TranslateTextResponse",
                              options: {
                                "(google.api.http).post": "/v3beta1/{parent=projects/*/locations/*}:translateText",
                                "(google.api.http).body": "*",
                                "(google.api.http).additional_bindings.post": "/v3beta1/{parent=projects/*}:translateText",
                                "(google.api.http).additional_bindings.body": "*"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3beta1/{parent=projects/*/locations/*}:translateText",
                                    body: "*",
                                    additional_bindings: {
                                      post: "/v3beta1/{parent=projects/*}:translateText",
                                      body: "*"
                                    }
                                  }
                                }
                              ]
                            },
                            DetectLanguage: {
                              requestType: "DetectLanguageRequest",
                              responseType: "DetectLanguageResponse",
                              options: {
                                "(google.api.http).post": "/v3beta1/{parent=projects/*/locations/*}:detectLanguage",
                                "(google.api.http).body": "*",
                                "(google.api.http).additional_bindings.post": "/v3beta1/{parent=projects/*}:detectLanguage",
                                "(google.api.http).additional_bindings.body": "*",
                                "(google.api.method_signature)": "parent,model,mime_type"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3beta1/{parent=projects/*/locations/*}:detectLanguage",
                                    body: "*",
                                    additional_bindings: {
                                      post: "/v3beta1/{parent=projects/*}:detectLanguage",
                                      body: "*"
                                    }
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,model,mime_type"
                                }
                              ]
                            },
                            GetSupportedLanguages: {
                              requestType: "GetSupportedLanguagesRequest",
                              responseType: "SupportedLanguages",
                              options: {
                                "(google.api.http).get": "/v3beta1/{parent=projects/*/locations/*}/supportedLanguages",
                                "(google.api.http).additional_bindings.get": "/v3beta1/{parent=projects/*}/supportedLanguages",
                                "(google.api.method_signature)": "parent,display_language_code,model"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v3beta1/{parent=projects/*/locations/*}/supportedLanguages",
                                    additional_bindings: {
                                      get: "/v3beta1/{parent=projects/*}/supportedLanguages"
                                    }
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,display_language_code,model"
                                }
                              ]
                            },
                            TranslateDocument: {
                              requestType: "TranslateDocumentRequest",
                              responseType: "TranslateDocumentResponse",
                              options: {
                                "(google.api.http).post": "/v3beta1/{parent=projects/*/locations/*}:translateDocument",
                                "(google.api.http).body": "*"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3beta1/{parent=projects/*/locations/*}:translateDocument",
                                    body: "*"
                                  }
                                }
                              ]
                            },
                            BatchTranslateText: {
                              requestType: "BatchTranslateTextRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v3beta1/{parent=projects/*/locations/*}:batchTranslateText",
                                "(google.api.http).body": "*",
                                "(google.longrunning.operation_info).response_type": "BatchTranslateResponse",
                                "(google.longrunning.operation_info).metadata_type": "BatchTranslateMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3beta1/{parent=projects/*/locations/*}:batchTranslateText",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "BatchTranslateResponse",
                                    metadata_type: "BatchTranslateMetadata"
                                  }
                                }
                              ]
                            },
                            BatchTranslateDocument: {
                              requestType: "BatchTranslateDocumentRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v3beta1/{parent=projects/*/locations/*}:batchTranslateDocument",
                                "(google.api.http).body": "*",
                                "(google.api.method_signature)": "parent,source_language_code,target_language_codes,input_configs,output_config",
                                "(google.longrunning.operation_info).response_type": "BatchTranslateDocumentResponse",
                                "(google.longrunning.operation_info).metadata_type": "BatchTranslateDocumentMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3beta1/{parent=projects/*/locations/*}:batchTranslateDocument",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,source_language_code,target_language_codes,input_configs,output_config"
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "BatchTranslateDocumentResponse",
                                    metadata_type: "BatchTranslateDocumentMetadata"
                                  }
                                }
                              ]
                            },
                            CreateGlossary: {
                              requestType: "CreateGlossaryRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v3beta1/{parent=projects/*/locations/*}/glossaries",
                                "(google.api.http).body": "glossary",
                                "(google.api.method_signature)": "parent,glossary",
                                "(google.longrunning.operation_info).response_type": "Glossary",
                                "(google.longrunning.operation_info).metadata_type": "CreateGlossaryMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v3beta1/{parent=projects/*/locations/*}/glossaries",
                                    body: "glossary"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,glossary"
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "Glossary",
                                    metadata_type: "CreateGlossaryMetadata"
                                  }
                                }
                              ]
                            },
                            ListGlossaries: {
                              requestType: "ListGlossariesRequest",
                              responseType: "ListGlossariesResponse",
                              options: {
                                "(google.api.http).get": "/v3beta1/{parent=projects/*/locations/*}/glossaries",
                                "(google.api.method_signature)": "parent,filter"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v3beta1/{parent=projects/*/locations/*}/glossaries"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "parent,filter"
                                }
                              ]
                            },
                            GetGlossary: {
                              requestType: "GetGlossaryRequest",
                              responseType: "Glossary",
                              options: {
                                "(google.api.http).get": "/v3beta1/{name=projects/*/locations/*/glossaries/*}",
                                "(google.api.method_signature)": "name"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v3beta1/{name=projects/*/locations/*/glossaries/*}"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "name"
                                }
                              ]
                            },
                            DeleteGlossary: {
                              requestType: "DeleteGlossaryRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).delete": "/v3beta1/{name=projects/*/locations/*/glossaries/*}",
                                "(google.api.method_signature)": "name",
                                "(google.longrunning.operation_info).response_type": "DeleteGlossaryResponse",
                                "(google.longrunning.operation_info).metadata_type": "DeleteGlossaryMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    delete: "/v3beta1/{name=projects/*/locations/*/glossaries/*}"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "name"
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "DeleteGlossaryResponse",
                                    metadata_type: "DeleteGlossaryMetadata"
                                  }
                                }
                              ]
                            }
                          }
                        },
                        TranslateTextGlossaryConfig: {
                          fields: {
                            glossary: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            ignoreCase: {
                              type: "bool",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        TranslateTextRequest: {
                          fields: {
                            contents: {
                              rule: "repeated",
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            mimeType: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            targetLanguageCode: {
                              type: "string",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            parent: {
                              type: "string",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            model: {
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 10,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        TranslateTextResponse: {
                          fields: {
                            translations: {
                              rule: "repeated",
                              type: "Translation",
                              id: 1
                            },
                            glossaryTranslations: {
                              rule: "repeated",
                              type: "Translation",
                              id: 3
                            }
                          }
                        },
                        Translation: {
                          fields: {
                            translatedText: {
                              type: "string",
                              id: 1
                            },
                            model: {
                              type: "string",
                              id: 2
                            },
                            detectedLanguageCode: {
                              type: "string",
                              id: 4
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 3
                            }
                          }
                        },
                        DetectLanguageRequest: {
                          oneofs: {
                            source: {
                              oneof: [
                                "content"
                              ]
                            }
                          },
                          fields: {
                            parent: {
                              type: "string",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            model: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            content: {
                              type: "string",
                              id: 1
                            },
                            mimeType: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        DetectedLanguage: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1
                            },
                            confidence: {
                              type: "float",
                              id: 2
                            }
                          }
                        },
                        DetectLanguageResponse: {
                          fields: {
                            languages: {
                              rule: "repeated",
                              type: "DetectedLanguage",
                              id: 1
                            }
                          }
                        },
                        GetSupportedLanguagesRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            displayLanguageCode: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            model: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        SupportedLanguages: {
                          fields: {
                            languages: {
                              rule: "repeated",
                              type: "SupportedLanguage",
                              id: 1
                            }
                          }
                        },
                        SupportedLanguage: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1
                            },
                            displayName: {
                              type: "string",
                              id: 2
                            },
                            supportSource: {
                              type: "bool",
                              id: 3
                            },
                            supportTarget: {
                              type: "bool",
                              id: 4
                            }
                          }
                        },
                        GcsSource: {
                          fields: {
                            inputUri: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        InputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            mimeType: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            gcsSource: {
                              type: "GcsSource",
                              id: 2
                            }
                          }
                        },
                        GcsDestination: {
                          fields: {
                            outputUriPrefix: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        OutputConfig: {
                          oneofs: {
                            destination: {
                              oneof: [
                                "gcsDestination"
                              ]
                            }
                          },
                          fields: {
                            gcsDestination: {
                              type: "GcsDestination",
                              id: 1
                            }
                          }
                        },
                        DocumentInputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "content",
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            content: {
                              type: "bytes",
                              id: 1
                            },
                            gcsSource: {
                              type: "GcsSource",
                              id: 2
                            },
                            mimeType: {
                              type: "string",
                              id: 4
                            }
                          }
                        },
                        DocumentOutputConfig: {
                          oneofs: {
                            destination: {
                              oneof: [
                                "gcsDestination"
                              ]
                            }
                          },
                          fields: {
                            gcsDestination: {
                              type: "GcsDestination",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            mimeType: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        TranslateDocumentRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            targetLanguageCode: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            documentInputConfig: {
                              type: "DocumentInputConfig",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            documentOutputConfig: {
                              type: "DocumentOutputConfig",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            model: {
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            customizedAttribution: {
                              type: "string",
                              id: 10,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            isTranslateNativePdfOnly: {
                              type: "bool",
                              id: 11,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableShadowRemovalNativePdf: {
                              type: "bool",
                              id: 12,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableRotationCorrection: {
                              type: "bool",
                              id: 13,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        DocumentTranslation: {
                          fields: {
                            byteStreamOutputs: {
                              rule: "repeated",
                              type: "bytes",
                              id: 1
                            },
                            mimeType: {
                              type: "string",
                              id: 2
                            },
                            detectedLanguageCode: {
                              type: "string",
                              id: 3
                            }
                          }
                        },
                        TranslateDocumentResponse: {
                          fields: {
                            documentTranslation: {
                              type: "DocumentTranslation",
                              id: 1
                            },
                            glossaryDocumentTranslation: {
                              type: "DocumentTranslation",
                              id: 2
                            },
                            model: {
                              type: "string",
                              id: 3
                            },
                            glossaryConfig: {
                              type: "TranslateTextGlossaryConfig",
                              id: 4
                            }
                          }
                        },
                        BatchTranslateTextRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            targetLanguageCodes: {
                              rule: "repeated",
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            models: {
                              keyType: "string",
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            inputConfigs: {
                              rule: "repeated",
                              type: "InputConfig",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            outputConfig: {
                              type: "OutputConfig",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            glossaries: {
                              keyType: "string",
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            labels: {
                              keyType: "string",
                              type: "string",
                              id: 9,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        BatchTranslateMetadata: {
                          fields: {
                            state: {
                              type: "State",
                              id: 1
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 2
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 3
                            },
                            totalCharacters: {
                              type: "int64",
                              id: 4
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 5
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        },
                        BatchTranslateResponse: {
                          fields: {
                            totalCharacters: {
                              type: "int64",
                              id: 1
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 2
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 3
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 4
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 5
                            }
                          }
                        },
                        GlossaryInputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            gcsSource: {
                              type: "GcsSource",
                              id: 1
                            }
                          }
                        },
                        Glossary: {
                          options: {
                            "(google.api.resource).type": "translate.googleapis.com/Glossary",
                            "(google.api.resource).pattern": "projects/{project}/locations/{location}/glossaries/{glossary}"
                          },
                          oneofs: {
                            languages: {
                              oneof: [
                                "languagePair",
                                "languageCodesSet"
                              ]
                            }
                          },
                          fields: {
                            name: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            languagePair: {
                              type: "LanguageCodePair",
                              id: 3
                            },
                            languageCodesSet: {
                              type: "LanguageCodesSet",
                              id: 4
                            },
                            inputConfig: {
                              type: "GlossaryInputConfig",
                              id: 5
                            },
                            entryCount: {
                              type: "int32",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OUTPUT_ONLY"
                              }
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OUTPUT_ONLY"
                              }
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "OUTPUT_ONLY"
                              }
                            }
                          },
                          nested: {
                            LanguageCodePair: {
                              fields: {
                                sourceLanguageCode: {
                                  type: "string",
                                  id: 1
                                },
                                targetLanguageCode: {
                                  type: "string",
                                  id: 2
                                }
                              }
                            },
                            LanguageCodesSet: {
                              fields: {
                                languageCodes: {
                                  rule: "repeated",
                                  type: "string",
                                  id: 1
                                }
                              }
                            }
                          }
                        },
                        CreateGlossaryRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            glossary: {
                              type: "Glossary",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        GetGlossaryRequest: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "translate.googleapis.com/Glossary"
                              }
                            }
                          }
                        },
                        DeleteGlossaryRequest: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "translate.googleapis.com/Glossary"
                              }
                            }
                          }
                        },
                        ListGlossariesRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            pageSize: {
                              type: "int32",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            pageToken: {
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            filter: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        ListGlossariesResponse: {
                          fields: {
                            glossaries: {
                              rule: "repeated",
                              type: "Glossary",
                              id: 1
                            },
                            nextPageToken: {
                              type: "string",
                              id: 2
                            }
                          }
                        },
                        CreateGlossaryMetadata: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1
                            },
                            state: {
                              type: "State",
                              id: 2
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 3
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        },
                        DeleteGlossaryMetadata: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1
                            },
                            state: {
                              type: "State",
                              id: 2
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 3
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        },
                        DeleteGlossaryResponse: {
                          fields: {
                            name: {
                              type: "string",
                              id: 1
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 2
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 3
                            }
                          }
                        },
                        BatchTranslateDocumentRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "locations.googleapis.com/Location"
                              }
                            },
                            sourceLanguageCode: {
                              type: "string",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            targetLanguageCodes: {
                              rule: "repeated",
                              type: "string",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            inputConfigs: {
                              rule: "repeated",
                              type: "BatchDocumentInputConfig",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            outputConfig: {
                              type: "BatchDocumentOutputConfig",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            models: {
                              keyType: "string",
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            glossaries: {
                              keyType: "string",
                              type: "TranslateTextGlossaryConfig",
                              id: 7,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            formatConversions: {
                              keyType: "string",
                              type: "string",
                              id: 8,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            customizedAttribution: {
                              type: "string",
                              id: 10,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableShadowRemovalNativePdf: {
                              type: "bool",
                              id: 11,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            enableRotationCorrection: {
                              type: "bool",
                              id: 12,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        BatchDocumentInputConfig: {
                          oneofs: {
                            source: {
                              oneof: [
                                "gcsSource"
                              ]
                            }
                          },
                          fields: {
                            gcsSource: {
                              type: "GcsSource",
                              id: 1
                            }
                          }
                        },
                        BatchDocumentOutputConfig: {
                          oneofs: {
                            destination: {
                              oneof: [
                                "gcsDestination"
                              ]
                            }
                          },
                          fields: {
                            gcsDestination: {
                              type: "GcsDestination",
                              id: 1
                            }
                          }
                        },
                        BatchTranslateDocumentResponse: {
                          fields: {
                            totalPages: {
                              type: "int64",
                              id: 1
                            },
                            translatedPages: {
                              type: "int64",
                              id: 2
                            },
                            failedPages: {
                              type: "int64",
                              id: 3
                            },
                            totalBillablePages: {
                              type: "int64",
                              id: 4
                            },
                            totalCharacters: {
                              type: "int64",
                              id: 5
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 6
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 7
                            },
                            totalBillableCharacters: {
                              type: "int64",
                              id: 8
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 9
                            },
                            endTime: {
                              type: "google.protobuf.Timestamp",
                              id: 10
                            }
                          }
                        },
                        BatchTranslateDocumentMetadata: {
                          fields: {
                            state: {
                              type: "State",
                              id: 1
                            },
                            totalPages: {
                              type: "int64",
                              id: 2
                            },
                            translatedPages: {
                              type: "int64",
                              id: 3
                            },
                            failedPages: {
                              type: "int64",
                              id: 4
                            },
                            totalBillablePages: {
                              type: "int64",
                              id: 5
                            },
                            totalCharacters: {
                              type: "int64",
                              id: 6
                            },
                            translatedCharacters: {
                              type: "int64",
                              id: 7
                            },
                            failedCharacters: {
                              type: "int64",
                              id: 8
                            },
                            totalBillableCharacters: {
                              type: "int64",
                              id: 9
                            },
                            submitTime: {
                              type: "google.protobuf.Timestamp",
                              id: 10
                            }
                          },
                          nested: {
                            State: {
                              values: {
                                STATE_UNSPECIFIED: 0,
                                RUNNING: 1,
                                SUCCEEDED: 2,
                                FAILED: 3,
                                CANCELLING: 4,
                                CANCELLED: 5
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            api: {
              options: {
                go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations",
                java_multiple_files: true,
                java_outer_classname: "ResourceProto",
                java_package: "com.google.api",
                objc_class_prefix: "GAPI",
                cc_enable_arenas: true
              },
              nested: {
                http: {
                  type: "HttpRule",
                  id: 72295728,
                  extend: "google.protobuf.MethodOptions"
                },
                Http: {
                  fields: {
                    rules: {
                      rule: "repeated",
                      type: "HttpRule",
                      id: 1
                    },
                    fullyDecodeReservedExpansion: {
                      type: "bool",
                      id: 2
                    }
                  }
                },
                HttpRule: {
                  oneofs: {
                    pattern: {
                      oneof: [
                        "get",
                        "put",
                        "post",
                        "delete",
                        "patch",
                        "custom"
                      ]
                    }
                  },
                  fields: {
                    selector: {
                      type: "string",
                      id: 1
                    },
                    get: {
                      type: "string",
                      id: 2
                    },
                    put: {
                      type: "string",
                      id: 3
                    },
                    post: {
                      type: "string",
                      id: 4
                    },
                    delete: {
                      type: "string",
                      id: 5
                    },
                    patch: {
                      type: "string",
                      id: 6
                    },
                    custom: {
                      type: "CustomHttpPattern",
                      id: 8
                    },
                    body: {
                      type: "string",
                      id: 7
                    },
                    responseBody: {
                      type: "string",
                      id: 12
                    },
                    additionalBindings: {
                      rule: "repeated",
                      type: "HttpRule",
                      id: 11
                    }
                  }
                },
                CustomHttpPattern: {
                  fields: {
                    kind: {
                      type: "string",
                      id: 1
                    },
                    path: {
                      type: "string",
                      id: 2
                    }
                  }
                },
                methodSignature: {
                  rule: "repeated",
                  type: "string",
                  id: 1051,
                  extend: "google.protobuf.MethodOptions"
                },
                defaultHost: {
                  type: "string",
                  id: 1049,
                  extend: "google.protobuf.ServiceOptions"
                },
                oauthScopes: {
                  type: "string",
                  id: 1050,
                  extend: "google.protobuf.ServiceOptions"
                },
                CommonLanguageSettings: {
                  fields: {
                    referenceDocsUri: {
                      type: "string",
                      id: 1,
                      options: {
                        deprecated: true
                      }
                    },
                    destinations: {
                      rule: "repeated",
                      type: "ClientLibraryDestination",
                      id: 2
                    }
                  }
                },
                ClientLibrarySettings: {
                  fields: {
                    version: {
                      type: "string",
                      id: 1
                    },
                    launchStage: {
                      type: "LaunchStage",
                      id: 2
                    },
                    restNumericEnums: {
                      type: "bool",
                      id: 3
                    },
                    javaSettings: {
                      type: "JavaSettings",
                      id: 21
                    },
                    cppSettings: {
                      type: "CppSettings",
                      id: 22
                    },
                    phpSettings: {
                      type: "PhpSettings",
                      id: 23
                    },
                    pythonSettings: {
                      type: "PythonSettings",
                      id: 24
                    },
                    nodeSettings: {
                      type: "NodeSettings",
                      id: 25
                    },
                    dotnetSettings: {
                      type: "DotnetSettings",
                      id: 26
                    },
                    rubySettings: {
                      type: "RubySettings",
                      id: 27
                    },
                    goSettings: {
                      type: "GoSettings",
                      id: 28
                    }
                  }
                },
                Publishing: {
                  fields: {
                    methodSettings: {
                      rule: "repeated",
                      type: "MethodSettings",
                      id: 2
                    },
                    newIssueUri: {
                      type: "string",
                      id: 101
                    },
                    documentationUri: {
                      type: "string",
                      id: 102
                    },
                    apiShortName: {
                      type: "string",
                      id: 103
                    },
                    githubLabel: {
                      type: "string",
                      id: 104
                    },
                    codeownerGithubTeams: {
                      rule: "repeated",
                      type: "string",
                      id: 105
                    },
                    docTagPrefix: {
                      type: "string",
                      id: 106
                    },
                    organization: {
                      type: "ClientLibraryOrganization",
                      id: 107
                    },
                    librarySettings: {
                      rule: "repeated",
                      type: "ClientLibrarySettings",
                      id: 109
                    }
                  }
                },
                JavaSettings: {
                  fields: {
                    libraryPackage: {
                      type: "string",
                      id: 1
                    },
                    serviceClassNames: {
                      keyType: "string",
                      type: "string",
                      id: 2
                    },
                    common: {
                      type: "CommonLanguageSettings",
                      id: 3
                    }
                  }
                },
                CppSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                PhpSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                PythonSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                NodeSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                DotnetSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                RubySettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                GoSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                MethodSettings: {
                  fields: {
                    selector: {
                      type: "string",
                      id: 1
                    },
                    longRunning: {
                      type: "LongRunning",
                      id: 2
                    }
                  },
                  nested: {
                    LongRunning: {
                      fields: {
                        initialPollDelay: {
                          type: "google.protobuf.Duration",
                          id: 1
                        },
                        pollDelayMultiplier: {
                          type: "float",
                          id: 2
                        },
                        maxPollDelay: {
                          type: "google.protobuf.Duration",
                          id: 3
                        },
                        totalPollTimeout: {
                          type: "google.protobuf.Duration",
                          id: 4
                        }
                      }
                    }
                  }
                },
                ClientLibraryOrganization: {
                  values: {
                    CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED: 0,
                    CLOUD: 1,
                    ADS: 2,
                    PHOTOS: 3,
                    STREET_VIEW: 4
                  }
                },
                ClientLibraryDestination: {
                  values: {
                    CLIENT_LIBRARY_DESTINATION_UNSPECIFIED: 0,
                    GITHUB: 10,
                    PACKAGE_MANAGER: 20
                  }
                },
                LaunchStage: {
                  values: {
                    LAUNCH_STAGE_UNSPECIFIED: 0,
                    UNIMPLEMENTED: 6,
                    PRELAUNCH: 7,
                    EARLY_ACCESS: 1,
                    ALPHA: 2,
                    BETA: 3,
                    GA: 4,
                    DEPRECATED: 5
                  }
                },
                fieldBehavior: {
                  rule: "repeated",
                  type: "google.api.FieldBehavior",
                  id: 1052,
                  extend: "google.protobuf.FieldOptions"
                },
                FieldBehavior: {
                  values: {
                    FIELD_BEHAVIOR_UNSPECIFIED: 0,
                    OPTIONAL: 1,
                    REQUIRED: 2,
                    OUTPUT_ONLY: 3,
                    INPUT_ONLY: 4,
                    IMMUTABLE: 5,
                    UNORDERED_LIST: 6,
                    NON_EMPTY_DEFAULT: 7
                  }
                },
                resourceReference: {
                  type: "google.api.ResourceReference",
                  id: 1055,
                  extend: "google.protobuf.FieldOptions"
                },
                resourceDefinition: {
                  rule: "repeated",
                  type: "google.api.ResourceDescriptor",
                  id: 1053,
                  extend: "google.protobuf.FileOptions"
                },
                resource: {
                  type: "google.api.ResourceDescriptor",
                  id: 1053,
                  extend: "google.protobuf.MessageOptions"
                },
                ResourceDescriptor: {
                  fields: {
                    type: {
                      type: "string",
                      id: 1
                    },
                    pattern: {
                      rule: "repeated",
                      type: "string",
                      id: 2
                    },
                    nameField: {
                      type: "string",
                      id: 3
                    },
                    history: {
                      type: "History",
                      id: 4
                    },
                    plural: {
                      type: "string",
                      id: 5
                    },
                    singular: {
                      type: "string",
                      id: 6
                    },
                    style: {
                      rule: "repeated",
                      type: "Style",
                      id: 10
                    }
                  },
                  nested: {
                    History: {
                      values: {
                        HISTORY_UNSPECIFIED: 0,
                        ORIGINALLY_SINGLE_PATTERN: 1,
                        FUTURE_MULTI_PATTERN: 2
                      }
                    },
                    Style: {
                      values: {
                        STYLE_UNSPECIFIED: 0,
                        DECLARATIVE_FRIENDLY: 1
                      }
                    }
                  }
                },
                ResourceReference: {
                  fields: {
                    type: {
                      type: "string",
                      id: 1
                    },
                    childType: {
                      type: "string",
                      id: 2
                    }
                  }
                }
              }
            },
            protobuf: {
              options: {
                go_package: "google.golang.org/protobuf/types/descriptorpb",
                java_package: "com.google.protobuf",
                java_outer_classname: "DescriptorProtos",
                csharp_namespace: "Google.Protobuf.Reflection",
                objc_class_prefix: "GPB",
                cc_enable_arenas: true,
                optimize_for: "SPEED"
              },
              nested: {
                FileDescriptorSet: {
                  fields: {
                    file: {
                      rule: "repeated",
                      type: "FileDescriptorProto",
                      id: 1
                    }
                  }
                },
                FileDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    package: {
                      type: "string",
                      id: 2
                    },
                    dependency: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    publicDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 10,
                      options: {
                        packed: false
                      }
                    },
                    weakDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 11,
                      options: {
                        packed: false
                      }
                    },
                    messageType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 4
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 5
                    },
                    service: {
                      rule: "repeated",
                      type: "ServiceDescriptorProto",
                      id: 6
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 7
                    },
                    options: {
                      type: "FileOptions",
                      id: 8
                    },
                    sourceCodeInfo: {
                      type: "SourceCodeInfo",
                      id: 9
                    },
                    syntax: {
                      type: "string",
                      id: 12
                    },
                    edition: {
                      type: "string",
                      id: 13
                    }
                  }
                },
                DescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    field: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 2
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 6
                    },
                    nestedType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 3
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 4
                    },
                    extensionRange: {
                      rule: "repeated",
                      type: "ExtensionRange",
                      id: 5
                    },
                    oneofDecl: {
                      rule: "repeated",
                      type: "OneofDescriptorProto",
                      id: 8
                    },
                    options: {
                      type: "MessageOptions",
                      id: 7
                    },
                    reservedRange: {
                      rule: "repeated",
                      type: "ReservedRange",
                      id: 9
                    },
                    reservedName: {
                      rule: "repeated",
                      type: "string",
                      id: 10
                    }
                  },
                  nested: {
                    ExtensionRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        },
                        options: {
                          type: "ExtensionRangeOptions",
                          id: 3
                        }
                      }
                    },
                    ReservedRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    }
                  }
                },
                ExtensionRangeOptions: {
                  fields: {
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                FieldDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    label: {
                      type: "Label",
                      id: 4
                    },
                    type: {
                      type: "Type",
                      id: 5
                    },
                    typeName: {
                      type: "string",
                      id: 6
                    },
                    extendee: {
                      type: "string",
                      id: 2
                    },
                    defaultValue: {
                      type: "string",
                      id: 7
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    options: {
                      type: "FieldOptions",
                      id: 8
                    },
                    proto3Optional: {
                      type: "bool",
                      id: 17
                    }
                  },
                  nested: {
                    Type: {
                      values: {
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Label: {
                      values: {
                        LABEL_OPTIONAL: 1,
                        LABEL_REQUIRED: 2,
                        LABEL_REPEATED: 3
                      }
                    }
                  }
                },
                OneofDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    options: {
                      type: "OneofOptions",
                      id: 2
                    }
                  }
                },
                EnumDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      rule: "repeated",
                      type: "EnumValueDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "EnumOptions",
                      id: 3
                    },
                    reservedRange: {
                      rule: "repeated",
                      type: "EnumReservedRange",
                      id: 4
                    },
                    reservedName: {
                      rule: "repeated",
                      type: "string",
                      id: 5
                    }
                  },
                  nested: {
                    EnumReservedRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    }
                  }
                },
                EnumValueDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      type: "EnumValueOptions",
                      id: 3
                    }
                  }
                },
                ServiceDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    method: {
                      rule: "repeated",
                      type: "MethodDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "ServiceOptions",
                      id: 3
                    }
                  }
                },
                MethodDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    inputType: {
                      type: "string",
                      id: 2
                    },
                    outputType: {
                      type: "string",
                      id: 3
                    },
                    options: {
                      type: "MethodOptions",
                      id: 4
                    },
                    clientStreaming: {
                      type: "bool",
                      id: 5,
                      options: {
                        default: false
                      }
                    },
                    serverStreaming: {
                      type: "bool",
                      id: 6,
                      options: {
                        default: false
                      }
                    }
                  }
                },
                FileOptions: {
                  fields: {
                    javaPackage: {
                      type: "string",
                      id: 1
                    },
                    javaOuterClassname: {
                      type: "string",
                      id: 8
                    },
                    javaMultipleFiles: {
                      type: "bool",
                      id: 10,
                      options: {
                        default: false
                      }
                    },
                    javaGenerateEqualsAndHash: {
                      type: "bool",
                      id: 20,
                      options: {
                        deprecated: true
                      }
                    },
                    javaStringCheckUtf8: {
                      type: "bool",
                      id: 27,
                      options: {
                        default: false
                      }
                    },
                    optimizeFor: {
                      type: "OptimizeMode",
                      id: 9,
                      options: {
                        default: "SPEED"
                      }
                    },
                    goPackage: {
                      type: "string",
                      id: 11
                    },
                    ccGenericServices: {
                      type: "bool",
                      id: 16,
                      options: {
                        default: false
                      }
                    },
                    javaGenericServices: {
                      type: "bool",
                      id: 17,
                      options: {
                        default: false
                      }
                    },
                    pyGenericServices: {
                      type: "bool",
                      id: 18,
                      options: {
                        default: false
                      }
                    },
                    phpGenericServices: {
                      type: "bool",
                      id: 42,
                      options: {
                        default: false
                      }
                    },
                    deprecated: {
                      type: "bool",
                      id: 23,
                      options: {
                        default: false
                      }
                    },
                    ccEnableArenas: {
                      type: "bool",
                      id: 31,
                      options: {
                        default: true
                      }
                    },
                    objcClassPrefix: {
                      type: "string",
                      id: 36
                    },
                    csharpNamespace: {
                      type: "string",
                      id: 37
                    },
                    swiftPrefix: {
                      type: "string",
                      id: 39
                    },
                    phpClassPrefix: {
                      type: "string",
                      id: 40
                    },
                    phpNamespace: {
                      type: "string",
                      id: 41
                    },
                    phpMetadataNamespace: {
                      type: "string",
                      id: 44
                    },
                    rubyPackage: {
                      type: "string",
                      id: 45
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      38,
                      38
                    ]
                  ],
                  nested: {
                    OptimizeMode: {
                      values: {
                        SPEED: 1,
                        CODE_SIZE: 2,
                        LITE_RUNTIME: 3
                      }
                    }
                  }
                },
                MessageOptions: {
                  fields: {
                    messageSetWireFormat: {
                      type: "bool",
                      id: 1,
                      options: {
                        default: false
                      }
                    },
                    noStandardDescriptorAccessor: {
                      type: "bool",
                      id: 2,
                      options: {
                        default: false
                      }
                    },
                    deprecated: {
                      type: "bool",
                      id: 3,
                      options: {
                        default: false
                      }
                    },
                    mapEntry: {
                      type: "bool",
                      id: 7
                    },
                    deprecatedLegacyJsonFieldConflicts: {
                      type: "bool",
                      id: 11,
                      options: {
                        deprecated: true
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      4,
                      4
                    ],
                    [
                      5,
                      5
                    ],
                    [
                      6,
                      6
                    ],
                    [
                      8,
                      8
                    ],
                    [
                      9,
                      9
                    ]
                  ]
                },
                FieldOptions: {
                  fields: {
                    ctype: {
                      type: "CType",
                      id: 1,
                      options: {
                        default: "STRING"
                      }
                    },
                    packed: {
                      type: "bool",
                      id: 2
                    },
                    jstype: {
                      type: "JSType",
                      id: 6,
                      options: {
                        default: "JS_NORMAL"
                      }
                    },
                    lazy: {
                      type: "bool",
                      id: 5,
                      options: {
                        default: false
                      }
                    },
                    unverifiedLazy: {
                      type: "bool",
                      id: 15,
                      options: {
                        default: false
                      }
                    },
                    deprecated: {
                      type: "bool",
                      id: 3,
                      options: {
                        default: false
                      }
                    },
                    weak: {
                      type: "bool",
                      id: 10,
                      options: {
                        default: false
                      }
                    },
                    debugRedact: {
                      type: "bool",
                      id: 16,
                      options: {
                        default: false
                      }
                    },
                    retention: {
                      type: "OptionRetention",
                      id: 17
                    },
                    target: {
                      type: "OptionTargetType",
                      id: 18
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      4,
                      4
                    ]
                  ],
                  nested: {
                    CType: {
                      values: {
                        STRING: 0,
                        CORD: 1,
                        STRING_PIECE: 2
                      }
                    },
                    JSType: {
                      values: {
                        JS_NORMAL: 0,
                        JS_STRING: 1,
                        JS_NUMBER: 2
                      }
                    },
                    OptionRetention: {
                      values: {
                        RETENTION_UNKNOWN: 0,
                        RETENTION_RUNTIME: 1,
                        RETENTION_SOURCE: 2
                      }
                    },
                    OptionTargetType: {
                      values: {
                        TARGET_TYPE_UNKNOWN: 0,
                        TARGET_TYPE_FILE: 1,
                        TARGET_TYPE_EXTENSION_RANGE: 2,
                        TARGET_TYPE_MESSAGE: 3,
                        TARGET_TYPE_FIELD: 4,
                        TARGET_TYPE_ONEOF: 5,
                        TARGET_TYPE_ENUM: 6,
                        TARGET_TYPE_ENUM_ENTRY: 7,
                        TARGET_TYPE_SERVICE: 8,
                        TARGET_TYPE_METHOD: 9
                      }
                    }
                  }
                },
                OneofOptions: {
                  fields: {
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumOptions: {
                  fields: {
                    allowAlias: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3,
                      options: {
                        default: false
                      }
                    },
                    deprecatedLegacyJsonFieldConflicts: {
                      type: "bool",
                      id: 6,
                      options: {
                        deprecated: true
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      5,
                      5
                    ]
                  ]
                },
                EnumValueOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 1,
                      options: {
                        default: false
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                ServiceOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33,
                      options: {
                        default: false
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                MethodOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33,
                      options: {
                        default: false
                      }
                    },
                    idempotencyLevel: {
                      type: "IdempotencyLevel",
                      id: 34,
                      options: {
                        default: "IDEMPOTENCY_UNKNOWN"
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  nested: {
                    IdempotencyLevel: {
                      values: {
                        IDEMPOTENCY_UNKNOWN: 0,
                        NO_SIDE_EFFECTS: 1,
                        IDEMPOTENT: 2
                      }
                    }
                  }
                },
                UninterpretedOption: {
                  fields: {
                    name: {
                      rule: "repeated",
                      type: "NamePart",
                      id: 2
                    },
                    identifierValue: {
                      type: "string",
                      id: 3
                    },
                    positiveIntValue: {
                      type: "uint64",
                      id: 4
                    },
                    negativeIntValue: {
                      type: "int64",
                      id: 5
                    },
                    doubleValue: {
                      type: "double",
                      id: 6
                    },
                    stringValue: {
                      type: "bytes",
                      id: 7
                    },
                    aggregateValue: {
                      type: "string",
                      id: 8
                    }
                  },
                  nested: {
                    NamePart: {
                      fields: {
                        namePart: {
                          rule: "required",
                          type: "string",
                          id: 1
                        },
                        isExtension: {
                          rule: "required",
                          type: "bool",
                          id: 2
                        }
                      }
                    }
                  }
                },
                SourceCodeInfo: {
                  fields: {
                    location: {
                      rule: "repeated",
                      type: "Location",
                      id: 1
                    }
                  },
                  nested: {
                    Location: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        span: {
                          rule: "repeated",
                          type: "int32",
                          id: 2
                        },
                        leadingComments: {
                          type: "string",
                          id: 3
                        },
                        trailingComments: {
                          type: "string",
                          id: 4
                        },
                        leadingDetachedComments: {
                          rule: "repeated",
                          type: "string",
                          id: 6
                        }
                      }
                    }
                  }
                },
                GeneratedCodeInfo: {
                  fields: {
                    annotation: {
                      rule: "repeated",
                      type: "Annotation",
                      id: 1
                    }
                  },
                  nested: {
                    Annotation: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        sourceFile: {
                          type: "string",
                          id: 2
                        },
                        begin: {
                          type: "int32",
                          id: 3
                        },
                        end: {
                          type: "int32",
                          id: 4
                        },
                        semantic: {
                          type: "Semantic",
                          id: 5
                        }
                      },
                      nested: {
                        Semantic: {
                          values: {
                            NONE: 0,
                            SET: 1,
                            ALIAS: 2
                          }
                        }
                      }
                    }
                  }
                },
                Duration: {
                  fields: {
                    seconds: {
                      type: "int64",
                      id: 1
                    },
                    nanos: {
                      type: "int32",
                      id: 2
                    }
                  }
                },
                Any: {
                  fields: {
                    type_url: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "bytes",
                      id: 2
                    }
                  }
                },
                Empty: {
                  fields: {}
                },
                Timestamp: {
                  fields: {
                    seconds: {
                      type: "int64",
                      id: 1
                    },
                    nanos: {
                      type: "int32",
                      id: 2
                    }
                  }
                }
              }
            },
            longrunning: {
              options: {
                cc_enable_arenas: true,
                csharp_namespace: "Google.LongRunning",
                go_package: "google.golang.org/genproto/googleapis/longrunning;longrunning",
                java_multiple_files: true,
                java_outer_classname: "OperationsProto",
                java_package: "com.google.longrunning",
                php_namespace: "Google\\LongRunning"
              },
              nested: {
                operationInfo: {
                  type: "google.longrunning.OperationInfo",
                  id: 1049,
                  extend: "google.protobuf.MethodOptions"
                },
                Operations: {
                  options: {
                    "(google.api.default_host)": "longrunning.googleapis.com"
                  },
                  methods: {
                    ListOperations: {
                      requestType: "ListOperationsRequest",
                      responseType: "ListOperationsResponse",
                      options: {
                        "(google.api.http).get": "/v1/{name=operations}",
                        "(google.api.method_signature)": "name,filter"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            get: "/v1/{name=operations}"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name,filter"
                        }
                      ]
                    },
                    GetOperation: {
                      requestType: "GetOperationRequest",
                      responseType: "Operation",
                      options: {
                        "(google.api.http).get": "/v1/{name=operations/**}",
                        "(google.api.method_signature)": "name"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            get: "/v1/{name=operations/**}"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name"
                        }
                      ]
                    },
                    DeleteOperation: {
                      requestType: "DeleteOperationRequest",
                      responseType: "google.protobuf.Empty",
                      options: {
                        "(google.api.http).delete": "/v1/{name=operations/**}",
                        "(google.api.method_signature)": "name"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            delete: "/v1/{name=operations/**}"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name"
                        }
                      ]
                    },
                    CancelOperation: {
                      requestType: "CancelOperationRequest",
                      responseType: "google.protobuf.Empty",
                      options: {
                        "(google.api.http).post": "/v1/{name=operations/**}:cancel",
                        "(google.api.http).body": "*",
                        "(google.api.method_signature)": "name"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            post: "/v1/{name=operations/**}:cancel",
                            body: "*"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name"
                        }
                      ]
                    },
                    WaitOperation: {
                      requestType: "WaitOperationRequest",
                      responseType: "Operation"
                    }
                  }
                },
                Operation: {
                  oneofs: {
                    result: {
                      oneof: [
                        "error",
                        "response"
                      ]
                    }
                  },
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    metadata: {
                      type: "google.protobuf.Any",
                      id: 2
                    },
                    done: {
                      type: "bool",
                      id: 3
                    },
                    error: {
                      type: "google.rpc.Status",
                      id: 4
                    },
                    response: {
                      type: "google.protobuf.Any",
                      id: 5
                    }
                  }
                },
                GetOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                ListOperationsRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 4
                    },
                    filter: {
                      type: "string",
                      id: 1
                    },
                    pageSize: {
                      type: "int32",
                      id: 2
                    },
                    pageToken: {
                      type: "string",
                      id: 3
                    }
                  }
                },
                ListOperationsResponse: {
                  fields: {
                    operations: {
                      rule: "repeated",
                      type: "Operation",
                      id: 1
                    },
                    nextPageToken: {
                      type: "string",
                      id: 2
                    }
                  }
                },
                CancelOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                DeleteOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                WaitOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    timeout: {
                      type: "google.protobuf.Duration",
                      id: 2
                    }
                  }
                },
                OperationInfo: {
                  fields: {
                    responseType: {
                      type: "string",
                      id: 1
                    },
                    metadataType: {
                      type: "string",
                      id: 2
                    }
                  }
                }
              }
            },
            rpc: {
              options: {
                cc_enable_arenas: true,
                go_package: "google.golang.org/genproto/googleapis/rpc/status;status",
                java_multiple_files: true,
                java_outer_classname: "StatusProto",
                java_package: "com.google.rpc",
                objc_class_prefix: "RPC"
              },
              nested: {
                Status: {
                  fields: {
                    code: {
                      type: "int32",
                      id: 1
                    },
                    message: {
                      type: "string",
                      id: 2
                    },
                    details: {
                      rule: "repeated",
                      type: "google.protobuf.Any",
                      id: 3
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/translate/build/src/v3/translation_service_client_config.json
var require_translation_service_client_config = __commonJS({
  "node_modules/@google-cloud/translate/build/src/v3/translation_service_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.translation.v3.TranslationService": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            TranslateText: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            DetectLanguage: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            GetSupportedLanguages: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            TranslateDocument: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            BatchTranslateText: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            BatchTranslateDocument: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            CreateGlossary: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            ListGlossaries: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            GetGlossary: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            DeleteGlossary: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/object-hash/dist/object_hash.js
var require_object_hash = __commonJS({
  "node_modules/object-hash/dist/object_hash.js"(exports2, module2) {
    !function(e) {
      var t;
      "object" == typeof exports2 ? module2.exports = e() : "function" == typeof define && define.amd ? define(e) : ("undefined" != typeof window ? t = window : "undefined" != typeof global ? t = global : "undefined" != typeof self && (t = self), t.objectHash = e());
    }(function() {
      return function r(o, i, u) {
        function s(n, e2) {
          if (!i[n]) {
            if (!o[n]) {
              var t = "function" == typeof __require && __require;
              if (!e2 && t)
                return t(n, true);
              if (a)
                return a(n, true);
              throw new Error("Cannot find module '" + n + "'");
            }
            e2 = i[n] = { exports: {} };
            o[n][0].call(e2.exports, function(e3) {
              var t2 = o[n][1][e3];
              return s(t2 || e3);
            }, e2, e2.exports, r, o, i, u);
          }
          return i[n].exports;
        }
        for (var a = "function" == typeof __require && __require, e = 0; e < u.length; e++)
          s(u[e]);
        return s;
      }({ 1: [function(w, b, m) {
        !function(e, n, s, c, d, h, p, g, y) {
          "use strict";
          var r = w("crypto");
          function t(e2, t2) {
            t2 = u(e2, t2);
            var n2;
            return void 0 === (n2 = "passthrough" !== t2.algorithm ? r.createHash(t2.algorithm) : new l()).write && (n2.write = n2.update, n2.end = n2.update), f(t2, n2).dispatch(e2), n2.update || n2.end(""), n2.digest ? n2.digest("buffer" === t2.encoding ? void 0 : t2.encoding) : (e2 = n2.read(), "buffer" !== t2.encoding ? e2.toString(t2.encoding) : e2);
          }
          (m = b.exports = t).sha1 = function(e2) {
            return t(e2);
          }, m.keys = function(e2) {
            return t(e2, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
          }, m.MD5 = function(e2) {
            return t(e2, { algorithm: "md5", encoding: "hex" });
          }, m.keysMD5 = function(e2) {
            return t(e2, { algorithm: "md5", encoding: "hex", excludeValues: true });
          };
          var o = r.getHashes ? r.getHashes().slice() : ["sha1", "md5"], i = (o.push("passthrough"), ["buffer", "hex", "binary", "base64"]);
          function u(e2, t2) {
            var n2 = {};
            if (n2.algorithm = (t2 = t2 || {}).algorithm || "sha1", n2.encoding = t2.encoding || "hex", n2.excludeValues = !!t2.excludeValues, n2.algorithm = n2.algorithm.toLowerCase(), n2.encoding = n2.encoding.toLowerCase(), n2.ignoreUnknown = true === t2.ignoreUnknown, n2.respectType = false !== t2.respectType, n2.respectFunctionNames = false !== t2.respectFunctionNames, n2.respectFunctionProperties = false !== t2.respectFunctionProperties, n2.unorderedArrays = true === t2.unorderedArrays, n2.unorderedSets = false !== t2.unorderedSets, n2.unorderedObjects = false !== t2.unorderedObjects, n2.replacer = t2.replacer || void 0, n2.excludeKeys = t2.excludeKeys || void 0, void 0 === e2)
              throw new Error("Object argument required.");
            for (var r2 = 0; r2 < o.length; ++r2)
              o[r2].toLowerCase() === n2.algorithm.toLowerCase() && (n2.algorithm = o[r2]);
            if (-1 === o.indexOf(n2.algorithm))
              throw new Error('Algorithm "' + n2.algorithm + '"  not supported. supported values: ' + o.join(", "));
            if (-1 === i.indexOf(n2.encoding) && "passthrough" !== n2.algorithm)
              throw new Error('Encoding "' + n2.encoding + '"  not supported. supported values: ' + i.join(", "));
            return n2;
          }
          function a(e2) {
            if ("function" == typeof e2)
              return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(e2));
          }
          function f(o2, t2, i2) {
            i2 = i2 || [];
            function u2(e2) {
              return t2.update ? t2.update(e2, "utf8") : t2.write(e2, "utf8");
            }
            return { dispatch: function(e2) {
              return this["_" + (null === (e2 = o2.replacer ? o2.replacer(e2) : e2) ? "null" : typeof e2)](e2);
            }, _object: function(t3) {
              var n2, e2 = Object.prototype.toString.call(t3), r2 = /\[object (.*)\]/i.exec(e2);
              r2 = (r2 = r2 ? r2[1] : "unknown:[" + e2 + "]").toLowerCase();
              if (0 <= (e2 = i2.indexOf(t3)))
                return this.dispatch("[CIRCULAR:" + e2 + "]");
              if (i2.push(t3), void 0 !== s && s.isBuffer && s.isBuffer(t3))
                return u2("buffer:"), u2(t3);
              if ("object" === r2 || "function" === r2 || "asyncfunction" === r2)
                return e2 = Object.keys(t3), o2.unorderedObjects && (e2 = e2.sort()), false === o2.respectType || a(t3) || e2.splice(0, 0, "prototype", "__proto__", "constructor"), o2.excludeKeys && (e2 = e2.filter(function(e3) {
                  return !o2.excludeKeys(e3);
                })), u2("object:" + e2.length + ":"), n2 = this, e2.forEach(function(e3) {
                  n2.dispatch(e3), u2(":"), o2.excludeValues || n2.dispatch(t3[e3]), u2(",");
                });
              if (!this["_" + r2]) {
                if (o2.ignoreUnknown)
                  return u2("[" + r2 + "]");
                throw new Error('Unknown object type "' + r2 + '"');
              }
              this["_" + r2](t3);
            }, _array: function(e2, t3) {
              t3 = void 0 !== t3 ? t3 : false !== o2.unorderedArrays;
              var n2 = this;
              if (u2("array:" + e2.length + ":"), !t3 || e2.length <= 1)
                return e2.forEach(function(e3) {
                  return n2.dispatch(e3);
                });
              var r2 = [], t3 = e2.map(function(e3) {
                var t4 = new l(), n3 = i2.slice();
                return f(o2, t4, n3).dispatch(e3), r2 = r2.concat(n3.slice(i2.length)), t4.read().toString();
              });
              return i2 = i2.concat(r2), t3.sort(), this._array(t3, false);
            }, _date: function(e2) {
              return u2("date:" + e2.toJSON());
            }, _symbol: function(e2) {
              return u2("symbol:" + e2.toString());
            }, _error: function(e2) {
              return u2("error:" + e2.toString());
            }, _boolean: function(e2) {
              return u2("bool:" + e2.toString());
            }, _string: function(e2) {
              u2("string:" + e2.length + ":"), u2(e2.toString());
            }, _function: function(e2) {
              u2("fn:"), a(e2) ? this.dispatch("[native]") : this.dispatch(e2.toString()), false !== o2.respectFunctionNames && this.dispatch("function-name:" + String(e2.name)), o2.respectFunctionProperties && this._object(e2);
            }, _number: function(e2) {
              return u2("number:" + e2.toString());
            }, _xml: function(e2) {
              return u2("xml:" + e2.toString());
            }, _null: function() {
              return u2("Null");
            }, _undefined: function() {
              return u2("Undefined");
            }, _regexp: function(e2) {
              return u2("regex:" + e2.toString());
            }, _uint8array: function(e2) {
              return u2("uint8array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint8clampedarray: function(e2) {
              return u2("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int8array: function(e2) {
              return u2("int8array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint16array: function(e2) {
              return u2("uint16array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int16array: function(e2) {
              return u2("int16array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _uint32array: function(e2) {
              return u2("uint32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _int32array: function(e2) {
              return u2("int32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _float32array: function(e2) {
              return u2("float32array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _float64array: function(e2) {
              return u2("float64array:"), this.dispatch(Array.prototype.slice.call(e2));
            }, _arraybuffer: function(e2) {
              return u2("arraybuffer:"), this.dispatch(new Uint8Array(e2));
            }, _url: function(e2) {
              return u2("url:" + e2.toString());
            }, _map: function(e2) {
              u2("map:");
              e2 = Array.from(e2);
              return this._array(e2, false !== o2.unorderedSets);
            }, _set: function(e2) {
              u2("set:");
              e2 = Array.from(e2);
              return this._array(e2, false !== o2.unorderedSets);
            }, _file: function(e2) {
              return u2("file:"), this.dispatch([e2.name, e2.size, e2.type, e2.lastModfied]);
            }, _blob: function() {
              if (o2.ignoreUnknown)
                return u2("[blob]");
              throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
            }, _domwindow: function() {
              return u2("domwindow");
            }, _bigint: function(e2) {
              return u2("bigint:" + e2.toString());
            }, _process: function() {
              return u2("process");
            }, _timer: function() {
              return u2("timer");
            }, _pipe: function() {
              return u2("pipe");
            }, _tcp: function() {
              return u2("tcp");
            }, _udp: function() {
              return u2("udp");
            }, _tty: function() {
              return u2("tty");
            }, _statwatcher: function() {
              return u2("statwatcher");
            }, _securecontext: function() {
              return u2("securecontext");
            }, _connection: function() {
              return u2("connection");
            }, _zlib: function() {
              return u2("zlib");
            }, _context: function() {
              return u2("context");
            }, _nodescript: function() {
              return u2("nodescript");
            }, _httpparser: function() {
              return u2("httpparser");
            }, _dataview: function() {
              return u2("dataview");
            }, _signal: function() {
              return u2("signal");
            }, _fsevent: function() {
              return u2("fsevent");
            }, _tlswrap: function() {
              return u2("tlswrap");
            } };
          }
          function l() {
            return { buf: "", write: function(e2) {
              this.buf += e2;
            }, end: function(e2) {
              this.buf += e2;
            }, read: function() {
              return this.buf;
            } };
          }
          m.writeToStream = function(e2, t2, n2) {
            return void 0 === n2 && (n2 = t2, t2 = {}), f(t2 = u(e2, t2), n2).dispatch(e2);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_9a5aa49d.js", "/");
      }, { buffer: 3, crypto: 5, lYpoI2: 11 }], 2: [function(e, t, f) {
        !function(e2, t2, n, r, o, i, u, s, a) {
          !function(e3) {
            "use strict";
            var a2 = "undefined" != typeof Uint8Array ? Uint8Array : Array, t3 = "+".charCodeAt(0), n2 = "/".charCodeAt(0), r2 = "0".charCodeAt(0), o2 = "a".charCodeAt(0), i2 = "A".charCodeAt(0), u2 = "-".charCodeAt(0), s2 = "_".charCodeAt(0);
            function f2(e4) {
              e4 = e4.charCodeAt(0);
              return e4 === t3 || e4 === u2 ? 62 : e4 === n2 || e4 === s2 ? 63 : e4 < r2 ? -1 : e4 < r2 + 10 ? e4 - r2 + 26 + 26 : e4 < i2 + 26 ? e4 - i2 : e4 < o2 + 26 ? e4 - o2 + 26 : void 0;
            }
            e3.toByteArray = function(e4) {
              var t4, n3;
              if (0 < e4.length % 4)
                throw new Error("Invalid string. Length must be a multiple of 4");
              var r3 = e4.length, r3 = "=" === e4.charAt(r3 - 2) ? 2 : "=" === e4.charAt(r3 - 1) ? 1 : 0, o3 = new a2(3 * e4.length / 4 - r3), i3 = 0 < r3 ? e4.length - 4 : e4.length, u3 = 0;
              function s3(e5) {
                o3[u3++] = e5;
              }
              for (t4 = 0; t4 < i3; t4 += 4, 0)
                s3((16711680 & (n3 = f2(e4.charAt(t4)) << 18 | f2(e4.charAt(t4 + 1)) << 12 | f2(e4.charAt(t4 + 2)) << 6 | f2(e4.charAt(t4 + 3)))) >> 16), s3((65280 & n3) >> 8), s3(255 & n3);
              return 2 == r3 ? s3(255 & (n3 = f2(e4.charAt(t4)) << 2 | f2(e4.charAt(t4 + 1)) >> 4)) : 1 == r3 && (s3((n3 = f2(e4.charAt(t4)) << 10 | f2(e4.charAt(t4 + 1)) << 4 | f2(e4.charAt(t4 + 2)) >> 2) >> 8 & 255), s3(255 & n3)), o3;
            }, e3.fromByteArray = function(e4) {
              var t4, n3, r3, o3, i3 = e4.length % 3, u3 = "";
              function s3(e5) {
                return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e5);
              }
              for (t4 = 0, r3 = e4.length - i3; t4 < r3; t4 += 3)
                n3 = (e4[t4] << 16) + (e4[t4 + 1] << 8) + e4[t4 + 2], u3 += s3((o3 = n3) >> 18 & 63) + s3(o3 >> 12 & 63) + s3(o3 >> 6 & 63) + s3(63 & o3);
              switch (i3) {
                case 1:
                  u3 = (u3 += s3((n3 = e4[e4.length - 1]) >> 2)) + s3(n3 << 4 & 63) + "==";
                  break;
                case 2:
                  u3 = (u3 = (u3 += s3((n3 = (e4[e4.length - 2] << 8) + e4[e4.length - 1]) >> 10)) + s3(n3 >> 4 & 63)) + s3(n3 << 2 & 63) + "=";
              }
              return u3;
            };
          }(void 0 === f ? this.base64js = {} : f);
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js", "/node_modules/gulp-browserify/node_modules/base64-js/lib");
      }, { buffer: 3, lYpoI2: 11 }], 3: [function(O, e, H) {
        !function(e2, n, f, r, h, p, g, y, w) {
          var a = O("base64-js"), i = O("ieee754");
          function f(e3, t2, n2) {
            if (!(this instanceof f))
              return new f(e3, t2, n2);
            var r2, o2, i2, u2, s2 = typeof e3;
            if ("base64" === t2 && "string" == s2)
              for (e3 = (u2 = e3).trim ? u2.trim() : u2.replace(/^\s+|\s+$/g, ""); e3.length % 4 != 0; )
                e3 += "=";
            if ("number" == s2)
              r2 = j(e3);
            else if ("string" == s2)
              r2 = f.byteLength(e3, t2);
            else {
              if ("object" != s2)
                throw new Error("First argument needs to be a number, array or string.");
              r2 = j(e3.length);
            }
            if (f._useTypedArrays ? o2 = f._augment(new Uint8Array(r2)) : ((o2 = this).length = r2, o2._isBuffer = true), f._useTypedArrays && "number" == typeof e3.byteLength)
              o2._set(e3);
            else if (C(u2 = e3) || f.isBuffer(u2) || u2 && "object" == typeof u2 && "number" == typeof u2.length)
              for (i2 = 0; i2 < r2; i2++)
                f.isBuffer(e3) ? o2[i2] = e3.readUInt8(i2) : o2[i2] = e3[i2];
            else if ("string" == s2)
              o2.write(e3, 0, t2);
            else if ("number" == s2 && !f._useTypedArrays && !n2)
              for (i2 = 0; i2 < r2; i2++)
                o2[i2] = 0;
            return o2;
          }
          function b(e3, t2, n2, r2) {
            return f._charsWritten = c(function(e4) {
              for (var t3 = [], n3 = 0; n3 < e4.length; n3++)
                t3.push(255 & e4.charCodeAt(n3));
              return t3;
            }(t2), e3, n2, r2);
          }
          function m(e3, t2, n2, r2) {
            return f._charsWritten = c(function(e4) {
              for (var t3, n3, r3 = [], o2 = 0; o2 < e4.length; o2++)
                n3 = e4.charCodeAt(o2), t3 = n3 >> 8, n3 = n3 % 256, r3.push(n3), r3.push(t3);
              return r3;
            }(t2), e3, n2, r2);
          }
          function v(e3, t2, n2) {
            var r2 = "";
            n2 = Math.min(e3.length, n2);
            for (var o2 = t2; o2 < n2; o2++)
              r2 += String.fromCharCode(e3[o2]);
            return r2;
          }
          function o(e3, t2, n2, r2) {
            r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length"));
            var o2, r2 = e3.length;
            if (!(r2 <= t2))
              return n2 ? (o2 = e3[t2], t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8)) : (o2 = e3[t2] << 8, t2 + 1 < r2 && (o2 |= e3[t2 + 1])), o2;
          }
          function u(e3, t2, n2, r2) {
            r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length"));
            var o2, r2 = e3.length;
            if (!(r2 <= t2))
              return n2 ? (t2 + 2 < r2 && (o2 = e3[t2 + 2] << 16), t2 + 1 < r2 && (o2 |= e3[t2 + 1] << 8), o2 |= e3[t2], t2 + 3 < r2 && (o2 += e3[t2 + 3] << 24 >>> 0)) : (t2 + 1 < r2 && (o2 = e3[t2 + 1] << 16), t2 + 2 < r2 && (o2 |= e3[t2 + 2] << 8), t2 + 3 < r2 && (o2 |= e3[t2 + 3]), o2 += e3[t2] << 24 >>> 0), o2;
          }
          function _(e3, t2, n2, r2) {
            if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 1 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
              return r2 = o(e3, t2, n2, true), 32768 & r2 ? -1 * (65535 - r2 + 1) : r2;
          }
          function E(e3, t2, n2, r2) {
            if (r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(null != t2, "missing offset"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), !(e3.length <= t2))
              return r2 = u(e3, t2, n2, true), 2147483648 & r2 ? -1 * (4294967295 - r2 + 1) : r2;
          }
          function I(e3, t2, n2, r2) {
            return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 3 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 23, 4);
          }
          function A(e3, t2, n2, r2) {
            return r2 || (d("boolean" == typeof n2, "missing or invalid endian"), d(t2 + 7 < e3.length, "Trying to read beyond buffer length")), i.read(e3, t2, n2, 52, 8);
          }
          function s(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "trying to write beyond buffer length"), Y(t2, 65535));
            o2 = e3.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 2); i2 < u2; i2++)
                e3[n2 + i2] = (t2 & 255 << 8 * (r2 ? i2 : 1 - i2)) >>> 8 * (r2 ? i2 : 1 - i2);
          }
          function l(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "trying to write beyond buffer length"), Y(t2, 4294967295));
            o2 = e3.length;
            if (!(o2 <= n2))
              for (var i2 = 0, u2 = Math.min(o2 - n2, 4); i2 < u2; i2++)
                e3[n2 + i2] = t2 >>> 8 * (r2 ? i2 : 3 - i2) & 255;
          }
          function B(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 1 < e3.length, "Trying to write beyond buffer length"), F(t2, 32767, -32768)), e3.length <= n2 || s(e3, 0 <= t2 ? t2 : 65535 + t2 + 1, n2, r2, o2);
          }
          function L(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), F(t2, 2147483647, -2147483648)), e3.length <= n2 || l(e3, 0 <= t2 ? t2 : 4294967295 + t2 + 1, n2, r2, o2);
          }
          function U(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 3 < e3.length, "Trying to write beyond buffer length"), D(t2, 34028234663852886e22, -34028234663852886e22)), e3.length <= n2 || i.write(e3, t2, n2, r2, 23, 4);
          }
          function x(e3, t2, n2, r2, o2) {
            o2 || (d(null != t2, "missing value"), d("boolean" == typeof r2, "missing or invalid endian"), d(null != n2, "missing offset"), d(n2 + 7 < e3.length, "Trying to write beyond buffer length"), D(t2, 17976931348623157e292, -17976931348623157e292)), e3.length <= n2 || i.write(e3, t2, n2, r2, 52, 8);
          }
          H.Buffer = f, H.SlowBuffer = f, H.INSPECT_MAX_BYTES = 50, f.poolSize = 8192, f._useTypedArrays = function() {
            try {
              var e3 = new ArrayBuffer(0), t2 = new Uint8Array(e3);
              return t2.foo = function() {
                return 42;
              }, 42 === t2.foo() && "function" == typeof t2.subarray;
            } catch (e4) {
              return false;
            }
          }(), f.isEncoding = function(e3) {
            switch (String(e3).toLowerCase()) {
              case "hex":
              case "utf8":
              case "utf-8":
              case "ascii":
              case "binary":
              case "base64":
              case "raw":
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return true;
              default:
                return false;
            }
          }, f.isBuffer = function(e3) {
            return !(null == e3 || !e3._isBuffer);
          }, f.byteLength = function(e3, t2) {
            var n2;
            switch (e3 += "", t2 || "utf8") {
              case "hex":
                n2 = e3.length / 2;
                break;
              case "utf8":
              case "utf-8":
                n2 = T(e3).length;
                break;
              case "ascii":
              case "binary":
              case "raw":
                n2 = e3.length;
                break;
              case "base64":
                n2 = M(e3).length;
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                n2 = 2 * e3.length;
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return n2;
          }, f.concat = function(e3, t2) {
            if (d(C(e3), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."), 0 === e3.length)
              return new f(0);
            if (1 === e3.length)
              return e3[0];
            if ("number" != typeof t2)
              for (o2 = t2 = 0; o2 < e3.length; o2++)
                t2 += e3[o2].length;
            for (var n2 = new f(t2), r2 = 0, o2 = 0; o2 < e3.length; o2++) {
              var i2 = e3[o2];
              i2.copy(n2, r2), r2 += i2.length;
            }
            return n2;
          }, f.prototype.write = function(e3, t2, n2, r2) {
            isFinite(t2) ? isFinite(n2) || (r2 = n2, n2 = void 0) : (a2 = r2, r2 = t2, t2 = n2, n2 = a2), t2 = Number(t2) || 0;
            var o2, i2, u2, s2, a2 = this.length - t2;
            switch ((!n2 || a2 < (n2 = Number(n2))) && (n2 = a2), r2 = String(r2 || "utf8").toLowerCase()) {
              case "hex":
                o2 = function(e4, t3, n3, r3) {
                  n3 = Number(n3) || 0;
                  var o3 = e4.length - n3;
                  (!r3 || o3 < (r3 = Number(r3))) && (r3 = o3), d((o3 = t3.length) % 2 == 0, "Invalid hex string"), o3 / 2 < r3 && (r3 = o3 / 2);
                  for (var i3 = 0; i3 < r3; i3++) {
                    var u3 = parseInt(t3.substr(2 * i3, 2), 16);
                    d(!isNaN(u3), "Invalid hex string"), e4[n3 + i3] = u3;
                  }
                  return f._charsWritten = 2 * i3, i3;
                }(this, e3, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(T(e3), i2, u2, s2);
                break;
              case "ascii":
              case "binary":
                o2 = b(this, e3, t2, n2);
                break;
              case "base64":
                i2 = this, u2 = t2, s2 = n2, o2 = f._charsWritten = c(M(e3), i2, u2, s2);
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                o2 = m(this, e3, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return o2;
          }, f.prototype.toString = function(e3, t2, n2) {
            var r2, o2, i2, u2, s2 = this;
            if (e3 = String(e3 || "utf8").toLowerCase(), t2 = Number(t2) || 0, (n2 = void 0 !== n2 ? Number(n2) : s2.length) === t2)
              return "";
            switch (e3) {
              case "hex":
                r2 = function(e4, t3, n3) {
                  var r3 = e4.length;
                  (!t3 || t3 < 0) && (t3 = 0);
                  (!n3 || n3 < 0 || r3 < n3) && (n3 = r3);
                  for (var o3 = "", i3 = t3; i3 < n3; i3++)
                    o3 += k(e4[i3]);
                  return o3;
                }(s2, t2, n2);
                break;
              case "utf8":
              case "utf-8":
                r2 = function(e4, t3, n3) {
                  var r3 = "", o3 = "";
                  n3 = Math.min(e4.length, n3);
                  for (var i3 = t3; i3 < n3; i3++)
                    e4[i3] <= 127 ? (r3 += N(o3) + String.fromCharCode(e4[i3]), o3 = "") : o3 += "%" + e4[i3].toString(16);
                  return r3 + N(o3);
                }(s2, t2, n2);
                break;
              case "ascii":
              case "binary":
                r2 = v(s2, t2, n2);
                break;
              case "base64":
                o2 = s2, u2 = n2, r2 = 0 === (i2 = t2) && u2 === o2.length ? a.fromByteArray(o2) : a.fromByteArray(o2.slice(i2, u2));
                break;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                r2 = function(e4, t3, n3) {
                  for (var r3 = e4.slice(t3, n3), o3 = "", i3 = 0; i3 < r3.length; i3 += 2)
                    o3 += String.fromCharCode(r3[i3] + 256 * r3[i3 + 1]);
                  return o3;
                }(s2, t2, n2);
                break;
              default:
                throw new Error("Unknown encoding");
            }
            return r2;
          }, f.prototype.toJSON = function() {
            return { type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0) };
          }, f.prototype.copy = function(e3, t2, n2, r2) {
            if (t2 = t2 || 0, (r2 = r2 || 0 === r2 ? r2 : this.length) !== (n2 = n2 || 0) && 0 !== e3.length && 0 !== this.length) {
              d(n2 <= r2, "sourceEnd < sourceStart"), d(0 <= t2 && t2 < e3.length, "targetStart out of bounds"), d(0 <= n2 && n2 < this.length, "sourceStart out of bounds"), d(0 <= r2 && r2 <= this.length, "sourceEnd out of bounds"), r2 > this.length && (r2 = this.length);
              var o2 = (r2 = e3.length - t2 < r2 - n2 ? e3.length - t2 + n2 : r2) - n2;
              if (o2 < 100 || !f._useTypedArrays)
                for (var i2 = 0; i2 < o2; i2++)
                  e3[i2 + t2] = this[i2 + n2];
              else
                e3._set(this.subarray(n2, n2 + o2), t2);
            }
          }, f.prototype.slice = function(e3, t2) {
            var n2 = this.length;
            if (e3 = S(e3, n2, 0), t2 = S(t2, n2, n2), f._useTypedArrays)
              return f._augment(this.subarray(e3, t2));
            for (var r2 = t2 - e3, o2 = new f(r2, void 0, true), i2 = 0; i2 < r2; i2++)
              o2[i2] = this[i2 + e3];
            return o2;
          }, f.prototype.get = function(e3) {
            return console.log(".get() is deprecated. Access using array indexes instead."), this.readUInt8(e3);
          }, f.prototype.set = function(e3, t2) {
            return console.log(".set() is deprecated. Access using array indexes instead."), this.writeUInt8(e3, t2);
          }, f.prototype.readUInt8 = function(e3, t2) {
            if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
              return this[e3];
          }, f.prototype.readUInt16LE = function(e3, t2) {
            return o(this, e3, true, t2);
          }, f.prototype.readUInt16BE = function(e3, t2) {
            return o(this, e3, false, t2);
          }, f.prototype.readUInt32LE = function(e3, t2) {
            return u(this, e3, true, t2);
          }, f.prototype.readUInt32BE = function(e3, t2) {
            return u(this, e3, false, t2);
          }, f.prototype.readInt8 = function(e3, t2) {
            if (t2 || (d(null != e3, "missing offset"), d(e3 < this.length, "Trying to read beyond buffer length")), !(e3 >= this.length))
              return 128 & this[e3] ? -1 * (255 - this[e3] + 1) : this[e3];
          }, f.prototype.readInt16LE = function(e3, t2) {
            return _(this, e3, true, t2);
          }, f.prototype.readInt16BE = function(e3, t2) {
            return _(this, e3, false, t2);
          }, f.prototype.readInt32LE = function(e3, t2) {
            return E(this, e3, true, t2);
          }, f.prototype.readInt32BE = function(e3, t2) {
            return E(this, e3, false, t2);
          }, f.prototype.readFloatLE = function(e3, t2) {
            return I(this, e3, true, t2);
          }, f.prototype.readFloatBE = function(e3, t2) {
            return I(this, e3, false, t2);
          }, f.prototype.readDoubleLE = function(e3, t2) {
            return A(this, e3, true, t2);
          }, f.prototype.readDoubleBE = function(e3, t2) {
            return A(this, e3, false, t2);
          }, f.prototype.writeUInt8 = function(e3, t2, n2) {
            n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "trying to write beyond buffer length"), Y(e3, 255)), t2 >= this.length || (this[t2] = e3);
          }, f.prototype.writeUInt16LE = function(e3, t2, n2) {
            s(this, e3, t2, true, n2);
          }, f.prototype.writeUInt16BE = function(e3, t2, n2) {
            s(this, e3, t2, false, n2);
          }, f.prototype.writeUInt32LE = function(e3, t2, n2) {
            l(this, e3, t2, true, n2);
          }, f.prototype.writeUInt32BE = function(e3, t2, n2) {
            l(this, e3, t2, false, n2);
          }, f.prototype.writeInt8 = function(e3, t2, n2) {
            n2 || (d(null != e3, "missing value"), d(null != t2, "missing offset"), d(t2 < this.length, "Trying to write beyond buffer length"), F(e3, 127, -128)), t2 >= this.length || (0 <= e3 ? this.writeUInt8(e3, t2, n2) : this.writeUInt8(255 + e3 + 1, t2, n2));
          }, f.prototype.writeInt16LE = function(e3, t2, n2) {
            B(this, e3, t2, true, n2);
          }, f.prototype.writeInt16BE = function(e3, t2, n2) {
            B(this, e3, t2, false, n2);
          }, f.prototype.writeInt32LE = function(e3, t2, n2) {
            L(this, e3, t2, true, n2);
          }, f.prototype.writeInt32BE = function(e3, t2, n2) {
            L(this, e3, t2, false, n2);
          }, f.prototype.writeFloatLE = function(e3, t2, n2) {
            U(this, e3, t2, true, n2);
          }, f.prototype.writeFloatBE = function(e3, t2, n2) {
            U(this, e3, t2, false, n2);
          }, f.prototype.writeDoubleLE = function(e3, t2, n2) {
            x(this, e3, t2, true, n2);
          }, f.prototype.writeDoubleBE = function(e3, t2, n2) {
            x(this, e3, t2, false, n2);
          }, f.prototype.fill = function(e3, t2, n2) {
            if (t2 = t2 || 0, n2 = n2 || this.length, d("number" == typeof (e3 = "string" == typeof (e3 = e3 || 0) ? e3.charCodeAt(0) : e3) && !isNaN(e3), "value is not a number"), d(t2 <= n2, "end < start"), n2 !== t2 && 0 !== this.length) {
              d(0 <= t2 && t2 < this.length, "start out of bounds"), d(0 <= n2 && n2 <= this.length, "end out of bounds");
              for (var r2 = t2; r2 < n2; r2++)
                this[r2] = e3;
            }
          }, f.prototype.inspect = function() {
            for (var e3 = [], t2 = this.length, n2 = 0; n2 < t2; n2++)
              if (e3[n2] = k(this[n2]), n2 === H.INSPECT_MAX_BYTES) {
                e3[n2 + 1] = "...";
                break;
              }
            return "<Buffer " + e3.join(" ") + ">";
          }, f.prototype.toArrayBuffer = function() {
            if ("undefined" == typeof Uint8Array)
              throw new Error("Buffer.toArrayBuffer not supported in this browser");
            if (f._useTypedArrays)
              return new f(this).buffer;
            for (var e3 = new Uint8Array(this.length), t2 = 0, n2 = e3.length; t2 < n2; t2 += 1)
              e3[t2] = this[t2];
            return e3.buffer;
          };
          var t = f.prototype;
          function S(e3, t2, n2) {
            return "number" != typeof e3 ? n2 : t2 <= (e3 = ~~e3) ? t2 : 0 <= e3 || 0 <= (e3 += t2) ? e3 : 0;
          }
          function j(e3) {
            return (e3 = ~~Math.ceil(+e3)) < 0 ? 0 : e3;
          }
          function C(e3) {
            return (Array.isArray || function(e4) {
              return "[object Array]" === Object.prototype.toString.call(e4);
            })(e3);
          }
          function k(e3) {
            return e3 < 16 ? "0" + e3.toString(16) : e3.toString(16);
          }
          function T(e3) {
            for (var t2 = [], n2 = 0; n2 < e3.length; n2++) {
              var r2 = e3.charCodeAt(n2);
              if (r2 <= 127)
                t2.push(e3.charCodeAt(n2));
              else
                for (var o2 = n2, i2 = (55296 <= r2 && r2 <= 57343 && n2++, encodeURIComponent(e3.slice(o2, n2 + 1)).substr(1).split("%")), u2 = 0; u2 < i2.length; u2++)
                  t2.push(parseInt(i2[u2], 16));
            }
            return t2;
          }
          function M(e3) {
            return a.toByteArray(e3);
          }
          function c(e3, t2, n2, r2) {
            for (var o2 = 0; o2 < r2 && !(o2 + n2 >= t2.length || o2 >= e3.length); o2++)
              t2[o2 + n2] = e3[o2];
            return o2;
          }
          function N(e3) {
            try {
              return decodeURIComponent(e3);
            } catch (e4) {
              return String.fromCharCode(65533);
            }
          }
          function Y(e3, t2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(0 <= e3, "specified a negative value for writing an unsigned value"), d(e3 <= t2, "value is larger than maximum value for type"), d(Math.floor(e3) === e3, "value has a fractional component");
          }
          function F(e3, t2, n2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value"), d(Math.floor(e3) === e3, "value has a fractional component");
          }
          function D(e3, t2, n2) {
            d("number" == typeof e3, "cannot write a non-number as a number"), d(e3 <= t2, "value larger than maximum allowed value"), d(n2 <= e3, "value smaller than minimum allowed value");
          }
          function d(e3, t2) {
            if (!e3)
              throw new Error(t2 || "Failed assertion");
          }
          f._augment = function(e3) {
            return e3._isBuffer = true, e3._get = e3.get, e3._set = e3.set, e3.get = t.get, e3.set = t.set, e3.write = t.write, e3.toString = t.toString, e3.toLocaleString = t.toString, e3.toJSON = t.toJSON, e3.copy = t.copy, e3.slice = t.slice, e3.readUInt8 = t.readUInt8, e3.readUInt16LE = t.readUInt16LE, e3.readUInt16BE = t.readUInt16BE, e3.readUInt32LE = t.readUInt32LE, e3.readUInt32BE = t.readUInt32BE, e3.readInt8 = t.readInt8, e3.readInt16LE = t.readInt16LE, e3.readInt16BE = t.readInt16BE, e3.readInt32LE = t.readInt32LE, e3.readInt32BE = t.readInt32BE, e3.readFloatLE = t.readFloatLE, e3.readFloatBE = t.readFloatBE, e3.readDoubleLE = t.readDoubleLE, e3.readDoubleBE = t.readDoubleBE, e3.writeUInt8 = t.writeUInt8, e3.writeUInt16LE = t.writeUInt16LE, e3.writeUInt16BE = t.writeUInt16BE, e3.writeUInt32LE = t.writeUInt32LE, e3.writeUInt32BE = t.writeUInt32BE, e3.writeInt8 = t.writeInt8, e3.writeInt16LE = t.writeInt16LE, e3.writeInt16BE = t.writeInt16BE, e3.writeInt32LE = t.writeInt32LE, e3.writeInt32BE = t.writeInt32BE, e3.writeFloatLE = t.writeFloatLE, e3.writeFloatBE = t.writeFloatBE, e3.writeDoubleLE = t.writeDoubleLE, e3.writeDoubleBE = t.writeDoubleBE, e3.fill = t.fill, e3.inspect = t.inspect, e3.toArrayBuffer = t.toArrayBuffer, e3;
          };
        }.call(this, O("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, O("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/buffer/index.js", "/node_modules/gulp-browserify/node_modules/buffer");
      }, { "base64-js": 2, buffer: 3, ieee754: 10, lYpoI2: 11 }], 4: [function(c, d, e) {
        !function(e2, t, a, n, r, o, i, u, s) {
          var a = c("buffer").Buffer, f = 4, l = new a(f);
          l.fill(0);
          d.exports = { hash: function(e3, t2, n2, r2) {
            for (var o2 = t2(function(e4, t3) {
              e4.length % f != 0 && (n3 = e4.length + (f - e4.length % f), e4 = a.concat([e4, l], n3));
              for (var n3, r3 = [], o3 = t3 ? e4.readInt32BE : e4.readInt32LE, i3 = 0; i3 < e4.length; i3 += f)
                r3.push(o3.call(e4, i3));
              return r3;
            }(e3 = a.isBuffer(e3) ? e3 : new a(e3), r2), 8 * e3.length), t2 = r2, i2 = new a(n2), u2 = t2 ? i2.writeInt32BE : i2.writeInt32LE, s2 = 0; s2 < o2.length; s2++)
              u2.call(i2, o2[s2], 4 * s2, true);
            return i2;
          } };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 5: [function(v, e, _) {
        !function(l, c, u, d, h, p, g, y, w) {
          var u = v("buffer").Buffer, e2 = v("./sha"), t = v("./sha256"), n = v("./rng"), b = { sha1: e2, sha256: t, md5: v("./md5") }, s = 64, a = new u(s);
          function r(e3, n2) {
            var r2 = b[e3 = e3 || "sha1"], o2 = [];
            return r2 || i("algorithm:", e3, "is not yet supported"), { update: function(e4) {
              return u.isBuffer(e4) || (e4 = new u(e4)), o2.push(e4), e4.length, this;
            }, digest: function(e4) {
              var t2 = u.concat(o2), t2 = n2 ? function(e5, t3, n3) {
                u.isBuffer(t3) || (t3 = new u(t3)), u.isBuffer(n3) || (n3 = new u(n3)), t3.length > s ? t3 = e5(t3) : t3.length < s && (t3 = u.concat([t3, a], s));
                for (var r3 = new u(s), o3 = new u(s), i2 = 0; i2 < s; i2++)
                  r3[i2] = 54 ^ t3[i2], o3[i2] = 92 ^ t3[i2];
                return n3 = e5(u.concat([r3, n3])), e5(u.concat([o3, n3]));
              }(r2, n2, t2) : r2(t2);
              return o2 = null, e4 ? t2.toString(e4) : t2;
            } };
          }
          function i() {
            var e3 = [].slice.call(arguments).join(" ");
            throw new Error([e3, "we accept pull requests", "http://github.com/dominictarr/crypto-browserify"].join("\n"));
          }
          a.fill(0), _.createHash = function(e3) {
            return r(e3);
          }, _.createHmac = r, _.randomBytes = function(e3, t2) {
            if (!t2 || !t2.call)
              return new u(n(e3));
            try {
              t2.call(this, void 0, new u(n(e3)));
            } catch (e4) {
              t2(e4);
            }
          };
          var o, f = ["createCredentials", "createCipher", "createCipheriv", "createDecipher", "createDecipheriv", "createSign", "createVerify", "createDiffieHellman", "pbkdf2"], m = function(e3) {
            _[e3] = function() {
              i("sorry,", e3, "is not implemented yet");
            };
          };
          for (o in f)
            m(f[o], o);
        }.call(this, v("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, v("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./md5": 6, "./rng": 7, "./sha": 8, "./sha256": 9, buffer: 3, lYpoI2: 11 }], 6: [function(w, b, e) {
        !function(e2, r, o, i, u, a, f, l, y) {
          var t = w("./helpers");
          function n(e3, t2) {
            e3[t2 >> 5] |= 128 << t2 % 32, e3[14 + (t2 + 64 >>> 9 << 4)] = t2;
            for (var n2 = 1732584193, r2 = -271733879, o2 = -1732584194, i2 = 271733878, u2 = 0; u2 < e3.length; u2 += 16) {
              var s2 = n2, a2 = r2, f2 = o2, l2 = i2, n2 = c(n2, r2, o2, i2, e3[u2 + 0], 7, -680876936), i2 = c(i2, n2, r2, o2, e3[u2 + 1], 12, -389564586), o2 = c(o2, i2, n2, r2, e3[u2 + 2], 17, 606105819), r2 = c(r2, o2, i2, n2, e3[u2 + 3], 22, -1044525330);
              n2 = c(n2, r2, o2, i2, e3[u2 + 4], 7, -176418897), i2 = c(i2, n2, r2, o2, e3[u2 + 5], 12, 1200080426), o2 = c(o2, i2, n2, r2, e3[u2 + 6], 17, -1473231341), r2 = c(r2, o2, i2, n2, e3[u2 + 7], 22, -45705983), n2 = c(n2, r2, o2, i2, e3[u2 + 8], 7, 1770035416), i2 = c(i2, n2, r2, o2, e3[u2 + 9], 12, -1958414417), o2 = c(o2, i2, n2, r2, e3[u2 + 10], 17, -42063), r2 = c(r2, o2, i2, n2, e3[u2 + 11], 22, -1990404162), n2 = c(n2, r2, o2, i2, e3[u2 + 12], 7, 1804603682), i2 = c(i2, n2, r2, o2, e3[u2 + 13], 12, -40341101), o2 = c(o2, i2, n2, r2, e3[u2 + 14], 17, -1502002290), n2 = d(n2, r2 = c(r2, o2, i2, n2, e3[u2 + 15], 22, 1236535329), o2, i2, e3[u2 + 1], 5, -165796510), i2 = d(i2, n2, r2, o2, e3[u2 + 6], 9, -1069501632), o2 = d(o2, i2, n2, r2, e3[u2 + 11], 14, 643717713), r2 = d(r2, o2, i2, n2, e3[u2 + 0], 20, -373897302), n2 = d(n2, r2, o2, i2, e3[u2 + 5], 5, -701558691), i2 = d(i2, n2, r2, o2, e3[u2 + 10], 9, 38016083), o2 = d(o2, i2, n2, r2, e3[u2 + 15], 14, -660478335), r2 = d(r2, o2, i2, n2, e3[u2 + 4], 20, -405537848), n2 = d(n2, r2, o2, i2, e3[u2 + 9], 5, 568446438), i2 = d(i2, n2, r2, o2, e3[u2 + 14], 9, -1019803690), o2 = d(o2, i2, n2, r2, e3[u2 + 3], 14, -187363961), r2 = d(r2, o2, i2, n2, e3[u2 + 8], 20, 1163531501), n2 = d(n2, r2, o2, i2, e3[u2 + 13], 5, -1444681467), i2 = d(i2, n2, r2, o2, e3[u2 + 2], 9, -51403784), o2 = d(o2, i2, n2, r2, e3[u2 + 7], 14, 1735328473), n2 = h(n2, r2 = d(r2, o2, i2, n2, e3[u2 + 12], 20, -1926607734), o2, i2, e3[u2 + 5], 4, -378558), i2 = h(i2, n2, r2, o2, e3[u2 + 8], 11, -2022574463), o2 = h(o2, i2, n2, r2, e3[u2 + 11], 16, 1839030562), r2 = h(r2, o2, i2, n2, e3[u2 + 14], 23, -35309556), n2 = h(n2, r2, o2, i2, e3[u2 + 1], 4, -1530992060), i2 = h(i2, n2, r2, o2, e3[u2 + 4], 11, 1272893353), o2 = h(o2, i2, n2, r2, e3[u2 + 7], 16, -155497632), r2 = h(r2, o2, i2, n2, e3[u2 + 10], 23, -1094730640), n2 = h(n2, r2, o2, i2, e3[u2 + 13], 4, 681279174), i2 = h(i2, n2, r2, o2, e3[u2 + 0], 11, -358537222), o2 = h(o2, i2, n2, r2, e3[u2 + 3], 16, -722521979), r2 = h(r2, o2, i2, n2, e3[u2 + 6], 23, 76029189), n2 = h(n2, r2, o2, i2, e3[u2 + 9], 4, -640364487), i2 = h(i2, n2, r2, o2, e3[u2 + 12], 11, -421815835), o2 = h(o2, i2, n2, r2, e3[u2 + 15], 16, 530742520), n2 = p(n2, r2 = h(r2, o2, i2, n2, e3[u2 + 2], 23, -995338651), o2, i2, e3[u2 + 0], 6, -198630844), i2 = p(i2, n2, r2, o2, e3[u2 + 7], 10, 1126891415), o2 = p(o2, i2, n2, r2, e3[u2 + 14], 15, -1416354905), r2 = p(r2, o2, i2, n2, e3[u2 + 5], 21, -57434055), n2 = p(n2, r2, o2, i2, e3[u2 + 12], 6, 1700485571), i2 = p(i2, n2, r2, o2, e3[u2 + 3], 10, -1894986606), o2 = p(o2, i2, n2, r2, e3[u2 + 10], 15, -1051523), r2 = p(r2, o2, i2, n2, e3[u2 + 1], 21, -2054922799), n2 = p(n2, r2, o2, i2, e3[u2 + 8], 6, 1873313359), i2 = p(i2, n2, r2, o2, e3[u2 + 15], 10, -30611744), o2 = p(o2, i2, n2, r2, e3[u2 + 6], 15, -1560198380), r2 = p(r2, o2, i2, n2, e3[u2 + 13], 21, 1309151649), n2 = p(n2, r2, o2, i2, e3[u2 + 4], 6, -145523070), i2 = p(i2, n2, r2, o2, e3[u2 + 11], 10, -1120210379), o2 = p(o2, i2, n2, r2, e3[u2 + 2], 15, 718787259), r2 = p(r2, o2, i2, n2, e3[u2 + 9], 21, -343485551), n2 = g(n2, s2), r2 = g(r2, a2), o2 = g(o2, f2), i2 = g(i2, l2);
            }
            return Array(n2, r2, o2, i2);
          }
          function s(e3, t2, n2, r2, o2, i2) {
            return g((t2 = g(g(t2, e3), g(r2, i2))) << o2 | t2 >>> 32 - o2, n2);
          }
          function c(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 & n2 | ~t2 & r2, e3, t2, o2, i2, u2);
          }
          function d(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 & r2 | n2 & ~r2, e3, t2, o2, i2, u2);
          }
          function h(e3, t2, n2, r2, o2, i2, u2) {
            return s(t2 ^ n2 ^ r2, e3, t2, o2, i2, u2);
          }
          function p(e3, t2, n2, r2, o2, i2, u2) {
            return s(n2 ^ (t2 | ~r2), e3, t2, o2, i2, u2);
          }
          function g(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          b.exports = function(e3) {
            return t.hash(e3, n, 16);
          };
        }.call(this, w("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, w("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 7: [function(e, l, t) {
        !function(e2, t2, n, r, o, i, u, s, f) {
          var a;
          l.exports = a || function(e3) {
            for (var t3, n2 = new Array(e3), r2 = 0; r2 < e3; r2++)
              0 == (3 & r2) && (t3 = 4294967296 * Math.random()), n2[r2] = t3 >>> ((3 & r2) << 3) & 255;
            return n2;
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { buffer: 3, lYpoI2: 11 }], 8: [function(c, d, e) {
        !function(e2, t, n, r, o, s, a, f, l) {
          var i = c("./helpers");
          function u(l2, c2) {
            l2[c2 >> 5] |= 128 << 24 - c2 % 32, l2[15 + (c2 + 64 >> 9 << 4)] = c2;
            for (var e3, t2, n2, r2 = Array(80), o2 = 1732584193, i2 = -271733879, u2 = -1732584194, s2 = 271733878, d2 = -1009589776, h = 0; h < l2.length; h += 16) {
              for (var p = o2, g = i2, y = u2, w = s2, b = d2, a2 = 0; a2 < 80; a2++) {
                r2[a2] = a2 < 16 ? l2[h + a2] : v(r2[a2 - 3] ^ r2[a2 - 8] ^ r2[a2 - 14] ^ r2[a2 - 16], 1);
                var f2 = m(m(v(o2, 5), (f2 = i2, t2 = u2, n2 = s2, (e3 = a2) < 20 ? f2 & t2 | ~f2 & n2 : !(e3 < 40) && e3 < 60 ? f2 & t2 | f2 & n2 | t2 & n2 : f2 ^ t2 ^ n2)), m(m(d2, r2[a2]), (e3 = a2) < 20 ? 1518500249 : e3 < 40 ? 1859775393 : e3 < 60 ? -1894007588 : -899497514)), d2 = s2, s2 = u2, u2 = v(i2, 30), i2 = o2, o2 = f2;
              }
              o2 = m(o2, p), i2 = m(i2, g), u2 = m(u2, y), s2 = m(s2, w), d2 = m(d2, b);
            }
            return Array(o2, i2, u2, s2, d2);
          }
          function m(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function v(e3, t2) {
            return e3 << t2 | e3 >>> 32 - t2;
          }
          d.exports = function(e3) {
            return i.hash(e3, u, 20, true);
          };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 9: [function(c, d, e) {
        !function(e2, t, n, r, u, s, a, f, l) {
          function b(e3, t2) {
            var n2 = (65535 & e3) + (65535 & t2);
            return (e3 >> 16) + (t2 >> 16) + (n2 >> 16) << 16 | 65535 & n2;
          }
          function o(e3, l2) {
            var c2, d2 = new Array(1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298), t2 = new Array(1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225), n2 = new Array(64);
            e3[l2 >> 5] |= 128 << 24 - l2 % 32, e3[15 + (l2 + 64 >> 9 << 4)] = l2;
            for (var r2, o2, h = 0; h < e3.length; h += 16) {
              for (var i2 = t2[0], u2 = t2[1], s2 = t2[2], p = t2[3], a2 = t2[4], g = t2[5], y = t2[6], w = t2[7], f2 = 0; f2 < 64; f2++)
                n2[f2] = f2 < 16 ? e3[f2 + h] : b(b(b((o2 = n2[f2 - 2], m(o2, 17) ^ m(o2, 19) ^ v(o2, 10)), n2[f2 - 7]), (o2 = n2[f2 - 15], m(o2, 7) ^ m(o2, 18) ^ v(o2, 3))), n2[f2 - 16]), c2 = b(b(b(b(w, m(o2 = a2, 6) ^ m(o2, 11) ^ m(o2, 25)), a2 & g ^ ~a2 & y), d2[f2]), n2[f2]), r2 = b(m(r2 = i2, 2) ^ m(r2, 13) ^ m(r2, 22), i2 & u2 ^ i2 & s2 ^ u2 & s2), w = y, y = g, g = a2, a2 = b(p, c2), p = s2, s2 = u2, u2 = i2, i2 = b(c2, r2);
              t2[0] = b(i2, t2[0]), t2[1] = b(u2, t2[1]), t2[2] = b(s2, t2[2]), t2[3] = b(p, t2[3]), t2[4] = b(a2, t2[4]), t2[5] = b(g, t2[5]), t2[6] = b(y, t2[6]), t2[7] = b(w, t2[7]);
            }
            return t2;
          }
          var i = c("./helpers"), m = function(e3, t2) {
            return e3 >>> t2 | e3 << 32 - t2;
          }, v = function(e3, t2) {
            return e3 >>> t2;
          };
          d.exports = function(e3) {
            return i.hash(e3, o, 32, true);
          };
        }.call(this, c("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, c("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js", "/node_modules/gulp-browserify/node_modules/crypto-browserify");
      }, { "./helpers": 4, buffer: 3, lYpoI2: 11 }], 10: [function(e, t, f) {
        !function(e2, t2, n, r, o, i, u, s, a) {
          f.read = function(e3, t3, n2, r2, o2) {
            var i2, u2, l = 8 * o2 - r2 - 1, c = (1 << l) - 1, d = c >> 1, s2 = -7, a2 = n2 ? o2 - 1 : 0, f2 = n2 ? -1 : 1, o2 = e3[t3 + a2];
            for (a2 += f2, i2 = o2 & (1 << -s2) - 1, o2 >>= -s2, s2 += l; 0 < s2; i2 = 256 * i2 + e3[t3 + a2], a2 += f2, s2 -= 8)
              ;
            for (u2 = i2 & (1 << -s2) - 1, i2 >>= -s2, s2 += r2; 0 < s2; u2 = 256 * u2 + e3[t3 + a2], a2 += f2, s2 -= 8)
              ;
            if (0 === i2)
              i2 = 1 - d;
            else {
              if (i2 === c)
                return u2 ? NaN : 1 / 0 * (o2 ? -1 : 1);
              u2 += Math.pow(2, r2), i2 -= d;
            }
            return (o2 ? -1 : 1) * u2 * Math.pow(2, i2 - r2);
          }, f.write = function(e3, t3, l, n2, r2, c) {
            var o2, i2, u2 = 8 * c - r2 - 1, s2 = (1 << u2) - 1, a2 = s2 >> 1, d = 23 === r2 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f2 = n2 ? 0 : c - 1, h = n2 ? 1 : -1, c = t3 < 0 || 0 === t3 && 1 / t3 < 0 ? 1 : 0;
            for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (i2 = isNaN(t3) ? 1 : 0, o2 = s2) : (o2 = Math.floor(Math.log(t3) / Math.LN2), t3 * (n2 = Math.pow(2, -o2)) < 1 && (o2--, n2 *= 2), 2 <= (t3 += 1 <= o2 + a2 ? d / n2 : d * Math.pow(2, 1 - a2)) * n2 && (o2++, n2 /= 2), s2 <= o2 + a2 ? (i2 = 0, o2 = s2) : 1 <= o2 + a2 ? (i2 = (t3 * n2 - 1) * Math.pow(2, r2), o2 += a2) : (i2 = t3 * Math.pow(2, a2 - 1) * Math.pow(2, r2), o2 = 0)); 8 <= r2; e3[l + f2] = 255 & i2, f2 += h, i2 /= 256, r2 -= 8)
              ;
            for (o2 = o2 << r2 | i2, u2 += r2; 0 < u2; e3[l + f2] = 255 & o2, f2 += h, o2 /= 256, u2 -= 8)
              ;
            e3[l + f2 - h] |= 128 * c;
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/ieee754/index.js", "/node_modules/gulp-browserify/node_modules/ieee754");
      }, { buffer: 3, lYpoI2: 11 }], 11: [function(e, h, t) {
        !function(e2, t2, n, r, o, f, l, c, d) {
          var i, u, s;
          function a() {
          }
          (e2 = h.exports = {}).nextTick = (u = "undefined" != typeof window && window.setImmediate, s = "undefined" != typeof window && window.postMessage && window.addEventListener, u ? function(e3) {
            return window.setImmediate(e3);
          } : s ? (i = [], window.addEventListener("message", function(e3) {
            var t3 = e3.source;
            t3 !== window && null !== t3 || "process-tick" !== e3.data || (e3.stopPropagation(), 0 < i.length && i.shift()());
          }, true), function(e3) {
            i.push(e3), window.postMessage("process-tick", "*");
          }) : function(e3) {
            setTimeout(e3, 0);
          }), e2.title = "browser", e2.browser = true, e2.env = {}, e2.argv = [], e2.on = a, e2.addListener = a, e2.once = a, e2.off = a, e2.removeListener = a, e2.removeAllListeners = a, e2.emit = a, e2.binding = function(e3) {
            throw new Error("process.binding is not supported");
          }, e2.cwd = function() {
            return "/";
          }, e2.chdir = function(e3) {
            throw new Error("process.chdir is not supported");
          };
        }.call(this, e("lYpoI2"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/gulp-browserify/node_modules/process/browser.js", "/node_modules/gulp-browserify/node_modules/process");
      }, { buffer: 3, lYpoI2: 11 }] }, {}, [1])(1);
    });
  }
});

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    );
    util.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    );
    util.isInteger = Number.isInteger || /* istanbul ignore next */
    function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : (
          /* istanbul ignore next */
          null
        );
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = /* istanbul ignore next */
    util.global.dcodeIO && /* istanbul ignore next */
    util.global.dcodeIO.Long || /* istanbul ignore next */
    util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      CustomError.prototype = Object.create(Error.prototype, {
        constructor: {
          value: CustomError,
          writable: true,
          enumerable: false,
          configurable: true
        },
        name: {
          get: function get() {
            return name;
          },
          set: void 0,
          enumerable: false,
          // configurable: false would accurately preserve the behavior of
          // the original, but I'm guessing that was not intentional.
          // For an actual error subclass, this property would
          // be configurable.
          configurable: true
        },
        toString: {
          value: function value() {
            return this.name + ": " + this.message;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
      function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
      function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */
    util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      if (start === end) {
        var nativeBuffer = util.Buffer;
        return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);
      }
      return this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : (
        /* istanbul ignore next */
        "toNumber"
      );
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/rpc/service.js
var require_service2 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(
                /* endedByRPC */
                true
              );
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service2();
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/@protobufjs/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/@protobufjs/codegen/index.js"(exports2, module2) {
    "use strict";
    module2.exports = codegen;
    function codegen(functionParams, functionName) {
      if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = void 0;
      }
      var body = [];
      function Codegen(formatStringOrScope) {
        if (typeof formatStringOrScope !== "string") {
          var source = toString();
          if (codegen.verbose)
            console.log("codegen: " + source);
          source = "return " + source;
          if (formatStringOrScope) {
            var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
            while (scopeOffset < scopeKeys.length) {
              scopeParams[scopeOffset] = scopeKeys[scopeOffset];
              scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
            }
            scopeParams[scopeOffset] = source;
            return Function.apply(null, scopeParams).apply(null, scopeValues);
          }
          return Function(source)();
        }
        var formatParams = new Array(arguments.length - 1), formatOffset = 0;
        while (formatOffset < formatParams.length)
          formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
          var value = formatParams[formatOffset++];
          switch ($1) {
            case "d":
            case "f":
              return String(Number(value));
            case "i":
              return String(Math.floor(value));
            case "j":
              return JSON.stringify(value);
            case "s":
              return String(value);
          }
          return "%";
        });
        if (formatOffset !== formatParams.length)
          throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
      }
      function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
      }
      Codegen.toString = toString;
      return Codegen;
    }
    codegen.verbose = false;
  }
});

// node_modules/@protobufjs/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/@protobufjs/fetch/index.js"(exports2, module2) {
    "use strict";
    module2.exports = fetch;
    var asPromise = require_aspromise();
    var inquire2 = require_inquire();
    var fs = inquire2("fs");
    function fetch(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      } else if (!options)
        options = {};
      if (!callback)
        return asPromise(fetch, this, filename, options);
      if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
        });
      return fetch.xhr(filename, options, callback);
    }
    fetch.xhr = function fetch_xhr(filename, options, callback) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function fetchOnReadyStateChange() {
        if (xhr.readyState !== 4)
          return void 0;
        if (xhr.status !== 0 && xhr.status !== 200)
          return callback(Error("status " + xhr.status));
        if (options.binary) {
          var buffer = xhr.response;
          if (!buffer) {
            buffer = [];
            for (var i = 0; i < xhr.responseText.length; ++i)
              buffer.push(xhr.responseText.charCodeAt(i) & 255);
          }
          return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
      };
      if (options.binary) {
        if ("overrideMimeType" in xhr)
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
      }
      xhr.open("GET", filename);
      xhr.send();
    };
  }
});

// node_modules/@protobufjs/path/index.js
var require_path2 = __commonJS({
  "node_modules/@protobufjs/path/index.js"(exports2) {
    "use strict";
    var path = exports2;
    var isAbsolute = (
      /**
       * Tests if the specified path is absolute.
       * @param {string} path Path to test
       * @returns {boolean} `true` if path is absolute
       */
      path.isAbsolute = function isAbsolute2(path2) {
        return /^(?:\/|\w+:)/.test(path2);
      }
    );
    var normalize = (
      /**
       * Normalizes the specified path.
       * @param {string} path Path to normalize
       * @returns {string} Normalized path
       */
      path.normalize = function normalize2(path2) {
        path2 = path2.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
        var parts = path2.split("/"), absolute = isAbsolute(path2), prefix = "";
        if (absolute)
          prefix = parts.shift() + "/";
        for (var i = 0; i < parts.length; ) {
          if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..")
              parts.splice(--i, 2);
            else if (absolute)
              parts.splice(i, 1);
            else
              ++i;
          } else if (parts[i] === ".")
            parts.splice(i, 1);
          else
            ++i;
        }
        return prefix + parts.join("/");
      }
    );
    path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
      if (!alreadyNormalized)
        includePath = normalize(includePath);
      if (isAbsolute(includePath))
        return includePath;
      if (!alreadyNormalized)
        originPath = normalize(originPath);
      return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/types.js
var require_types = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/types.js"(exports2) {
    "use strict";
    var types = exports2;
    var util = require_util3();
    var s = [
      "double",
      // 0
      "float",
      // 1
      "int32",
      // 2
      "uint32",
      // 3
      "sint32",
      // 4
      "fixed32",
      // 5
      "sfixed32",
      // 6
      "int64",
      // 7
      "uint64",
      // 8
      "sint64",
      // 9
      "fixed64",
      // 10
      "sfixed64",
      // 11
      "bool",
      // 12
      "string",
      // 13
      "bytes"
      // 14
    ];
    function bake(values, offset) {
      var i = 0, o = {};
      offset |= 0;
      while (i < values.length)
        o[s[i + offset]] = values[i++];
      return o;
    }
    types.basic = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2,
      /* bytes    */
      2
    ]);
    types.defaults = bake([
      /* double   */
      0,
      /* float    */
      0,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      0,
      /* sfixed32 */
      0,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      0,
      /* sfixed64 */
      0,
      /* bool     */
      false,
      /* string   */
      "",
      /* bytes    */
      util.emptyArray,
      /* message  */
      null
    ]);
    types.long = bake([
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1
    ], 7);
    types.mapKey = bake([
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2
    ], 2);
    types.packed = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0
    ]);
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/field.js
var require_field = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/field.js"(exports2, module2) {
    "use strict";
    module2.exports = Field;
    var ReflectionObject = require_object();
    ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
    var Enum = require_enum();
    var types = require_types();
    var util = require_util3();
    var Type;
    var ruleRe = /^required|optional|repeated$/;
    Field.fromJSON = function fromJSON(name, json) {
      return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
    };
    function Field(name, id, type, rule, extend, options, comment) {
      if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = void 0;
      } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");
      if (!util.isString(type))
        throw TypeError("type must be a string");
      if (rule !== void 0 && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");
      if (extend !== void 0 && !util.isString(extend))
        throw TypeError("extend must be a string");
      if (rule === "proto3_optional") {
        rule = "optional";
      }
      this.rule = rule && rule !== "optional" ? rule : void 0;
      this.type = type;
      this.id = id;
      this.extend = extend || void 0;
      this.required = rule === "required";
      this.optional = !this.required;
      this.repeated = rule === "repeated";
      this.map = false;
      this.message = null;
      this.partOf = null;
      this.typeDefault = null;
      this.defaultValue = null;
      this.long = util.Long ? types.long[type] !== void 0 : (
        /* istanbul ignore next */
        false
      );
      this.bytes = type === "bytes";
      this.resolvedType = null;
      this.extensionField = null;
      this.declaringField = null;
      this._packed = null;
      this.comment = comment;
    }
    Object.defineProperty(Field.prototype, "packed", {
      get: function() {
        if (this._packed === null)
          this._packed = this.getOption("packed") !== false;
        return this._packed;
      }
    });
    Field.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (name === "packed")
        this._packed = null;
      return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
    };
    Field.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "rule",
        this.rule !== "optional" && this.rule || void 0,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Field.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if ((this.typeDefault = types.defaults[this.type]) === void 0) {
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
          this.typeDefault = null;
        else
          this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
      } else if (this.options && this.options.proto3_optional) {
        this.typeDefault = null;
      }
      if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
          this.typeDefault = this.resolvedType.values[this.typeDefault];
      }
      if (this.options) {
        if (this.options.packed === true || this.options.packed !== void 0 && this.resolvedType && !(this.resolvedType instanceof Enum))
          delete this.options.packed;
        if (!Object.keys(this.options).length)
          this.options = void 0;
      }
      if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
        if (Object.freeze)
          Object.freeze(this.typeDefault);
      } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
          util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
          util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
      }
      if (this.map)
        this.defaultValue = util.emptyObject;
      else if (this.repeated)
        this.defaultValue = util.emptyArray;
      else
        this.defaultValue = this.typeDefault;
      if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;
      return ReflectionObject.prototype.resolve.call(this);
    };
    Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
      if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;
      else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;
      return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
      };
    };
    Field._configure = function configure(Type_) {
      Type = Type_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/oneof.js
var require_oneof = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/oneof.js"(exports2, module2) {
    "use strict";
    module2.exports = OneOf;
    var ReflectionObject = require_object();
    ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
    var Field = require_field();
    var util = require_util3();
    function OneOf(name, fieldNames, options, comment) {
      if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!(fieldNames === void 0 || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");
      this.oneof = fieldNames || [];
      this.fieldsArray = [];
      this.comment = comment;
    }
    OneOf.fromJSON = function fromJSON(name, json) {
      return new OneOf(name, json.oneof, json.options, json.comment);
    };
    OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "oneof",
        this.oneof,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    function addFieldsToParent(oneof) {
      if (oneof.parent) {
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
          if (!oneof.fieldsArray[i].parent)
            oneof.parent.add(oneof.fieldsArray[i]);
      }
    }
    OneOf.prototype.add = function add(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
      this.oneof.push(field.name);
      this.fieldsArray.push(field);
      field.partOf = this;
      addFieldsToParent(this);
      return this;
    };
    OneOf.prototype.remove = function remove(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      var index = this.fieldsArray.indexOf(field);
      if (index < 0)
        throw Error(field + " is not a member of " + this);
      this.fieldsArray.splice(index, 1);
      index = this.oneof.indexOf(field.name);
      if (index > -1)
        this.oneof.splice(index, 1);
      field.partOf = null;
      return this;
    };
    OneOf.prototype.onAdd = function onAdd(parent) {
      ReflectionObject.prototype.onAdd.call(this, parent);
      var self2 = this;
      for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
          field.partOf = self2;
          self2.fieldsArray.push(field);
        }
      }
      addFieldsToParent(this);
    };
    OneOf.prototype.onRemove = function onRemove(parent) {
      for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
          field.parent.remove(field);
      ReflectionObject.prototype.onRemove.call(this, parent);
    };
    OneOf.d = function decorateOneOf() {
      var fieldNames = new Array(arguments.length), index = 0;
      while (index < arguments.length)
        fieldNames[index] = arguments[index++];
      return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
          get: util.oneOfGetter(fieldNames),
          set: util.oneOfSetter(fieldNames)
        });
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/namespace.js
var require_namespace = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/namespace.js"(exports2, module2) {
    "use strict";
    module2.exports = Namespace;
    var ReflectionObject = require_object();
    ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
    var Field = require_field();
    var util = require_util3();
    var OneOf = require_oneof();
    var Type;
    var Service;
    var Enum;
    Namespace.fromJSON = function fromJSON(name, json) {
      return new Namespace(name, json.options).addJSON(json.nested);
    };
    function arrayToJSON(array, toJSONOptions) {
      if (!(array && array.length))
        return void 0;
      var obj = {};
      for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
      return obj;
    }
    Namespace.arrayToJSON = arrayToJSON;
    Namespace.isReservedId = function isReservedId(reserved, id) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
            return true;
      }
      return false;
    };
    Namespace.isReservedName = function isReservedName(reserved, name) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (reserved[i] === name)
            return true;
      }
      return false;
    };
    function Namespace(name, options) {
      ReflectionObject.call(this, name, options);
      this.nested = void 0;
      this._nestedArray = null;
    }
    function clearCache(namespace) {
      namespace._nestedArray = null;
      return namespace;
    }
    Object.defineProperty(Namespace.prototype, "nestedArray", {
      get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
      }
    });
    Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
      return util.toObject([
        "options",
        this.options,
        "nested",
        arrayToJSON(this.nestedArray, toJSONOptions)
      ]);
    };
    Namespace.prototype.addJSON = function addJSON(nestedJson) {
      var ns = this;
      if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
          nested = nestedJson[names[i]];
          ns.add(
            // most to least likely
            (nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : nested.id !== void 0 ? Field.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      }
      return this;
    };
    Namespace.prototype.get = function get(name) {
      return this.nested && this.nested[name] || null;
    };
    Namespace.prototype.getEnum = function getEnum(name) {
      if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
      throw Error("no such enum: " + name);
    };
    Namespace.prototype.add = function add(object) {
      if (!(object instanceof Field && object.extend !== void 0 || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace))
        throw TypeError("object must be a valid nested object");
      if (!this.nested)
        this.nested = {};
      else {
        var prev = this.get(object.name);
        if (prev) {
          if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
            var nested = prev.nestedArray;
            for (var i = 0; i < nested.length; ++i)
              object.add(nested[i]);
            this.remove(prev);
            if (!this.nested)
              this.nested = {};
            object.setOptions(prev.options, true);
          } else
            throw Error("duplicate name '" + object.name + "' in " + this);
        }
      }
      this.nested[object.name] = object;
      object.onAdd(this);
      return clearCache(this);
    };
    Namespace.prototype.remove = function remove(object) {
      if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
      if (object.parent !== this)
        throw Error(object + " is not a member of " + this);
      delete this.nested[object.name];
      if (!Object.keys(this.nested).length)
        this.nested = void 0;
      object.onRemove(this);
      return clearCache(this);
    };
    Namespace.prototype.define = function define2(path, json) {
      if (util.isString(path))
        path = path.split(".");
      else if (!Array.isArray(path))
        throw TypeError("illegal path");
      if (path && path.length && path[0] === "")
        throw Error("path must be relative");
      var ptr = this;
      while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
          ptr = ptr.nested[part];
          if (!(ptr instanceof Namespace))
            throw Error("path conflicts with non-namespace objects");
        } else
          ptr.add(ptr = new Namespace(part));
      }
      if (json)
        ptr.addJSON(json);
      return ptr;
    };
    Namespace.prototype.resolveAll = function resolveAll() {
      var nested = this.nestedArray, i = 0;
      while (i < nested.length)
        if (nested[i] instanceof Namespace)
          nested[i++].resolveAll();
        else
          nested[i++].resolve();
      return this.resolve();
    };
    Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
      if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = void 0;
      } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [filterTypes];
      if (util.isString(path) && path.length) {
        if (path === ".")
          return this.root;
        path = path.split(".");
      } else if (!path.length)
        return this;
      if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);
      var found = this.get(path[0]);
      if (found) {
        if (path.length === 1) {
          if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
            return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
          return found;
      } else
        for (var i = 0; i < this.nestedArray.length; ++i)
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
            return found;
      if (this.parent === null || parentAlreadyChecked)
        return null;
      return this.parent.lookup(path, filterTypes);
    };
    Namespace.prototype.lookupType = function lookupType(path) {
      var found = this.lookup(path, [Type]);
      if (!found)
        throw Error("no such type: " + path);
      return found;
    };
    Namespace.prototype.lookupEnum = function lookupEnum(path) {
      var found = this.lookup(path, [Enum]);
      if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
      var found = this.lookup(path, [Type, Enum]);
      if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupService = function lookupService(path) {
      var found = this.lookup(path, [Service]);
      if (!found)
        throw Error("no such Service '" + path + "' in " + this);
      return found;
    };
    Namespace._configure = function(Type_, Service_, Enum_) {
      Type = Type_;
      Service = Service_;
      Enum = Enum_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/mapfield.js
var require_mapfield = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/mapfield.js"(exports2, module2) {
    "use strict";
    module2.exports = MapField;
    var Field = require_field();
    ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
    var types = require_types();
    var util = require_util3();
    function MapField(name, id, keyType, type, options, comment) {
      Field.call(this, name, id, type, void 0, void 0, options, comment);
      if (!util.isString(keyType))
        throw TypeError("keyType must be a string");
      this.keyType = keyType;
      this.resolvedKeyType = null;
      this.map = true;
    }
    MapField.fromJSON = function fromJSON(name, json) {
      return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
    };
    MapField.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "keyType",
        this.keyType,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    MapField.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (types.mapKey[this.keyType] === void 0)
        throw Error("invalid key type: " + this.keyType);
      return Field.prototype.resolve.call(this);
    };
    MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
      if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;
      else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;
      return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/method.js
var require_method = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/method.js"(exports2, module2) {
    "use strict";
    module2.exports = Method;
    var ReflectionObject = require_object();
    ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
    var util = require_util3();
    function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {
      if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = void 0;
      } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = void 0;
      }
      if (!(type === void 0 || util.isString(type)))
        throw TypeError("type must be a string");
      if (!util.isString(requestType))
        throw TypeError("requestType must be a string");
      if (!util.isString(responseType))
        throw TypeError("responseType must be a string");
      ReflectionObject.call(this, name, options);
      this.type = type || "rpc";
      this.requestType = requestType;
      this.requestStream = requestStream ? true : void 0;
      this.responseType = responseType;
      this.responseStream = responseStream ? true : void 0;
      this.resolvedRequestType = null;
      this.resolvedResponseType = null;
      this.comment = comment;
      this.parsedOptions = parsedOptions;
    }
    Method.fromJSON = function fromJSON(name, json) {
      return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
    };
    Method.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "type",
        this.type !== "rpc" && /* istanbul ignore next */
        this.type || void 0,
        "requestType",
        this.requestType,
        "requestStream",
        this.requestStream,
        "responseType",
        this.responseType,
        "responseStream",
        this.responseStream,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0,
        "parsedOptions",
        this.parsedOptions
      ]);
    };
    Method.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      this.resolvedRequestType = this.parent.lookupType(this.requestType);
      this.resolvedResponseType = this.parent.lookupType(this.responseType);
      return ReflectionObject.prototype.resolve.call(this);
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/service.js
var require_service3 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var Namespace = require_namespace();
    ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
    var Method = require_method();
    var util = require_util3();
    var rpc = require_rpc();
    function Service(name, options) {
      Namespace.call(this, name, options);
      this.methods = {};
      this._methodsArray = null;
    }
    Service.fromJSON = function fromJSON(name, json) {
      var service = new Service(name, json.options);
      if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
      if (json.nested)
        service.addJSON(json.nested);
      service.comment = json.comment;
      return service;
    };
    Service.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "methods",
        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */
        {},
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Object.defineProperty(Service.prototype, "methodsArray", {
      get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
      }
    });
    function clearCache(service) {
      service._methodsArray = null;
      return service;
    }
    Service.prototype.get = function get(name) {
      return this.methods[name] || Namespace.prototype.get.call(this, name);
    };
    Service.prototype.resolveAll = function resolveAll() {
      var methods = this.methodsArray;
      for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
      return Namespace.prototype.resolve.call(this);
    };
    Service.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Service.prototype.remove = function remove(object) {
      if (object instanceof Method) {
        if (this.methods[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
      var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
      for (var i = 0, method; i < /* initializes */
      this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
          m: method,
          q: method.resolvedRequestType.ctor,
          s: method.resolvedResponseType.ctor
        });
      }
      return rpcService;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/message.js
var require_message = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/message.js"(exports2, module2) {
    "use strict";
    module2.exports = Message;
    var util = require_minimal();
    function Message(properties) {
      if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          this[keys[i]] = properties[keys[i]];
    }
    Message.create = function create(properties) {
      return this.$type.create(properties);
    };
    Message.encode = function encode(message, writer) {
      return this.$type.encode(message, writer);
    };
    Message.encodeDelimited = function encodeDelimited(message, writer) {
      return this.$type.encodeDelimited(message, writer);
    };
    Message.decode = function decode(reader) {
      return this.$type.decode(reader);
    };
    Message.decodeDelimited = function decodeDelimited(reader) {
      return this.$type.decodeDelimited(reader);
    };
    Message.verify = function verify(message) {
      return this.$type.verify(message);
    };
    Message.fromObject = function fromObject(object) {
      return this.$type.fromObject(object);
    };
    Message.toObject = function toObject(message, options) {
      return this.$type.toObject(message, options);
    };
    Message.prototype.toJSON = function toJSON() {
      return this.$type.toObject(this, util.toJSONOptions);
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/decoder.js
var require_decoder = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/decoder.js"(exports2, module2) {
    "use strict";
    module2.exports = decoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util3();
    function missing(field) {
      return "missing required '" + field.name + "'";
    }
    function decoder(mtype) {
      var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field2) {
        return field2.map;
      }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
      if (mtype.group)
        gen("if((t&7)===4)")("break");
      gen("switch(t>>>3){");
      var i = 0;
      for (; i < /* initializes */
      mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
        gen("case %i: {", field.id);
        if (field.map) {
          gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
          if (types.defaults[field.keyType] !== void 0)
            gen("k=%j", types.defaults[field.keyType]);
          else
            gen("k=null");
          if (types.defaults[type] !== void 0)
            gen("value=%j", types.defaults[type]);
          else
            gen("value=null");
          gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
          if (types.basic[type] === void 0)
            gen("value=types[%i].decode(r,r.uint32())", i);
          else
            gen("value=r.%s()", type);
          gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
          if (types.long[field.keyType] !== void 0)
            gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
          else
            gen("%s[k]=value", ref);
        } else if (field.repeated) {
          gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
          if (types.packed[type] !== void 0)
            gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
          if (types.basic[type] === void 0)
            gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
          else
            gen("%s.push(r.%s())", ref, type);
        } else if (types.basic[type] === void 0)
          gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else
          gen("%s=r.%s()", ref, type);
        gen("break")("}");
      }
      gen("default:")("r.skipType(t&7)")("break")("}")("}");
      for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required)
          gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
      }
      return gen("return m");
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/verifier.js
var require_verifier = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/verifier.js"(exports2, module2) {
    "use strict";
    module2.exports = verifier;
    var Enum = require_enum();
    var util = require_util3();
    function invalid(field, expected) {
      return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
    }
    function genVerifyValue(gen, field, fieldIndex, ref) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
          for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)
            gen("case %i:", field.resolvedType.values[keys[j]]);
          gen("break")("}");
        } else {
          gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
        }
      } else {
        switch (field.type) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
            break;
          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
            break;
          case "float":
          case "double":
            gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
            break;
          case "bool":
            gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
            break;
          case "string":
            gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
            break;
          case "bytes":
            gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            break;
        }
      }
      return gen;
    }
    function genVerifyKey(gen, field, ref) {
      switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
          gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
          break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field, "integer|Long key"));
          break;
        case "bool":
          gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
          break;
      }
      return gen;
    }
    function verifier(mtype) {
      var gen = util.codegen(["m"], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
      var oneofs = mtype.oneofsArray, seenFirstField = {};
      if (oneofs.length)
        gen("var p={}");
      for (var i = 0; i < /* initializes */
      mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
        if (field.optional)
          gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name);
        if (field.map) {
          gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
          genVerifyKey(gen, field, "k[i]");
          genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
        } else if (field.repeated) {
          gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
          genVerifyValue(gen, field, i, ref + "[i]")("}");
        } else {
          if (field.partOf) {
            var oneofProp = util.safeProp(field.partOf.name);
            if (seenFirstField[field.partOf.name] === 1)
              gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
            seenFirstField[field.partOf.name] = 1;
            gen("p%s=1", oneofProp);
          }
          genVerifyValue(gen, field, i, ref);
        }
        if (field.optional)
          gen("}");
      }
      return gen("return null");
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/converter.js
var require_converter = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/converter.js"(exports2) {
    "use strict";
    var converter = exports2;
    var Enum = require_enum();
    var util = require_util3();
    function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
      var defaultAlreadyEmitted = false;
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(d%s){", prop);
          for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
            if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {
              gen("default:")('if(typeof(d%s)==="number"){m%s=d%s;break}', prop, prop, prop);
              if (!field.repeated)
                gen("break");
              defaultAlreadyEmitted = true;
            }
            gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
          }
          gen("}");
        } else
          gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("m%s=Number(d%s)", prop, prop);
            break;
          case "uint32":
          case "fixed32":
            gen("m%s=d%s>>>0", prop, prop);
            break;
          case "int32":
          case "sint32":
          case "sfixed32":
            gen("m%s=d%s|0", prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
            break;
          case "bytes":
            gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length >= 0)", prop)("m%s=d%s", prop, prop);
            break;
          case "string":
            gen("m%s=String(d%s)", prop, prop);
            break;
          case "bool":
            gen("m%s=Boolean(d%s)", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.fromObject = function fromObject(mtype) {
      var fields = mtype.fieldsArray;
      var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
      if (!fields.length)
        return gen("return new this.ctor");
      gen("var m=new this.ctor");
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), prop = util.safeProp(field.name);
        if (field.map) {
          gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
          genValuePartial_fromObject(
            gen,
            field,
            /* not sorted */
            i,
            prop + "[ks[i]]"
          )("}")("}");
        } else if (field.repeated) {
          gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
          genValuePartial_fromObject(
            gen,
            field,
            /* not sorted */
            i,
            prop + "[i]"
          )("}")("}");
        } else {
          if (!(field.resolvedType instanceof Enum))
            gen("if(d%s!=null){", prop);
          genValuePartial_fromObject(
            gen,
            field,
            /* not sorted */
            i,
            prop
          );
          if (!(field.resolvedType instanceof Enum))
            gen("}");
        }
      }
      return gen("return m");
    };
    function genValuePartial_toObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum)
          gen("d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);
        else
          gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
            break;
          case "bytes":
            gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
            break;
          default:
            gen("d%s=m%s", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.toObject = function toObject(mtype) {
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      if (!fields.length)
        return util.codegen()("return {}");
      var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
      var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
      for (; i < fields.length; ++i)
        if (!fields[i].partOf)
          (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
      if (repeatedFields.length) {
        gen("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i)
          gen("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen("}");
      }
      if (mapFields.length) {
        gen("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i)
          gen("d%s={}", util.safeProp(mapFields[i].name));
        gen("}");
      }
      if (normalFields.length) {
        gen("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
          var field = normalFields[i], prop = util.safeProp(field.name);
          if (field.resolvedType instanceof Enum)
            gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
          else if (field.long)
            gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
          else if (field.bytes) {
            var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
            gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
          } else
            gen("d%s=%j", prop, field.typeDefault);
        }
        gen("}");
      }
      var hasKs2 = false;
      for (i = 0; i < fields.length; ++i) {
        var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
        if (field.map) {
          if (!hasKs2) {
            hasKs2 = true;
            gen("var ks2");
          }
          gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
          genValuePartial_toObject(
            gen,
            field,
            /* sorted */
            index,
            prop + "[ks2[j]]"
          )("}");
        } else if (field.repeated) {
          gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
          genValuePartial_toObject(
            gen,
            field,
            /* sorted */
            index,
            prop + "[j]"
          )("}");
        } else {
          gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
          genValuePartial_toObject(
            gen,
            field,
            /* sorted */
            index,
            prop
          );
          if (field.partOf)
            gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen("}");
      }
      return gen("return d");
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/wrappers.js"(exports2) {
    "use strict";
    var wrappers = exports2;
    var Message = require_message();
    wrappers[".google.protobuf.Any"] = {
      fromObject: function(object) {
        if (object && object["@type"]) {
          var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type) {
            var type_url = object["@type"].charAt(0) === "." ? object["@type"].slice(1) : object["@type"];
            if (type_url.indexOf("/") === -1) {
              type_url = "/" + type_url;
            }
            return this.create({
              type_url,
              value: type.encode(type.fromObject(object)).finish()
            });
          }
        }
        return this.fromObject(object);
      },
      toObject: function(message, options) {
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";
        if (options && options.json && message.type_url && message.value) {
          name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
          prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type)
            message = type.decode(message.value);
        }
        if (!(message instanceof this.ctor) && message instanceof Message) {
          var object = message.$type.toObject(message, options);
          var messageName = message.$type.fullName[0] === "." ? message.$type.fullName.slice(1) : message.$type.fullName;
          if (prefix === "") {
            prefix = googleApi;
          }
          name = prefix + messageName;
          object["@type"] = name;
          return object;
        }
        return this.toObject(message, options);
      }
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/type.js
var require_type = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/type.js"(exports2, module2) {
    "use strict";
    module2.exports = Type;
    var Namespace = require_namespace();
    ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
    var Enum = require_enum();
    var OneOf = require_oneof();
    var Field = require_field();
    var MapField = require_mapfield();
    var Service = require_service3();
    var Message = require_message();
    var Reader = require_reader();
    var Writer = require_writer();
    var util = require_util3();
    var encoder = require_encoder();
    var decoder = require_decoder();
    var verifier = require_verifier();
    var converter = require_converter();
    var wrappers = require_wrappers();
    function Type(name, options) {
      Namespace.call(this, name, options);
      this.fields = {};
      this.oneofs = void 0;
      this.extensions = void 0;
      this.reserved = void 0;
      this.group = void 0;
      this._fieldsById = null;
      this._fieldsArray = null;
      this._oneofsArray = null;
      this._ctor = null;
    }
    Object.defineProperties(Type.prototype, {
      /**
       * Message fields by id.
       * @name Type#fieldsById
       * @type {Object.<number,Field>}
       * @readonly
       */
      fieldsById: {
        get: function() {
          if (this._fieldsById)
            return this._fieldsById;
          this._fieldsById = {};
          for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
            var field = this.fields[names[i]], id = field.id;
            if (this._fieldsById[id])
              throw Error("duplicate id " + id + " in " + this);
            this._fieldsById[id] = field;
          }
          return this._fieldsById;
        }
      },
      /**
       * Fields of this message as an array for iteration.
       * @name Type#fieldsArray
       * @type {Field[]}
       * @readonly
       */
      fieldsArray: {
        get: function() {
          return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
      },
      /**
       * Oneofs of this message as an array for iteration.
       * @name Type#oneofsArray
       * @type {OneOf[]}
       * @readonly
       */
      oneofsArray: {
        get: function() {
          return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
      },
      /**
       * The registered constructor, if any registered, otherwise a generic constructor.
       * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
       * @name Type#ctor
       * @type {Constructor<{}>}
       */
      ctor: {
        get: function() {
          return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {
          var prototype = ctor.prototype;
          if (!(prototype instanceof Message)) {
            (ctor.prototype = new Message()).constructor = ctor;
            util.merge(ctor.prototype, prototype);
          }
          ctor.$type = ctor.prototype.$type = this;
          util.merge(ctor, Message, true);
          this._ctor = ctor;
          var i = 0;
          for (; i < /* initializes */
          this.fieldsArray.length; ++i)
            this._fieldsArray[i].resolve();
          var ctorProperties = {};
          for (i = 0; i < /* initializes */
          this.oneofsArray.length; ++i)
            ctorProperties[this._oneofsArray[i].resolve().name] = {
              get: util.oneOfGetter(this._oneofsArray[i].oneof),
              set: util.oneOfSetter(this._oneofsArray[i].oneof)
            };
          if (i)
            Object.defineProperties(ctor.prototype, ctorProperties);
        }
      }
    });
    Type.generateConstructor = function generateConstructor(mtype) {
      var gen = util.codegen(["p"], mtype.name);
      for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map)
          gen("this%s={}", util.safeProp(field.name));
        else if (field.repeated)
          gen("this%s=[]", util.safeProp(field.name));
      return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
    };
    function clearCache(type) {
      type._fieldsById = type._fieldsArray = type._oneofsArray = null;
      delete type.encode;
      delete type.decode;
      delete type.verify;
      return type;
    }
    Type.fromJSON = function fromJSON(name, json) {
      var type = new Type(name, json.options);
      type.extensions = json.extensions;
      type.reserved = json.reserved;
      var names = Object.keys(json.fields), i = 0;
      for (; i < names.length; ++i)
        type.add(
          (typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]])
        );
      if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
      if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add(
            // most to least likely
            (nested.id !== void 0 ? Field.fromJSON : nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
      if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
      if (json.group)
        type.group = true;
      if (json.comment)
        type.comment = json.comment;
      return type;
    };
    Type.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "oneofs",
        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields",
        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions",
        this.extensions && this.extensions.length ? this.extensions : void 0,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "group",
        this.group || void 0,
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Type.prototype.resolveAll = function resolveAll() {
      var fields = this.fieldsArray, i = 0;
      while (i < fields.length)
        fields[i++].resolve();
      var oneofs = this.oneofsArray;
      i = 0;
      while (i < oneofs.length)
        oneofs[i++].resolve();
      return Namespace.prototype.resolveAll.call(this);
    };
    Type.prototype.get = function get(name) {
      return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
    };
    Type.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Field && object.extend === void 0) {
        if (this._fieldsById ? (
          /* istanbul ignore next */
          this._fieldsById[object.id]
        ) : this.fieldsById[object.id])
          throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
          throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
          throw Error("name '" + object.name + "' is reserved in " + this);
        if (object.parent)
          object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs)
          this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Type.prototype.remove = function remove(object) {
      if (object instanceof Field && object.extend === void 0) {
        if (!this.fields || this.fields[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs || this.oneofs[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Type.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Type.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
    Type.prototype.create = function create(properties) {
      return new this.ctor(properties);
    };
    Type.prototype.setup = function setup() {
      var fullName = this.fullName, types = [];
      for (var i = 0; i < /* initializes */
      this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);
      this.encode = encoder(this)({
        Writer,
        types,
        util
      });
      this.decode = decoder(this)({
        Reader,
        types,
        util
      });
      this.verify = verifier(this)({
        types,
        util
      });
      this.fromObject = converter.fromObject(this)({
        types,
        util
      });
      this.toObject = converter.toObject(this)({
        types,
        util
      });
      var wrapper = wrappers[fullName];
      if (wrapper) {
        var originalThis = Object.create(this);
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
      }
      return this;
    };
    Type.prototype.encode = function encode_setup(message, writer) {
      return this.setup().encode(message, writer);
    };
    Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
    };
    Type.prototype.decode = function decode_setup(reader, length) {
      return this.setup().decode(reader, length);
    };
    Type.prototype.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof Reader))
        reader = Reader.create(reader);
      return this.decode(reader, reader.uint32());
    };
    Type.prototype.verify = function verify_setup(message) {
      return this.setup().verify(message);
    };
    Type.prototype.fromObject = function fromObject(object) {
      return this.setup().fromObject(object);
    };
    Type.prototype.toObject = function toObject(message, options) {
      return this.setup().toObject(message, options);
    };
    Type.d = function decorateType(typeName) {
      return function typeDecorator(target) {
        util.decorateType(target, typeName);
      };
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/root.js
var require_root = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/root.js"(exports2, module2) {
    "use strict";
    module2.exports = Root;
    var Namespace = require_namespace();
    ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";
    var Field = require_field();
    var Enum = require_enum();
    var OneOf = require_oneof();
    var util = require_util3();
    var Type;
    var parse;
    var common;
    function Root(options) {
      Namespace.call(this, "", options);
      this.deferred = [];
      this.files = [];
    }
    Root.fromJSON = function fromJSON(json, root) {
      if (!root)
        root = new Root();
      if (json.options)
        root.setOptions(json.options);
      return root.addJSON(json.nested);
    };
    Root.prototype.resolvePath = util.path.resolve;
    Root.prototype.fetch = util.fetch;
    function SYNC() {
    }
    Root.prototype.load = function load(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = void 0;
      }
      var self2 = this;
      if (!callback)
        return util.asPromise(load, self2, filename, options);
      var sync = callback === SYNC;
      function finish(err, root) {
        if (!callback)
          return;
        var cb = callback;
        callback = null;
        if (sync)
          throw err;
        cb(err, root);
      }
      function getBundledFileName(filename2) {
        var idx = filename2.lastIndexOf("google/protobuf/");
        if (idx > -1) {
          var altname = filename2.substring(idx);
          if (altname in common)
            return altname;
        }
        return null;
      }
      function process2(filename2, source) {
        try {
          if (util.isString(source) && source.charAt(0) === "{")
            source = JSON.parse(source);
          if (!util.isString(source))
            self2.setOptions(source.options).addJSON(source.nested);
          else {
            parse.filename = filename2;
            var parsed = parse(source, self2, options), resolved2, i2 = 0;
            if (parsed.imports) {
              for (; i2 < parsed.imports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.imports[i2]) || self2.resolvePath(filename2, parsed.imports[i2]))
                  fetch(resolved2);
            }
            if (parsed.weakImports) {
              for (i2 = 0; i2 < parsed.weakImports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.weakImports[i2]) || self2.resolvePath(filename2, parsed.weakImports[i2]))
                  fetch(resolved2, true);
            }
          }
        } catch (err) {
          finish(err);
        }
        if (!sync && !queued)
          finish(null, self2);
      }
      function fetch(filename2, weak) {
        filename2 = getBundledFileName(filename2) || filename2;
        if (self2.files.indexOf(filename2) > -1)
          return;
        self2.files.push(filename2);
        if (filename2 in common) {
          if (sync)
            process2(filename2, common[filename2]);
          else {
            ++queued;
            setTimeout(function() {
              --queued;
              process2(filename2, common[filename2]);
            });
          }
          return;
        }
        if (sync) {
          var source;
          try {
            source = util.fs.readFileSync(filename2).toString("utf8");
          } catch (err) {
            if (!weak)
              finish(err);
            return;
          }
          process2(filename2, source);
        } else {
          ++queued;
          self2.fetch(filename2, function(err, source2) {
            --queued;
            if (!callback)
              return;
            if (err) {
              if (!weak)
                finish(err);
              else if (!queued)
                finish(null, self2);
              return;
            }
            process2(filename2, source2);
          });
        }
      }
      var queued = 0;
      if (util.isString(filename))
        filename = [filename];
      for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self2.resolvePath("", filename[i]))
          fetch(resolved);
      if (sync)
        return self2;
      if (!queued)
        finish(null, self2);
      return void 0;
    };
    Root.prototype.loadSync = function loadSync(filename, options) {
      if (!util.isNode)
        throw Error("not supported");
      return this.load(filename, options, SYNC);
    };
    Root.prototype.resolveAll = function resolveAll() {
      if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
      return Namespace.prototype.resolveAll.call(this);
    };
    var exposeRe = /^[A-Z]/;
    function tryHandleExtension(root, field) {
      var extendedType = field.parent.lookup(field.extend);
      if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, void 0, field.options);
        if (extendedType.get(sisterField.name)) {
          return true;
        }
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
      }
      return false;
    }
    Root.prototype._handleAdd = function _handleAdd(object) {
      if (object instanceof Field) {
        if (
          /* an extension field (implies not part of a oneof) */
          object.extend !== void 0 && /* not already handled */
          !object.extensionField
        ) {
          if (!tryHandleExtension(this, object))
            this.deferred.push(object);
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          object.parent[object.name] = object.values;
      } else if (!(object instanceof OneOf)) {
        if (object instanceof Type)
          for (var i = 0; i < this.deferred.length; )
            if (tryHandleExtension(this, this.deferred[i]))
              this.deferred.splice(i, 1);
            else
              ++i;
        for (var j = 0; j < /* initializes */
        object.nestedArray.length; ++j)
          this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
          object.parent[object.name] = object;
      }
    };
    Root.prototype._handleRemove = function _handleRemove(object) {
      if (object instanceof Field) {
        if (
          /* an extension field */
          object.extend !== void 0
        ) {
          if (
            /* already handled */
            object.extensionField
          ) {
            object.extensionField.parent.remove(object.extensionField);
            object.extensionField = null;
          } else {
            var index = this.deferred.indexOf(object);
            if (index > -1)
              this.deferred.splice(index, 1);
          }
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      } else if (object instanceof Namespace) {
        for (var i = 0; i < /* initializes */
        object.nestedArray.length; ++i)
          this._handleRemove(object._nestedArray[i]);
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      }
    };
    Root._configure = function(Type_, parse_, common_) {
      Type = Type_;
      parse = parse_;
      common = common_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/util.js
var require_util3 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/util.js"(exports2, module2) {
    "use strict";
    var util = module2.exports = require_minimal();
    var roots = require_roots();
    var Type;
    var Enum;
    util.codegen = require_codegen();
    util.fetch = require_fetch();
    util.path = require_path2();
    util.fs = util.inquire("fs");
    util.toArray = function toArray(object) {
      if (object) {
        var keys = Object.keys(object), array = new Array(keys.length), index = 0;
        while (index < keys.length)
          array[index] = object[keys[index++]];
        return array;
      }
      return [];
    };
    util.toObject = function toObject(array) {
      var object = {}, index = 0;
      while (index < array.length) {
        var key = array[index++], val = array[index++];
        if (val !== void 0)
          object[key] = val;
      }
      return object;
    };
    var safePropBackslashRe = /\\/g;
    var safePropQuoteRe = /"/g;
    util.isReserved = function isReserved(name) {
      return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
    };
    util.safeProp = function safeProp(prop) {
      if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
      return "." + prop;
    };
    util.ucFirst = function ucFirst(str) {
      return str.charAt(0).toUpperCase() + str.substring(1);
    };
    var camelCaseRe = /_([a-z])/g;
    util.camelCase = function camelCase(str) {
      return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
        return $1.toUpperCase();
      });
    };
    util.compareFieldsById = function compareFieldsById(a, b) {
      return a.id - b.id;
    };
    util.decorateType = function decorateType(ctor, typeName) {
      if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
          util.decorateRoot.remove(ctor.$type);
          ctor.$type.name = typeName;
          util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
      }
      if (!Type)
        Type = require_type();
      var type = new Type(typeName || ctor.name);
      util.decorateRoot.add(type);
      type.ctor = ctor;
      Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
      Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
      return type;
    };
    var decorateEnumIndex = 0;
    util.decorateEnum = function decorateEnum(object) {
      if (object.$type)
        return object.$type;
      if (!Enum)
        Enum = require_enum();
      var enm = new Enum("Enum" + decorateEnumIndex++, object);
      util.decorateRoot.add(enm);
      Object.defineProperty(object, "$type", { value: enm, enumerable: false });
      return enm;
    };
    util.setProperty = function setProperty(dst, path, value) {
      function setProp(dst2, path2, value2) {
        var part = path2.shift();
        if (part === "__proto__" || part === "prototype") {
          return dst2;
        }
        if (path2.length > 0) {
          dst2[part] = setProp(dst2[part] || {}, path2, value2);
        } else {
          var prevValue = dst2[part];
          if (prevValue)
            value2 = [].concat(prevValue).concat(value2);
          dst2[part] = value2;
        }
        return dst2;
      }
      if (typeof dst !== "object")
        throw TypeError("dst must be an object");
      if (!path)
        throw TypeError("path must be specified");
      path = path.split(".");
      return setProp(dst, path, value);
    };
    Object.defineProperty(util, "decorateRoot", {
      get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require_root())());
      }
    });
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/object.js
var require_object = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/object.js"(exports2, module2) {
    "use strict";
    module2.exports = ReflectionObject;
    ReflectionObject.className = "ReflectionObject";
    var util = require_util3();
    var Root;
    function ReflectionObject(name, options) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (options && !util.isObject(options))
        throw TypeError("options must be an object");
      this.options = options;
      this.parsedOptions = null;
      this.name = name;
      this.parent = null;
      this.resolved = false;
      this.comment = null;
      this.filename = null;
    }
    Object.defineProperties(ReflectionObject.prototype, {
      /**
       * Reference to the root namespace.
       * @name ReflectionObject#root
       * @type {Root}
       * @readonly
       */
      root: {
        get: function() {
          var ptr = this;
          while (ptr.parent !== null)
            ptr = ptr.parent;
          return ptr;
        }
      },
      /**
       * Full name including leading dot.
       * @name ReflectionObject#fullName
       * @type {string}
       * @readonly
       */
      fullName: {
        get: function() {
          var path = [this.name], ptr = this.parent;
          while (ptr) {
            path.unshift(ptr.name);
            ptr = ptr.parent;
          }
          return path.join(".");
        }
      }
    });
    ReflectionObject.prototype.toJSON = /* istanbul ignore next */
    function toJSON() {
      throw Error();
    };
    ReflectionObject.prototype.onAdd = function onAdd(parent) {
      if (this.parent && this.parent !== parent)
        this.parent.remove(this);
      this.parent = parent;
      this.resolved = false;
      var root = parent.root;
      if (root instanceof Root)
        root._handleAdd(this);
    };
    ReflectionObject.prototype.onRemove = function onRemove(parent) {
      var root = parent.root;
      if (root instanceof Root)
        root._handleRemove(this);
      this.parent = null;
      this.resolved = false;
    };
    ReflectionObject.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (this.root instanceof Root)
        this.resolved = true;
      return this;
    };
    ReflectionObject.prototype.getOption = function getOption(name) {
      if (this.options)
        return this.options[name];
      return void 0;
    };
    ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (!ifNotSet || !this.options || this.options[name] === void 0)
        (this.options || (this.options = {}))[name] = value;
      return this;
    };
    ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
      if (!this.parsedOptions) {
        this.parsedOptions = [];
      }
      var parsedOptions = this.parsedOptions;
      if (propName) {
        var opt = parsedOptions.find(function(opt2) {
          return Object.prototype.hasOwnProperty.call(opt2, name);
        });
        if (opt) {
          var newValue = opt[name];
          util.setProperty(newValue, propName, value);
        } else {
          opt = {};
          opt[name] = util.setProperty({}, propName, value);
          parsedOptions.push(opt);
        }
      } else {
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
      }
      return this;
    };
    ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
      if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
          this.setOption(keys[i], options[keys[i]], ifNotSet);
      return this;
    };
    ReflectionObject.prototype.toString = function toString() {
      var className = this.constructor.className, fullName = this.fullName;
      if (fullName.length)
        return className + " " + fullName;
      return className;
    };
    ReflectionObject._configure = function(Root_) {
      Root = Root_;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/enum.js
var require_enum = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/enum.js"(exports2, module2) {
    "use strict";
    module2.exports = Enum;
    var ReflectionObject = require_object();
    ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
    var Namespace = require_namespace();
    var util = require_util3();
    function Enum(name, values, options, comment, comments, valuesOptions) {
      ReflectionObject.call(this, name, options);
      if (values && typeof values !== "object")
        throw TypeError("values must be an object");
      this.valuesById = {};
      this.values = Object.create(this.valuesById);
      this.comment = comment;
      this.comments = comments || {};
      this.valuesOptions = valuesOptions;
      this.reserved = void 0;
      if (values) {
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
          if (typeof values[keys[i]] === "number")
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
      }
    }
    Enum.fromJSON = function fromJSON(name, json) {
      var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
      enm.reserved = json.reserved;
      return enm;
    };
    Enum.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "valuesOptions",
        this.valuesOptions,
        "values",
        this.values,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "comment",
        keepComments ? this.comment : void 0,
        "comments",
        keepComments ? this.comments : void 0
      ]);
    };
    Enum.prototype.add = function add(name, id, comment, options) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (!util.isInteger(id))
        throw TypeError("id must be an integer");
      if (this.values[name] !== void 0)
        throw Error("duplicate name '" + name + "' in " + this);
      if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);
      if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);
      if (this.valuesById[id] !== void 0) {
        if (!(this.options && this.options.allow_alias))
          throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
      } else
        this.valuesById[this.values[name] = id] = name;
      if (options) {
        if (this.valuesOptions === void 0)
          this.valuesOptions = {};
        this.valuesOptions[name] = options || null;
      }
      this.comments[name] = comment || null;
      return this;
    };
    Enum.prototype.remove = function remove(name) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      var val = this.values[name];
      if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);
      delete this.valuesById[val];
      delete this.values[name];
      delete this.comments[name];
      if (this.valuesOptions)
        delete this.valuesOptions[name];
      return this;
    };
    Enum.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Enum.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/encoder.js
var require_encoder = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/encoder.js"(exports2, module2) {
    "use strict";
    module2.exports = encoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util3();
    function genTypePartial(gen, field, fieldIndex, ref) {
      return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
    }
    function encoder(mtype) {
      var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
      var i, ref;
      var fields = (
        /* initializes */
        mtype.fieldsArray.slice().sort(util.compareFieldsById)
      );
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types.basic[type];
        ref = "m" + util.safeProp(field.name);
        if (field.map) {
          gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
          if (wireType === void 0)
            gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref);
          else
            gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
          gen("}")("}");
        } else if (field.repeated) {
          gen("if(%s!=null&&%s.length){", ref, ref);
          if (field.packed && types.packed[type] !== void 0) {
            gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()");
          } else {
            gen("for(var i=0;i<%s.length;++i)", ref);
            if (wireType === void 0)
              genTypePartial(gen, field, index, ref + "[i]");
            else
              gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
          }
          gen("}");
        } else {
          if (field.optional)
            gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name);
          if (wireType === void 0)
            genTypePartial(gen, field, index, ref);
          else
            gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
        }
      }
      return gen("return w");
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/index-light.js
var require_index_light = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/index-light.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_minimal();
    protobuf.build = "light";
    function load(filename, root, callback) {
      if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
      } else if (!root)
        root = new protobuf.Root();
      return root.load(filename, callback);
    }
    protobuf.load = load;
    function loadSync(filename, root) {
      if (!root)
        root = new protobuf.Root();
      return root.loadSync(filename);
    }
    protobuf.loadSync = loadSync;
    protobuf.encoder = require_encoder();
    protobuf.decoder = require_decoder();
    protobuf.verifier = require_verifier();
    protobuf.converter = require_converter();
    protobuf.ReflectionObject = require_object();
    protobuf.Namespace = require_namespace();
    protobuf.Root = require_root();
    protobuf.Enum = require_enum();
    protobuf.Type = require_type();
    protobuf.Field = require_field();
    protobuf.OneOf = require_oneof();
    protobuf.MapField = require_mapfield();
    protobuf.Service = require_service3();
    protobuf.Method = require_method();
    protobuf.Message = require_message();
    protobuf.wrappers = require_wrappers();
    protobuf.types = require_types();
    protobuf.util = require_util3();
    protobuf.ReflectionObject._configure(protobuf.Root);
    protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
    protobuf.Root._configure(protobuf.Type);
    protobuf.Field._configure(protobuf.Type);
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/tokenize.js"(exports2, module2) {
    "use strict";
    module2.exports = tokenize;
    var delimRe = /[\s{}=;:[\],'"()<>]/g;
    var stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
    var stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
    var setCommentRe = /^ *[*/]+ */;
    var setCommentAltRe = /^\s*\*?\/*/;
    var setCommentSplitRe = /\n/g;
    var whitespaceRe = /\s/;
    var unescapeRe = /\\(.?)/g;
    var unescapeMap = {
      "0": "\0",
      "r": "\r",
      "n": "\n",
      "t": "	"
    };
    function unescape2(str) {
      return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
          case "\\":
          case "":
            return $1;
          default:
            return unescapeMap[$1] || "";
        }
      });
    }
    tokenize.unescape = unescape2;
    function tokenize(source, alternateCommentMode) {
      source = source.toString();
      var offset = 0, length = source.length, line = 1, lastCommentLine = 0, comments = {};
      var stack = [];
      var stringDelim = null;
      function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
      }
      function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
          throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape2(match[1]);
      }
      function charAt(pos) {
        return source.charAt(pos);
      }
      function setComment(start, end, isLeading) {
        var comment = {
          type: source.charAt(start++),
          lineEmpty: false,
          leading: isLeading
        };
        var lookback;
        if (alternateCommentMode) {
          lookback = 2;
        } else {
          lookback = 3;
        }
        var commentOffset = start - lookback, c;
        do {
          if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
            comment.lineEmpty = true;
            break;
          }
        } while (c === " " || c === "	");
        var lines = source.substring(start, end).split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
          lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
        comment.text = lines.join("\n").trim();
        comments[line] = comment;
        lastCommentLine = line;
      }
      function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);
        var lineText = source.substring(startOffset, endOffset);
        var isComment = /^\s*\/\//.test(lineText);
        return isComment;
      }
      function findEndOfLine(cursor) {
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
          endOffset++;
        }
        return endOffset;
      }
      function next() {
        if (stack.length > 0)
          return stack.shift();
        if (stringDelim)
          return readString();
        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;
        do {
          if (offset === length)
            return null;
          repeat = false;
          while (whitespaceRe.test(curr = charAt(offset))) {
            if (curr === "\n") {
              isLeadingComment = true;
              ++line;
            }
            if (++offset === length)
              return null;
          }
          if (charAt(offset) === "/") {
            if (++offset === length) {
              throw illegal("comment");
            }
            if (charAt(offset) === "/") {
              if (!alternateCommentMode) {
                isDoc = charAt(start = offset + 1) === "/";
                while (charAt(++offset) !== "\n") {
                  if (offset === length) {
                    return null;
                  }
                }
                ++offset;
                if (isDoc) {
                  setComment(start, offset - 1, isLeadingComment);
                  isLeadingComment = true;
                }
                ++line;
                repeat = true;
              } else {
                start = offset;
                isDoc = false;
                if (isDoubleSlashCommentLine(offset - 1)) {
                  isDoc = true;
                  do {
                    offset = findEndOfLine(offset);
                    if (offset === length) {
                      break;
                    }
                    offset++;
                    if (!isLeadingComment) {
                      break;
                    }
                  } while (isDoubleSlashCommentLine(offset));
                } else {
                  offset = Math.min(length, findEndOfLine(offset) + 1);
                }
                if (isDoc) {
                  setComment(start, offset, isLeadingComment);
                  isLeadingComment = true;
                }
                line++;
                repeat = true;
              }
            } else if ((curr = charAt(offset)) === "*") {
              start = offset + 1;
              isDoc = alternateCommentMode || charAt(start) === "*";
              do {
                if (curr === "\n") {
                  ++line;
                }
                if (++offset === length) {
                  throw illegal("comment");
                }
                prev = curr;
                curr = charAt(offset);
              } while (prev !== "*" || curr !== "/");
              ++offset;
              if (isDoc) {
                setComment(start, offset - 2, isLeadingComment);
                isLeadingComment = true;
              }
              repeat = true;
            } else {
              return "/";
            }
          }
        } while (repeat);
        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
          while (end < length && !delimRe.test(charAt(end)))
            ++end;
        var token = source.substring(offset, offset = end);
        if (token === '"' || token === "'")
          stringDelim = token;
        return token;
      }
      function push(token) {
        stack.push(token);
      }
      function peek() {
        if (!stack.length) {
          var token = next();
          if (token === null)
            return null;
          push(token);
        }
        return stack[0];
      }
      function skip(expected, optional) {
        var actual = peek(), equals = actual === expected;
        if (equals) {
          next();
          return true;
        }
        if (!optional)
          throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
      }
      function cmnt(trailingLine) {
        var ret = null;
        var comment;
        if (trailingLine === void 0) {
          comment = comments[line - 1];
          delete comments[line - 1];
          if (comment && (alternateCommentMode || comment.type === "*" || comment.lineEmpty)) {
            ret = comment.leading ? comment.text : null;
          }
        } else {
          if (lastCommentLine < trailingLine) {
            peek();
          }
          comment = comments[trailingLine];
          delete comments[trailingLine];
          if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === "/")) {
            ret = comment.leading ? null : comment.text;
          }
        }
        return ret;
      }
      return Object.defineProperty({
        next,
        peek,
        push,
        skip,
        cmnt
      }, "line", {
        get: function() {
          return line;
        }
      });
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/parse.js
var require_parse3 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/parse.js"(exports2, module2) {
    "use strict";
    module2.exports = parse;
    parse.filename = null;
    parse.defaults = { keepCase: false };
    var tokenize = require_tokenize();
    var Root = require_root();
    var Type = require_type();
    var Field = require_field();
    var MapField = require_mapfield();
    var OneOf = require_oneof();
    var Enum = require_enum();
    var Service = require_service3();
    var Method = require_method();
    var types = require_types();
    var util = require_util3();
    var base10Re = /^[1-9][0-9]*$/;
    var base10NegRe = /^-?[1-9][0-9]*$/;
    var base16Re = /^0[x][0-9a-fA-F]+$/;
    var base16NegRe = /^-?0[x][0-9a-fA-F]+$/;
    var base8Re = /^0[0-7]+$/;
    var base8NegRe = /^-?0[0-7]+$/;
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    var nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
    var typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;
    var fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
    function parse(source, root, options) {
      if (!(root instanceof Root)) {
        options = root;
        root = new Root();
      }
      if (!options)
        options = parse.defaults;
      var preferTrailingComment = options.preferTrailingComment || false;
      var tn = tokenize(source, options.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;
      var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
      var ptr = root;
      var applyCase = options.keepCase ? function(name) {
        return name;
      } : util.camelCase;
      function illegal(token2, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
          parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token2 + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
      }
      function readString() {
        var values = [], token2;
        do {
          if ((token2 = next()) !== '"' && token2 !== "'")
            throw illegal(token2);
          values.push(next());
          skip(token2);
          token2 = peek();
        } while (token2 === '"' || token2 === "'");
        return values.join("");
      }
      function readValue(acceptTypeRef) {
        var token2 = next();
        switch (token2) {
          case "'":
          case '"':
            push(token2);
            return readString();
          case "true":
          case "TRUE":
            return true;
          case "false":
          case "FALSE":
            return false;
        }
        try {
          return parseNumber(
            token2,
            /* insideTryCatch */
            true
          );
        } catch (e) {
          if (acceptTypeRef && typeRefRe.test(token2))
            return token2;
          throw illegal(token2, "value");
        }
      }
      function readRanges(target, acceptStrings) {
        var token2, start;
        do {
          if (acceptStrings && ((token2 = peek()) === '"' || token2 === "'"))
            target.push(readString());
          else
            target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
        } while (skip(",", true));
        skip(";");
      }
      function parseNumber(token2, insideTryCatch) {
        var sign = 1;
        if (token2.charAt(0) === "-") {
          sign = -1;
          token2 = token2.substring(1);
        }
        switch (token2) {
          case "inf":
          case "INF":
          case "Inf":
            return sign * Infinity;
          case "nan":
          case "NAN":
          case "Nan":
          case "NaN":
            return NaN;
          case "0":
            return 0;
        }
        if (base10Re.test(token2))
          return sign * parseInt(token2, 10);
        if (base16Re.test(token2))
          return sign * parseInt(token2, 16);
        if (base8Re.test(token2))
          return sign * parseInt(token2, 8);
        if (numberRe.test(token2))
          return sign * parseFloat(token2);
        throw illegal(token2, "number", insideTryCatch);
      }
      function parseId(token2, acceptNegative) {
        switch (token2) {
          case "max":
          case "MAX":
          case "Max":
            return 536870911;
          case "0":
            return 0;
        }
        if (!acceptNegative && token2.charAt(0) === "-")
          throw illegal(token2, "id");
        if (base10NegRe.test(token2))
          return parseInt(token2, 10);
        if (base16NegRe.test(token2))
          return parseInt(token2, 16);
        if (base8NegRe.test(token2))
          return parseInt(token2, 8);
        throw illegal(token2, "id");
      }
      function parsePackage() {
        if (pkg !== void 0)
          throw illegal("package");
        pkg = next();
        if (!typeRefRe.test(pkg))
          throw illegal(pkg, "name");
        ptr = ptr.define(pkg);
        skip(";");
      }
      function parseImport() {
        var token2 = peek();
        var whichImports;
        switch (token2) {
          case "weak":
            whichImports = weakImports || (weakImports = []);
            next();
            break;
          case "public":
            next();
          default:
            whichImports = imports || (imports = []);
            break;
        }
        token2 = readString();
        skip(";");
        whichImports.push(token2);
      }
      function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";
        if (!isProto3 && syntax !== "proto2")
          throw illegal(syntax, "syntax");
        skip(";");
      }
      function parseCommon(parent, token2) {
        switch (token2) {
          case "option":
            parseOption(parent, token2);
            skip(";");
            return true;
          case "message":
            parseType(parent, token2);
            return true;
          case "enum":
            parseEnum(parent, token2);
            return true;
          case "service":
            parseService(parent, token2);
            return true;
          case "extend":
            parseExtension(parent, token2);
            return true;
        }
        return false;
      }
      function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
          if (typeof obj.comment !== "string") {
            obj.comment = cmnt();
          }
          obj.filename = parse.filename;
        }
        if (skip("{", true)) {
          var token2;
          while ((token2 = next()) !== "}")
            fnIf(token2);
          skip(";", true);
        } else {
          if (fnElse)
            fnElse();
          skip(";");
          if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
            obj.comment = cmnt(trailingLine) || obj.comment;
        }
      }
      function parseType(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "type name");
        var type = new Type(token2);
        ifBlock(type, function parseType_block(token3) {
          if (parseCommon(type, token3))
            return;
          switch (token3) {
            case "map":
              parseMapField(type, token3);
              break;
            case "required":
            case "repeated":
              parseField(type, token3);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "oneof":
              parseOneOf(type, token3);
              break;
            case "extensions":
              readRanges(type.extensions || (type.extensions = []));
              break;
            case "reserved":
              readRanges(type.reserved || (type.reserved = []), true);
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(type, "optional");
              break;
          }
        });
        parent.add(type);
      }
      function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
          parseGroup(parent, rule);
          return;
        }
        while (type.endsWith(".") || peek().startsWith(".")) {
          type += next();
        }
        if (!typeRefRe.test(type))
          throw illegal(type, "type");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        name = applyCase(name);
        skip("=");
        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseField_line() {
          parseInlineOptions(field);
        });
        if (rule === "proto3_optional") {
          var oneof = new OneOf("_" + name);
          field.setOption("proto3_optional", true);
          oneof.add(field);
          parent.add(oneof);
        } else {
          parent.add(field);
        }
        if (!isProto3 && field.repeated && (types.packed[type] !== void 0 || types.basic[type] === void 0))
          field.setOption(
            "packed",
            false,
            /* ifNotSet */
            true
          );
      }
      function parseGroup(parent, rule) {
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        var fieldName = util.lcFirst(name);
        if (name === fieldName)
          name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token2) {
          switch (token2) {
            case "option":
              parseOption(type, token2);
              skip(";");
              break;
            case "required":
            case "repeated":
              parseField(type, token2);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "message":
              parseType(type, token2);
              break;
            case "enum":
              parseEnum(type, token2);
              break;
            default:
              throw illegal(token2);
          }
        });
        parent.add(type).add(field);
      }
      function parseMapField(parent) {
        skip("<");
        var keyType = next();
        if (types.mapKey[keyType] === void 0)
          throw illegal(keyType, "type");
        skip(",");
        var valueType = next();
        if (!typeRefRe.test(valueType))
          throw illegal(valueType, "type");
        skip(">");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseMapField_line() {
          parseInlineOptions(field);
        });
        parent.add(field);
      }
      function parseOneOf(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var oneof = new OneOf(applyCase(token2));
        ifBlock(oneof, function parseOneOf_block(token3) {
          if (token3 === "option") {
            parseOption(oneof, token3);
            skip(";");
          } else {
            push(token3);
            parseField(oneof, "optional");
          }
        });
        parent.add(oneof);
      }
      function parseEnum(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var enm = new Enum(token2);
        ifBlock(enm, function parseEnum_block(token3) {
          switch (token3) {
            case "option":
              parseOption(enm, token3);
              skip(";");
              break;
            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;
            default:
              parseEnumValue(enm, token3);
          }
        });
        parent.add(enm);
      }
      function parseEnumValue(parent, token2) {
        if (!nameRe.test(token2))
          throw illegal(token2, "name");
        skip("=");
        var value = parseId(next(), true), dummy = {
          options: void 0
        };
        dummy.setOption = function(name, value2) {
          if (this.options === void 0)
            this.options = {};
          this.options[name] = value2;
        };
        ifBlock(dummy, function parseEnumValue_block(token3) {
          if (token3 === "option") {
            parseOption(dummy, token3);
            skip(";");
          } else
            throw illegal(token3);
        }, function parseEnumValue_line() {
          parseInlineOptions(dummy);
        });
        parent.add(token2, value, dummy.comment, dummy.options);
      }
      function parseOption(parent, token2) {
        var isCustom = skip("(", true);
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2;
        var option = name;
        var propName;
        if (isCustom) {
          skip(")");
          name = "(" + name + ")";
          option = name;
          token2 = peek();
          if (fqTypeRefRe.test(token2)) {
            propName = token2.slice(1);
            name += token2;
            next();
          }
        }
        skip("=");
        var optionValue = parseOptionValue(parent, name);
        setParsedOption(parent, option, optionValue, propName);
      }
      function parseOptionValue(parent, name) {
        if (skip("{", true)) {
          var objectResult = {};
          while (!skip("}", true)) {
            if (!nameRe.test(token = next())) {
              throw illegal(token, "name");
            }
            if (token === null) {
              throw illegal(token, "end of input");
            }
            var value;
            var propName = token;
            skip(":", true);
            if (peek() === "{")
              value = parseOptionValue(parent, name + "." + token);
            else if (peek() === "[") {
              value = [];
              var lastValue;
              if (skip("[", true)) {
                do {
                  lastValue = readValue(true);
                  value.push(lastValue);
                } while (skip(",", true));
                skip("]");
                if (typeof lastValue !== "undefined") {
                  setOption(parent, name + "." + token, lastValue);
                }
              }
            } else {
              value = readValue(true);
              setOption(parent, name + "." + token, value);
            }
            var prevValue = objectResult[propName];
            if (prevValue)
              value = [].concat(prevValue).concat(value);
            objectResult[propName] = value;
            skip(",", true);
            skip(";", true);
          }
          return objectResult;
        }
        var simpleValue = readValue(true);
        setOption(parent, name, simpleValue);
        return simpleValue;
      }
      function setOption(parent, name, value) {
        if (parent.setOption)
          parent.setOption(name, value);
      }
      function setParsedOption(parent, name, value, propName) {
        if (parent.setParsedOption)
          parent.setParsedOption(name, value, propName);
      }
      function parseInlineOptions(parent) {
        if (skip("[", true)) {
          do {
            parseOption(parent, "option");
          } while (skip(",", true));
          skip("]");
        }
        return parent;
      }
      function parseService(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "service name");
        var service = new Service(token2);
        ifBlock(service, function parseService_block(token3) {
          if (parseCommon(service, token3))
            return;
          if (token3 === "rpc")
            parseMethod(service, token3);
          else
            throw illegal(token3);
        });
        parent.add(service);
      }
      function parseMethod(parent, token2) {
        var commentText = cmnt();
        var type = token2;
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2, requestType, requestStream, responseType, responseStream;
        skip("(");
        if (skip("stream", true))
          requestStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        requestType = token2;
        skip(")");
        skip("returns");
        skip("(");
        if (skip("stream", true))
          responseStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        responseType = token2;
        skip(")");
        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        method.comment = commentText;
        ifBlock(method, function parseMethod_block(token3) {
          if (token3 === "option") {
            parseOption(method, token3);
            skip(";");
          } else
            throw illegal(token3);
        });
        parent.add(method);
      }
      function parseExtension(parent, token2) {
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "reference");
        var reference = token2;
        ifBlock(null, function parseExtension_block(token3) {
          switch (token3) {
            case "required":
            case "repeated":
              parseField(parent, token3, reference);
              break;
            case "optional":
              if (isProto3) {
                parseField(parent, "proto3_optional", reference);
              } else {
                parseField(parent, "optional", reference);
              }
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(parent, "optional", reference);
              break;
          }
        });
      }
      var token;
      while ((token = next()) !== null) {
        switch (token) {
          case "package":
            if (!head)
              throw illegal(token);
            parsePackage();
            break;
          case "import":
            if (!head)
              throw illegal(token);
            parseImport();
            break;
          case "syntax":
            if (!head)
              throw illegal(token);
            parseSyntax();
            break;
          case "option":
            parseOption(ptr, token);
            skip(";");
            break;
          default:
            if (parseCommon(ptr, token)) {
              head = false;
              continue;
            }
            throw illegal(token);
        }
      }
      parse.filename = null;
      return {
        "package": pkg,
        "imports": imports,
        weakImports,
        syntax,
        root
      };
    }
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/common.js
var require_common3 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/common.js"(exports2, module2) {
    "use strict";
    module2.exports = common;
    var commonRe = /\/|\./;
    function common(name, json) {
      if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
      }
      common[name] = json;
    }
    common("any", {
      /**
       * Properties of a google.protobuf.Any message.
       * @interface IAny
       * @type {Object}
       * @property {string} [typeUrl]
       * @property {Uint8Array} [bytes]
       * @memberof common
       */
      Any: {
        fields: {
          type_url: {
            type: "string",
            id: 1
          },
          value: {
            type: "bytes",
            id: 2
          }
        }
      }
    });
    var timeType;
    common("duration", {
      /**
       * Properties of a google.protobuf.Duration message.
       * @interface IDuration
       * @type {Object}
       * @property {number|Long} [seconds]
       * @property {number} [nanos]
       * @memberof common
       */
      Duration: timeType = {
        fields: {
          seconds: {
            type: "int64",
            id: 1
          },
          nanos: {
            type: "int32",
            id: 2
          }
        }
      }
    });
    common("timestamp", {
      /**
       * Properties of a google.protobuf.Timestamp message.
       * @interface ITimestamp
       * @type {Object}
       * @property {number|Long} [seconds]
       * @property {number} [nanos]
       * @memberof common
       */
      Timestamp: timeType
    });
    common("empty", {
      /**
       * Properties of a google.protobuf.Empty message.
       * @interface IEmpty
       * @memberof common
       */
      Empty: {
        fields: {}
      }
    });
    common("struct", {
      /**
       * Properties of a google.protobuf.Struct message.
       * @interface IStruct
       * @type {Object}
       * @property {Object.<string,IValue>} [fields]
       * @memberof common
       */
      Struct: {
        fields: {
          fields: {
            keyType: "string",
            type: "Value",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.Value message.
       * @interface IValue
       * @type {Object}
       * @property {string} [kind]
       * @property {0} [nullValue]
       * @property {number} [numberValue]
       * @property {string} [stringValue]
       * @property {boolean} [boolValue]
       * @property {IStruct} [structValue]
       * @property {IListValue} [listValue]
       * @memberof common
       */
      Value: {
        oneofs: {
          kind: {
            oneof: [
              "nullValue",
              "numberValue",
              "stringValue",
              "boolValue",
              "structValue",
              "listValue"
            ]
          }
        },
        fields: {
          nullValue: {
            type: "NullValue",
            id: 1
          },
          numberValue: {
            type: "double",
            id: 2
          },
          stringValue: {
            type: "string",
            id: 3
          },
          boolValue: {
            type: "bool",
            id: 4
          },
          structValue: {
            type: "Struct",
            id: 5
          },
          listValue: {
            type: "ListValue",
            id: 6
          }
        }
      },
      NullValue: {
        values: {
          NULL_VALUE: 0
        }
      },
      /**
       * Properties of a google.protobuf.ListValue message.
       * @interface IListValue
       * @type {Object}
       * @property {Array.<IValue>} [values]
       * @memberof common
       */
      ListValue: {
        fields: {
          values: {
            rule: "repeated",
            type: "Value",
            id: 1
          }
        }
      }
    });
    common("wrappers", {
      /**
       * Properties of a google.protobuf.DoubleValue message.
       * @interface IDoubleValue
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      DoubleValue: {
        fields: {
          value: {
            type: "double",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.FloatValue message.
       * @interface IFloatValue
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      FloatValue: {
        fields: {
          value: {
            type: "float",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.Int64Value message.
       * @interface IInt64Value
       * @type {Object}
       * @property {number|Long} [value]
       * @memberof common
       */
      Int64Value: {
        fields: {
          value: {
            type: "int64",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.UInt64Value message.
       * @interface IUInt64Value
       * @type {Object}
       * @property {number|Long} [value]
       * @memberof common
       */
      UInt64Value: {
        fields: {
          value: {
            type: "uint64",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.Int32Value message.
       * @interface IInt32Value
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      Int32Value: {
        fields: {
          value: {
            type: "int32",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.UInt32Value message.
       * @interface IUInt32Value
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      UInt32Value: {
        fields: {
          value: {
            type: "uint32",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.BoolValue message.
       * @interface IBoolValue
       * @type {Object}
       * @property {boolean} [value]
       * @memberof common
       */
      BoolValue: {
        fields: {
          value: {
            type: "bool",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.StringValue message.
       * @interface IStringValue
       * @type {Object}
       * @property {string} [value]
       * @memberof common
       */
      StringValue: {
        fields: {
          value: {
            type: "string",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.BytesValue message.
       * @interface IBytesValue
       * @type {Object}
       * @property {Uint8Array} [value]
       * @memberof common
       */
      BytesValue: {
        fields: {
          value: {
            type: "bytes",
            id: 1
          }
        }
      }
    });
    common("field_mask", {
      /**
       * Properties of a google.protobuf.FieldMask message.
       * @interface IDoubleValue
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      FieldMask: {
        fields: {
          paths: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      }
    });
    common.get = function get(file) {
      return common[file] || null;
    };
  }
});

// node_modules/google-gax/node_modules/protobufjs/src/index.js
var require_src11 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/src/index.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_light();
    protobuf.build = "full";
    protobuf.tokenize = require_tokenize();
    protobuf.parse = require_parse3();
    protobuf.common = require_common3();
    protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
  }
});

// node_modules/google-gax/node_modules/protobufjs/index.js
var require_protobufjs = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_src11();
  }
});

// node_modules/google-gax/build/src/featureDetection.js
var require_featureDetection = __commonJS({
  "node_modules/google-gax/build/src/featureDetection.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasAbortController = exports2.isNodeJS = exports2.hasWindowFetch = void 0;
    var features = {
      windowFetch: typeof window !== "undefined" && (window === null || window === void 0 ? void 0 : window.fetch) && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function",
      // eslint-disable-next-line node/no-unsupported-features/node-builtins
      textEncoder: typeof TextEncoder !== "undefined",
      // eslint-disable-next-line node/no-unsupported-features/node-builtins
      textDecoder: typeof TextDecoder !== "undefined",
      nodeJS: typeof process !== "undefined" && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node),
      abortController: typeof AbortController !== "undefined"
    };
    function hasWindowFetch() {
      return features.windowFetch;
    }
    exports2.hasWindowFetch = hasWindowFetch;
    function isNodeJS() {
      return features.nodeJS;
    }
    exports2.isNodeJS = isNodeJS;
    function hasAbortController() {
      return features.abortController;
    }
    exports2.hasAbortController = hasAbortController;
  }
});

// node_modules/google-gax/build/src/warnings.js
var require_warnings = __commonJS({
  "node_modules/google-gax/build/src/warnings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.warn = void 0;
    var featureDetection_1 = require_featureDetection();
    var emittedWarnings = /* @__PURE__ */ new Set();
    function warn(code, message, warnType) {
      if (emittedWarnings.has(code)) {
        return;
      }
      emittedWarnings.add(code);
      if (!(0, featureDetection_1.isNodeJS)()) {
        console.warn(message);
      } else if (typeof warnType !== "undefined") {
        process.emitWarning(message, {
          type: warnType
        });
      } else {
        process.emitWarning(message);
      }
    }
    exports2.warn = warn;
  }
});

// node_modules/google-gax/build/src/util.js
var require_util4 = __commonJS({
  "node_modules/google-gax/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toLowerCamelCase = exports2.toCamelCase = exports2.camelToSnakeCase = void 0;
    function words(str, normalize = false) {
      if (normalize) {
        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str2) => {
          return str2[0] + str2.slice(1, str2.length - 1).toLowerCase() + str2[str2.length - 1];
        });
      }
      return str.split(/(?=[A-Z])|[^A-Za-z0-9.]+/).filter((w) => w.length > 0).map((w, index) => index === 0 ? w : w.toLowerCase());
    }
    function lowercase(str) {
      if (str.length === 0) {
        return str;
      }
      return str[0].toLowerCase() + str.slice(1);
    }
    function camelToSnakeCase(str) {
      const wordsList = words(str);
      if (wordsList.length === 0) {
        return str;
      }
      const result = [wordsList[0]];
      result.push(...wordsList.slice(1).map(lowercase));
      return result.join("_");
    }
    exports2.camelToSnakeCase = camelToSnakeCase;
    function capitalize(str) {
      if (str.length === 0) {
        return str;
      }
      return str[0].toUpperCase() + str.slice(1);
    }
    function toCamelCase(str) {
      const wordsList = words(
        str,
        /*normalize:*/
        true
      );
      if (wordsList.length === 0) {
        return str;
      }
      const result = [wordsList[0]];
      result.push(...wordsList.slice(1).map((w) => {
        if (w.match(/^\d+$/)) {
          return "_" + w;
        }
        return capitalize(w);
      }));
      return result.join("");
    }
    exports2.toCamelCase = toCamelCase;
    function toLowerCamelCase(str) {
      const camelCase = toCamelCase(str);
      if (camelCase.length === 0) {
        return camelCase;
      }
      return camelCase[0].toLowerCase() + camelCase.slice(1);
    }
    exports2.toLowerCamelCase = toLowerCamelCase;
  }
});

// node_modules/google-gax/build/src/gax.js
var require_gax = __commonJS({
  "node_modules/google-gax/build/src/gax.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createByteLengthFunction = exports2.constructSettings = exports2.createBundleOptions = exports2.createMaxRetriesBackoffSettings = exports2.createDefaultBackoffSettings = exports2.createBackoffSettings = exports2.createRetryOptions = exports2.CallSettings = exports2.RetryOptions = void 0;
    var warnings_1 = require_warnings();
    var util_1 = require_util4();
    var RetryOptions = class {
      constructor(retryCodes, backoffSettings) {
        this.retryCodes = retryCodes;
        this.backoffSettings = backoffSettings;
      }
    };
    exports2.RetryOptions = RetryOptions;
    var CallSettings = class {
      /**
       * @param {Object} settings - An object containing parameters of this settings.
       * @param {number} settings.timeout - The client-side timeout for API calls.
       *   This parameter is ignored for retrying calls.
       * @param {RetryOptions} settings.retry - The configuration for retrying upon
       *   transient error. If set to null, this call will not retry.
       * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,
       *   this attrbute has no meaning. Otherwise, determines whether a page
       * streamed response should make the page structure transparent to the user by
       *   flattening the repeated field in the returned generator.
       * @param {number} settings.pageToken - If there is no `pageDescriptor`,
       *   this attribute has no meaning. Otherwise, determines the page token used
       * in the page streaming request.
       * @param {Object} settings.otherArgs - Additional arguments to be passed to
       *   the API calls.
       *
       * @constructor
       */
      constructor(settings) {
        var _a;
        settings = settings || {};
        this.timeout = settings.timeout || 30 * 1e3;
        this.retry = settings.retry;
        this.autoPaginate = "autoPaginate" in settings ? settings.autoPaginate : true;
        this.maxResults = settings.maxResults;
        this.otherArgs = settings.otherArgs || {};
        this.bundleOptions = settings.bundleOptions;
        this.isBundling = "isBundling" in settings ? settings.isBundling : true;
        this.longrunning = "longrunning" in settings ? settings.longrunning : void 0;
        this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : void 0;
        this.retryRequestOptions = settings.retryRequestOptions;
      }
      /**
       * Returns a new CallSettings merged from this and a CallOptions object.
       *
       * @param {CallOptions} options - an instance whose values override
       *   those in this object. If null, ``merge`` returns a copy of this
       *   object
       * @return {CallSettings} The merged CallSettings instance.
       */
      merge(options) {
        if (!options) {
          return new CallSettings(this);
        }
        let timeout = this.timeout;
        let retry = this.retry;
        let autoPaginate = this.autoPaginate;
        let maxResults = this.maxResults;
        let otherArgs = this.otherArgs;
        let isBundling = this.isBundling;
        let longrunning = this.longrunning;
        let apiName = this.apiName;
        let retryRequestOptions = this.retryRequestOptions;
        if (retry !== void 0 && retry !== null && retry.retryCodes !== null && retry.retryCodes.length > 0) {
          retry.backoffSettings.initialRpcTimeoutMillis = timeout;
          retry.backoffSettings.maxRpcTimeoutMillis = timeout;
          retry.backoffSettings.totalTimeoutMillis = timeout;
        }
        if ("timeout" in options) {
          timeout = options.timeout;
          if (retry !== void 0 && retry !== null && retry.retryCodes.length > 0) {
            retry.backoffSettings.initialRpcTimeoutMillis = timeout;
            retry.backoffSettings.maxRpcTimeoutMillis = timeout;
            retry.backoffSettings.totalTimeoutMillis = timeout;
          }
        }
        if ("retry" in options) {
          retry = mergeRetryOptions(retry || {}, options.retry);
        }
        if ("autoPaginate" in options && !options.autoPaginate) {
          autoPaginate = false;
        }
        if ("maxResults" in options) {
          maxResults = options.maxResults;
        }
        if ("otherArgs" in options) {
          otherArgs = {};
          for (const key in this.otherArgs) {
            otherArgs[key] = this.otherArgs[key];
          }
          for (const optionsKey in options.otherArgs) {
            otherArgs[optionsKey] = options.otherArgs[optionsKey];
          }
        }
        if ("isBundling" in options) {
          isBundling = options.isBundling;
        }
        if ("maxRetries" in options) {
          retry.backoffSettings.maxRetries = options.maxRetries;
          delete retry.backoffSettings.totalTimeoutMillis;
        }
        if ("longrunning" in options) {
          longrunning = options.longrunning;
        }
        if ("apiName" in options) {
          apiName = options.apiName;
        }
        if ("retryRequestOptions" in options) {
          retryRequestOptions = options.retryRequestOptions;
        }
        return new CallSettings({
          timeout,
          retry,
          bundleOptions: this.bundleOptions,
          longrunning,
          autoPaginate,
          maxResults,
          otherArgs,
          isBundling,
          apiName,
          retryRequestOptions
        });
      }
    };
    exports2.CallSettings = CallSettings;
    function createRetryOptions(retryCodes, backoffSettings) {
      return {
        retryCodes,
        backoffSettings
      };
    }
    exports2.createRetryOptions = createRetryOptions;
    function createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {
      return {
        initialRetryDelayMillis,
        retryDelayMultiplier,
        maxRetryDelayMillis,
        initialRpcTimeoutMillis,
        rpcTimeoutMultiplier,
        maxRpcTimeoutMillis,
        totalTimeoutMillis
      };
    }
    exports2.createBackoffSettings = createBackoffSettings;
    function createDefaultBackoffSettings() {
      return createBackoffSettings(100, 1.3, 6e4, null, null, null, null);
    }
    exports2.createDefaultBackoffSettings = createDefaultBackoffSettings;
    function createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {
      return {
        initialRetryDelayMillis,
        retryDelayMultiplier,
        maxRetryDelayMillis,
        initialRpcTimeoutMillis,
        rpcTimeoutMultiplier,
        maxRpcTimeoutMillis,
        maxRetries
      };
    }
    exports2.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;
    function createBundleOptions(options) {
      const params = [
        "element_count_threshold",
        "element_count_limit",
        "request_byte_threshold",
        "request_byte_limit",
        "delay_threshold_millis"
      ];
      params.forEach((param) => {
        if (param in options && typeof options[param] !== "number") {
          throw new Error(`${param} should be a number`);
        }
      });
      const elementCountThreshold = options.element_count_threshold || 0;
      const elementCountLimit = options.element_count_limit || 0;
      const requestByteThreshold = options.request_byte_threshold || 0;
      const requestByteLimit = options.request_byte_limit || 0;
      const delayThreshold = options.delay_threshold_millis || 0;
      if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {
        throw new Error("one threshold should be > 0");
      }
      return {
        elementCountThreshold,
        elementCountLimit,
        requestByteThreshold,
        requestByteLimit,
        delayThreshold
      };
    }
    exports2.createBundleOptions = createBundleOptions;
    function constructRetry(methodConfig, retryCodes, retryParams, retryNames) {
      if (!methodConfig) {
        return null;
      }
      let codes = null;
      if (retryCodes && "retry_codes_name" in methodConfig) {
        const retryCodesName = methodConfig["retry_codes_name"];
        codes = (retryCodes[retryCodesName] || []).map((name) => {
          return Number(retryNames[name]);
        });
      }
      let backoffSettings = null;
      if (retryParams && "retry_params_name" in methodConfig) {
        const params = retryParams[methodConfig.retry_params_name];
        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);
      }
      return createRetryOptions(codes, backoffSettings);
    }
    function mergeRetryOptions(retry, overrides) {
      if (!overrides) {
        return null;
      }
      if (!overrides.retryCodes && !overrides.backoffSettings) {
        return retry;
      }
      const codes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;
      const backoffSettings = overrides.backoffSettings ? overrides.backoffSettings : retry.backoffSettings;
      return createRetryOptions(codes, backoffSettings);
    }
    function constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {
      otherArgs = otherArgs || {};
      const defaults = {};
      const serviceConfig = (clientConfig.interfaces || {})[serviceName];
      if (!serviceConfig) {
        return null;
      }
      const overrides = (configOverrides.interfaces || {})[serviceName] || {};
      const methods = serviceConfig.methods;
      const overridingMethods = overrides.methods || {};
      for (const methodName in methods) {
        const methodConfig = methods[methodName];
        const jsName = (0, util_1.toLowerCamelCase)(methodName);
        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);
        let bundlingConfig = methodConfig.bundling;
        let timeout = methodConfig.timeout_millis;
        if (methodName in overridingMethods) {
          const overridingMethod = overridingMethods[methodName];
          if (overridingMethod) {
            if ("bundling" in overridingMethod) {
              bundlingConfig = overridingMethod.bundling;
            }
            if ("timeout_millis" in overridingMethod) {
              timeout = overridingMethod.timeout_millis;
            }
          }
          retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));
        }
        const apiName = serviceName;
        defaults[jsName] = new CallSettings({
          timeout,
          retry,
          bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,
          otherArgs,
          apiName
        });
      }
      return defaults;
    }
    exports2.constructSettings = constructSettings;
    function createByteLengthFunction(message) {
      return function getByteLength(obj) {
        try {
          return message.encode(obj).finish().length;
        } catch (err) {
          const stringified = JSON.stringify(obj);
          (0, warnings_1.warn)("error_encoding_protobufjs_object", `Cannot encode protobuf.js object: ${stringified}: ${err}`);
          return stringified.length;
        }
      };
    }
    exports2.createByteLengthFunction = createByteLengthFunction;
  }
});

// node_modules/google-gax/build/src/routingHeader.js
var require_routingHeader = __commonJS({
  "node_modules/google-gax/build/src/routingHeader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromParams = void 0;
    var querystring = require_querystring();
    function fromParams(params) {
      return querystring.stringify(params);
    }
    exports2.fromParams = fromParams;
  }
});

// node_modules/google-gax/build/src/status.js
var require_status = __commonJS({
  "node_modules/google-gax/build/src/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rpcCodeFromHttpStatusCode = exports2.HttpCodeToRpcCodeMap = exports2.Status = void 0;
    var Status;
    (function(Status2) {
      Status2[Status2["OK"] = 0] = "OK";
      Status2[Status2["CANCELLED"] = 1] = "CANCELLED";
      Status2[Status2["UNKNOWN"] = 2] = "UNKNOWN";
      Status2[Status2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      Status2[Status2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      Status2[Status2["NOT_FOUND"] = 5] = "NOT_FOUND";
      Status2[Status2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
      Status2[Status2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
      Status2[Status2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      Status2[Status2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
      Status2[Status2["ABORTED"] = 10] = "ABORTED";
      Status2[Status2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
      Status2[Status2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      Status2[Status2["INTERNAL"] = 13] = "INTERNAL";
      Status2[Status2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      Status2[Status2["DATA_LOSS"] = 15] = "DATA_LOSS";
      Status2[Status2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(Status || (exports2.Status = Status = {}));
    exports2.HttpCodeToRpcCodeMap = /* @__PURE__ */ new Map([
      [400, Status.INVALID_ARGUMENT],
      [401, Status.UNAUTHENTICATED],
      [403, Status.PERMISSION_DENIED],
      [404, Status.NOT_FOUND],
      [409, Status.ABORTED],
      [416, Status.OUT_OF_RANGE],
      [429, Status.RESOURCE_EXHAUSTED],
      [499, Status.CANCELLED],
      [501, Status.UNIMPLEMENTED],
      [503, Status.UNAVAILABLE],
      [504, Status.DEADLINE_EXCEEDED]
    ]);
    function rpcCodeFromHttpStatusCode(httpStatusCode) {
      if (exports2.HttpCodeToRpcCodeMap.has(httpStatusCode)) {
        return exports2.HttpCodeToRpcCodeMap.get(httpStatusCode);
      }
      if (httpStatusCode >= 200 && httpStatusCode < 300) {
        return Status.OK;
      }
      if (httpStatusCode >= 400 && httpStatusCode < 500) {
        return Status.FAILED_PRECONDITION;
      }
      if (httpStatusCode >= 500 && httpStatusCode < 600) {
        return Status.INTERNAL;
      }
      return Status.UNKNOWN;
    }
    exports2.rpcCodeFromHttpStatusCode = rpcCodeFromHttpStatusCode;
  }
});

// node_modules/proto3-json-serializer/build/src/bytes.js
var require_bytes = __commonJS({
  "node_modules/proto3-json-serializer/build/src/bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bytesFromProto3JSON = exports2.bytesToProto3JSON = void 0;
    function bytesToProto3JSON(obj) {
      if (Buffer.isBuffer(obj)) {
        return obj.toString("base64");
      } else {
        return Buffer.from(obj.buffer, 0, obj.byteLength).toString("base64");
      }
    }
    exports2.bytesToProto3JSON = bytesToProto3JSON;
    function bytesFromProto3JSON(json) {
      return Buffer.from(json, "base64");
    }
    exports2.bytesFromProto3JSON = bytesFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/enum.js
var require_enum2 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/enum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEnumValueToNumber = exports2.resolveEnumValueToString = void 0;
    function resolveEnumValueToString(enumType, enumValue) {
      if (typeof enumValue === "number") {
        const value = enumType.valuesById[enumValue];
        if (typeof value === "undefined") {
          return enumValue;
        }
        return value;
      }
      if (typeof enumValue === "string") {
        return enumValue;
      }
      throw new Error("resolveEnumValueToString: enum value must be a string or a number");
    }
    exports2.resolveEnumValueToString = resolveEnumValueToString;
    function resolveEnumValueToNumber(enumType, enumValue) {
      if (typeof enumValue === "number") {
        return enumValue;
      }
      if (typeof enumValue === "string") {
        const num = enumType.values[enumValue];
        if (typeof num === "undefined") {
          return enumValue;
        }
        return num;
      }
      throw new Error("resolveEnumValueToNumber: enum value must be a string or a number");
    }
    exports2.resolveEnumValueToNumber = resolveEnumValueToNumber;
  }
});

// node_modules/proto3-json-serializer/build/src/util.js
var require_util5 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assert = exports2.wrapperTypes = exports2.getFullyQualifiedTypeName = void 0;
    function getFullyQualifiedTypeName(type) {
      let fullyQualifiedTypeName = "";
      while (type.parent) {
        fullyQualifiedTypeName = `.${type.name}${fullyQualifiedTypeName}`;
        type = type.parent;
      }
      return fullyQualifiedTypeName;
    }
    exports2.getFullyQualifiedTypeName = getFullyQualifiedTypeName;
    exports2.wrapperTypes = /* @__PURE__ */ new Set([
      ".google.protobuf.DoubleValue",
      ".google.protobuf.FloatValue",
      ".google.protobuf.Int64Value",
      ".google.protobuf.UInt64Value",
      ".google.protobuf.Int32Value",
      ".google.protobuf.UInt32Value",
      ".google.protobuf.BoolValue",
      ".google.protobuf.StringValue",
      ".google.protobuf.BytesValue"
    ]);
    function assert(assertion, message) {
      if (!assertion) {
        throw new Error(message);
      }
    }
    exports2.assert = assert;
  }
});

// node_modules/proto3-json-serializer/build/src/value.js
var require_value = __commonJS({
  "node_modules/proto3-json-serializer/build/src/value.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufValueFromProto3JSON = exports2.googleProtobufListValueFromProto3JSON = exports2.googleProtobufStructFromProto3JSON = exports2.googleProtobufValueToProto3JSON = exports2.googleProtobufListValueToProto3JSON = exports2.googleProtobufStructToProto3JSON = void 0;
    var util_1 = require_util5();
    function googleProtobufStructToProto3JSON(obj) {
      const result = {};
      const fields = obj.fields;
      for (const [key, value] of Object.entries(fields)) {
        result[key] = googleProtobufValueToProto3JSON(value);
      }
      return result;
    }
    exports2.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;
    function googleProtobufListValueToProto3JSON(obj) {
      (0, util_1.assert)(Array.isArray(obj.values), "ListValue internal representation must contain array of values");
      return obj.values.map(googleProtobufValueToProto3JSON);
    }
    exports2.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;
    function googleProtobufValueToProto3JSON(obj) {
      if (Object.prototype.hasOwnProperty.call(obj, "nullValue")) {
        return null;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "numberValue") && typeof obj.numberValue === "number") {
        if (!Number.isFinite(obj.numberValue)) {
          return obj.numberValue.toString();
        }
        return obj.numberValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "stringValue") && typeof obj.stringValue === "string") {
        return obj.stringValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "boolValue") && typeof obj.boolValue === "boolean") {
        return obj.boolValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "structValue") && typeof obj.structValue === "object") {
        return googleProtobufStructToProto3JSON(obj.structValue);
      }
      if (Object.prototype.hasOwnProperty.call(obj, "listValue") && typeof obj === "object" && typeof obj.listValue === "object") {
        return googleProtobufListValueToProto3JSON(obj.listValue);
      }
      return null;
    }
    exports2.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;
    function googleProtobufStructFromProto3JSON(json) {
      const fields = {};
      for (const [key, value] of Object.entries(json)) {
        fields[key] = googleProtobufValueFromProto3JSON(value);
      }
      return { fields };
    }
    exports2.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;
    function googleProtobufListValueFromProto3JSON(json) {
      return {
        values: json.map((element) => googleProtobufValueFromProto3JSON(element))
      };
    }
    exports2.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;
    function googleProtobufValueFromProto3JSON(json) {
      if (json === null) {
        return { nullValue: "NULL_VALUE" };
      }
      if (typeof json === "number") {
        return { numberValue: json };
      }
      if (typeof json === "string") {
        return { stringValue: json };
      }
      if (typeof json === "boolean") {
        return { boolValue: json };
      }
      if (Array.isArray(json)) {
        return {
          listValue: googleProtobufListValueFromProto3JSON(json)
        };
      }
      if (typeof json === "object") {
        return {
          structValue: googleProtobufStructFromProto3JSON(json)
        };
      }
      throw new Error(`googleProtobufValueFromProto3JSON: incorrect parameter type: ${typeof json}`);
    }
    exports2.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/duration.js
var require_duration = __commonJS({
  "node_modules/proto3-json-serializer/build/src/duration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufDurationFromProto3JSON = exports2.googleProtobufDurationToProto3JSON = void 0;
    function googleProtobufDurationToProto3JSON(obj) {
      let durationSeconds = obj.seconds.toString();
      if (typeof obj.nanos === "number" && obj.nanos > 0) {
        const nanosStr = obj.nanos.toString().padStart(9, "0").replace(/^((?:\d\d\d)+?)(?:0*)$/, "$1");
        durationSeconds += "." + nanosStr;
      }
      durationSeconds += "s";
      return durationSeconds;
    }
    exports2.googleProtobufDurationToProto3JSON = googleProtobufDurationToProto3JSON;
    function googleProtobufDurationFromProto3JSON(json) {
      const match = json.match(/^(\d*)(?:\.(\d*))?s$/);
      if (!match) {
        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);
      }
      let seconds = 0;
      let nanos = 0;
      if (typeof match[1] === "string" && match[1].length > 0) {
        seconds = parseInt(match[1]);
      }
      if (typeof match[2] === "string" && match[2].length > 0) {
        nanos = parseInt(match[2].padEnd(9, "0"));
      }
      const result = {};
      if (seconds !== 0) {
        result.seconds = seconds;
      }
      if (nanos !== 0) {
        result.nanos = nanos;
      }
      return result;
    }
    exports2.googleProtobufDurationFromProto3JSON = googleProtobufDurationFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/proto3-json-serializer/build/src/timestamp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufTimestampFromProto3JSON = exports2.googleProtobufTimestampToProto3JSON = void 0;
    function googleProtobufTimestampToProto3JSON(obj) {
      var _a;
      const durationSeconds = obj.seconds;
      const date = new Date(durationSeconds * 1e3).toISOString();
      let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, "0");
      while (nanos && nanos.length > 3 && nanos.endsWith("000")) {
        nanos = nanos.slice(0, -3);
      }
      return date.replace(/(?:\.\d{0,9})/, "." + nanos);
    }
    exports2.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;
    function googleProtobufTimestampFromProto3JSON(json) {
      const match = json.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?/);
      if (!match) {
        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);
      }
      const date = new Date(json);
      const millisecondsSinceEpoch = date.getTime();
      const seconds = Math.floor(millisecondsSinceEpoch / 1e3);
      let nanos = 0;
      const secondsFromDate = json.split(".")[1];
      if (secondsFromDate) {
        nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, "0"));
      }
      const result = {};
      if (seconds !== 0) {
        result.seconds = seconds;
      }
      if (nanos !== 0) {
        result.nanos = nanos;
      }
      return result;
    }
    exports2.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/wrappers.js
var require_wrappers2 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/wrappers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wrapperFromProto3JSON = exports2.wrapperToProto3JSON = void 0;
    var bytes_1 = require_bytes();
    var util_1 = require_util5();
    function wrapperToProto3JSON(obj) {
      if (!Object.prototype.hasOwnProperty.call(obj, "value")) {
        return null;
      }
      if (Buffer.isBuffer(obj.value) || obj.value instanceof Uint8Array) {
        return (0, bytes_1.bytesToProto3JSON)(obj.value);
      }
      if (typeof obj.value === "object") {
        (0, util_1.assert)(obj.value.constructor.name === "Long", `wrapperToProto3JSON: expected to see a number, a string, a boolean, or a Long, but got ${obj.value}`);
        return obj.value.toString();
      }
      if (typeof obj.value === "number" && !Number.isFinite(obj.value)) {
        return obj.value.toString();
      }
      return obj.value;
    }
    exports2.wrapperToProto3JSON = wrapperToProto3JSON;
    function wrapperFromProto3JSON(typeName, json) {
      if (json === null) {
        return {
          value: null
        };
      }
      if (typeName === ".google.protobuf.BytesValue") {
        if (typeof json !== "string") {
          throw new Error(`numberWrapperFromProto3JSON: expected to get a string for google.protobuf.BytesValue but got ${typeof json}`);
        }
        return {
          value: (0, bytes_1.bytesFromProto3JSON)(json)
        };
      }
      return {
        value: json
      };
    }
    exports2.wrapperFromProto3JSON = wrapperFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/fieldmask.js
var require_fieldmask = __commonJS({
  "node_modules/proto3-json-serializer/build/src/fieldmask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufFieldMaskFromProto3JSON = exports2.googleProtobufFieldMaskToProto3JSON = void 0;
    function googleProtobufFieldMaskToProto3JSON(obj) {
      return obj.paths.join(",");
    }
    exports2.googleProtobufFieldMaskToProto3JSON = googleProtobufFieldMaskToProto3JSON;
    function googleProtobufFieldMaskFromProto3JSON(json) {
      return {
        paths: json.split(",")
      };
    }
    exports2.googleProtobufFieldMaskFromProto3JSON = googleProtobufFieldMaskFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/fromproto3json.js
var require_fromproto3json = __commonJS({
  "node_modules/proto3-json-serializer/build/src/fromproto3json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProto3JSON = exports2.fromProto3JSONToInternalRepresentation = void 0;
    var any_1 = require_any();
    var bytes_1 = require_bytes();
    var enum_1 = require_enum2();
    var value_1 = require_value();
    var util_1 = require_util5();
    var duration_1 = require_duration();
    var timestamp_1 = require_timestamp();
    var wrappers_1 = require_wrappers2();
    var fieldmask_1 = require_fieldmask();
    function fromProto3JSONToInternalRepresentation(type, json) {
      const fullyQualifiedTypeName = typeof type === "string" ? type : (0, util_1.getFullyQualifiedTypeName)(type);
      if (typeof type !== "string" && "values" in type) {
        if (fullyQualifiedTypeName === ".google.protobuf.NullValue") {
          return "NULL_VALUE";
        }
        return (0, enum_1.resolveEnumValueToString)(type, json);
      }
      if (typeof type !== "string") {
        type.resolveAll();
      }
      if (typeof type === "string") {
        return json;
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Value") {
        return (0, value_1.googleProtobufValueFromProto3JSON)(json);
      }
      if (util_1.wrapperTypes.has(fullyQualifiedTypeName)) {
        if (json !== null && typeof json === "object" || Array.isArray(json)) {
          throw new Error(`fromProto3JSONToInternalRepresentation: JSON representation for ${fullyQualifiedTypeName} expects a string, a number, or a boolean, but got ${typeof json}`);
        }
        return (0, wrappers_1.wrapperFromProto3JSON)(fullyQualifiedTypeName, json);
      }
      if (json === null) {
        return null;
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Any") {
        return (0, any_1.googleProtobufAnyFromProto3JSON)(type.root, json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Struct") {
        if (typeof json !== "object") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got ${typeof json}`);
        }
        if (Array.isArray(json)) {
          throw new Error("fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got an array");
        }
        return (0, value_1.googleProtobufStructFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.ListValue") {
        if (!Array.isArray(json)) {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.ListValue must be an array but got ${typeof json}`);
        }
        return (0, value_1.googleProtobufListValueFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Duration") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Duration must be a string but got ${typeof json}`);
        }
        return (0, duration_1.googleProtobufDurationFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Timestamp") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Timestamp must be a string but got ${typeof json}`);
        }
        return (0, timestamp_1.googleProtobufTimestampFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.FieldMask") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.FieldMask must be a string but got ${typeof json}`);
        }
        return (0, fieldmask_1.googleProtobufFieldMaskFromProto3JSON)(json);
      }
      const result = {};
      for (const [key, value] of Object.entries(json)) {
        const field = type.fields[key];
        if (!field) {
          continue;
        }
        const resolvedType = field.resolvedType;
        const fieldType = field.type;
        if (field.repeated) {
          if (value === null) {
            result[key] = [];
          } else {
            if (!Array.isArray(value)) {
              throw new Error(`fromProto3JSONToInternalRepresentation: expected an array for field ${key}`);
            }
            result[key] = value.map((element) => fromProto3JSONToInternalRepresentation(resolvedType || fieldType, element));
          }
        } else if (field.map) {
          const map = {};
          for (const [mapKey, mapValue] of Object.entries(value)) {
            map[mapKey] = fromProto3JSONToInternalRepresentation(resolvedType || fieldType, mapValue);
          }
          result[key] = map;
        } else if (fieldType.match(/^(?:(?:(?:u?int|fixed)(?:32|64))|float|double)$/)) {
          if (typeof value !== "number" && typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "string") {
          if (typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "bool") {
          if (typeof value !== "boolean") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "bytes") {
          if (typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = (0, bytes_1.bytesFromProto3JSON)(value);
        } else {
          (0, util_1.assert)(resolvedType !== null, `Expected to be able to resolve type for field ${field.name}`);
          const deserializedValue = fromProto3JSONToInternalRepresentation(resolvedType, value);
          result[key] = deserializedValue;
        }
      }
      return result;
    }
    exports2.fromProto3JSONToInternalRepresentation = fromProto3JSONToInternalRepresentation;
    function fromProto3JSON(type, json) {
      const internalRepr = fromProto3JSONToInternalRepresentation(type, json);
      if (internalRepr === null) {
        return null;
      }
      (0, util_1.assert)(typeof internalRepr === "object" && !Array.isArray(internalRepr), `fromProto3JSON: expected an object, not ${json}`);
      return type.fromObject(internalRepr);
    }
    exports2.fromProto3JSON = fromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/any.js
var require_any = __commonJS({
  "node_modules/proto3-json-serializer/build/src/any.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufAnyFromProto3JSON = exports2.googleProtobufAnyToProto3JSON = void 0;
    var fromproto3json_1 = require_fromproto3json();
    var toproto3json_1 = require_toproto3json();
    var specialJSON = /* @__PURE__ */ new Set([
      "google.protobuf.Any",
      "google.protobuf.Duration",
      "google.protobuf.FieldMask",
      "google.protobuf.ListValue",
      "google.protobuf.Struct",
      "google.protobuf.Timestamp",
      "google.protobuf.Value"
    ]);
    function googleProtobufAnyToProto3JSON(obj, options) {
      const typeName = obj.type_url.replace(/^.*\//, "");
      let type;
      try {
        type = obj.$type.root.lookupType(typeName);
      } catch (err) {
        throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);
      }
      const valueMessage = type.decode(obj.value);
      const valueProto3JSON = (0, toproto3json_1.toProto3JSON)(valueMessage, options);
      if (specialJSON.has(typeName)) {
        return {
          "@type": obj.type_url,
          value: valueProto3JSON
        };
      }
      valueProto3JSON["@type"] = obj.type_url;
      return valueProto3JSON;
    }
    exports2.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;
    function googleProtobufAnyFromProto3JSON(root, json) {
      if (json === null || typeof json !== "object" || Array.isArray(json)) {
        throw new Error("googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any");
      }
      const typeUrl = json["@type"];
      if (!typeUrl || typeof typeUrl !== "string") {
        throw new Error("googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field");
      }
      const typeName = typeUrl.replace(/^.*\//, "");
      let type;
      try {
        type = root.lookupType(typeName);
      } catch (err) {
        throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);
      }
      let value = json;
      if (specialJSON.has(typeName)) {
        if (!("value" in json)) {
          throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);
        }
        value = json.value;
      }
      const valueMessage = (0, fromproto3json_1.fromProto3JSON)(type, value);
      if (valueMessage === null) {
        return {
          type_url: typeUrl,
          value: null
        };
      }
      const uint8array = type.encode(valueMessage).finish();
      const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);
      const base64 = buffer.toString("base64");
      return {
        type_url: typeUrl,
        value: base64
      };
    }
    exports2.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/toproto3json.js
var require_toproto3json = __commonJS({
  "node_modules/proto3-json-serializer/build/src/toproto3json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toProto3JSON = void 0;
    var any_1 = require_any();
    var bytes_1 = require_bytes();
    var util_1 = require_util5();
    var enum_1 = require_enum2();
    var value_1 = require_value();
    var duration_1 = require_duration();
    var timestamp_1 = require_timestamp();
    var wrappers_1 = require_wrappers2();
    var fieldmask_1 = require_fieldmask();
    var id = (x) => {
      return x;
    };
    function toProto3JSON(obj, options) {
      const objType = obj.$type;
      if (!objType) {
        throw new Error("Cannot serialize object to proto3 JSON since its .$type is unknown. Use Type.fromObject(obj) before calling toProto3JSON.");
      }
      objType.resolveAll();
      const typeName = (0, util_1.getFullyQualifiedTypeName)(objType);
      if (typeName === ".google.protobuf.Any") {
        return (0, any_1.googleProtobufAnyToProto3JSON)(obj, options);
      }
      if (typeName === ".google.protobuf.Value") {
        return (0, value_1.googleProtobufValueToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Struct") {
        return (0, value_1.googleProtobufStructToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.ListValue") {
        return (0, value_1.googleProtobufListValueToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Duration") {
        return (0, duration_1.googleProtobufDurationToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Timestamp") {
        return (0, timestamp_1.googleProtobufTimestampToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.FieldMask") {
        return (0, fieldmask_1.googleProtobufFieldMaskToProto3JSON)(obj);
      }
      if (util_1.wrapperTypes.has(typeName)) {
        return (0, wrappers_1.wrapperToProto3JSON)(obj);
      }
      const result = {};
      for (const [key, value] of Object.entries(obj)) {
        const field = objType.fields[key];
        const fieldResolvedType = field.resolvedType;
        const fieldFullyQualifiedTypeName = fieldResolvedType ? (0, util_1.getFullyQualifiedTypeName)(fieldResolvedType) : null;
        if (value === null) {
          result[key] = null;
          continue;
        }
        if (Array.isArray(value)) {
          if (value.length === 0) {
            continue;
          }
          result[key] = value.map(fieldResolvedType ? (element) => {
            return toProto3JSON(element, options);
          } : id);
          continue;
        }
        if (field.map) {
          const map = {};
          for (const [mapKey, mapValue] of Object.entries(value)) {
            map[mapKey] = fieldResolvedType ? toProto3JSON(mapValue, options) : mapValue;
          }
          result[key] = map;
          continue;
        }
        if (fieldFullyQualifiedTypeName === ".google.protobuf.NullValue") {
          result[key] = null;
          continue;
        }
        if (fieldResolvedType && "values" in fieldResolvedType && value !== null) {
          if (options === null || options === void 0 ? void 0 : options.numericEnums) {
            result[key] = (0, enum_1.resolveEnumValueToNumber)(fieldResolvedType, value);
          } else {
            result[key] = (0, enum_1.resolveEnumValueToString)(fieldResolvedType, value);
          }
          continue;
        }
        if (fieldResolvedType) {
          result[key] = toProto3JSON(value, options);
          continue;
        }
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || value === null) {
          if (typeof value === "number" && !Number.isFinite(value)) {
            result[key] = value.toString();
            continue;
          }
          result[key] = value;
          continue;
        }
        if (Buffer.isBuffer(value) || value instanceof Uint8Array) {
          result[key] = (0, bytes_1.bytesToProto3JSON)(value);
          continue;
        }
        (0, util_1.assert)(value.constructor.name === "Long", `toProto3JSON: don't know how to convert field ${key} with value ${value}`);
        result[key] = value.toString();
        continue;
      }
      return result;
    }
    exports2.toProto3JSON = toProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/index.js
var require_src12 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProto3JSON = exports2.toProto3JSON = void 0;
    var toproto3json_1 = require_toproto3json();
    Object.defineProperty(exports2, "toProto3JSON", { enumerable: true, get: function() {
      return toproto3json_1.toProto3JSON;
    } });
    var fromproto3json_1 = require_fromproto3json();
    Object.defineProperty(exports2, "fromProto3JSON", { enumerable: true, get: function() {
      return fromproto3json_1.fromProto3JSON;
    } });
  }
});

// node_modules/google-gax/build/protos/status.json
var require_status2 = __commonJS({
  "node_modules/google-gax/build/protos/status.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { protobuf: { nested: { Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, Duration: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/errdetails;errdetails", java_multiple_files: true, java_outer_classname: "ErrorDetailsProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } }, RetryInfo: { fields: { retryDelay: { type: "google.protobuf.Duration", id: 1 } } }, DebugInfo: { fields: { stackEntries: { rule: "repeated", type: "string", id: 1 }, detail: { type: "string", id: 2 } } }, QuotaFailure: { fields: { violations: { rule: "repeated", type: "Violation", id: 1 } }, nested: { Violation: { fields: { subject: { type: "string", id: 1 }, description: { type: "string", id: 2 } } } } }, ErrorInfo: { fields: { reason: { type: "string", id: 1 }, domain: { type: "string", id: 2 }, metadata: { keyType: "string", type: "string", id: 3 } } }, PreconditionFailure: { fields: { violations: { rule: "repeated", type: "Violation", id: 1 } }, nested: { Violation: { fields: { type: { type: "string", id: 1 }, subject: { type: "string", id: 2 }, description: { type: "string", id: 3 } } } } }, BadRequest: { fields: { fieldViolations: { rule: "repeated", type: "FieldViolation", id: 1 } }, nested: { FieldViolation: { fields: { field: { type: "string", id: 1 }, description: { type: "string", id: 2 } } } } }, RequestInfo: { fields: { requestId: { type: "string", id: 1 }, servingData: { type: "string", id: 2 } } }, ResourceInfo: { fields: { resourceType: { type: "string", id: 1 }, resourceName: { type: "string", id: 2 }, owner: { type: "string", id: 3 }, description: { type: "string", id: 4 } } }, Help: { fields: { links: { rule: "repeated", type: "Link", id: 1 } }, nested: { Link: { fields: { description: { type: "string", id: 1 }, url: { type: "string", id: 2 } } } } }, LocalizedMessage: { fields: { locale: { type: "string", id: 1 }, message: { type: "string", id: 2 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/googleError.js
var require_googleError = __commonJS({
  "node_modules/google-gax/build/src/googleError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleErrorDecoder = exports2.GoogleError = void 0;
    var status_1 = require_status();
    var protobuf = require_protobufjs();
    var serializer = require_src12();
    var fallback_1 = require_fallback();
    var GoogleError = class extends Error {
      // Parse details field in google.rpc.status wire over gRPC medatadata.
      // Promote google.rpc.ErrorInfo if exist.
      static parseGRPCStatusDetails(err) {
        const decoder = new GoogleErrorDecoder();
        try {
          if (err.metadata && err.metadata.get("grpc-status-details-bin")) {
            const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get("grpc-status-details-bin"));
            if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {
              err.statusDetails = statusDetailsObj.details;
            }
            if (statusDetailsObj && statusDetailsObj.errorInfo) {
              err.reason = statusDetailsObj.errorInfo.reason;
              err.domain = statusDetailsObj.errorInfo.domain;
              err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;
            }
          }
        } catch (decodeErr) {
        }
        return err;
      }
      // Parse http JSON error and promote google.rpc.ErrorInfo if exist.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static parseHttpError(json) {
        if (Array.isArray(json)) {
          json = json.find((obj) => {
            return "error" in obj;
          });
        }
        if (!json["error"]) {
          json["error"] = {};
          Object.keys(json).filter((key) => key !== "error").forEach((key) => {
            json["error"][key] = json[key];
            delete json[key];
          });
        }
        const decoder = new GoogleErrorDecoder();
        const proto3Error = decoder.decodeHTTPError(json["error"]);
        const error = Object.assign(new GoogleError(json["error"]["message"]), proto3Error);
        if (json["error"]["code"]) {
          error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json["error"]["code"]);
        } else {
          delete error.code;
        }
        if (error.details) {
          try {
            const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);
            if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {
              error.statusDetails = statusDetailsObj.details;
            }
            if (statusDetailsObj && statusDetailsObj.errorInfo) {
              error.reason = statusDetailsObj.errorInfo.reason;
              error.domain = statusDetailsObj.errorInfo.domain;
              error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;
            }
          } catch (decodeErr) {
          }
        }
        return error;
      }
    };
    exports2.GoogleError = GoogleError;
    var GoogleErrorDecoder = class {
      constructor() {
        const errorProtoJson = require_status2();
        this.root = protobuf.Root.fromJSON(errorProtoJson);
        this.anyType = this.root.lookupType("google.protobuf.Any");
        this.statusType = this.root.lookupType("google.rpc.Status");
      }
      decodeProtobufAny(anyValue) {
        const match = anyValue.type_url.match(/^type.googleapis.com\/(.*)/);
        if (!match) {
          throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);
        }
        const typeName = match[1];
        const type = this.root.lookupType(typeName);
        if (!type) {
          throw new Error(`Cannot lookup type ${typeName}`);
        }
        return type.decode(anyValue.value);
      }
      // Decodes gRPC-fallback error which is an instance of google.rpc.Status.
      decodeRpcStatus(buffer) {
        const uint8array = new Uint8Array(buffer);
        const status = this.statusType.decode(uint8array);
        const details = [];
        let errorInfo;
        for (const detail of status.details) {
          try {
            const decodedDetail = this.decodeProtobufAny(detail);
            details.push(decodedDetail);
            if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
              errorInfo = decodedDetail;
            }
          } catch (err) {
          }
        }
        const result = {
          code: status.code,
          message: status.message,
          statusDetails: details,
          reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,
          domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,
          errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata
        };
        return result;
      }
      // Construct an Error from a StatusObject.
      // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79
      callErrorFromStatus(status) {
        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;
        return Object.assign(new GoogleError(status.message), status);
      }
      // Decodes gRPC-fallback error which is an instance of google.rpc.Status,
      // and puts it into the object similar to gRPC ServiceError object.
      decodeErrorFromBuffer(buffer) {
        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));
      }
      // Decodes gRPC metadata error details which is an instance of google.rpc.Status.
      decodeGRPCStatusDetails(bufferArr) {
        const details = [];
        let errorInfo;
        bufferArr.forEach((buffer) => {
          const uint8array = new Uint8Array(buffer);
          const rpcStatus = this.statusType.decode(uint8array);
          for (const detail of rpcStatus.details) {
            try {
              const decodedDetail = this.decodeProtobufAny(detail);
              details.push(decodedDetail);
              if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
                errorInfo = decodedDetail;
              }
            } catch (err) {
            }
          }
        });
        const result = {
          details,
          errorInfo
        };
        return result;
      }
      // Decodes http error which is an instance of google.rpc.Status.
      decodeHTTPError(json) {
        const errorMessage = serializer.fromProto3JSON(this.statusType, json);
        if (!errorMessage) {
          throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);
        }
        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);
      }
      // Decodes http error details which is an instance of Array<google.protobuf.Any>.
      decodeHttpStatusDetails(rawDetails) {
        const details = [];
        let errorInfo;
        for (const detail of rawDetails) {
          try {
            const decodedDetail = this.decodeProtobufAny(detail);
            details.push(decodedDetail);
            if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
              errorInfo = decodedDetail;
            }
          } catch (err) {
          }
        }
        return { details, errorInfo };
      }
    };
    exports2.GoogleErrorDecoder = GoogleErrorDecoder;
  }
});

// node_modules/google-gax/build/src/call.js
var require_call = __commonJS({
  "node_modules/google-gax/build/src/call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OngoingCallPromise = exports2.OngoingCall = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var OngoingCall = class {
      /**
       * OngoingCall manages callback, API calls, and cancellation
       * of the API calls.
       * @param {APICallback=} callback
       *   The callback to be called asynchronously when the API call
       *   finishes.
       * @constructor
       * @property {APICallback} callback
       *   The callback function to be called.
       * @private
       */
      constructor(callback) {
        this.callback = callback;
        this.completed = false;
      }
      /**
       * Cancels the ongoing promise.
       */
      cancel() {
        if (this.completed) {
          return;
        }
        this.completed = true;
        if (this.cancelFunc) {
          this.cancelFunc();
        } else {
          const error = new googleError_1.GoogleError("cancelled");
          error.code = status_1.Status.CANCELLED;
          this.callback(error);
        }
      }
      /**
       * Call calls the specified function. Result will be used to fulfill
       * the promise.
       *
       * @param {SimpleCallbackFunction} func
       *   A function for an API call.
       * @param {Object} argument
       *   A request object.
       */
      call(func, argument) {
        if (this.completed) {
          return;
        }
        const canceller = func(argument, (err, response, next, rawResponse) => {
          this.completed = true;
          setImmediate(this.callback, err, response, next, rawResponse);
        });
        if (canceller instanceof Promise) {
          canceller.catch((err) => {
            setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);
          });
        }
        this.cancelFunc = () => canceller.cancel();
      }
    };
    exports2.OngoingCall = OngoingCall;
    var OngoingCallPromise = class extends OngoingCall {
      /**
       * GaxPromise is GRPCCallbackWrapper, but it holds a promise when
       * the API call finishes.
       * @constructor
       * @private
       */
      constructor() {
        let resolveCallback;
        let rejectCallback;
        const callback = (err, response, next, rawResponse) => {
          if (err) {
            if (err.metadata) {
              rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));
            } else {
              rejectCallback(err);
            }
          } else if (response !== void 0) {
            resolveCallback([response, next || null, rawResponse || null]);
          } else {
            throw new googleError_1.GoogleError("Neither error nor response are defined");
          }
        };
        const promise = new Promise((resolve, reject) => {
          resolveCallback = resolve;
          rejectCallback = reject;
        });
        super(callback);
        this.promise = promise;
        this.promise.cancel = () => {
          this.cancel();
        };
      }
    };
    exports2.OngoingCallPromise = OngoingCallPromise;
  }
});

// node_modules/google-gax/build/src/normalCalls/normalApiCaller.js
var require_normalApiCaller = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/normalApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NormalApiCaller = void 0;
    var call_1 = require_call();
    var NormalApiCaller = class {
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, canceller) {
        canceller.call(apiCall, argument);
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.NormalApiCaller = NormalApiCaller;
  }
});

// node_modules/google-gax/build/src/apiCaller.js
var require_apiCaller = __commonJS({
  "node_modules/google-gax/build/src/apiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createAPICaller = void 0;
    var normalApiCaller_1 = require_normalApiCaller();
    function createAPICaller(settings, descriptor) {
      if (!descriptor) {
        return new normalApiCaller_1.NormalApiCaller();
      }
      return descriptor.getApiCaller(settings);
    }
    exports2.createAPICaller = createAPICaller;
  }
});

// node_modules/google-gax/build/src/normalCalls/timeout.js
var require_timeout = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addTimeoutArg = void 0;
    function addTimeoutArg(func, timeout, otherArgs, abTests) {
      return (argument, callback) => {
        const now = /* @__PURE__ */ new Date();
        const options = otherArgs.options || {};
        options.deadline = new Date(now.getTime() + timeout);
        const metadata = otherArgs.metadataBuilder ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {}) : null;
        return func(argument, metadata, options, callback);
      };
    }
    exports2.addTimeoutArg = addTimeoutArg;
  }
});

// node_modules/google-gax/build/src/normalCalls/retries.js
var require_retries = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/retries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retryable = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var timeout_1 = require_timeout();
    function retryable(func, retry, otherArgs, apiName) {
      const delayMult = retry.backoffSettings.retryDelayMultiplier;
      const maxDelay = retry.backoffSettings.maxRetryDelayMillis;
      const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;
      const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;
      let delay = retry.backoffSettings.initialRetryDelayMillis;
      let timeout = retry.backoffSettings.initialRpcTimeoutMillis;
      return (argument, callback) => {
        let canceller;
        let timeoutId;
        let now = /* @__PURE__ */ new Date();
        let deadline;
        if (retry.backoffSettings.totalTimeoutMillis) {
          deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;
        }
        let retries = 0;
        const maxRetries = retry.backoffSettings.maxRetries;
        function repeat() {
          timeoutId = null;
          if (deadline && now.getTime() >= deadline) {
            const error = new googleError_1.GoogleError(`Total timeout of API ${apiName} exceeded ${retry.backoffSettings.totalTimeoutMillis} milliseconds before any response was received.`);
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            callback(error);
            return;
          }
          if (retries && retries >= maxRetries) {
            const error = new googleError_1.GoogleError("Exceeded maximum number of retries before any response was received");
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            callback(error);
            return;
          }
          retries++;
          const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);
          canceller = toCall(argument, (err, response, next, rawResponse) => {
            if (!err) {
              callback(null, response, next, rawResponse);
              return;
            }
            canceller = null;
            if (retry.retryCodes.indexOf(err.code) < 0) {
              err.note = "Exception occurred in retry method that was not classified as transient";
              callback(err);
            } else {
              const toSleep = Math.random() * delay;
              timeoutId = setTimeout(() => {
                now = /* @__PURE__ */ new Date();
                delay = Math.min(delay * delayMult, maxDelay);
                const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;
                const rpcTimeout = maxTimeout ? maxTimeout : 0;
                const newDeadline = deadline ? deadline - now.getTime() : 0;
                timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);
                repeat();
              }, toSleep);
            }
          });
          if (canceller instanceof Promise) {
            canceller.catch((err) => {
              callback(new googleError_1.GoogleError(err));
            });
          }
        }
        if (maxRetries && deadline) {
          const error = new googleError_1.GoogleError("Cannot set both totalTimeoutMillis and maxRetries in backoffSettings.");
          error.code = status_1.Status.INVALID_ARGUMENT;
          callback(error);
        } else {
          repeat();
        }
        return {
          cancel() {
            if (timeoutId) {
              clearTimeout(timeoutId);
            }
            if (canceller) {
              canceller.cancel();
            } else {
              const error = new googleError_1.GoogleError("cancelled");
              error.code = status_1.Status.CANCELLED;
              callback(error);
            }
          }
        };
      };
    }
    exports2.retryable = retryable;
  }
});

// node_modules/google-gax/build/src/createApiCall.js
var require_createApiCall = __commonJS({
  "node_modules/google-gax/build/src/createApiCall.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createApiCall = void 0;
    var apiCaller_1 = require_apiCaller();
    var retries_1 = require_retries();
    var timeout_1 = require_timeout();
    function createApiCall(func, settings, descriptor, _fallback) {
      const funcPromise = typeof func === "function" ? Promise.resolve(func) : func;
      const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);
      return (request, callOptions, callback) => {
        const thisSettings = settings.merge(callOptions);
        let currentApiCaller = apiCaller;
        if (settings.isBundling && !thisSettings.isBundling) {
          currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, void 0);
        }
        const ongoingCall = currentApiCaller.init(callback);
        funcPromise.then((func2) => {
          var _a;
          func2 = currentApiCaller.wrap(func2);
          const streaming = (_a = currentApiCaller.descriptor) === null || _a === void 0 ? void 0 : _a.streaming;
          const retry = thisSettings.retry;
          if (!streaming && retry && retry.retryCodes && retry.retryCodes.length > 0) {
            retry.backoffSettings.initialRpcTimeoutMillis = retry.backoffSettings.initialRpcTimeoutMillis || thisSettings.timeout;
            return (0, retries_1.retryable)(func2, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);
          }
          return (0, timeout_1.addTimeoutArg)(func2, thisSettings.timeout, thisSettings.otherArgs);
        }).then((apiCall) => {
          currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);
        }).catch((err) => {
          currentApiCaller.fail(ongoingCall, err);
        });
        return currentApiCaller.result(ongoingCall);
      };
    }
    exports2.createApiCall = createApiCall;
  }
});

// node_modules/google-gax/node_modules/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "node_modules/google-gax/node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    module2.exports = require_index_minimal();
  }
});

// node_modules/google-gax/build/protos/operations.js
var require_operations = __commonJS({
  "node_modules/google-gax/build/protos/operations.js"(exports2, module2) {
    !function(e) {
      "function" == typeof define && define.amd ? define(["protobufjs/minimal"], e) : "function" == typeof __require && "object" == typeof module2 && module2 && module2.exports && (module2.exports = e(require_minimal2()));
    }(function(o) {
      "use strict";
      var e, t, n, F, a = o.Reader, r = o.Writer, i = o.util, p = o.roots.operations_protos || (o.roots.operations_protos = {});
      function G(e2, t2, n2) {
        o.rpc.Service.call(this, e2, t2, n2);
      }
      function l(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function B(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function s(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function u(e2) {
        if (this.operations = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function L(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function U(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function c(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function d(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function g(e2) {
        if (this.rules = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function f(e2) {
        if (this.additionalBindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function y(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function J(e2) {
        if (this.file = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function h(e2) {
        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function O(e2) {
        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function b(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function m(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function M(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function v(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function w(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function P(e2) {
        if (this.value = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function _(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function j(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function S(e2) {
        if (this.method = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function x(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function k(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function D(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function T(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function H(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function E(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function z(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function A(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function N(e2) {
        if (this.uninterpretedOption = [], this[".google.api.methodSignature"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function I(e2) {
        if (this.name = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function q(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Y(e2) {
        if (this.location = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function R(e2) {
        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function W(e2) {
        if (this.annotation = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function C(e2) {
        if (this.path = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function X(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function K(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Q(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function V(e2) {
        if (this.details = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      return p.google = ((F = {}).longrunning = ((t = {}).Operations = (((G.prototype = Object.create(o.rpc.Service.prototype)).constructor = G).create = function(e2, t2, n2) {
        return new this(e2, t2, n2);
      }, Object.defineProperty(G.prototype.listOperations = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.ListOperationsRequest, p.google.longrunning.ListOperationsResponse, t2, n2);
      }, "name", { value: "ListOperations" }), Object.defineProperty(G.prototype.getOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.GetOperationRequest, p.google.longrunning.Operation, t2, n2);
      }, "name", { value: "GetOperation" }), Object.defineProperty(G.prototype.deleteOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.DeleteOperationRequest, p.google.protobuf.Empty, t2, n2);
      }, "name", { value: "DeleteOperation" }), Object.defineProperty(G.prototype.cancelOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.CancelOperationRequest, p.google.protobuf.Empty, t2, n2);
      }, "name", { value: "CancelOperation" }), Object.defineProperty(G.prototype.waitOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.WaitOperationRequest, p.google.longrunning.Operation, t2, n2);
      }, "name", { value: "WaitOperation" }), G), t.Operation = (l.prototype.name = "", l.prototype.metadata = null, l.prototype.done = false, l.prototype.error = null, l.prototype.response = null, Object.defineProperty(l.prototype, "result", { get: i.oneOfGetter(n = ["error", "response"]), set: i.oneOfSetter(n) }), l.create = function(e2) {
        return new l(e2);
      }, l.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.metadata && Object.hasOwnProperty.call(e2, "metadata") && p.google.protobuf.Any.encode(e2.metadata, t2.uint32(18).fork()).ldelim(), null != e2.done && Object.hasOwnProperty.call(e2, "done") && t2.uint32(24).bool(e2.done), null != e2.error && Object.hasOwnProperty.call(e2, "error") && p.google.rpc.Status.encode(e2.error, t2.uint32(34).fork()).ldelim(), null != e2.response && Object.hasOwnProperty.call(e2, "response") && p.google.protobuf.Any.encode(e2.response, t2.uint32(42).fork()).ldelim(), t2;
      }, l.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, l.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.Operation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.metadata = p.google.protobuf.Any.decode(e2, e2.uint32());
              break;
            case 3:
              o2.done = e2.bool();
              break;
            case 4:
              o2.error = p.google.rpc.Status.decode(e2, e2.uint32());
              break;
            case 5:
              o2.response = p.google.protobuf.Any.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, l.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, l.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2, n2 = {};
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.metadata && e2.hasOwnProperty("metadata") && (t2 = p.google.protobuf.Any.verify(e2.metadata)))
          return "metadata." + t2;
        if (null != e2.done && e2.hasOwnProperty("done") && "boolean" != typeof e2.done)
          return "done: boolean expected";
        if (null != e2.error && e2.hasOwnProperty("error") && (n2.result = 1, t2 = p.google.rpc.Status.verify(e2.error)))
          return "error." + t2;
        if (null != e2.response && e2.hasOwnProperty("response")) {
          if (1 === n2.result)
            return "result: multiple values";
          if (n2.result = 1, t2 = p.google.protobuf.Any.verify(e2.response))
            return "response." + t2;
        }
        return null;
      }, l.fromObject = function(e2) {
        if (e2 instanceof p.google.longrunning.Operation)
          return e2;
        var t2 = new p.google.longrunning.Operation();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.metadata) {
          if ("object" != typeof e2.metadata)
            throw TypeError(".google.longrunning.Operation.metadata: object expected");
          t2.metadata = p.google.protobuf.Any.fromObject(e2.metadata);
        }
        if (null != e2.done && (t2.done = Boolean(e2.done)), null != e2.error) {
          if ("object" != typeof e2.error)
            throw TypeError(".google.longrunning.Operation.error: object expected");
          t2.error = p.google.rpc.Status.fromObject(e2.error);
        }
        if (null != e2.response) {
          if ("object" != typeof e2.response)
            throw TypeError(".google.longrunning.Operation.response: object expected");
          t2.response = p.google.protobuf.Any.fromObject(e2.response);
        }
        return t2;
      }, l.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.metadata = null, n2.done = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.metadata && e2.hasOwnProperty("metadata") && (n2.metadata = p.google.protobuf.Any.toObject(e2.metadata, t2)), null != e2.done && e2.hasOwnProperty("done") && (n2.done = e2.done), null != e2.error && e2.hasOwnProperty("error") && (n2.error = p.google.rpc.Status.toObject(e2.error, t2), t2.oneofs) && (n2.result = "error"), null != e2.response && e2.hasOwnProperty("response") && (n2.response = p.google.protobuf.Any.toObject(e2.response, t2), t2.oneofs) && (n2.result = "response"), n2;
      }, l.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, l), t.GetOperationRequest = (B.prototype.name = "", B.create = function(e2) {
        return new B(e2);
      }, B.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, B.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, B.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.GetOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, B.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, B.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null;
      }, B.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.GetOperationRequest ? e2 : (t2 = new p.google.longrunning.GetOperationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, B.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, B.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, B), t.ListOperationsRequest = (s.prototype.name = "", s.prototype.filter = "", s.prototype.pageSize = 0, s.prototype.pageToken = "", s.create = function(e2) {
        return new s(e2);
      }, s.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.filter && Object.hasOwnProperty.call(e2, "filter") && t2.uint32(10).string(e2.filter), null != e2.pageSize && Object.hasOwnProperty.call(e2, "pageSize") && t2.uint32(16).int32(e2.pageSize), null != e2.pageToken && Object.hasOwnProperty.call(e2, "pageToken") && t2.uint32(26).string(e2.pageToken), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(34).string(e2.name), t2;
      }, s.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, s.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.ListOperationsRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 4:
              o2.name = e2.string();
              break;
            case 1:
              o2.filter = e2.string();
              break;
            case 2:
              o2.pageSize = e2.int32();
              break;
            case 3:
              o2.pageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, s.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, s.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null != e2.filter && e2.hasOwnProperty("filter") && !i.isString(e2.filter) ? "filter: string expected" : null != e2.pageSize && e2.hasOwnProperty("pageSize") && !i.isInteger(e2.pageSize) ? "pageSize: integer expected" : null != e2.pageToken && e2.hasOwnProperty("pageToken") && !i.isString(e2.pageToken) ? "pageToken: string expected" : null;
      }, s.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.ListOperationsRequest ? e2 : (t2 = new p.google.longrunning.ListOperationsRequest(), null != e2.name && (t2.name = String(e2.name)), null != e2.filter && (t2.filter = String(e2.filter)), null != e2.pageSize && (t2.pageSize = 0 | e2.pageSize), null != e2.pageToken && (t2.pageToken = String(e2.pageToken)), t2);
      }, s.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.filter = "", n2.pageSize = 0, n2.pageToken = "", n2.name = ""), null != e2.filter && e2.hasOwnProperty("filter") && (n2.filter = e2.filter), null != e2.pageSize && e2.hasOwnProperty("pageSize") && (n2.pageSize = e2.pageSize), null != e2.pageToken && e2.hasOwnProperty("pageToken") && (n2.pageToken = e2.pageToken), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, s.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, s), t.ListOperationsResponse = (u.prototype.operations = i.emptyArray, u.prototype.nextPageToken = "", u.create = function(e2) {
        return new u(e2);
      }, u.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.operations && e2.operations.length)
          for (var n2 = 0; n2 < e2.operations.length; ++n2)
            p.google.longrunning.Operation.encode(e2.operations[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.nextPageToken && Object.hasOwnProperty.call(e2, "nextPageToken") && t2.uint32(18).string(e2.nextPageToken), t2;
      }, u.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, u.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.ListOperationsResponse(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.operations && o2.operations.length || (o2.operations = []), o2.operations.push(p.google.longrunning.Operation.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.nextPageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, u.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, u.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.operations && e2.hasOwnProperty("operations")) {
          if (!Array.isArray(e2.operations))
            return "operations: array expected";
          for (var t2 = 0; t2 < e2.operations.length; ++t2) {
            var n2 = p.google.longrunning.Operation.verify(e2.operations[t2]);
            if (n2)
              return "operations." + n2;
          }
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && !i.isString(e2.nextPageToken) ? "nextPageToken: string expected" : null;
      }, u.fromObject = function(e2) {
        if (e2 instanceof p.google.longrunning.ListOperationsResponse)
          return e2;
        var t2 = new p.google.longrunning.ListOperationsResponse();
        if (e2.operations) {
          if (!Array.isArray(e2.operations))
            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
          t2.operations = [];
          for (var n2 = 0; n2 < e2.operations.length; ++n2) {
            if ("object" != typeof e2.operations[n2])
              throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
            t2.operations[n2] = p.google.longrunning.Operation.fromObject(e2.operations[n2]);
          }
        }
        return null != e2.nextPageToken && (t2.nextPageToken = String(e2.nextPageToken)), t2;
      }, u.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.operations = []), t2.defaults && (n2.nextPageToken = ""), e2.operations && e2.operations.length) {
          n2.operations = [];
          for (var o2 = 0; o2 < e2.operations.length; ++o2)
            n2.operations[o2] = p.google.longrunning.Operation.toObject(e2.operations[o2], t2);
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && (n2.nextPageToken = e2.nextPageToken), n2;
      }, u.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, u), t.CancelOperationRequest = (L.prototype.name = "", L.create = function(e2) {
        return new L(e2);
      }, L.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, L.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, L.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.CancelOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, L.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, L.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null;
      }, L.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.CancelOperationRequest ? e2 : (t2 = new p.google.longrunning.CancelOperationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, L.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, L.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, L), t.DeleteOperationRequest = (U.prototype.name = "", U.create = function(e2) {
        return new U(e2);
      }, U.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, U.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, U.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.DeleteOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, U.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, U.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null;
      }, U.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.DeleteOperationRequest ? e2 : (t2 = new p.google.longrunning.DeleteOperationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, U.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, U.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, U), t.WaitOperationRequest = (c.prototype.name = "", c.prototype.timeout = null, c.create = function(e2) {
        return new c(e2);
      }, c.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.timeout && Object.hasOwnProperty.call(e2, "timeout") && p.google.protobuf.Duration.encode(e2.timeout, t2.uint32(18).fork()).ldelim(), t2;
      }, c.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, c.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.WaitOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.timeout = p.google.protobuf.Duration.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, c.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, c.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.timeout && e2.hasOwnProperty("timeout")) {
          e2 = p.google.protobuf.Duration.verify(e2.timeout);
          if (e2)
            return "timeout." + e2;
        }
        return null;
      }, c.fromObject = function(e2) {
        if (e2 instanceof p.google.longrunning.WaitOperationRequest)
          return e2;
        var t2 = new p.google.longrunning.WaitOperationRequest();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.timeout) {
          if ("object" != typeof e2.timeout)
            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
          t2.timeout = p.google.protobuf.Duration.fromObject(e2.timeout);
        }
        return t2;
      }, c.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.timeout = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.timeout && e2.hasOwnProperty("timeout") && (n2.timeout = p.google.protobuf.Duration.toObject(e2.timeout, t2)), n2;
      }, c.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, c), t.OperationInfo = (d.prototype.responseType = "", d.prototype.metadataType = "", d.create = function(e2) {
        return new d(e2);
      }, d.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.responseType && Object.hasOwnProperty.call(e2, "responseType") && t2.uint32(10).string(e2.responseType), null != e2.metadataType && Object.hasOwnProperty.call(e2, "metadataType") && t2.uint32(18).string(e2.metadataType), t2;
      }, d.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, d.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.OperationInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.responseType = e2.string();
              break;
            case 2:
              o2.metadataType = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, d.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, d.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.responseType && e2.hasOwnProperty("responseType") && !i.isString(e2.responseType) ? "responseType: string expected" : null != e2.metadataType && e2.hasOwnProperty("metadataType") && !i.isString(e2.metadataType) ? "metadataType: string expected" : null;
      }, d.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.OperationInfo ? e2 : (t2 = new p.google.longrunning.OperationInfo(), null != e2.responseType && (t2.responseType = String(e2.responseType)), null != e2.metadataType && (t2.metadataType = String(e2.metadataType)), t2);
      }, d.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.responseType = "", n2.metadataType = ""), null != e2.responseType && e2.hasOwnProperty("responseType") && (n2.responseType = e2.responseType), null != e2.metadataType && e2.hasOwnProperty("metadataType") && (n2.metadataType = e2.metadataType), n2;
      }, d.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, d), t), F.api = ((n = {}).Http = (g.prototype.rules = i.emptyArray, g.prototype.fullyDecodeReservedExpansion = false, g.create = function(e2) {
        return new g(e2);
      }, g.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.rules && e2.rules.length)
          for (var n2 = 0; n2 < e2.rules.length; ++n2)
            p.google.api.HttpRule.encode(e2.rules[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e2, "fullyDecodeReservedExpansion") && t2.uint32(16).bool(e2.fullyDecodeReservedExpansion), t2;
      }, g.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, g.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.api.Http(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.rules && o2.rules.length || (o2.rules = []), o2.rules.push(p.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.fullyDecodeReservedExpansion = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, g.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, g.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.rules && e2.hasOwnProperty("rules")) {
          if (!Array.isArray(e2.rules))
            return "rules: array expected";
          for (var t2 = 0; t2 < e2.rules.length; ++t2) {
            var n2 = p.google.api.HttpRule.verify(e2.rules[t2]);
            if (n2)
              return "rules." + n2;
          }
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && "boolean" != typeof e2.fullyDecodeReservedExpansion ? "fullyDecodeReservedExpansion: boolean expected" : null;
      }, g.fromObject = function(e2) {
        if (e2 instanceof p.google.api.Http)
          return e2;
        var t2 = new p.google.api.Http();
        if (e2.rules) {
          if (!Array.isArray(e2.rules))
            throw TypeError(".google.api.Http.rules: array expected");
          t2.rules = [];
          for (var n2 = 0; n2 < e2.rules.length; ++n2) {
            if ("object" != typeof e2.rules[n2])
              throw TypeError(".google.api.Http.rules: object expected");
            t2.rules[n2] = p.google.api.HttpRule.fromObject(e2.rules[n2]);
          }
        }
        return null != e2.fullyDecodeReservedExpansion && (t2.fullyDecodeReservedExpansion = Boolean(e2.fullyDecodeReservedExpansion)), t2;
      }, g.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.rules = []), t2.defaults && (n2.fullyDecodeReservedExpansion = false), e2.rules && e2.rules.length) {
          n2.rules = [];
          for (var o2 = 0; o2 < e2.rules.length; ++o2)
            n2.rules[o2] = p.google.api.HttpRule.toObject(e2.rules[o2], t2);
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && (n2.fullyDecodeReservedExpansion = e2.fullyDecodeReservedExpansion), n2;
      }, g.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, g), n.HttpRule = (f.prototype.selector = "", f.prototype.get = "", f.prototype.put = "", f.prototype.post = "", f.prototype.delete = "", f.prototype.patch = "", f.prototype.custom = null, f.prototype.body = "", f.prototype.responseBody = "", f.prototype.additionalBindings = i.emptyArray, Object.defineProperty(f.prototype, "pattern", { get: i.oneOfGetter(t = ["get", "put", "post", "delete", "patch", "custom"]), set: i.oneOfSetter(t) }), f.create = function(e2) {
        return new f(e2);
      }, f.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.selector && Object.hasOwnProperty.call(e2, "selector") && t2.uint32(10).string(e2.selector), null != e2.get && Object.hasOwnProperty.call(e2, "get") && t2.uint32(18).string(e2.get), null != e2.put && Object.hasOwnProperty.call(e2, "put") && t2.uint32(26).string(e2.put), null != e2.post && Object.hasOwnProperty.call(e2, "post") && t2.uint32(34).string(e2.post), null != e2.delete && Object.hasOwnProperty.call(e2, "delete") && t2.uint32(42).string(e2.delete), null != e2.patch && Object.hasOwnProperty.call(e2, "patch") && t2.uint32(50).string(e2.patch), null != e2.body && Object.hasOwnProperty.call(e2, "body") && t2.uint32(58).string(e2.body), null != e2.custom && Object.hasOwnProperty.call(e2, "custom") && p.google.api.CustomHttpPattern.encode(e2.custom, t2.uint32(66).fork()).ldelim(), null != e2.additionalBindings && e2.additionalBindings.length)
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2)
            p.google.api.HttpRule.encode(e2.additionalBindings[n2], t2.uint32(90).fork()).ldelim();
        return null != e2.responseBody && Object.hasOwnProperty.call(e2, "responseBody") && t2.uint32(98).string(e2.responseBody), t2;
      }, f.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, f.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.api.HttpRule(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.selector = e2.string();
              break;
            case 2:
              o2.get = e2.string();
              break;
            case 3:
              o2.put = e2.string();
              break;
            case 4:
              o2.post = e2.string();
              break;
            case 5:
              o2.delete = e2.string();
              break;
            case 6:
              o2.patch = e2.string();
              break;
            case 8:
              o2.custom = p.google.api.CustomHttpPattern.decode(e2, e2.uint32());
              break;
            case 7:
              o2.body = e2.string();
              break;
            case 12:
              o2.responseBody = e2.string();
              break;
            case 11:
              o2.additionalBindings && o2.additionalBindings.length || (o2.additionalBindings = []), o2.additionalBindings.push(p.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, f.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, f.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2 = {};
        if (null != e2.selector && e2.hasOwnProperty("selector") && !i.isString(e2.selector))
          return "selector: string expected";
        if (null != e2.get && e2.hasOwnProperty("get") && (t2.pattern = 1, !i.isString(e2.get)))
          return "get: string expected";
        if (null != e2.put && e2.hasOwnProperty("put")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.put))
            return "put: string expected";
        }
        if (null != e2.post && e2.hasOwnProperty("post")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.post))
            return "post: string expected";
        }
        if (null != e2.delete && e2.hasOwnProperty("delete")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.delete))
            return "delete: string expected";
        }
        if (null != e2.patch && e2.hasOwnProperty("patch")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.patch))
            return "patch: string expected";
        }
        if (null != e2.custom && e2.hasOwnProperty("custom")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, n2 = p.google.api.CustomHttpPattern.verify(e2.custom))
            return "custom." + n2;
        }
        if (null != e2.body && e2.hasOwnProperty("body") && !i.isString(e2.body))
          return "body: string expected";
        if (null != e2.responseBody && e2.hasOwnProperty("responseBody") && !i.isString(e2.responseBody))
          return "responseBody: string expected";
        if (null != e2.additionalBindings && e2.hasOwnProperty("additionalBindings")) {
          if (!Array.isArray(e2.additionalBindings))
            return "additionalBindings: array expected";
          for (var n2, o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            if (n2 = p.google.api.HttpRule.verify(e2.additionalBindings[o2]))
              return "additionalBindings." + n2;
        }
        return null;
      }, f.fromObject = function(e2) {
        if (e2 instanceof p.google.api.HttpRule)
          return e2;
        var t2 = new p.google.api.HttpRule();
        if (null != e2.selector && (t2.selector = String(e2.selector)), null != e2.get && (t2.get = String(e2.get)), null != e2.put && (t2.put = String(e2.put)), null != e2.post && (t2.post = String(e2.post)), null != e2.delete && (t2.delete = String(e2.delete)), null != e2.patch && (t2.patch = String(e2.patch)), null != e2.custom) {
          if ("object" != typeof e2.custom)
            throw TypeError(".google.api.HttpRule.custom: object expected");
          t2.custom = p.google.api.CustomHttpPattern.fromObject(e2.custom);
        }
        if (null != e2.body && (t2.body = String(e2.body)), null != e2.responseBody && (t2.responseBody = String(e2.responseBody)), e2.additionalBindings) {
          if (!Array.isArray(e2.additionalBindings))
            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
          t2.additionalBindings = [];
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2) {
            if ("object" != typeof e2.additionalBindings[n2])
              throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
            t2.additionalBindings[n2] = p.google.api.HttpRule.fromObject(e2.additionalBindings[n2]);
          }
        }
        return t2;
      }, f.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.additionalBindings = []), t2.defaults && (n2.selector = "", n2.body = "", n2.responseBody = ""), null != e2.selector && e2.hasOwnProperty("selector") && (n2.selector = e2.selector), null != e2.get && e2.hasOwnProperty("get") && (n2.get = e2.get, t2.oneofs) && (n2.pattern = "get"), null != e2.put && e2.hasOwnProperty("put") && (n2.put = e2.put, t2.oneofs) && (n2.pattern = "put"), null != e2.post && e2.hasOwnProperty("post") && (n2.post = e2.post, t2.oneofs) && (n2.pattern = "post"), null != e2.delete && e2.hasOwnProperty("delete") && (n2.delete = e2.delete, t2.oneofs) && (n2.pattern = "delete"), null != e2.patch && e2.hasOwnProperty("patch") && (n2.patch = e2.patch, t2.oneofs) && (n2.pattern = "patch"), null != e2.body && e2.hasOwnProperty("body") && (n2.body = e2.body), null != e2.custom && e2.hasOwnProperty("custom") && (n2.custom = p.google.api.CustomHttpPattern.toObject(e2.custom, t2), t2.oneofs) && (n2.pattern = "custom"), e2.additionalBindings && e2.additionalBindings.length) {
          n2.additionalBindings = [];
          for (var o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            n2.additionalBindings[o2] = p.google.api.HttpRule.toObject(e2.additionalBindings[o2], t2);
        }
        return null != e2.responseBody && e2.hasOwnProperty("responseBody") && (n2.responseBody = e2.responseBody), n2;
      }, f.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, f), n.CustomHttpPattern = (y.prototype.kind = "", y.prototype.path = "", y.create = function(e2) {
        return new y(e2);
      }, y.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.kind && Object.hasOwnProperty.call(e2, "kind") && t2.uint32(10).string(e2.kind), null != e2.path && Object.hasOwnProperty.call(e2, "path") && t2.uint32(18).string(e2.path), t2;
      }, y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.api.CustomHttpPattern(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.kind = e2.string();
              break;
            case 2:
              o2.path = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, y.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.kind && e2.hasOwnProperty("kind") && !i.isString(e2.kind) ? "kind: string expected" : null != e2.path && e2.hasOwnProperty("path") && !i.isString(e2.path) ? "path: string expected" : null;
      }, y.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.api.CustomHttpPattern ? e2 : (t2 = new p.google.api.CustomHttpPattern(), null != e2.kind && (t2.kind = String(e2.kind)), null != e2.path && (t2.path = String(e2.path)), t2);
      }, y.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.kind = "", n2.path = ""), null != e2.kind && e2.hasOwnProperty("kind") && (n2.kind = e2.kind), null != e2.path && e2.hasOwnProperty("path") && (n2.path = e2.path), n2;
      }, y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, y), n), F.protobuf = ((t = {}).FileDescriptorSet = (J.prototype.file = i.emptyArray, J.create = function(e2) {
        return new J(e2);
      }, J.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.file && e2.file.length)
          for (var n2 = 0; n2 < e2.file.length; ++n2)
            p.google.protobuf.FileDescriptorProto.encode(e2.file[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, J.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, J.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FileDescriptorSet(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.file && o2.file.length || (o2.file = []), o2.file.push(p.google.protobuf.FileDescriptorProto.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, J.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, J.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.file && e2.hasOwnProperty("file")) {
          if (!Array.isArray(e2.file))
            return "file: array expected";
          for (var t2 = 0; t2 < e2.file.length; ++t2) {
            var n2 = p.google.protobuf.FileDescriptorProto.verify(e2.file[t2]);
            if (n2)
              return "file." + n2;
          }
        }
        return null;
      }, J.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FileDescriptorSet)
          return e2;
        var t2 = new p.google.protobuf.FileDescriptorSet();
        if (e2.file) {
          if (!Array.isArray(e2.file))
            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
          t2.file = [];
          for (var n2 = 0; n2 < e2.file.length; ++n2) {
            if ("object" != typeof e2.file[n2])
              throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
            t2.file[n2] = p.google.protobuf.FileDescriptorProto.fromObject(e2.file[n2]);
          }
        }
        return t2;
      }, J.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.file = []), e2.file && e2.file.length) {
          n2.file = [];
          for (var o2 = 0; o2 < e2.file.length; ++o2)
            n2.file[o2] = p.google.protobuf.FileDescriptorProto.toObject(e2.file[o2], t2);
        }
        return n2;
      }, J.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, J), t.FileDescriptorProto = (h.prototype.name = "", h.prototype.package = "", h.prototype.dependency = i.emptyArray, h.prototype.publicDependency = i.emptyArray, h.prototype.weakDependency = i.emptyArray, h.prototype.messageType = i.emptyArray, h.prototype.enumType = i.emptyArray, h.prototype.service = i.emptyArray, h.prototype.extension = i.emptyArray, h.prototype.options = null, h.prototype.sourceCodeInfo = null, h.prototype.syntax = "", h.create = function(e2) {
        return new h(e2);
      }, h.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.package && Object.hasOwnProperty.call(e2, "package") && t2.uint32(18).string(e2.package), null != e2.dependency && e2.dependency.length)
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.uint32(26).string(e2.dependency[n2]);
        if (null != e2.messageType && e2.messageType.length)
          for (n2 = 0; n2 < e2.messageType.length; ++n2)
            p.google.protobuf.DescriptorProto.encode(e2.messageType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            p.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.service && e2.service.length)
          for (n2 = 0; n2 < e2.service.length; ++n2)
            p.google.protobuf.ServiceDescriptorProto.encode(e2.service[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            p.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(58).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.FileOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.sourceCodeInfo && Object.hasOwnProperty.call(e2, "sourceCodeInfo") && p.google.protobuf.SourceCodeInfo.encode(e2.sourceCodeInfo, t2.uint32(74).fork()).ldelim(), null != e2.publicDependency && e2.publicDependency.length)
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.uint32(80).int32(e2.publicDependency[n2]);
        if (null != e2.weakDependency && e2.weakDependency.length)
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.uint32(88).int32(e2.weakDependency[n2]);
        return null != e2.syntax && Object.hasOwnProperty.call(e2, "syntax") && t2.uint32(98).string(e2.syntax), t2;
      }, h.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, h.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FileDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.package = e2.string();
              break;
            case 3:
              o2.dependency && o2.dependency.length || (o2.dependency = []), o2.dependency.push(e2.string());
              break;
            case 10:
              if (o2.publicDependency && o2.publicDependency.length || (o2.publicDependency = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.publicDependency.push(e2.int32());
              else
                o2.publicDependency.push(e2.int32());
              break;
            case 11:
              if (o2.weakDependency && o2.weakDependency.length || (o2.weakDependency = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.weakDependency.push(e2.int32());
              else
                o2.weakDependency.push(e2.int32());
              break;
            case 4:
              o2.messageType && o2.messageType.length || (o2.messageType = []), o2.messageType.push(p.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.service && o2.service.length || (o2.service = []), o2.service.push(p.google.protobuf.ServiceDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.options = p.google.protobuf.FileOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.decode(e2, e2.uint32());
              break;
            case 12:
              o2.syntax = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, h.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, h.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.package && e2.hasOwnProperty("package") && !i.isString(e2.package))
          return "package: string expected";
        if (null != e2.dependency && e2.hasOwnProperty("dependency")) {
          if (!Array.isArray(e2.dependency))
            return "dependency: array expected";
          for (var t2 = 0; t2 < e2.dependency.length; ++t2)
            if (!i.isString(e2.dependency[t2]))
              return "dependency: string[] expected";
        }
        if (null != e2.publicDependency && e2.hasOwnProperty("publicDependency")) {
          if (!Array.isArray(e2.publicDependency))
            return "publicDependency: array expected";
          for (t2 = 0; t2 < e2.publicDependency.length; ++t2)
            if (!i.isInteger(e2.publicDependency[t2]))
              return "publicDependency: integer[] expected";
        }
        if (null != e2.weakDependency && e2.hasOwnProperty("weakDependency")) {
          if (!Array.isArray(e2.weakDependency))
            return "weakDependency: array expected";
          for (t2 = 0; t2 < e2.weakDependency.length; ++t2)
            if (!i.isInteger(e2.weakDependency[t2]))
              return "weakDependency: integer[] expected";
        }
        if (null != e2.messageType && e2.hasOwnProperty("messageType")) {
          if (!Array.isArray(e2.messageType))
            return "messageType: array expected";
          for (t2 = 0; t2 < e2.messageType.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.verify(e2.messageType[t2]))
              return "messageType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = p.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.service && e2.hasOwnProperty("service")) {
          if (!Array.isArray(e2.service))
            return "service: array expected";
          for (t2 = 0; t2 < e2.service.length; ++t2)
            if (n2 = p.google.protobuf.ServiceDescriptorProto.verify(e2.service[t2]))
              return "service." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = p.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.FileOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2 = p.google.protobuf.SourceCodeInfo.verify(e2.sourceCodeInfo)))
          return "sourceCodeInfo." + n2;
        return null != e2.syntax && e2.hasOwnProperty("syntax") && !i.isString(e2.syntax) ? "syntax: string expected" : null;
      }, h.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FileDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.FileDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.package && (t2.package = String(e2.package)), e2.dependency) {
          if (!Array.isArray(e2.dependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
          t2.dependency = [];
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.dependency[n2] = String(e2.dependency[n2]);
        }
        if (e2.publicDependency) {
          if (!Array.isArray(e2.publicDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
          t2.publicDependency = [];
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.publicDependency[n2] = 0 | e2.publicDependency[n2];
        }
        if (e2.weakDependency) {
          if (!Array.isArray(e2.weakDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
          t2.weakDependency = [];
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.weakDependency[n2] = 0 | e2.weakDependency[n2];
        }
        if (e2.messageType) {
          if (!Array.isArray(e2.messageType))
            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
          t2.messageType = [];
          for (n2 = 0; n2 < e2.messageType.length; ++n2) {
            if ("object" != typeof e2.messageType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
            t2.messageType[n2] = p.google.protobuf.DescriptorProto.fromObject(e2.messageType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
            t2.enumType[n2] = p.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.service) {
          if (!Array.isArray(e2.service))
            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
          t2.service = [];
          for (n2 = 0; n2 < e2.service.length; ++n2) {
            if ("object" != typeof e2.service[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
            t2.service[n2] = p.google.protobuf.ServiceDescriptorProto.fromObject(e2.service[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
            t2.extension[n2] = p.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.FileOptions.fromObject(e2.options);
        }
        if (null != e2.sourceCodeInfo) {
          if ("object" != typeof e2.sourceCodeInfo)
            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
          t2.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.fromObject(e2.sourceCodeInfo);
        }
        return null != e2.syntax && (t2.syntax = String(e2.syntax)), t2;
      }, h.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.dependency = [], n2.messageType = [], n2.enumType = [], n2.service = [], n2.extension = [], n2.publicDependency = [], n2.weakDependency = []), t2.defaults && (n2.name = "", n2.package = "", n2.options = null, n2.sourceCodeInfo = null, n2.syntax = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.package && e2.hasOwnProperty("package") && (n2.package = e2.package), e2.dependency && e2.dependency.length) {
          n2.dependency = [];
          for (var o2 = 0; o2 < e2.dependency.length; ++o2)
            n2.dependency[o2] = e2.dependency[o2];
        }
        if (e2.messageType && e2.messageType.length) {
          n2.messageType = [];
          for (o2 = 0; o2 < e2.messageType.length; ++o2)
            n2.messageType[o2] = p.google.protobuf.DescriptorProto.toObject(e2.messageType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = p.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.service && e2.service.length) {
          n2.service = [];
          for (o2 = 0; o2 < e2.service.length; ++o2)
            n2.service[o2] = p.google.protobuf.ServiceDescriptorProto.toObject(e2.service[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = p.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.FileOptions.toObject(e2.options, t2)), null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.toObject(e2.sourceCodeInfo, t2)), e2.publicDependency && e2.publicDependency.length) {
          n2.publicDependency = [];
          for (o2 = 0; o2 < e2.publicDependency.length; ++o2)
            n2.publicDependency[o2] = e2.publicDependency[o2];
        }
        if (e2.weakDependency && e2.weakDependency.length) {
          n2.weakDependency = [];
          for (o2 = 0; o2 < e2.weakDependency.length; ++o2)
            n2.weakDependency[o2] = e2.weakDependency[o2];
        }
        return null != e2.syntax && e2.hasOwnProperty("syntax") && (n2.syntax = e2.syntax), n2;
      }, h.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, h), t.DescriptorProto = (O.prototype.name = "", O.prototype.field = i.emptyArray, O.prototype.extension = i.emptyArray, O.prototype.nestedType = i.emptyArray, O.prototype.enumType = i.emptyArray, O.prototype.extensionRange = i.emptyArray, O.prototype.oneofDecl = i.emptyArray, O.prototype.options = null, O.prototype.reservedRange = i.emptyArray, O.prototype.reservedName = i.emptyArray, O.create = function(e2) {
        return new O(e2);
      }, O.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.field && e2.field.length)
          for (var n2 = 0; n2 < e2.field.length; ++n2)
            p.google.protobuf.FieldDescriptorProto.encode(e2.field[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.nestedType && e2.nestedType.length)
          for (n2 = 0; n2 < e2.nestedType.length; ++n2)
            p.google.protobuf.DescriptorProto.encode(e2.nestedType[n2], t2.uint32(26).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            p.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.extensionRange && e2.extensionRange.length)
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2)
            p.google.protobuf.DescriptorProto.ExtensionRange.encode(e2.extensionRange[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            p.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.MessageOptions.encode(e2.options, t2.uint32(58).fork()).ldelim(), null != e2.oneofDecl && e2.oneofDecl.length)
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2)
            p.google.protobuf.OneofDescriptorProto.encode(e2.oneofDecl[n2], t2.uint32(66).fork()).ldelim();
        if (null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            p.google.protobuf.DescriptorProto.ReservedRange.encode(e2.reservedRange[n2], t2.uint32(74).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(82).string(e2.reservedName[n2]);
        return t2;
      }, O.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, O.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.DescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.field && o2.field.length || (o2.field = []), o2.field.push(p.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.nestedType && o2.nestedType.length || (o2.nestedType = []), o2.nestedType.push(p.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 4:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.extensionRange && o2.extensionRange.length || (o2.extensionRange = []), o2.extensionRange.push(p.google.protobuf.DescriptorProto.ExtensionRange.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.oneofDecl && o2.oneofDecl.length || (o2.oneofDecl = []), o2.oneofDecl.push(p.google.protobuf.OneofDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.options = p.google.protobuf.MessageOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(p.google.protobuf.DescriptorProto.ReservedRange.decode(e2, e2.uint32()));
              break;
            case 10:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, O.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, O.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.field && e2.hasOwnProperty("field")) {
          if (!Array.isArray(e2.field))
            return "field: array expected";
          for (var t2 = 0; t2 < e2.field.length; ++t2)
            if (n2 = p.google.protobuf.FieldDescriptorProto.verify(e2.field[t2]))
              return "field." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = p.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        if (null != e2.nestedType && e2.hasOwnProperty("nestedType")) {
          if (!Array.isArray(e2.nestedType))
            return "nestedType: array expected";
          for (t2 = 0; t2 < e2.nestedType.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.verify(e2.nestedType[t2]))
              return "nestedType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = p.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.extensionRange && e2.hasOwnProperty("extensionRange")) {
          if (!Array.isArray(e2.extensionRange))
            return "extensionRange: array expected";
          for (t2 = 0; t2 < e2.extensionRange.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.ExtensionRange.verify(e2.extensionRange[t2]))
              return "extensionRange." + n2;
        }
        if (null != e2.oneofDecl && e2.hasOwnProperty("oneofDecl")) {
          if (!Array.isArray(e2.oneofDecl))
            return "oneofDecl: array expected";
          for (t2 = 0; t2 < e2.oneofDecl.length; ++t2)
            if (n2 = p.google.protobuf.OneofDescriptorProto.verify(e2.oneofDecl[t2]))
              return "oneofDecl." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.MessageOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.ReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!i.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, O.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.DescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.DescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.field) {
          if (!Array.isArray(e2.field))
            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
          t2.field = [];
          for (var n2 = 0; n2 < e2.field.length; ++n2) {
            if ("object" != typeof e2.field[n2])
              throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
            t2.field[n2] = p.google.protobuf.FieldDescriptorProto.fromObject(e2.field[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
            t2.extension[n2] = p.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (e2.nestedType) {
          if (!Array.isArray(e2.nestedType))
            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
          t2.nestedType = [];
          for (n2 = 0; n2 < e2.nestedType.length; ++n2) {
            if ("object" != typeof e2.nestedType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
            t2.nestedType[n2] = p.google.protobuf.DescriptorProto.fromObject(e2.nestedType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
            t2.enumType[n2] = p.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.extensionRange) {
          if (!Array.isArray(e2.extensionRange))
            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
          t2.extensionRange = [];
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2) {
            if ("object" != typeof e2.extensionRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
            t2.extensionRange[n2] = p.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e2.extensionRange[n2]);
          }
        }
        if (e2.oneofDecl) {
          if (!Array.isArray(e2.oneofDecl))
            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
          t2.oneofDecl = [];
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2) {
            if ("object" != typeof e2.oneofDecl[n2])
              throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
            t2.oneofDecl[n2] = p.google.protobuf.OneofDescriptorProto.fromObject(e2.oneofDecl[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
          t2.options = p.google.protobuf.MessageOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = p.google.protobuf.DescriptorProto.ReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, O.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.field = [], n2.nestedType = [], n2.enumType = [], n2.extensionRange = [], n2.extension = [], n2.oneofDecl = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.field && e2.field.length) {
          n2.field = [];
          for (var o2 = 0; o2 < e2.field.length; ++o2)
            n2.field[o2] = p.google.protobuf.FieldDescriptorProto.toObject(e2.field[o2], t2);
        }
        if (e2.nestedType && e2.nestedType.length) {
          n2.nestedType = [];
          for (o2 = 0; o2 < e2.nestedType.length; ++o2)
            n2.nestedType[o2] = p.google.protobuf.DescriptorProto.toObject(e2.nestedType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = p.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.extensionRange && e2.extensionRange.length) {
          n2.extensionRange = [];
          for (o2 = 0; o2 < e2.extensionRange.length; ++o2)
            n2.extensionRange[o2] = p.google.protobuf.DescriptorProto.ExtensionRange.toObject(e2.extensionRange[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = p.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.MessageOptions.toObject(e2.options, t2)), e2.oneofDecl && e2.oneofDecl.length) {
          n2.oneofDecl = [];
          for (o2 = 0; o2 < e2.oneofDecl.length; ++o2)
            n2.oneofDecl[o2] = p.google.protobuf.OneofDescriptorProto.toObject(e2.oneofDecl[o2], t2);
        }
        if (e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = p.google.protobuf.DescriptorProto.ReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, O.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, O.ExtensionRange = (b.prototype.start = 0, b.prototype.end = 0, b.prototype.options = null, b.create = function(e2) {
        return new b(e2);
      }, b.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.ExtensionRangeOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, b.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, b.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.DescriptorProto.ExtensionRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            case 3:
              o2.options = p.google.protobuf.ExtensionRangeOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, b.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, b.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.start && e2.hasOwnProperty("start") && !i.isInteger(e2.start))
          return "start: integer expected";
        if (null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end))
          return "end: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = p.google.protobuf.ExtensionRangeOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, b.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.DescriptorProto.ExtensionRange)
          return e2;
        var t2 = new p.google.protobuf.DescriptorProto.ExtensionRange();
        if (null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
          t2.options = p.google.protobuf.ExtensionRangeOptions.fromObject(e2.options);
        }
        return t2;
      }, b.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0, n2.options = null), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.ExtensionRangeOptions.toObject(e2.options, t2)), n2;
      }, b.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, b), O.ReservedRange = (m.prototype.start = 0, m.prototype.end = 0, m.create = function(e2) {
        return new m(e2);
      }, m.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, m.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, m.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.DescriptorProto.ReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, m.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, m.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !i.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end) ? "end: integer expected" : null;
      }, m.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.DescriptorProto.ReservedRange ? e2 : (t2 = new p.google.protobuf.DescriptorProto.ReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, m.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, m.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, m), O), t.ExtensionRangeOptions = (M.prototype.uninterpretedOption = i.emptyArray, M.create = function(e2) {
        return new M(e2);
      }, M.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, M.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, M.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.ExtensionRangeOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, M.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, M.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, M.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.ExtensionRangeOptions)
          return e2;
        var t2 = new p.google.protobuf.ExtensionRangeOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, M.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, M.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, M), t.FieldDescriptorProto = (v.prototype.name = "", v.prototype.number = 0, v.prototype.label = 1, v.prototype.type = 1, v.prototype.typeName = "", v.prototype.extendee = "", v.prototype.defaultValue = "", v.prototype.oneofIndex = 0, v.prototype.jsonName = "", v.prototype.options = null, v.prototype.proto3Optional = false, v.create = function(e2) {
        return new v(e2);
      }, v.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.extendee && Object.hasOwnProperty.call(e2, "extendee") && t2.uint32(18).string(e2.extendee), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(24).int32(e2.number), null != e2.label && Object.hasOwnProperty.call(e2, "label") && t2.uint32(32).int32(e2.label), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(40).int32(e2.type), null != e2.typeName && Object.hasOwnProperty.call(e2, "typeName") && t2.uint32(50).string(e2.typeName), null != e2.defaultValue && Object.hasOwnProperty.call(e2, "defaultValue") && t2.uint32(58).string(e2.defaultValue), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.FieldOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.oneofIndex && Object.hasOwnProperty.call(e2, "oneofIndex") && t2.uint32(72).int32(e2.oneofIndex), null != e2.jsonName && Object.hasOwnProperty.call(e2, "jsonName") && t2.uint32(82).string(e2.jsonName), null != e2.proto3Optional && Object.hasOwnProperty.call(e2, "proto3Optional") && t2.uint32(136).bool(e2.proto3Optional), t2;
      }, v.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, v.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FieldDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 3:
              o2.number = e2.int32();
              break;
            case 4:
              o2.label = e2.int32();
              break;
            case 5:
              o2.type = e2.int32();
              break;
            case 6:
              o2.typeName = e2.string();
              break;
            case 2:
              o2.extendee = e2.string();
              break;
            case 7:
              o2.defaultValue = e2.string();
              break;
            case 9:
              o2.oneofIndex = e2.int32();
              break;
            case 10:
              o2.jsonName = e2.string();
              break;
            case 8:
              o2.options = p.google.protobuf.FieldOptions.decode(e2, e2.uint32());
              break;
            case 17:
              o2.proto3Optional = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, v.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, v.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !i.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.label && e2.hasOwnProperty("label"))
          switch (e2.label) {
            default:
              return "label: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.type && e2.hasOwnProperty("type"))
          switch (e2.type) {
            default:
              return "type: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
          }
        if (null != e2.typeName && e2.hasOwnProperty("typeName") && !i.isString(e2.typeName))
          return "typeName: string expected";
        if (null != e2.extendee && e2.hasOwnProperty("extendee") && !i.isString(e2.extendee))
          return "extendee: string expected";
        if (null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && !i.isString(e2.defaultValue))
          return "defaultValue: string expected";
        if (null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && !i.isInteger(e2.oneofIndex))
          return "oneofIndex: integer expected";
        if (null != e2.jsonName && e2.hasOwnProperty("jsonName") && !i.isString(e2.jsonName))
          return "jsonName: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = p.google.protobuf.FieldOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && "boolean" != typeof e2.proto3Optional ? "proto3Optional: boolean expected" : null;
      }, v.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FieldDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.FieldDescriptorProto();
        switch (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), e2.label) {
          case "LABEL_OPTIONAL":
          case 1:
            t2.label = 1;
            break;
          case "LABEL_REQUIRED":
          case 2:
            t2.label = 2;
            break;
          case "LABEL_REPEATED":
          case 3:
            t2.label = 3;
        }
        switch (e2.type) {
          case "TYPE_DOUBLE":
          case 1:
            t2.type = 1;
            break;
          case "TYPE_FLOAT":
          case 2:
            t2.type = 2;
            break;
          case "TYPE_INT64":
          case 3:
            t2.type = 3;
            break;
          case "TYPE_UINT64":
          case 4:
            t2.type = 4;
            break;
          case "TYPE_INT32":
          case 5:
            t2.type = 5;
            break;
          case "TYPE_FIXED64":
          case 6:
            t2.type = 6;
            break;
          case "TYPE_FIXED32":
          case 7:
            t2.type = 7;
            break;
          case "TYPE_BOOL":
          case 8:
            t2.type = 8;
            break;
          case "TYPE_STRING":
          case 9:
            t2.type = 9;
            break;
          case "TYPE_GROUP":
          case 10:
            t2.type = 10;
            break;
          case "TYPE_MESSAGE":
          case 11:
            t2.type = 11;
            break;
          case "TYPE_BYTES":
          case 12:
            t2.type = 12;
            break;
          case "TYPE_UINT32":
          case 13:
            t2.type = 13;
            break;
          case "TYPE_ENUM":
          case 14:
            t2.type = 14;
            break;
          case "TYPE_SFIXED32":
          case 15:
            t2.type = 15;
            break;
          case "TYPE_SFIXED64":
          case 16:
            t2.type = 16;
            break;
          case "TYPE_SINT32":
          case 17:
            t2.type = 17;
            break;
          case "TYPE_SINT64":
          case 18:
            t2.type = 18;
        }
        if (null != e2.typeName && (t2.typeName = String(e2.typeName)), null != e2.extendee && (t2.extendee = String(e2.extendee)), null != e2.defaultValue && (t2.defaultValue = String(e2.defaultValue)), null != e2.oneofIndex && (t2.oneofIndex = 0 | e2.oneofIndex), null != e2.jsonName && (t2.jsonName = String(e2.jsonName)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.FieldOptions.fromObject(e2.options);
        }
        return null != e2.proto3Optional && (t2.proto3Optional = Boolean(e2.proto3Optional)), t2;
      }, v.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.extendee = "", n2.number = 0, n2.label = t2.enums === String ? "LABEL_OPTIONAL" : 1, n2.type = t2.enums === String ? "TYPE_DOUBLE" : 1, n2.typeName = "", n2.defaultValue = "", n2.options = null, n2.oneofIndex = 0, n2.jsonName = "", n2.proto3Optional = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.extendee && e2.hasOwnProperty("extendee") && (n2.extendee = e2.extendee), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.label && e2.hasOwnProperty("label") && (n2.label = t2.enums === String ? p.google.protobuf.FieldDescriptorProto.Label[e2.label] : e2.label), null != e2.type && e2.hasOwnProperty("type") && (n2.type = t2.enums === String ? p.google.protobuf.FieldDescriptorProto.Type[e2.type] : e2.type), null != e2.typeName && e2.hasOwnProperty("typeName") && (n2.typeName = e2.typeName), null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && (n2.defaultValue = e2.defaultValue), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.FieldOptions.toObject(e2.options, t2)), null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && (n2.oneofIndex = e2.oneofIndex), null != e2.jsonName && e2.hasOwnProperty("jsonName") && (n2.jsonName = e2.jsonName), null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && (n2.proto3Optional = e2.proto3Optional), n2;
      }, v.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, v.Type = (n = {}, (e = Object.create(n))[n[1] = "TYPE_DOUBLE"] = 1, e[n[2] = "TYPE_FLOAT"] = 2, e[n[3] = "TYPE_INT64"] = 3, e[n[4] = "TYPE_UINT64"] = 4, e[n[5] = "TYPE_INT32"] = 5, e[n[6] = "TYPE_FIXED64"] = 6, e[n[7] = "TYPE_FIXED32"] = 7, e[n[8] = "TYPE_BOOL"] = 8, e[n[9] = "TYPE_STRING"] = 9, e[n[10] = "TYPE_GROUP"] = 10, e[n[11] = "TYPE_MESSAGE"] = 11, e[n[12] = "TYPE_BYTES"] = 12, e[n[13] = "TYPE_UINT32"] = 13, e[n[14] = "TYPE_ENUM"] = 14, e[n[15] = "TYPE_SFIXED32"] = 15, e[n[16] = "TYPE_SFIXED64"] = 16, e[n[17] = "TYPE_SINT32"] = 17, e[n[18] = "TYPE_SINT64"] = 18, e), v.Label = (n = {}, (e = Object.create(n))[n[1] = "LABEL_OPTIONAL"] = 1, e[n[2] = "LABEL_REQUIRED"] = 2, e[n[3] = "LABEL_REPEATED"] = 3, e), v), t.OneofDescriptorProto = (w.prototype.name = "", w.prototype.options = null, w.create = function(e2) {
        return new w(e2);
      }, w.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.OneofOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, w.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, w.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.OneofDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.options = p.google.protobuf.OneofOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, w.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, w.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = p.google.protobuf.OneofOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, w.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.OneofDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.OneofDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.OneofOptions.fromObject(e2.options);
        }
        return t2;
      }, w.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.OneofOptions.toObject(e2.options, t2)), n2;
      }, w.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, w), t.EnumDescriptorProto = (P.prototype.name = "", P.prototype.value = i.emptyArray, P.prototype.options = null, P.prototype.reservedRange = i.emptyArray, P.prototype.reservedName = i.emptyArray, P.create = function(e2) {
        return new P(e2);
      }, P.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.value && e2.value.length)
          for (var n2 = 0; n2 < e2.value.length; ++n2)
            p.google.protobuf.EnumValueDescriptorProto.encode(e2.value[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.EnumOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            p.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e2.reservedRange[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(42).string(e2.reservedName[n2]);
        return t2;
      }, P.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, P.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.value && o2.value.length || (o2.value = []), o2.value.push(p.google.protobuf.EnumValueDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = p.google.protobuf.EnumOptions.decode(e2, e2.uint32());
              break;
            case 4:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(p.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, P.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, P.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.value && e2.hasOwnProperty("value")) {
          if (!Array.isArray(e2.value))
            return "value: array expected";
          for (var t2 = 0; t2 < e2.value.length; ++t2)
            if (n2 = p.google.protobuf.EnumValueDescriptorProto.verify(e2.value[t2]))
              return "value." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.EnumOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!i.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, P.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.EnumDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.value) {
          if (!Array.isArray(e2.value))
            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
          t2.value = [];
          for (var n2 = 0; n2 < e2.value.length; ++n2) {
            if ("object" != typeof e2.value[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
            t2.value[n2] = p.google.protobuf.EnumValueDescriptorProto.fromObject(e2.value[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.EnumOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, P.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.value = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.value && e2.value.length) {
          n2.value = [];
          for (var o2 = 0; o2 < e2.value.length; ++o2)
            n2.value[o2] = p.google.protobuf.EnumValueDescriptorProto.toObject(e2.value[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.EnumOptions.toObject(e2.options, t2)), e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, P.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, P.EnumReservedRange = (_.prototype.start = 0, _.prototype.end = 0, _.create = function(e2) {
        return new _(e2);
      }, _.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, _.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, _.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumDescriptorProto.EnumReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, _.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, _.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !i.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end) ? "end: integer expected" : null;
      }, _.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e2 : (t2 = new p.google.protobuf.EnumDescriptorProto.EnumReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, _.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, _.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, _), P), t.EnumValueDescriptorProto = (j.prototype.name = "", j.prototype.number = 0, j.prototype.options = null, j.create = function(e2) {
        return new j(e2);
      }, j.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(16).int32(e2.number), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.EnumValueOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, j.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, j.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumValueDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.number = e2.int32();
              break;
            case 3:
              o2.options = p.google.protobuf.EnumValueOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, j.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, j.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !i.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = p.google.protobuf.EnumValueOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, j.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumValueDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.EnumValueDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.EnumValueOptions.fromObject(e2.options);
        }
        return t2;
      }, j.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.number = 0, n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.EnumValueOptions.toObject(e2.options, t2)), n2;
      }, j.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, j), t.ServiceDescriptorProto = (S.prototype.name = "", S.prototype.method = i.emptyArray, S.prototype.options = null, S.create = function(e2) {
        return new S(e2);
      }, S.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.method && e2.method.length)
          for (var n2 = 0; n2 < e2.method.length; ++n2)
            p.google.protobuf.MethodDescriptorProto.encode(e2.method[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.ServiceOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, S.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, S.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.ServiceDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.method && o2.method.length || (o2.method = []), o2.method.push(p.google.protobuf.MethodDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = p.google.protobuf.ServiceOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, S.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, S.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.method && e2.hasOwnProperty("method")) {
          if (!Array.isArray(e2.method))
            return "method: array expected";
          for (var t2 = 0; t2 < e2.method.length; ++t2)
            if (n2 = p.google.protobuf.MethodDescriptorProto.verify(e2.method[t2]))
              return "method." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.ServiceOptions.verify(e2.options)))
          return "options." + n2;
        return null;
      }, S.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.ServiceDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.ServiceDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.method) {
          if (!Array.isArray(e2.method))
            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
          t2.method = [];
          for (var n2 = 0; n2 < e2.method.length; ++n2) {
            if ("object" != typeof e2.method[n2])
              throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
            t2.method[n2] = p.google.protobuf.MethodDescriptorProto.fromObject(e2.method[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.ServiceOptions.fromObject(e2.options);
        }
        return t2;
      }, S.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.method = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.method && e2.method.length) {
          n2.method = [];
          for (var o2 = 0; o2 < e2.method.length; ++o2)
            n2.method[o2] = p.google.protobuf.MethodDescriptorProto.toObject(e2.method[o2], t2);
        }
        return null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.ServiceOptions.toObject(e2.options, t2)), n2;
      }, S.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, S), t.MethodDescriptorProto = (x.prototype.name = "", x.prototype.inputType = "", x.prototype.outputType = "", x.prototype.options = null, x.prototype.clientStreaming = false, x.prototype.serverStreaming = false, x.create = function(e2) {
        return new x(e2);
      }, x.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.inputType && Object.hasOwnProperty.call(e2, "inputType") && t2.uint32(18).string(e2.inputType), null != e2.outputType && Object.hasOwnProperty.call(e2, "outputType") && t2.uint32(26).string(e2.outputType), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.MethodOptions.encode(e2.options, t2.uint32(34).fork()).ldelim(), null != e2.clientStreaming && Object.hasOwnProperty.call(e2, "clientStreaming") && t2.uint32(40).bool(e2.clientStreaming), null != e2.serverStreaming && Object.hasOwnProperty.call(e2, "serverStreaming") && t2.uint32(48).bool(e2.serverStreaming), t2;
      }, x.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, x.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.MethodDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.inputType = e2.string();
              break;
            case 3:
              o2.outputType = e2.string();
              break;
            case 4:
              o2.options = p.google.protobuf.MethodOptions.decode(e2, e2.uint32());
              break;
            case 5:
              o2.clientStreaming = e2.bool();
              break;
            case 6:
              o2.serverStreaming = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, x.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, x.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.inputType && e2.hasOwnProperty("inputType") && !i.isString(e2.inputType))
          return "inputType: string expected";
        if (null != e2.outputType && e2.hasOwnProperty("outputType") && !i.isString(e2.outputType))
          return "outputType: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = p.google.protobuf.MethodOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && "boolean" != typeof e2.clientStreaming ? "clientStreaming: boolean expected" : null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && "boolean" != typeof e2.serverStreaming ? "serverStreaming: boolean expected" : null;
      }, x.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.MethodDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.MethodDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.inputType && (t2.inputType = String(e2.inputType)), null != e2.outputType && (t2.outputType = String(e2.outputType)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.MethodOptions.fromObject(e2.options);
        }
        return null != e2.clientStreaming && (t2.clientStreaming = Boolean(e2.clientStreaming)), null != e2.serverStreaming && (t2.serverStreaming = Boolean(e2.serverStreaming)), t2;
      }, x.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.inputType = "", n2.outputType = "", n2.options = null, n2.clientStreaming = false, n2.serverStreaming = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.inputType && e2.hasOwnProperty("inputType") && (n2.inputType = e2.inputType), null != e2.outputType && e2.hasOwnProperty("outputType") && (n2.outputType = e2.outputType), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.MethodOptions.toObject(e2.options, t2)), null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && (n2.clientStreaming = e2.clientStreaming), null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && (n2.serverStreaming = e2.serverStreaming), n2;
      }, x.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, x), t.FileOptions = (k.prototype.javaPackage = "", k.prototype.javaOuterClassname = "", k.prototype.javaMultipleFiles = false, k.prototype.javaGenerateEqualsAndHash = false, k.prototype.javaStringCheckUtf8 = false, k.prototype.optimizeFor = 1, k.prototype.goPackage = "", k.prototype.ccGenericServices = false, k.prototype.javaGenericServices = false, k.prototype.pyGenericServices = false, k.prototype.phpGenericServices = false, k.prototype.deprecated = false, k.prototype.ccEnableArenas = true, k.prototype.objcClassPrefix = "", k.prototype.csharpNamespace = "", k.prototype.swiftPrefix = "", k.prototype.phpClassPrefix = "", k.prototype.phpNamespace = "", k.prototype.phpMetadataNamespace = "", k.prototype.rubyPackage = "", k.prototype.uninterpretedOption = i.emptyArray, k.create = function(e2) {
        return new k(e2);
      }, k.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.javaPackage && Object.hasOwnProperty.call(e2, "javaPackage") && t2.uint32(10).string(e2.javaPackage), null != e2.javaOuterClassname && Object.hasOwnProperty.call(e2, "javaOuterClassname") && t2.uint32(66).string(e2.javaOuterClassname), null != e2.optimizeFor && Object.hasOwnProperty.call(e2, "optimizeFor") && t2.uint32(72).int32(e2.optimizeFor), null != e2.javaMultipleFiles && Object.hasOwnProperty.call(e2, "javaMultipleFiles") && t2.uint32(80).bool(e2.javaMultipleFiles), null != e2.goPackage && Object.hasOwnProperty.call(e2, "goPackage") && t2.uint32(90).string(e2.goPackage), null != e2.ccGenericServices && Object.hasOwnProperty.call(e2, "ccGenericServices") && t2.uint32(128).bool(e2.ccGenericServices), null != e2.javaGenericServices && Object.hasOwnProperty.call(e2, "javaGenericServices") && t2.uint32(136).bool(e2.javaGenericServices), null != e2.pyGenericServices && Object.hasOwnProperty.call(e2, "pyGenericServices") && t2.uint32(144).bool(e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e2, "javaGenerateEqualsAndHash") && t2.uint32(160).bool(e2.javaGenerateEqualsAndHash), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(184).bool(e2.deprecated), null != e2.javaStringCheckUtf8 && Object.hasOwnProperty.call(e2, "javaStringCheckUtf8") && t2.uint32(216).bool(e2.javaStringCheckUtf8), null != e2.ccEnableArenas && Object.hasOwnProperty.call(e2, "ccEnableArenas") && t2.uint32(248).bool(e2.ccEnableArenas), null != e2.objcClassPrefix && Object.hasOwnProperty.call(e2, "objcClassPrefix") && t2.uint32(290).string(e2.objcClassPrefix), null != e2.csharpNamespace && Object.hasOwnProperty.call(e2, "csharpNamespace") && t2.uint32(298).string(e2.csharpNamespace), null != e2.swiftPrefix && Object.hasOwnProperty.call(e2, "swiftPrefix") && t2.uint32(314).string(e2.swiftPrefix), null != e2.phpClassPrefix && Object.hasOwnProperty.call(e2, "phpClassPrefix") && t2.uint32(322).string(e2.phpClassPrefix), null != e2.phpNamespace && Object.hasOwnProperty.call(e2, "phpNamespace") && t2.uint32(330).string(e2.phpNamespace), null != e2.phpGenericServices && Object.hasOwnProperty.call(e2, "phpGenericServices") && t2.uint32(336).bool(e2.phpGenericServices), null != e2.phpMetadataNamespace && Object.hasOwnProperty.call(e2, "phpMetadataNamespace") && t2.uint32(354).string(e2.phpMetadataNamespace), null != e2.rubyPackage && Object.hasOwnProperty.call(e2, "rubyPackage") && t2.uint32(362).string(e2.rubyPackage), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, k.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, k.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FileOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.javaPackage = e2.string();
              break;
            case 8:
              o2.javaOuterClassname = e2.string();
              break;
            case 10:
              o2.javaMultipleFiles = e2.bool();
              break;
            case 20:
              o2.javaGenerateEqualsAndHash = e2.bool();
              break;
            case 27:
              o2.javaStringCheckUtf8 = e2.bool();
              break;
            case 9:
              o2.optimizeFor = e2.int32();
              break;
            case 11:
              o2.goPackage = e2.string();
              break;
            case 16:
              o2.ccGenericServices = e2.bool();
              break;
            case 17:
              o2.javaGenericServices = e2.bool();
              break;
            case 18:
              o2.pyGenericServices = e2.bool();
              break;
            case 42:
              o2.phpGenericServices = e2.bool();
              break;
            case 23:
              o2.deprecated = e2.bool();
              break;
            case 31:
              o2.ccEnableArenas = e2.bool();
              break;
            case 36:
              o2.objcClassPrefix = e2.string();
              break;
            case 37:
              o2.csharpNamespace = e2.string();
              break;
            case 39:
              o2.swiftPrefix = e2.string();
              break;
            case 40:
              o2.phpClassPrefix = e2.string();
              break;
            case 41:
              o2.phpNamespace = e2.string();
              break;
            case 44:
              o2.phpMetadataNamespace = e2.string();
              break;
            case 45:
              o2.rubyPackage = e2.string();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, k.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, k.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && !i.isString(e2.javaPackage))
          return "javaPackage: string expected";
        if (null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && !i.isString(e2.javaOuterClassname))
          return "javaOuterClassname: string expected";
        if (null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && "boolean" != typeof e2.javaMultipleFiles)
          return "javaMultipleFiles: boolean expected";
        if (null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && "boolean" != typeof e2.javaGenerateEqualsAndHash)
          return "javaGenerateEqualsAndHash: boolean expected";
        if (null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && "boolean" != typeof e2.javaStringCheckUtf8)
          return "javaStringCheckUtf8: boolean expected";
        if (null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor"))
          switch (e2.optimizeFor) {
            default:
              return "optimizeFor: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.goPackage && e2.hasOwnProperty("goPackage") && !i.isString(e2.goPackage))
          return "goPackage: string expected";
        if (null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && "boolean" != typeof e2.ccGenericServices)
          return "ccGenericServices: boolean expected";
        if (null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && "boolean" != typeof e2.javaGenericServices)
          return "javaGenericServices: boolean expected";
        if (null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && "boolean" != typeof e2.pyGenericServices)
          return "pyGenericServices: boolean expected";
        if (null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && "boolean" != typeof e2.phpGenericServices)
          return "phpGenericServices: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && "boolean" != typeof e2.ccEnableArenas)
          return "ccEnableArenas: boolean expected";
        if (null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && !i.isString(e2.objcClassPrefix))
          return "objcClassPrefix: string expected";
        if (null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && !i.isString(e2.csharpNamespace))
          return "csharpNamespace: string expected";
        if (null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && !i.isString(e2.swiftPrefix))
          return "swiftPrefix: string expected";
        if (null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && !i.isString(e2.phpClassPrefix))
          return "phpClassPrefix: string expected";
        if (null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && !i.isString(e2.phpNamespace))
          return "phpNamespace: string expected";
        if (null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && !i.isString(e2.phpMetadataNamespace))
          return "phpMetadataNamespace: string expected";
        if (null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && !i.isString(e2.rubyPackage))
          return "rubyPackage: string expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, k.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FileOptions)
          return e2;
        var t2 = new p.google.protobuf.FileOptions();
        switch (null != e2.javaPackage && (t2.javaPackage = String(e2.javaPackage)), null != e2.javaOuterClassname && (t2.javaOuterClassname = String(e2.javaOuterClassname)), null != e2.javaMultipleFiles && (t2.javaMultipleFiles = Boolean(e2.javaMultipleFiles)), null != e2.javaGenerateEqualsAndHash && (t2.javaGenerateEqualsAndHash = Boolean(e2.javaGenerateEqualsAndHash)), null != e2.javaStringCheckUtf8 && (t2.javaStringCheckUtf8 = Boolean(e2.javaStringCheckUtf8)), e2.optimizeFor) {
          case "SPEED":
          case 1:
            t2.optimizeFor = 1;
            break;
          case "CODE_SIZE":
          case 2:
            t2.optimizeFor = 2;
            break;
          case "LITE_RUNTIME":
          case 3:
            t2.optimizeFor = 3;
        }
        if (null != e2.goPackage && (t2.goPackage = String(e2.goPackage)), null != e2.ccGenericServices && (t2.ccGenericServices = Boolean(e2.ccGenericServices)), null != e2.javaGenericServices && (t2.javaGenericServices = Boolean(e2.javaGenericServices)), null != e2.pyGenericServices && (t2.pyGenericServices = Boolean(e2.pyGenericServices)), null != e2.phpGenericServices && (t2.phpGenericServices = Boolean(e2.phpGenericServices)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.ccEnableArenas && (t2.ccEnableArenas = Boolean(e2.ccEnableArenas)), null != e2.objcClassPrefix && (t2.objcClassPrefix = String(e2.objcClassPrefix)), null != e2.csharpNamespace && (t2.csharpNamespace = String(e2.csharpNamespace)), null != e2.swiftPrefix && (t2.swiftPrefix = String(e2.swiftPrefix)), null != e2.phpClassPrefix && (t2.phpClassPrefix = String(e2.phpClassPrefix)), null != e2.phpNamespace && (t2.phpNamespace = String(e2.phpNamespace)), null != e2.phpMetadataNamespace && (t2.phpMetadataNamespace = String(e2.phpMetadataNamespace)), null != e2.rubyPackage && (t2.rubyPackage = String(e2.rubyPackage)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, k.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.javaPackage = "", n2.javaOuterClassname = "", n2.optimizeFor = t2.enums === String ? "SPEED" : 1, n2.javaMultipleFiles = false, n2.goPackage = "", n2.ccGenericServices = false, n2.javaGenericServices = false, n2.pyGenericServices = false, n2.javaGenerateEqualsAndHash = false, n2.deprecated = false, n2.javaStringCheckUtf8 = false, n2.ccEnableArenas = true, n2.objcClassPrefix = "", n2.csharpNamespace = "", n2.swiftPrefix = "", n2.phpClassPrefix = "", n2.phpNamespace = "", n2.phpGenericServices = false, n2.phpMetadataNamespace = "", n2.rubyPackage = ""), null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && (n2.javaPackage = e2.javaPackage), null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && (n2.javaOuterClassname = e2.javaOuterClassname), null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor") && (n2.optimizeFor = t2.enums === String ? p.google.protobuf.FileOptions.OptimizeMode[e2.optimizeFor] : e2.optimizeFor), null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && (n2.javaMultipleFiles = e2.javaMultipleFiles), null != e2.goPackage && e2.hasOwnProperty("goPackage") && (n2.goPackage = e2.goPackage), null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && (n2.ccGenericServices = e2.ccGenericServices), null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && (n2.javaGenericServices = e2.javaGenericServices), null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && (n2.pyGenericServices = e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && (n2.javaGenerateEqualsAndHash = e2.javaGenerateEqualsAndHash), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && (n2.javaStringCheckUtf8 = e2.javaStringCheckUtf8), null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && (n2.ccEnableArenas = e2.ccEnableArenas), null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && (n2.objcClassPrefix = e2.objcClassPrefix), null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && (n2.csharpNamespace = e2.csharpNamespace), null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && (n2.swiftPrefix = e2.swiftPrefix), null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && (n2.phpClassPrefix = e2.phpClassPrefix), null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && (n2.phpNamespace = e2.phpNamespace), null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && (n2.phpGenericServices = e2.phpGenericServices), null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && (n2.phpMetadataNamespace = e2.phpMetadataNamespace), null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && (n2.rubyPackage = e2.rubyPackage), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, k.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, k.OptimizeMode = (n = {}, (e = Object.create(n))[n[1] = "SPEED"] = 1, e[n[2] = "CODE_SIZE"] = 2, e[n[3] = "LITE_RUNTIME"] = 3, e), k), t.MessageOptions = (D.prototype.messageSetWireFormat = false, D.prototype.noStandardDescriptorAccessor = false, D.prototype.deprecated = false, D.prototype.mapEntry = false, D.prototype.uninterpretedOption = i.emptyArray, D.create = function(e2) {
        return new D(e2);
      }, D.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.messageSetWireFormat && Object.hasOwnProperty.call(e2, "messageSetWireFormat") && t2.uint32(8).bool(e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e2, "noStandardDescriptorAccessor") && t2.uint32(16).bool(e2.noStandardDescriptorAccessor), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.mapEntry && Object.hasOwnProperty.call(e2, "mapEntry") && t2.uint32(56).bool(e2.mapEntry), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, D.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, D.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.MessageOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.messageSetWireFormat = e2.bool();
              break;
            case 2:
              o2.noStandardDescriptorAccessor = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 7:
              o2.mapEntry = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, D.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, D.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && "boolean" != typeof e2.messageSetWireFormat)
          return "messageSetWireFormat: boolean expected";
        if (null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && "boolean" != typeof e2.noStandardDescriptorAccessor)
          return "noStandardDescriptorAccessor: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && "boolean" != typeof e2.mapEntry)
          return "mapEntry: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, D.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.MessageOptions)
          return e2;
        var t2 = new p.google.protobuf.MessageOptions();
        if (null != e2.messageSetWireFormat && (t2.messageSetWireFormat = Boolean(e2.messageSetWireFormat)), null != e2.noStandardDescriptorAccessor && (t2.noStandardDescriptorAccessor = Boolean(e2.noStandardDescriptorAccessor)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.mapEntry && (t2.mapEntry = Boolean(e2.mapEntry)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, D.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.messageSetWireFormat = false, n2.noStandardDescriptorAccessor = false, n2.deprecated = false, n2.mapEntry = false), null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && (n2.messageSetWireFormat = e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && (n2.noStandardDescriptorAccessor = e2.noStandardDescriptorAccessor), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && (n2.mapEntry = e2.mapEntry), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, D.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, D), t.FieldOptions = (T.prototype.ctype = 0, T.prototype.packed = false, T.prototype.jstype = 0, T.prototype.lazy = false, T.prototype.deprecated = false, T.prototype.weak = false, T.prototype.uninterpretedOption = i.emptyArray, T.create = function(e2) {
        return new T(e2);
      }, T.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.ctype && Object.hasOwnProperty.call(e2, "ctype") && t2.uint32(8).int32(e2.ctype), null != e2.packed && Object.hasOwnProperty.call(e2, "packed") && t2.uint32(16).bool(e2.packed), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.lazy && Object.hasOwnProperty.call(e2, "lazy") && t2.uint32(40).bool(e2.lazy), null != e2.jstype && Object.hasOwnProperty.call(e2, "jstype") && t2.uint32(48).int32(e2.jstype), null != e2.weak && Object.hasOwnProperty.call(e2, "weak") && t2.uint32(80).bool(e2.weak), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, T.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, T.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FieldOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.ctype = e2.int32();
              break;
            case 2:
              o2.packed = e2.bool();
              break;
            case 6:
              o2.jstype = e2.int32();
              break;
            case 5:
              o2.lazy = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 10:
              o2.weak = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, T.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, T.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.ctype && e2.hasOwnProperty("ctype"))
          switch (e2.ctype) {
            default:
              return "ctype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.packed && e2.hasOwnProperty("packed") && "boolean" != typeof e2.packed)
          return "packed: boolean expected";
        if (null != e2.jstype && e2.hasOwnProperty("jstype"))
          switch (e2.jstype) {
            default:
              return "jstype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.lazy && e2.hasOwnProperty("lazy") && "boolean" != typeof e2.lazy)
          return "lazy: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.weak && e2.hasOwnProperty("weak") && "boolean" != typeof e2.weak)
          return "weak: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, T.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FieldOptions)
          return e2;
        var t2 = new p.google.protobuf.FieldOptions();
        switch (e2.ctype) {
          case "STRING":
          case 0:
            t2.ctype = 0;
            break;
          case "CORD":
          case 1:
            t2.ctype = 1;
            break;
          case "STRING_PIECE":
          case 2:
            t2.ctype = 2;
        }
        switch (null != e2.packed && (t2.packed = Boolean(e2.packed)), e2.jstype) {
          case "JS_NORMAL":
          case 0:
            t2.jstype = 0;
            break;
          case "JS_STRING":
          case 1:
            t2.jstype = 1;
            break;
          case "JS_NUMBER":
          case 2:
            t2.jstype = 2;
        }
        if (null != e2.lazy && (t2.lazy = Boolean(e2.lazy)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.weak && (t2.weak = Boolean(e2.weak)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, T.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.ctype = t2.enums === String ? "STRING" : 0, n2.packed = false, n2.deprecated = false, n2.lazy = false, n2.jstype = t2.enums === String ? "JS_NORMAL" : 0, n2.weak = false), null != e2.ctype && e2.hasOwnProperty("ctype") && (n2.ctype = t2.enums === String ? p.google.protobuf.FieldOptions.CType[e2.ctype] : e2.ctype), null != e2.packed && e2.hasOwnProperty("packed") && (n2.packed = e2.packed), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.lazy && e2.hasOwnProperty("lazy") && (n2.lazy = e2.lazy), null != e2.jstype && e2.hasOwnProperty("jstype") && (n2.jstype = t2.enums === String ? p.google.protobuf.FieldOptions.JSType[e2.jstype] : e2.jstype), null != e2.weak && e2.hasOwnProperty("weak") && (n2.weak = e2.weak), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, T.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, T.CType = (n = {}, (e = Object.create(n))[n[0] = "STRING"] = 0, e[n[1] = "CORD"] = 1, e[n[2] = "STRING_PIECE"] = 2, e), T.JSType = (n = {}, (e = Object.create(n))[n[0] = "JS_NORMAL"] = 0, e[n[1] = "JS_STRING"] = 1, e[n[2] = "JS_NUMBER"] = 2, e), T), t.OneofOptions = (H.prototype.uninterpretedOption = i.emptyArray, H.create = function(e2) {
        return new H(e2);
      }, H.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, H.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, H.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.OneofOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, H.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, H.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, H.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.OneofOptions)
          return e2;
        var t2 = new p.google.protobuf.OneofOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, H.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, H.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, H), t.EnumOptions = (E.prototype.allowAlias = false, E.prototype.deprecated = false, E.prototype.uninterpretedOption = i.emptyArray, E.create = function(e2) {
        return new E(e2);
      }, E.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.allowAlias && Object.hasOwnProperty.call(e2, "allowAlias") && t2.uint32(16).bool(e2.allowAlias), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, E.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, E.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.allowAlias = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, E.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, E.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && "boolean" != typeof e2.allowAlias)
          return "allowAlias: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, E.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumOptions)
          return e2;
        var t2 = new p.google.protobuf.EnumOptions();
        if (null != e2.allowAlias && (t2.allowAlias = Boolean(e2.allowAlias)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, E.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.allowAlias = false, n2.deprecated = false), null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && (n2.allowAlias = e2.allowAlias), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, E.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, E), t.EnumValueOptions = (z.prototype.deprecated = false, z.prototype.uninterpretedOption = i.emptyArray, z.create = function(e2) {
        return new z(e2);
      }, z.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(8).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, z.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, z.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumValueOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, z.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, z.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, z.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumValueOptions)
          return e2;
        var t2 = new p.google.protobuf.EnumValueOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, z.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, z.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, z), t.ServiceOptions = (A.prototype.deprecated = false, A.prototype.uninterpretedOption = i.emptyArray, A.prototype[".google.api.defaultHost"] = "", A.prototype[".google.api.oauthScopes"] = "", A.create = function(e2) {
        return new A(e2);
      }, A.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.defaultHost"] && Object.hasOwnProperty.call(e2, ".google.api.defaultHost") && t2.uint32(8394).string(e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && Object.hasOwnProperty.call(e2, ".google.api.oauthScopes") && t2.uint32(8402).string(e2[".google.api.oauthScopes"]), t2;
      }, A.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, A.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.ServiceOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.api.defaultHost"] = e2.string();
              break;
            case 1050:
              o2[".google.api.oauthScopes"] = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, A.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, A.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && !i.isString(e2[".google.api.defaultHost"]) ? ".google.api.defaultHost: string expected" : null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && !i.isString(e2[".google.api.oauthScopes"]) ? ".google.api.oauthScopes: string expected" : null;
      }, A.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.ServiceOptions)
          return e2;
        var t2 = new p.google.protobuf.ServiceOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return null != e2[".google.api.defaultHost"] && (t2[".google.api.defaultHost"] = String(e2[".google.api.defaultHost"])), null != e2[".google.api.oauthScopes"] && (t2[".google.api.oauthScopes"] = String(e2[".google.api.oauthScopes"])), t2;
      }, A.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false, n2[".google.api.defaultHost"] = "", n2[".google.api.oauthScopes"] = ""), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && (n2[".google.api.defaultHost"] = e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && (n2[".google.api.oauthScopes"] = e2[".google.api.oauthScopes"]), n2;
      }, A.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, A), t.MethodOptions = (N.prototype.deprecated = false, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = i.emptyArray, N.prototype[".google.longrunning.operationInfo"] = null, N.prototype[".google.api.http"] = null, N.prototype[".google.api.methodSignature"] = i.emptyArray, N.create = function(e2) {
        return new N(e2);
      }, N.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.idempotencyLevel && Object.hasOwnProperty.call(e2, "idempotencyLevel") && t2.uint32(272).int32(e2.idempotencyLevel), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.longrunning.operationInfo"] && Object.hasOwnProperty.call(e2, ".google.longrunning.operationInfo") && p.google.longrunning.OperationInfo.encode(e2[".google.longrunning.operationInfo"], t2.uint32(8394).fork()).ldelim(), null != e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length)
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2.uint32(8410).string(e2[".google.api.methodSignature"][n2]);
        return null != e2[".google.api.http"] && Object.hasOwnProperty.call(e2, ".google.api.http") && p.google.api.HttpRule.encode(e2[".google.api.http"], t2.uint32(578365826).fork()).ldelim(), t2;
      }, N.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, N.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.MethodOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 34:
              o2.idempotencyLevel = e2.int32();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.longrunning.operationInfo"] = p.google.longrunning.OperationInfo.decode(e2, e2.uint32());
              break;
            case 72295728:
              o2[".google.api.http"] = p.google.api.HttpRule.decode(e2, e2.uint32());
              break;
            case 1051:
              o2[".google.api.methodSignature"] && o2[".google.api.methodSignature"].length || (o2[".google.api.methodSignature"] = []), o2[".google.api.methodSignature"].push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, N.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, N.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel"))
          switch (e2.idempotencyLevel) {
            default:
              return "idempotencyLevel: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.longrunning.operationInfo"] && e2.hasOwnProperty(".google.longrunning.operationInfo") && (n2 = p.google.longrunning.OperationInfo.verify(e2[".google.longrunning.operationInfo"])))
          return ".google.longrunning.operationInfo." + n2;
        if (null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2 = p.google.api.HttpRule.verify(e2[".google.api.http"])))
          return ".google.api.http." + n2;
        if (null != e2[".google.api.methodSignature"] && e2.hasOwnProperty(".google.api.methodSignature")) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            return ".google.api.methodSignature: array expected";
          for (t2 = 0; t2 < e2[".google.api.methodSignature"].length; ++t2)
            if (!i.isString(e2[".google.api.methodSignature"][t2]))
              return ".google.api.methodSignature: string[] expected";
        }
        return null;
      }, N.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.MethodOptions)
          return e2;
        var t2 = new p.google.protobuf.MethodOptions();
        switch (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.idempotencyLevel) {
          case "IDEMPOTENCY_UNKNOWN":
          case 0:
            t2.idempotencyLevel = 0;
            break;
          case "NO_SIDE_EFFECTS":
          case 1:
            t2.idempotencyLevel = 1;
            break;
          case "IDEMPOTENT":
          case 2:
            t2.idempotencyLevel = 2;
        }
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.longrunning.operationInfo"]) {
          if ("object" != typeof e2[".google.longrunning.operationInfo"])
            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
          t2[".google.longrunning.operationInfo"] = p.google.longrunning.OperationInfo.fromObject(e2[".google.longrunning.operationInfo"]);
        }
        if (null != e2[".google.api.http"]) {
          if ("object" != typeof e2[".google.api.http"])
            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
          t2[".google.api.http"] = p.google.api.HttpRule.fromObject(e2[".google.api.http"]);
        }
        if (e2[".google.api.methodSignature"]) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
          t2[".google.api.methodSignature"] = [];
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2[".google.api.methodSignature"][n2] = String(e2[".google.api.methodSignature"][n2]);
        }
        return t2;
      }, N.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.methodSignature"] = []), t2.defaults && (n2.deprecated = false, n2.idempotencyLevel = t2.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0, n2[".google.longrunning.operationInfo"] = null, n2[".google.api.http"] = null), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel") && (n2.idempotencyLevel = t2.enums === String ? p.google.protobuf.MethodOptions.IdempotencyLevel[e2.idempotencyLevel] : e2.idempotencyLevel), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (null != e2[".google.longrunning.operationInfo"] && e2.hasOwnProperty(".google.longrunning.operationInfo") && (n2[".google.longrunning.operationInfo"] = p.google.longrunning.OperationInfo.toObject(e2[".google.longrunning.operationInfo"], t2)), e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length) {
          n2[".google.api.methodSignature"] = [];
          for (o2 = 0; o2 < e2[".google.api.methodSignature"].length; ++o2)
            n2[".google.api.methodSignature"][o2] = e2[".google.api.methodSignature"][o2];
        }
        return null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2[".google.api.http"] = p.google.api.HttpRule.toObject(e2[".google.api.http"], t2)), n2;
      }, N.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, N.IdempotencyLevel = (n = {}, (e = Object.create(n))[n[0] = "IDEMPOTENCY_UNKNOWN"] = 0, e[n[1] = "NO_SIDE_EFFECTS"] = 1, e[n[2] = "IDEMPOTENT"] = 2, e), N), t.UninterpretedOption = (I.prototype.name = i.emptyArray, I.prototype.identifierValue = "", I.prototype.positiveIntValue = i.Long ? i.Long.fromBits(0, 0, true) : 0, I.prototype.negativeIntValue = i.Long ? i.Long.fromBits(0, 0, false) : 0, I.prototype.doubleValue = 0, I.prototype.stringValue = i.newBuffer([]), I.prototype.aggregateValue = "", I.create = function(e2) {
        return new I(e2);
      }, I.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && e2.name.length)
          for (var n2 = 0; n2 < e2.name.length; ++n2)
            p.google.protobuf.UninterpretedOption.NamePart.encode(e2.name[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.identifierValue && Object.hasOwnProperty.call(e2, "identifierValue") && t2.uint32(26).string(e2.identifierValue), null != e2.positiveIntValue && Object.hasOwnProperty.call(e2, "positiveIntValue") && t2.uint32(32).uint64(e2.positiveIntValue), null != e2.negativeIntValue && Object.hasOwnProperty.call(e2, "negativeIntValue") && t2.uint32(40).int64(e2.negativeIntValue), null != e2.doubleValue && Object.hasOwnProperty.call(e2, "doubleValue") && t2.uint32(49).double(e2.doubleValue), null != e2.stringValue && Object.hasOwnProperty.call(e2, "stringValue") && t2.uint32(58).bytes(e2.stringValue), null != e2.aggregateValue && Object.hasOwnProperty.call(e2, "aggregateValue") && t2.uint32(66).string(e2.aggregateValue), t2;
      }, I.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, I.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.UninterpretedOption(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.name && o2.name.length || (o2.name = []), o2.name.push(p.google.protobuf.UninterpretedOption.NamePart.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.identifierValue = e2.string();
              break;
            case 4:
              o2.positiveIntValue = e2.uint64();
              break;
            case 5:
              o2.negativeIntValue = e2.int64();
              break;
            case 6:
              o2.doubleValue = e2.double();
              break;
            case 7:
              o2.stringValue = e2.bytes();
              break;
            case 8:
              o2.aggregateValue = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, I.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, I.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name")) {
          if (!Array.isArray(e2.name))
            return "name: array expected";
          for (var t2 = 0; t2 < e2.name.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.NamePart.verify(e2.name[t2]);
            if (n2)
              return "name." + n2;
          }
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && !i.isString(e2.identifierValue) ? "identifierValue: string expected" : null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && !(i.isInteger(e2.positiveIntValue) || e2.positiveIntValue && i.isInteger(e2.positiveIntValue.low) && i.isInteger(e2.positiveIntValue.high)) ? "positiveIntValue: integer|Long expected" : null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && !(i.isInteger(e2.negativeIntValue) || e2.negativeIntValue && i.isInteger(e2.negativeIntValue.low) && i.isInteger(e2.negativeIntValue.high)) ? "negativeIntValue: integer|Long expected" : null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && "number" != typeof e2.doubleValue ? "doubleValue: number expected" : null != e2.stringValue && e2.hasOwnProperty("stringValue") && !(e2.stringValue && "number" == typeof e2.stringValue.length || i.isString(e2.stringValue)) ? "stringValue: buffer expected" : null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && !i.isString(e2.aggregateValue) ? "aggregateValue: string expected" : null;
      }, I.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.UninterpretedOption)
          return e2;
        var t2 = new p.google.protobuf.UninterpretedOption();
        if (e2.name) {
          if (!Array.isArray(e2.name))
            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
          t2.name = [];
          for (var n2 = 0; n2 < e2.name.length; ++n2) {
            if ("object" != typeof e2.name[n2])
              throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
            t2.name[n2] = p.google.protobuf.UninterpretedOption.NamePart.fromObject(e2.name[n2]);
          }
        }
        return null != e2.identifierValue && (t2.identifierValue = String(e2.identifierValue)), null != e2.positiveIntValue && (i.Long ? (t2.positiveIntValue = i.Long.fromValue(e2.positiveIntValue)).unsigned = true : "string" == typeof e2.positiveIntValue ? t2.positiveIntValue = parseInt(e2.positiveIntValue, 10) : "number" == typeof e2.positiveIntValue ? t2.positiveIntValue = e2.positiveIntValue : "object" == typeof e2.positiveIntValue && (t2.positiveIntValue = new i.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true))), null != e2.negativeIntValue && (i.Long ? (t2.negativeIntValue = i.Long.fromValue(e2.negativeIntValue)).unsigned = false : "string" == typeof e2.negativeIntValue ? t2.negativeIntValue = parseInt(e2.negativeIntValue, 10) : "number" == typeof e2.negativeIntValue ? t2.negativeIntValue = e2.negativeIntValue : "object" == typeof e2.negativeIntValue && (t2.negativeIntValue = new i.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber())), null != e2.doubleValue && (t2.doubleValue = Number(e2.doubleValue)), null != e2.stringValue && ("string" == typeof e2.stringValue ? i.base64.decode(e2.stringValue, t2.stringValue = i.newBuffer(i.base64.length(e2.stringValue)), 0) : e2.stringValue.length && (t2.stringValue = e2.stringValue)), null != e2.aggregateValue && (t2.aggregateValue = String(e2.aggregateValue)), t2;
      }, I.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (o2.name = []), t2.defaults && (o2.identifierValue = "", i.Long ? (n2 = new i.Long(0, 0, true), o2.positiveIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.positiveIntValue = t2.longs === String ? "0" : 0, i.Long ? (n2 = new i.Long(0, 0, false), o2.negativeIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.negativeIntValue = t2.longs === String ? "0" : 0, o2.doubleValue = 0, t2.bytes === String ? o2.stringValue = "" : (o2.stringValue = [], t2.bytes !== Array && (o2.stringValue = i.newBuffer(o2.stringValue))), o2.aggregateValue = ""), e2.name && e2.name.length) {
          o2.name = [];
          for (var r2 = 0; r2 < e2.name.length; ++r2)
            o2.name[r2] = p.google.protobuf.UninterpretedOption.NamePart.toObject(e2.name[r2], t2);
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && (o2.identifierValue = e2.identifierValue), null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && ("number" == typeof e2.positiveIntValue ? o2.positiveIntValue = t2.longs === String ? String(e2.positiveIntValue) : e2.positiveIntValue : o2.positiveIntValue = t2.longs === String ? i.Long.prototype.toString.call(e2.positiveIntValue) : t2.longs === Number ? new i.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true) : e2.positiveIntValue), null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && ("number" == typeof e2.negativeIntValue ? o2.negativeIntValue = t2.longs === String ? String(e2.negativeIntValue) : e2.negativeIntValue : o2.negativeIntValue = t2.longs === String ? i.Long.prototype.toString.call(e2.negativeIntValue) : t2.longs === Number ? new i.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber() : e2.negativeIntValue), null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && (o2.doubleValue = t2.json && !isFinite(e2.doubleValue) ? String(e2.doubleValue) : e2.doubleValue), null != e2.stringValue && e2.hasOwnProperty("stringValue") && (o2.stringValue = t2.bytes === String ? i.base64.encode(e2.stringValue, 0, e2.stringValue.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.stringValue) : e2.stringValue), null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && (o2.aggregateValue = e2.aggregateValue), o2;
      }, I.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, I.NamePart = (q.prototype.namePart = "", q.prototype.isExtension = false, q.create = function(e2) {
        return new q(e2);
      }, q.encode = function(e2, t2) {
        return (t2 = t2 || r.create()).uint32(10).string(e2.namePart), t2.uint32(16).bool(e2.isExtension), t2;
      }, q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.UninterpretedOption.NamePart(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.namePart = e2.string();
              break;
            case 2:
              o2.isExtension = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        if (!o2.hasOwnProperty("namePart"))
          throw i.ProtocolError("missing required 'namePart'", { instance: o2 });
        if (o2.hasOwnProperty("isExtension"))
          return o2;
        throw i.ProtocolError("missing required 'isExtension'", { instance: o2 });
      }, q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, q.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : i.isString(e2.namePart) ? "boolean" != typeof e2.isExtension ? "isExtension: boolean expected" : null : "namePart: string expected";
      }, q.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.UninterpretedOption.NamePart ? e2 : (t2 = new p.google.protobuf.UninterpretedOption.NamePart(), null != e2.namePart && (t2.namePart = String(e2.namePart)), null != e2.isExtension && (t2.isExtension = Boolean(e2.isExtension)), t2);
      }, q.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.namePart = "", n2.isExtension = false), null != e2.namePart && e2.hasOwnProperty("namePart") && (n2.namePart = e2.namePart), null != e2.isExtension && e2.hasOwnProperty("isExtension") && (n2.isExtension = e2.isExtension), n2;
      }, q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, q), I), t.SourceCodeInfo = (Y.prototype.location = i.emptyArray, Y.create = function(e2) {
        return new Y(e2);
      }, Y.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.location && e2.location.length)
          for (var n2 = 0; n2 < e2.location.length; ++n2)
            p.google.protobuf.SourceCodeInfo.Location.encode(e2.location[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, Y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.SourceCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.location && o2.location.length || (o2.location = []), o2.location.push(p.google.protobuf.SourceCodeInfo.Location.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, Y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Y.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.location && e2.hasOwnProperty("location")) {
          if (!Array.isArray(e2.location))
            return "location: array expected";
          for (var t2 = 0; t2 < e2.location.length; ++t2) {
            var n2 = p.google.protobuf.SourceCodeInfo.Location.verify(e2.location[t2]);
            if (n2)
              return "location." + n2;
          }
        }
        return null;
      }, Y.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.SourceCodeInfo)
          return e2;
        var t2 = new p.google.protobuf.SourceCodeInfo();
        if (e2.location) {
          if (!Array.isArray(e2.location))
            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
          t2.location = [];
          for (var n2 = 0; n2 < e2.location.length; ++n2) {
            if ("object" != typeof e2.location[n2])
              throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
            t2.location[n2] = p.google.protobuf.SourceCodeInfo.Location.fromObject(e2.location[n2]);
          }
        }
        return t2;
      }, Y.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.location = []), e2.location && e2.location.length) {
          n2.location = [];
          for (var o2 = 0; o2 < e2.location.length; ++o2)
            n2.location[o2] = p.google.protobuf.SourceCodeInfo.Location.toObject(e2.location[o2], t2);
        }
        return n2;
      }, Y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Y.Location = (R.prototype.path = i.emptyArray, R.prototype.span = i.emptyArray, R.prototype.leadingComments = "", R.prototype.trailingComments = "", R.prototype.leadingDetachedComments = i.emptyArray, R.create = function(e2) {
        return new R(e2);
      }, R.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        if (null != e2.span && e2.span.length) {
          t2.uint32(18).fork();
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.int32(e2.span[n2]);
          t2.ldelim();
        }
        if (null != e2.leadingComments && Object.hasOwnProperty.call(e2, "leadingComments") && t2.uint32(26).string(e2.leadingComments), null != e2.trailingComments && Object.hasOwnProperty.call(e2, "trailingComments") && t2.uint32(34).string(e2.trailingComments), null != e2.leadingDetachedComments && e2.leadingDetachedComments.length)
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.uint32(50).string(e2.leadingDetachedComments[n2]);
        return t2;
      }, R.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, R.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.SourceCodeInfo.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              if (o2.span && o2.span.length || (o2.span = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.span.push(e2.int32());
              else
                o2.span.push(e2.int32());
              break;
            case 3:
              o2.leadingComments = e2.string();
              break;
            case 4:
              o2.trailingComments = e2.string();
              break;
            case 6:
              o2.leadingDetachedComments && o2.leadingDetachedComments.length || (o2.leadingDetachedComments = []), o2.leadingDetachedComments.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, R.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, R.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!i.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        if (null != e2.span && e2.hasOwnProperty("span")) {
          if (!Array.isArray(e2.span))
            return "span: array expected";
          for (t2 = 0; t2 < e2.span.length; ++t2)
            if (!i.isInteger(e2.span[t2]))
              return "span: integer[] expected";
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && !i.isString(e2.leadingComments))
          return "leadingComments: string expected";
        if (null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && !i.isString(e2.trailingComments))
          return "trailingComments: string expected";
        if (null != e2.leadingDetachedComments && e2.hasOwnProperty("leadingDetachedComments")) {
          if (!Array.isArray(e2.leadingDetachedComments))
            return "leadingDetachedComments: array expected";
          for (t2 = 0; t2 < e2.leadingDetachedComments.length; ++t2)
            if (!i.isString(e2.leadingDetachedComments[t2]))
              return "leadingDetachedComments: string[] expected";
        }
        return null;
      }, R.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.SourceCodeInfo.Location)
          return e2;
        var t2 = new p.google.protobuf.SourceCodeInfo.Location();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        if (e2.span) {
          if (!Array.isArray(e2.span))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
          t2.span = [];
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.span[n2] = 0 | e2.span[n2];
        }
        if (null != e2.leadingComments && (t2.leadingComments = String(e2.leadingComments)), null != e2.trailingComments && (t2.trailingComments = String(e2.trailingComments)), e2.leadingDetachedComments) {
          if (!Array.isArray(e2.leadingDetachedComments))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
          t2.leadingDetachedComments = [];
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.leadingDetachedComments[n2] = String(e2.leadingDetachedComments[n2]);
        }
        return t2;
      }, R.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = [], n2.span = [], n2.leadingDetachedComments = []), t2.defaults && (n2.leadingComments = "", n2.trailingComments = ""), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        if (e2.span && e2.span.length) {
          n2.span = [];
          for (o2 = 0; o2 < e2.span.length; ++o2)
            n2.span[o2] = e2.span[o2];
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && (n2.leadingComments = e2.leadingComments), null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && (n2.trailingComments = e2.trailingComments), e2.leadingDetachedComments && e2.leadingDetachedComments.length) {
          n2.leadingDetachedComments = [];
          for (o2 = 0; o2 < e2.leadingDetachedComments.length; ++o2)
            n2.leadingDetachedComments[o2] = e2.leadingDetachedComments[o2];
        }
        return n2;
      }, R.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, R), Y), t.GeneratedCodeInfo = (W.prototype.annotation = i.emptyArray, W.create = function(e2) {
        return new W(e2);
      }, W.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.annotation && e2.annotation.length)
          for (var n2 = 0; n2 < e2.annotation.length; ++n2)
            p.google.protobuf.GeneratedCodeInfo.Annotation.encode(e2.annotation[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, W.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, W.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.GeneratedCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.annotation && o2.annotation.length || (o2.annotation = []), o2.annotation.push(p.google.protobuf.GeneratedCodeInfo.Annotation.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, W.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, W.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.annotation && e2.hasOwnProperty("annotation")) {
          if (!Array.isArray(e2.annotation))
            return "annotation: array expected";
          for (var t2 = 0; t2 < e2.annotation.length; ++t2) {
            var n2 = p.google.protobuf.GeneratedCodeInfo.Annotation.verify(e2.annotation[t2]);
            if (n2)
              return "annotation." + n2;
          }
        }
        return null;
      }, W.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.GeneratedCodeInfo)
          return e2;
        var t2 = new p.google.protobuf.GeneratedCodeInfo();
        if (e2.annotation) {
          if (!Array.isArray(e2.annotation))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
          t2.annotation = [];
          for (var n2 = 0; n2 < e2.annotation.length; ++n2) {
            if ("object" != typeof e2.annotation[n2])
              throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
            t2.annotation[n2] = p.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e2.annotation[n2]);
          }
        }
        return t2;
      }, W.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.annotation = []), e2.annotation && e2.annotation.length) {
          n2.annotation = [];
          for (var o2 = 0; o2 < e2.annotation.length; ++o2)
            n2.annotation[o2] = p.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e2.annotation[o2], t2);
        }
        return n2;
      }, W.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, W.Annotation = (C.prototype.path = i.emptyArray, C.prototype.sourceFile = "", C.prototype.begin = 0, C.prototype.end = 0, C.create = function(e2) {
        return new C(e2);
      }, C.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        return null != e2.sourceFile && Object.hasOwnProperty.call(e2, "sourceFile") && t2.uint32(18).string(e2.sourceFile), null != e2.begin && Object.hasOwnProperty.call(e2, "begin") && t2.uint32(24).int32(e2.begin), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(32).int32(e2.end), t2;
      }, C.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, C.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.GeneratedCodeInfo.Annotation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              o2.sourceFile = e2.string();
              break;
            case 3:
              o2.begin = e2.int32();
              break;
            case 4:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, C.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, C.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!i.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && !i.isString(e2.sourceFile) ? "sourceFile: string expected" : null != e2.begin && e2.hasOwnProperty("begin") && !i.isInteger(e2.begin) ? "begin: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end) ? "end: integer expected" : null;
      }, C.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.GeneratedCodeInfo.Annotation)
          return e2;
        var t2 = new p.google.protobuf.GeneratedCodeInfo.Annotation();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        return null != e2.sourceFile && (t2.sourceFile = String(e2.sourceFile)), null != e2.begin && (t2.begin = 0 | e2.begin), null != e2.end && (t2.end = 0 | e2.end), t2;
      }, C.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = []), t2.defaults && (n2.sourceFile = "", n2.begin = 0, n2.end = 0), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && (n2.sourceFile = e2.sourceFile), null != e2.begin && e2.hasOwnProperty("begin") && (n2.begin = e2.begin), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, C.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, C), W), t.Any = (X.prototype.type_url = "", X.prototype.value = i.newBuffer([]), X.create = function(e2) {
        return new X(e2);
      }, X.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.type_url && Object.hasOwnProperty.call(e2, "type_url") && t2.uint32(10).string(e2.type_url), null != e2.value && Object.hasOwnProperty.call(e2, "value") && t2.uint32(18).bytes(e2.value), t2;
      }, X.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, X.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.Any(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type_url = e2.string();
              break;
            case 2:
              o2.value = e2.bytes();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, X.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, X.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.type_url && e2.hasOwnProperty("type_url") && !i.isString(e2.type_url) ? "type_url: string expected" : null != e2.value && e2.hasOwnProperty("value") && !(e2.value && "number" == typeof e2.value.length || i.isString(e2.value)) ? "value: buffer expected" : null;
      }, X.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.Any ? e2 : (t2 = new p.google.protobuf.Any(), null != e2.type_url && (t2.type_url = String(e2.type_url)), null != e2.value && ("string" == typeof e2.value ? i.base64.decode(e2.value, t2.value = i.newBuffer(i.base64.length(e2.value)), 0) : e2.value.length && (t2.value = e2.value)), t2);
      }, X.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.type_url = "", t2.bytes === String ? n2.value = "" : (n2.value = [], t2.bytes !== Array && (n2.value = i.newBuffer(n2.value)))), null != e2.type_url && e2.hasOwnProperty("type_url") && (n2.type_url = e2.type_url), null != e2.value && e2.hasOwnProperty("value") && (n2.value = t2.bytes === String ? i.base64.encode(e2.value, 0, e2.value.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.value) : e2.value), n2;
      }, X.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, X), t.Duration = (K.prototype.seconds = i.Long ? i.Long.fromBits(0, 0, false) : 0, K.prototype.nanos = 0, K.create = function(e2) {
        return new K(e2);
      }, K.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.seconds && Object.hasOwnProperty.call(e2, "seconds") && t2.uint32(8).int64(e2.seconds), null != e2.nanos && Object.hasOwnProperty.call(e2, "nanos") && t2.uint32(16).int32(e2.nanos), t2;
      }, K.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, K.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.Duration(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.seconds = e2.int64();
              break;
            case 2:
              o2.nanos = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, K.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, K.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.seconds && e2.hasOwnProperty("seconds") && !(i.isInteger(e2.seconds) || e2.seconds && i.isInteger(e2.seconds.low) && i.isInteger(e2.seconds.high)) ? "seconds: integer|Long expected" : null != e2.nanos && e2.hasOwnProperty("nanos") && !i.isInteger(e2.nanos) ? "nanos: integer expected" : null;
      }, K.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.Duration ? e2 : (t2 = new p.google.protobuf.Duration(), null != e2.seconds && (i.Long ? (t2.seconds = i.Long.fromValue(e2.seconds)).unsigned = false : "string" == typeof e2.seconds ? t2.seconds = parseInt(e2.seconds, 10) : "number" == typeof e2.seconds ? t2.seconds = e2.seconds : "object" == typeof e2.seconds && (t2.seconds = new i.LongBits(e2.seconds.low >>> 0, e2.seconds.high >>> 0).toNumber())), null != e2.nanos && (t2.nanos = 0 | e2.nanos), t2);
      }, K.toObject = function(e2, t2) {
        var n2, o2 = {};
        return (t2 = t2 || {}).defaults && (i.Long ? (n2 = new i.Long(0, 0, false), o2.seconds = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.seconds = t2.longs === String ? "0" : 0, o2.nanos = 0), null != e2.seconds && e2.hasOwnProperty("seconds") && ("number" == typeof e2.seconds ? o2.seconds = t2.longs === String ? String(e2.seconds) : e2.seconds : o2.seconds = t2.longs === String ? i.Long.prototype.toString.call(e2.seconds) : t2.longs === Number ? new i.LongBits(e2.seconds.low >>> 0, e2.seconds.high >>> 0).toNumber() : e2.seconds), null != e2.nanos && e2.hasOwnProperty("nanos") && (o2.nanos = e2.nanos), o2;
      }, K.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, K), t.Empty = (Q.create = function(e2) {
        return new Q(e2);
      }, Q.encode = function(e2, t2) {
        return t2 = t2 || r.create();
      }, Q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, t2 = new p.google.protobuf.Empty(); e2.pos < n2; ) {
          var o2 = e2.uint32();
          e2.skipType(7 & o2);
        }
        return t2;
      }, Q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Q.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null;
      }, Q.fromObject = function(e2) {
        return e2 instanceof p.google.protobuf.Empty ? e2 : new p.google.protobuf.Empty();
      }, Q.toObject = function() {
        return {};
      }, Q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Q), t), F.rpc = ((n = {}).Status = (V.prototype.code = 0, V.prototype.message = "", V.prototype.details = i.emptyArray, V.create = function(e2) {
        return new V(e2);
      }, V.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.code && Object.hasOwnProperty.call(e2, "code") && t2.uint32(8).int32(e2.code), null != e2.message && Object.hasOwnProperty.call(e2, "message") && t2.uint32(18).string(e2.message), null != e2.details && e2.details.length)
          for (var n2 = 0; n2 < e2.details.length; ++n2)
            p.google.protobuf.Any.encode(e2.details[n2], t2.uint32(26).fork()).ldelim();
        return t2;
      }, V.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, V.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.rpc.Status(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.code = e2.int32();
              break;
            case 2:
              o2.message = e2.string();
              break;
            case 3:
              o2.details && o2.details.length || (o2.details = []), o2.details.push(p.google.protobuf.Any.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, V.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, V.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.code && e2.hasOwnProperty("code") && !i.isInteger(e2.code))
          return "code: integer expected";
        if (null != e2.message && e2.hasOwnProperty("message") && !i.isString(e2.message))
          return "message: string expected";
        if (null != e2.details && e2.hasOwnProperty("details")) {
          if (!Array.isArray(e2.details))
            return "details: array expected";
          for (var t2 = 0; t2 < e2.details.length; ++t2) {
            var n2 = p.google.protobuf.Any.verify(e2.details[t2]);
            if (n2)
              return "details." + n2;
          }
        }
        return null;
      }, V.fromObject = function(e2) {
        if (e2 instanceof p.google.rpc.Status)
          return e2;
        var t2 = new p.google.rpc.Status();
        if (null != e2.code && (t2.code = 0 | e2.code), null != e2.message && (t2.message = String(e2.message)), e2.details) {
          if (!Array.isArray(e2.details))
            throw TypeError(".google.rpc.Status.details: array expected");
          t2.details = [];
          for (var n2 = 0; n2 < e2.details.length; ++n2) {
            if ("object" != typeof e2.details[n2])
              throw TypeError(".google.rpc.Status.details: object expected");
            t2.details[n2] = p.google.protobuf.Any.fromObject(e2.details[n2]);
          }
        }
        return t2;
      }, V.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.details = []), t2.defaults && (n2.code = 0, n2.message = ""), null != e2.code && e2.hasOwnProperty("code") && (n2.code = e2.code), null != e2.message && e2.hasOwnProperty("message") && (n2.message = e2.message), e2.details && e2.details.length) {
          n2.details = [];
          for (var o2 = 0; o2 < e2.details.length; ++o2)
            n2.details[o2] = p.google.protobuf.Any.toObject(e2.details[o2], t2);
        }
        return n2;
      }, V.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, V), n), F), p;
    });
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longrunning.js
var require_longrunning = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longrunning.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.operation = exports2.Operation = void 0;
    var events_1 = require_events();
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var operationProtos = require_operations();
    var Operation = class extends events_1.EventEmitter {
      /**
       * Wrapper for a google.longrunnung.Operation.
       *
       * @constructor
       *
       * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.
       * @param {LongRunningDescriptor} longrunningDescriptor - This defines the
       * operations service client and unpacking mechanisms for the operation.
       * @param {BackoffSettings} backoffSettings - The backoff settings used in
       * in polling the operation.
       * @param {CallOptions} callOptions - CallOptions used in making get operation
       * requests.
       */
      constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {
        super();
        this.completeListeners = 0;
        this.hasActiveListeners = false;
        this.latestResponse = grpcOp;
        this.name = this.latestResponse.name;
        this.done = this.latestResponse.done;
        this.error = this.latestResponse.error;
        this.longrunningDescriptor = longrunningDescriptor;
        this.result = null;
        this.metadata = null;
        this.backoffSettings = backoffSettings;
        this._unpackResponse(grpcOp);
        this._listenForEvents();
        this._callOptions = callOptions;
      }
      /**
       * Begin listening for events on the operation. This method keeps track of how
       * many "complete" listeners are registered and removed, making sure polling
       * is handled automatically.
       *
       * As long as there is one active "complete" listener, the connection is open.
       * When there are no more listeners, the polling stops.
       *
       * @private
       */
      _listenForEvents() {
        this.on("newListener", (event) => {
          if (event === "complete") {
            this.completeListeners++;
            if (!this.hasActiveListeners) {
              this.hasActiveListeners = true;
              this.startPolling_();
            }
          }
        });
        this.on("removeListener", (event) => {
          if (event === "complete" && --this.completeListeners === 0) {
            this.hasActiveListeners = false;
          }
        });
      }
      /**
       * Cancels current polling api call and cancels the operation.
       *
       * @return {Promise} the promise of the OperationsClient#cancelOperation api
       * request.
       */
      cancel() {
        if (this.currentCallPromise_) {
          this.currentCallPromise_.cancel();
        }
        const operationsClient = this.longrunningDescriptor.operationsClient;
        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();
        cancelRequest.name = this.latestResponse.name;
        return operationsClient.cancelOperation(cancelRequest);
      }
      getOperation(callback) {
        const self2 = this;
        const operationsClient = this.longrunningDescriptor.operationsClient;
        function promisifyResponse() {
          if (!callback) {
            return new Promise((resolve, reject) => {
              if (self2.latestResponse.error) {
                const error = new googleError_1.GoogleError(self2.latestResponse.error.message);
                error.code = self2.latestResponse.error.code;
                reject(error);
              } else {
                resolve([self2.result, self2.metadata, self2.latestResponse]);
              }
            });
          }
          return;
        }
        if (this.latestResponse.done) {
          this._unpackResponse(this.latestResponse, callback);
          return promisifyResponse();
        }
        const request = new operationProtos.google.longrunning.GetOperationRequest();
        request.name = this.latestResponse.name;
        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);
        const noCallbackPromise = this.currentCallPromise_.then((responses) => {
          self2.latestResponse = responses[0];
          self2._unpackResponse(responses[0], callback);
          return promisifyResponse();
        }, (err) => {
          if (callback) {
            callback(err);
            return;
          }
          return Promise.reject(err);
        });
        if (!callback) {
          return noCallbackPromise;
        }
      }
      _unpackResponse(op, callback) {
        const responseDecoder = this.longrunningDescriptor.responseDecoder;
        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;
        let response;
        let metadata;
        if (op.done) {
          if (op.result === "error") {
            const error = new googleError_1.GoogleError(op.error.message);
            error.code = op.error.code;
            this.error = error;
            if (callback) {
              callback(error);
            }
            return;
          }
          if (responseDecoder && op.response) {
            this.response = op.response;
            response = responseDecoder(op.response.value);
            this.result = response;
            this.done = true;
          }
        }
        if (metadataDecoder && op.metadata) {
          metadata = metadataDecoder(op.metadata.value);
          this.metadata = metadata;
        }
        if (callback) {
          callback(null, response, metadata, op);
        }
      }
      /**
       * Poll `getOperation` to check the operation's status. This runs a loop to
       * ping using the backoff strategy specified at initialization.
       *
       * Note: This method is automatically called once a "complete" event handler
       * is registered on the operation.
       *
       * @private
       */
      startPolling_() {
        const self2 = this;
        let now = /* @__PURE__ */ new Date();
        const delayMult = this.backoffSettings.retryDelayMultiplier;
        const maxDelay = this.backoffSettings.maxRetryDelayMillis;
        let delay = this.backoffSettings.initialRetryDelayMillis;
        let deadline = Infinity;
        if (this.backoffSettings.totalTimeoutMillis) {
          deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;
        }
        let previousMetadataBytes;
        if (this.latestResponse.metadata) {
          previousMetadataBytes = this.latestResponse.metadata.value;
        }
        function emit(event, ...args) {
          self2.emit(event, ...args);
        }
        function arrayEquals(a, b) {
          if (a.byteLength !== b.byteLength) {
            return false;
          }
          for (let i = 0; i < a.byteLength; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        }
        function retry() {
          if (!self2.hasActiveListeners) {
            return;
          }
          if (now.getTime() >= deadline) {
            const error = new googleError_1.GoogleError("Total timeout exceeded before any response was received");
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            setImmediate(emit, "error", error);
            return;
          }
          self2.getOperation((err, result, metadata, rawResponse) => {
            if (err) {
              setImmediate(emit, "error", err);
              return;
            }
            if (!result) {
              if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {
                setImmediate(emit, "progress", metadata, rawResponse);
                previousMetadataBytes = rawResponse.metadata.value;
              }
              if (rawResponse.done) {
                setImmediate(emit, "complete", {}, metadata, rawResponse);
                return;
              }
              setTimeout(() => {
                now = /* @__PURE__ */ new Date();
                delay = Math.min(delay * delayMult, maxDelay);
                retry();
              }, delay);
              return;
            }
            setImmediate(emit, "complete", result, metadata, rawResponse);
          });
        }
        retry();
      }
      /**
       * Wraps the `complete` and `error` events in a Promise.
       *
       * @return {promise} - Promise that resolves on operation completion and rejects
       * on operation error.
       */
      promise() {
        return new Promise((resolve, reject) => {
          this.on("error", reject).on("complete", (result, metadata, rawResponse) => {
            resolve([result, metadata, rawResponse]);
          });
        });
      }
    };
    exports2.Operation = Operation;
    function operation(op, longrunningDescriptor, backoffSettings, callOptions) {
      return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);
    }
    exports2.operation = operation;
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js
var require_longRunningApiCaller = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LongrunningApiCaller = void 0;
    var call_1 = require_call();
    var gax_1 = require_gax();
    var longrunning_1 = require_longrunning();
    var LongrunningApiCaller = class {
      /**
       * Creates an API caller that performs polling on a long running operation.
       *
       * @private
       * @constructor
       * @param {LongRunningDescriptor} longrunningDescriptor - Holds the
       * decoders used for unpacking responses and the operationsClient
       * used for polling the operation.
       */
      constructor(longrunningDescriptor) {
        this.longrunningDescriptor = longrunningDescriptor;
      }
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, canceller) {
        canceller.call((argument2, callback) => {
          return this._wrapOperation(apiCall, settings, argument2, callback);
        }, argument);
      }
      _wrapOperation(apiCall, settings, argument, callback) {
        let backoffSettings = settings.longrunning;
        if (!backoffSettings) {
          backoffSettings = (0, gax_1.createDefaultBackoffSettings)();
        }
        const longrunningDescriptor = this.longrunningDescriptor;
        return apiCall(argument, (err, rawResponse) => {
          if (err) {
            callback(err, null, null, rawResponse);
            return;
          }
          const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);
          callback(null, operation, rawResponse);
        });
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.LongrunningApiCaller = LongrunningApiCaller;
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js
var require_longRunningDescriptor = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LongRunningDescriptor = void 0;
    var longRunningApiCaller_1 = require_longRunningApiCaller();
    var LongRunningDescriptor = class {
      constructor(operationsClient, responseDecoder, metadataDecoder) {
        this.operationsClient = operationsClient;
        this.responseDecoder = responseDecoder;
        this.metadataDecoder = metadataDecoder;
      }
      getApiCaller() {
        return new longRunningApiCaller_1.LongrunningApiCaller(this);
      }
    };
    exports2.LongRunningDescriptor = LongRunningDescriptor;
  }
});

// node_modules/google-gax/build/src/paginationCalls/resourceCollector.js
var require_resourceCollector = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/resourceCollector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResourceCollector = void 0;
    var ResourceCollector = class {
      constructor(apiCall, maxResults = -1) {
        this.apiCall = apiCall;
        this.resources = [];
        this.maxResults = maxResults;
      }
      callback(err, resources, nextPageRequest) {
        if (err) {
          this.rejectCallback(err);
          return;
        }
        for (const resource of resources) {
          this.resources.push(resource);
          if (this.resources.length === this.maxResults) {
            nextPageRequest = null;
            break;
          }
        }
        if (!nextPageRequest) {
          this.resolveCallback(this.resources);
          return;
        }
        const callback = (...args) => this.callback(...args);
        setImmediate(this.apiCall, nextPageRequest, callback);
      }
      processAllPages(firstRequest) {
        return new Promise((resolve, reject) => {
          this.resolveCallback = resolve;
          this.rejectCallback = reject;
          const callback = (...args) => this.callback(...args);
          setImmediate(this.apiCall, firstRequest, callback);
        });
      }
    };
    exports2.ResourceCollector = ResourceCollector;
  }
});

// node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js
var require_pagedApiCaller = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PagedApiCaller = void 0;
    var call_1 = require_call();
    var googleError_1 = require_googleError();
    var resourceCollector_1 = require_resourceCollector();
    var PagedApiCaller = class {
      /**
       * Creates an API caller that returns a stream to performs page-streaming.
       *
       * @private
       * @constructor
       * @param {PageDescriptor} pageDescriptor - indicates the structure
       *   of page streaming to be performed.
       */
      constructor(pageDescriptor) {
        this.pageDescriptor = pageDescriptor;
      }
      /**
       * This function translates between regular gRPC calls (that accepts a request and returns a response,
       * and does not know anything about pages and page tokens) and the users' callback (that expects
       * to see resources from one page, a request to get the next page, and the raw response from the server).
       *
       * It generates a function that can be passed as a callback function to a gRPC call, will understand
       * pagination-specific fields in the response, and call the users' callback after having those fields
       * parsed.
       *
       * @param request Request object. It needs to be passed to all subsequent next page requests
       * (the main content of the request object stays unchanged, only the next page token changes)
       * @param callback The user's callback that expects the page content, next page request, and raw response.
       */
      generateParseResponseCallback(request, callback) {
        const resourceFieldName = this.pageDescriptor.resourceField;
        const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;
        const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;
        return (err, response) => {
          if (err) {
            callback(err);
            return;
          }
          if (!request) {
            callback(new googleError_1.GoogleError("Undefined request in pagination method callback."));
            return;
          }
          if (!response) {
            callback(new googleError_1.GoogleError("Undefined response in pagination method callback."));
            return;
          }
          const resources = response[resourceFieldName] || [];
          const pageToken = response[responsePageTokenFieldName];
          let nextPageRequest = null;
          if (pageToken) {
            nextPageRequest = Object.assign({}, request);
            nextPageRequest[requestPageTokenFieldName] = pageToken;
          }
          callback(err, resources, nextPageRequest, response);
        };
      }
      /**
       * Adds a special ability to understand pagination-specific fields to the existing gRPC call.
       * The original gRPC call just calls callback(err, result).
       * The wrapped one will call callback(err, resources, nextPageRequest, rawResponse) instead.
       *
       * @param func gRPC call (normally, a service stub call). The gRPC call is expected to accept four parameters:
       * request, metadata, call options, and callback.
       */
      wrap(func) {
        const self2 = this;
        return function wrappedCall(argument, metadata, options, callback) {
          return func(argument, metadata, options, self2.generateParseResponseCallback(argument, callback));
        };
      }
      /**
       * Makes it possible to use both callback-based and promise-based calls.
       * Returns an OngoingCall or OngoingCallPromise object.
       * Regardless of which one is returned, it always has a `.callback` to call.
       *
       * @param settings Call settings. Can only be used to replace Promise with another promise implementation.
       * @param [callback] Callback to be called, if any.
       */
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      /**
       * Implements auto-pagination logic.
       *
       * @param apiCall A function that performs gRPC request and calls its callback with a response or an error.
       * It's supposed to be a gRPC service stub function wrapped into several layers of wrappers that make it
       * accept just two parameters: (request, callback).
       * @param request A request object that came from the user.
       * @param settings Call settings. We are interested in `maxResults` and `autoPaginate` (they are optional).
       * @param ongoingCall An instance of OngoingCall or OngoingCallPromise that can be used for call cancellation,
       * and is used to return results to the user.
       */
      call(apiCall, request, settings, ongoingCall) {
        request = Object.assign({}, request);
        if (!settings.autoPaginate) {
          ongoingCall.call(apiCall, request);
          return;
        }
        const maxResults = settings.maxResults || -1;
        const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);
        resourceCollector.processAllPages(request).then((resources) => ongoingCall.callback(null, resources), (err) => ongoingCall.callback(err));
      }
      fail(ongoingCall, err) {
        ongoingCall.callback(err);
      }
      result(ongoingCall) {
        return ongoingCall.promise;
      }
    };
    exports2.PagedApiCaller = PagedApiCaller;
  }
});

// node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js
var require_pageDescriptor = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PageDescriptor = void 0;
    var stream_1 = require_stream();
    var normalApiCaller_1 = require_normalApiCaller();
    var pagedApiCaller_1 = require_pagedApiCaller();
    var maxAttemptsEmptyResponse = 10;
    var PageDescriptor = class {
      constructor(requestPageTokenField, responsePageTokenField, resourceField) {
        this.requestPageTokenField = requestPageTokenField;
        this.responsePageTokenField = responsePageTokenField;
        this.resourceField = resourceField;
      }
      /**
       * Creates a new object Stream which emits the resource on 'data' event.
       */
      createStream(apiCall, request, options) {
        const stream = new stream_1.PassThrough({ objectMode: true });
        options = Object.assign({}, options, { autoPaginate: false });
        const maxResults = "maxResults" in options ? options.maxResults : -1;
        let pushCount = 0;
        let started = false;
        function callback(err, resources, next, apiResp) {
          if (err) {
            stream.emit("error", err);
            return;
          }
          stream.emit("response", apiResp);
          for (let i = 0; i < resources.length; ++i) {
            if (stream._readableState.ended) {
              return;
            }
            if (resources[i] === null) {
              continue;
            }
            stream.push(resources[i]);
            pushCount++;
            if (pushCount === maxResults) {
              stream.end();
            }
          }
          if (stream._readableState.ended) {
            return;
          }
          if (!next) {
            stream.end();
            return;
          }
          if ("pageToken" in options) {
            delete options.pageToken;
          }
          if (stream.isPaused()) {
            request = next;
            started = false;
          } else {
            setImmediate(apiCall, next, options, callback);
          }
        }
        stream.on("resume", () => {
          if (!started) {
            started = true;
            apiCall(request, options, callback);
          }
        });
        return stream;
      }
      /**
       * Create an async iterable which can be recursively called for data on-demand.
       */
      asyncIterate(apiCall, request, options) {
        options = Object.assign({}, options, { autoPaginate: false });
        const iterable = this.createIterator(apiCall, request, options);
        return iterable;
      }
      createIterator(apiCall, request, options) {
        const asyncIterable = {
          [Symbol.asyncIterator]() {
            let nextPageRequest = request;
            const cache = [];
            return {
              async next() {
                if (cache.length > 0) {
                  return Promise.resolve({
                    done: false,
                    value: cache.shift()
                  });
                }
                let attempts = 0;
                while (cache.length === 0 && nextPageRequest) {
                  let result;
                  [result, nextPageRequest] = await apiCall(nextPageRequest, options);
                  if (result && !Array.isArray(result)) {
                    for (const [key, value] of Object.entries(result)) {
                      cache.push([key, value]);
                    }
                  } else {
                    cache.push(...result);
                  }
                  if (cache.length === 0) {
                    ++attempts;
                    if (attempts > maxAttemptsEmptyResponse) {
                      break;
                    }
                  }
                }
                if (cache.length === 0) {
                  return Promise.resolve({ done: true, value: void 0 });
                }
                return Promise.resolve({ done: false, value: cache.shift() });
              }
            };
          }
        };
        return asyncIterable;
      }
      getApiCaller(settings) {
        if (!settings.autoPaginate) {
          return new normalApiCaller_1.NormalApiCaller();
        }
        return new pagedApiCaller_1.PagedApiCaller(this);
      }
    };
    exports2.PageDescriptor = PageDescriptor;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streaming.js
var require_streaming = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streaming.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamProxy = exports2.StreamType = void 0;
    var googleError_1 = require_googleError();
    var duplexify = require_duplexify();
    var retryRequest = require_retry_request();
    var StreamType;
    (function(StreamType2) {
      StreamType2[StreamType2["SERVER_STREAMING"] = 1] = "SERVER_STREAMING";
      StreamType2[StreamType2["CLIENT_STREAMING"] = 2] = "CLIENT_STREAMING";
      StreamType2[StreamType2["BIDI_STREAMING"] = 3] = "BIDI_STREAMING";
    })(StreamType || (exports2.StreamType = StreamType = {}));
    var StreamProxy = class extends duplexify {
      /**
       * StreamProxy is a proxy to gRPC-streaming method.
       *
       * @private
       * @constructor
       * @param {StreamType} type - the type of gRPC stream.
       * @param {ApiCallback} callback - the callback for further API call.
       */
      constructor(type, callback, rest) {
        super(void 0, void 0, {
          objectMode: true,
          readable: type !== StreamType.CLIENT_STREAMING,
          writable: type !== StreamType.SERVER_STREAMING
        });
        this.type = type;
        this._callback = callback;
        this._isCancelCalled = false;
        this._responseHasSent = false;
        this.rest = rest;
      }
      cancel() {
        if (this.stream) {
          this.stream.cancel();
        } else {
          this._isCancelCalled = true;
        }
      }
      /**
       * Forward events from an API request stream to the user's stream.
       * @param {Stream} stream - The API request stream.
       */
      forwardEvents(stream) {
        const eventsToForward = ["metadata", "response", "status"];
        eventsToForward.forEach((event) => {
          stream.on(event, this.emit.bind(this, event));
        });
        stream.on("status", () => {
          if (!this._responseHasSent) {
            stream.emit("response", {
              code: 200,
              details: "",
              message: "OK"
            });
          }
        });
        stream.on("metadata", (metadata) => {
          stream.emit("response", {
            code: 200,
            details: "",
            message: "OK",
            metadata
          });
          this._responseHasSent = true;
        });
        stream.on("error", (error) => {
          googleError_1.GoogleError.parseGRPCStatusDetails(error);
        });
      }
      /**
       * Specifies the target stream.
       * @param {ApiCall} apiCall - the API function to be called.
       * @param {Object} argument - the argument to be passed to the apiCall.
       */
      setStream(apiCall, argument, retryRequestOptions = {}) {
        if (this.type === StreamType.SERVER_STREAMING) {
          if (this.rest) {
            const stream2 = apiCall(argument, this._callback);
            this.stream = stream2;
            this.setReadable(stream2);
          } else {
            const retryStream = retryRequest(null, {
              objectMode: true,
              request: () => {
                if (this._isCancelCalled) {
                  if (this.stream) {
                    this.stream.cancel();
                  }
                  return;
                }
                const stream2 = apiCall(argument, this._callback);
                this.stream = stream2;
                this.forwardEvents(stream2);
                return stream2;
              },
              retries: retryRequestOptions.retries,
              currentRetryAttempt: retryRequestOptions.currentRetryAttempt,
              noResponseRetries: retryRequestOptions.noResponseRetries,
              shouldRetryFn: retryRequestOptions.shouldRetryFn
            });
            this.setReadable(retryStream);
          }
          return;
        }
        const stream = apiCall(argument, this._callback);
        this.stream = stream;
        this.forwardEvents(stream);
        if (this.type === StreamType.CLIENT_STREAMING) {
          this.setWritable(stream);
        }
        if (this.type === StreamType.BIDI_STREAMING) {
          this.setReadable(stream);
          this.setWritable(stream);
        }
        if (this._isCancelCalled && this.stream) {
          this.stream.cancel();
        }
      }
    };
    exports2.StreamProxy = StreamProxy;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js
var require_streamingApiCaller = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamingApiCaller = void 0;
    var warnings_1 = require_warnings();
    var streaming_1 = require_streaming();
    var StreamingApiCaller = class {
      /**
       * An API caller for methods of gRPC streaming.
       * @private
       * @constructor
       * @param {StreamDescriptor} descriptor - the descriptor of the method structure.
       */
      constructor(descriptor) {
        this.descriptor = descriptor;
      }
      init(callback) {
        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest);
      }
      wrap(func) {
        switch (this.descriptor.type) {
          case streaming_1.StreamType.SERVER_STREAMING:
            return (argument, metadata, options) => {
              return func(argument, metadata, options);
            };
          case streaming_1.StreamType.CLIENT_STREAMING:
            return (argument, metadata, options, callback) => {
              return func(metadata, options, callback);
            };
          case streaming_1.StreamType.BIDI_STREAMING:
            return (argument, metadata, options) => {
              return func(metadata, options);
            };
          default:
            (0, warnings_1.warn)("streaming_wrap_unknown_stream_type", `Unknown stream type: ${this.descriptor.type}`);
        }
        return func;
      }
      call(apiCall, argument, settings, stream) {
        stream.setStream(apiCall, argument, settings.retryRequestOptions);
      }
      fail(stream, err) {
        stream.emit("error", err);
      }
      result(stream) {
        return stream;
      }
    };
    exports2.StreamingApiCaller = StreamingApiCaller;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js
var require_streamDescriptor = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamDescriptor = void 0;
    var streamingApiCaller_1 = require_streamingApiCaller();
    var StreamDescriptor = class {
      constructor(streamType, rest) {
        this.type = streamType;
        this.streaming = true;
        this.rest = rest;
      }
      getApiCaller(settings) {
        settings.retry = null;
        return new streamingApiCaller_1.StreamingApiCaller(this);
      }
    };
    exports2.StreamDescriptor = StreamDescriptor;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js
var require_bundleApiCaller = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleApiCaller = void 0;
    var call_1 = require_call();
    var googleError_1 = require_googleError();
    var BundleApiCaller = class {
      constructor(bundler) {
        this.bundler = bundler;
      }
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, status) {
        if (!settings.isBundling) {
          throw new googleError_1.GoogleError("Bundling enabled with no isBundling!");
        }
        status.call((argument2, callback) => {
          this.bundler.schedule(apiCall, argument2, callback);
          return status;
        }, argument);
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.BundleApiCaller = BundleApiCaller;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js
var require_bundlingUtils = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.computeBundleId = void 0;
    function computeBundleId(obj, discriminatorFields) {
      const ids = [];
      let hasIds = false;
      for (const field of discriminatorFields) {
        const id = at(obj, field);
        if (id === void 0) {
          ids.push(null);
        } else {
          hasIds = true;
          ids.push(id);
        }
      }
      if (!hasIds) {
        return void 0;
      }
      return JSON.stringify(ids);
    }
    exports2.computeBundleId = computeBundleId;
    function at(obj, field) {
      const pathParts = field.split(".");
      let currentObj = obj;
      for (const pathPart of pathParts) {
        currentObj = currentObj === null || currentObj === void 0 ? void 0 : currentObj[pathPart];
      }
      return currentObj;
    }
  }
});

// node_modules/google-gax/build/src/bundlingCalls/task.js
var require_task = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/task.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Task = exports2.deepCopyForResponse = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    function deepCopyForResponse(obj, subresponseInfo) {
      let result;
      if (obj === null) {
        return null;
      }
      if (obj === void 0) {
        return void 0;
      }
      if (Array.isArray(obj)) {
        result = [];
        obj.forEach((element) => {
          result.push(deepCopyForResponse(element, null));
        });
        return result;
      }
      if (obj.copy !== void 0) {
        return obj.copy();
      }
      if (obj instanceof ArrayBuffer) {
        return obj.slice(0);
      }
      if (typeof obj === "object") {
        result = {};
        Object.keys(obj).forEach((key) => {
          if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {
            result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);
          } else {
            result[key] = deepCopyForResponse(obj[key], null);
          }
        });
        return result;
      }
      return obj;
    }
    exports2.deepCopyForResponse = deepCopyForResponse;
    var Task = class {
      /**
       * A task coordinates the execution of a single bundle.
       *
       * @param {function} apiCall - The function to conduct calling API.
       * @param {Object} bundlingRequest - The base request object to be used
       *   for the actual API call.
       * @param {string} bundledField - The name of the field in bundlingRequest
       *   to be bundled.
       * @param {string=} subresponseField - The name of the field in the response
       *   to be passed to the callback.
       * @constructor
       * @private
       */
      constructor(apiCall, bundlingRequest, bundledField, subresponseField) {
        this._apiCall = apiCall;
        this._request = bundlingRequest;
        this._bundledField = bundledField;
        this._subresponseField = subresponseField;
        this._data = [];
      }
      /**
       * Returns the number of elements in a task.
       * @return {number} The number of elements.
       */
      getElementCount() {
        let count = 0;
        for (let i = 0; i < this._data.length; ++i) {
          count += this._data[i].elements.length;
        }
        return count;
      }
      /**
       * Returns the total byte size of the elements in a task.
       * @return {number} The byte size.
       */
      getRequestByteSize() {
        let size = 0;
        for (let i = 0; i < this._data.length; ++i) {
          size += this._data[i].bytes;
        }
        return size;
      }
      /**
       * Invokes the actual API call with current elements.
       * @return {string[]} - the list of ids for invocations to be run.
       */
      run() {
        if (this._data.length === 0) {
          return [];
        }
        const request = this._request;
        const elements = [];
        const ids = [];
        for (let i = 0; i < this._data.length; ++i) {
          elements.push(...this._data[i].elements);
          ids.push(this._data[i].callback.id);
        }
        request[this._bundledField] = elements;
        const self2 = this;
        this.callCanceller = this._apiCall(request, (err, response) => {
          const responses = [];
          if (err) {
            self2._data.forEach(() => {
              responses.push(void 0);
            });
          } else {
            let subresponseInfo = null;
            if (self2._subresponseField) {
              subresponseInfo = {
                field: self2._subresponseField,
                start: 0
              };
            }
            self2._data.forEach((data) => {
              if (subresponseInfo) {
                subresponseInfo.end = subresponseInfo.start + data.elements.length;
              }
              responses.push(deepCopyForResponse(response, subresponseInfo));
              if (subresponseInfo) {
                subresponseInfo.start = subresponseInfo.end;
              }
            });
          }
          for (let i = 0; i < self2._data.length; ++i) {
            if (self2._data[i].cancelled) {
              const error = new googleError_1.GoogleError("cancelled");
              error.code = status_1.Status.CANCELLED;
              self2._data[i].callback(error);
            } else {
              self2._data[i].callback(err, responses[i]);
            }
          }
        });
        return ids;
      }
      /**
       * Appends the list of elements into the task.
       * @param {Object[]} elements - the new list of elements.
       * @param {number} bytes - the byte size required to encode elements in the API.
       * @param {APICallback} callback - the callback of the method call.
       */
      extend(elements, bytes, callback) {
        this._data.push({
          elements,
          bytes,
          callback
        });
      }
      /**
       * Cancels a part of elements.
       * @param {string} id - The identifier of the part of elements.
       * @return {boolean} Whether the entire task will be canceled or not.
       */
      cancel(id) {
        if (this.callCanceller) {
          let allCancelled = true;
          this._data.forEach((d) => {
            if (d.callback.id === id) {
              d.cancelled = true;
            }
            if (!d.cancelled) {
              allCancelled = false;
            }
          });
          if (allCancelled) {
            this.callCanceller.cancel();
          }
          return allCancelled;
        }
        for (let i = 0; i < this._data.length; ++i) {
          if (this._data[i].callback.id === id) {
            const error = new googleError_1.GoogleError("cancelled");
            error.code = status_1.Status.CANCELLED;
            this._data[i].callback(error);
            this._data.splice(i, 1);
            break;
          }
        }
        return this._data.length === 0;
      }
    };
    exports2.Task = Task;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js
var require_bundleExecutor = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleExecutor = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var warnings_1 = require_warnings();
    var bundlingUtils_1 = require_bundlingUtils();
    var task_1 = require_task();
    function noop() {
    }
    var BundleExecutor = class {
      /**
       * Organizes requests for an api service that requires to bundle them.
       *
       * @param {BundleOptions} bundleOptions - configures strategy this instance
       *   uses when executing bundled functions.
       * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.
       * @constructor
       */
      constructor(bundleOptions, bundleDescriptor) {
        this._options = bundleOptions;
        this._descriptor = bundleDescriptor;
        this._tasks = {};
        this._timers = {};
        this._invocations = {};
        this._invocationId = 0;
      }
      /**
       * Schedule a method call.
       *
       * @param {function} apiCall - the function for an API call.
       * @param {Object} request - the request object to be bundled with others.
       * @param {APICallback} callback - the callback to be called when the method finished.
       * @return {function()} - the function to cancel the scheduled invocation.
       */
      schedule(apiCall, request, callback) {
        const bundleId = (0, bundlingUtils_1.computeBundleId)(request, this._descriptor.requestDiscriminatorFields);
        callback = callback || noop;
        if (bundleId === void 0) {
          (0, warnings_1.warn)("bundling_schedule_bundleid_undefined", `The request does not have enough information for request bundling. Invoking immediately. Request: ${JSON.stringify(request)} discriminator fields: ${this._descriptor.requestDiscriminatorFields}`);
          return apiCall(request, callback);
        }
        if (request[this._descriptor.bundledField] === void 0) {
          (0, warnings_1.warn)("bundling_no_bundled_field", `Request does not contain field ${this._descriptor.bundledField} that must present for bundling. Invoking immediately. Request: ${JSON.stringify(request)}`);
          return apiCall(request, callback);
        }
        if (!(bundleId in this._tasks)) {
          this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);
        }
        let task = this._tasks[bundleId];
        callback.id = String(this._invocationId++);
        this._invocations[callback.id] = bundleId;
        const bundledField = request[this._descriptor.bundledField];
        const elementCount = bundledField.length;
        let requestBytes = 0;
        const self2 = this;
        bundledField.forEach((obj) => {
          requestBytes += this._descriptor.byteLengthFunction(obj);
        });
        const countLimit = this._options.elementCountLimit || 0;
        const byteLimit = this._options.requestByteLimit || 0;
        if (countLimit > 0 && elementCount > countLimit || byteLimit > 0 && requestBytes >= byteLimit) {
          let message;
          if (countLimit > 0 && elementCount > countLimit) {
            message = "The number of elements " + elementCount + " exceeds the limit " + this._options.elementCountLimit;
          } else {
            message = "The required bytes " + requestBytes + " exceeds the limit " + this._options.requestByteLimit;
          }
          const error = new googleError_1.GoogleError(message);
          error.code = status_1.Status.INVALID_ARGUMENT;
          callback(error);
          return {
            cancel: noop
          };
        }
        const existingCount = task.getElementCount();
        const existingBytes = task.getRequestByteSize();
        if (countLimit > 0 && elementCount + existingCount >= countLimit || byteLimit > 0 && requestBytes + existingBytes >= byteLimit) {
          this._runNow(bundleId);
          this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);
          task = this._tasks[bundleId];
        }
        task.extend(bundledField, requestBytes, callback);
        const ret = {
          cancel() {
            self2._cancel(callback.id);
          }
        };
        const countThreshold = this._options.elementCountThreshold || 0;
        const sizeThreshold = this._options.requestByteThreshold || 0;
        if (countThreshold > 0 && task.getElementCount() >= countThreshold || sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold) {
          this._runNow(bundleId);
          return ret;
        }
        if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {
          this._timers[bundleId] = setTimeout(() => {
            delete this._timers[bundleId];
            this._runNow(bundleId);
          }, this._options.delayThreshold);
        }
        return ret;
      }
      /**
       * Clears scheduled timeout if it exists.
       *
       * @param {String} bundleId - the id for the task whose timeout needs to be
       *   cleared.
       * @private
       */
      _maybeClearTimeout(bundleId) {
        if (bundleId in this._timers) {
          const timerId = this._timers[bundleId];
          delete this._timers[bundleId];
          clearTimeout(timerId);
        }
      }
      /**
       * Cancels an event.
       *
       * @param {String} id - The id for the event in the task.
       * @private
       */
      _cancel(id) {
        if (!(id in this._invocations)) {
          return;
        }
        const bundleId = this._invocations[id];
        if (!(bundleId in this._tasks)) {
          return;
        }
        const task = this._tasks[bundleId];
        delete this._invocations[id];
        if (task.cancel(id)) {
          this._maybeClearTimeout(bundleId);
          delete this._tasks[bundleId];
        }
      }
      /**
       * Invokes a task.
       *
       * @param {String} bundleId - The id for the task.
       * @private
       */
      _runNow(bundleId) {
        if (!(bundleId in this._tasks)) {
          (0, warnings_1.warn)("bundle_runnow_bundleid_unknown", `No such bundleid: ${bundleId}`);
          return;
        }
        this._maybeClearTimeout(bundleId);
        const task = this._tasks[bundleId];
        delete this._tasks[bundleId];
        task.run().forEach((id) => {
          delete this._invocations[id];
        });
      }
    };
    exports2.BundleExecutor = BundleExecutor;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js
var require_bundleDescriptor = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleDescriptor = void 0;
    var normalApiCaller_1 = require_normalApiCaller();
    var bundleApiCaller_1 = require_bundleApiCaller();
    var bundleExecutor_1 = require_bundleExecutor();
    var util_1 = require_util4();
    var BundleDescriptor = class {
      /**
       * Describes the structure of bundled call.
       *
       * requestDiscriminatorFields may include '.' as a separator, which is used to
       * indicate object traversal. This allows fields in nested objects to be used
       * to determine what request to bundle.
       *
       * @property {String} bundledField
       * @property {String} requestDiscriminatorFields
       * @property {String} subresponseField
       * @property {Function} byteLengthFunction
       *
       * @param {String} bundledField - the repeated field in the request message
       *   that will have its elements aggregated by bundling.
       * @param {String} requestDiscriminatorFields - a list of fields in the
       *   target request message class that are used to detemrine which request
       *   messages should be bundled together.
       * @param {String} subresponseField - an optional field, when present it
       *   indicates the field in the response message that should be used to
       *   demultiplex the response into multiple response messages.
       * @param {Function} byteLengthFunction - a function to obtain the byte
       *   length to be consumed for the bundled field messages. Because Node.JS
       *   protobuf.js/gRPC uses builtin Objects for the user-visible data and
       *   internally they are encoded/decoded in protobuf manner, this function
       *   is actually necessary to calculate the byte length.
       * @constructor
       */
      constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {
        if (!byteLengthFunction && typeof subresponseField === "function") {
          byteLengthFunction = subresponseField;
          subresponseField = null;
        }
        this.bundledField = bundledField;
        this.requestDiscriminatorFields = requestDiscriminatorFields.map(util_1.toCamelCase);
        this.subresponseField = subresponseField;
        this.byteLengthFunction = byteLengthFunction;
      }
      getApiCaller(settings) {
        if (settings.isBundling === false) {
          return new normalApiCaller_1.NormalApiCaller();
        }
        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));
      }
    };
    exports2.BundleDescriptor = BundleDescriptor;
  }
});

// node_modules/google-gax/build/src/descriptor.js
var require_descriptor = __commonJS({
  "node_modules/google-gax/build/src/descriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleDescriptor = exports2.StreamDescriptor = exports2.PageDescriptor = exports2.LongrunningDescriptor = void 0;
    var longRunningDescriptor_1 = require_longRunningDescriptor();
    Object.defineProperty(exports2, "LongrunningDescriptor", { enumerable: true, get: function() {
      return longRunningDescriptor_1.LongRunningDescriptor;
    } });
    var pageDescriptor_1 = require_pageDescriptor();
    Object.defineProperty(exports2, "PageDescriptor", { enumerable: true, get: function() {
      return pageDescriptor_1.PageDescriptor;
    } });
    var streamDescriptor_1 = require_streamDescriptor();
    Object.defineProperty(exports2, "StreamDescriptor", { enumerable: true, get: function() {
      return streamDescriptor_1.StreamDescriptor;
    } });
    var bundleDescriptor_1 = require_bundleDescriptor();
    Object.defineProperty(exports2, "BundleDescriptor", { enumerable: true, get: function() {
      return bundleDescriptor_1.BundleDescriptor;
    } });
  }
});

// node_modules/google-gax/build/src/operations_client_config.json
var require_operations_client_config = __commonJS({
  "node_modules/google-gax/build/src/operations_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.longrunning.Operations": {
          retry_codes: {
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ],
            non_idempotent: []
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 9e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 9e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            ListOperations: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            CancelOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            DeleteOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/protos/operations.json
var require_operations2 = __commonJS({
  "node_modules/google-gax/build/protos/operations.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { longrunning: { options: { cc_enable_arenas: true, csharp_namespace: "Google.LongRunning", go_package: "google.golang.org/genproto/googleapis/longrunning;longrunning", java_multiple_files: true, java_outer_classname: "OperationsProto", java_package: "com.google.longrunning", php_namespace: "Google\\LongRunning" }, nested: { operationInfo: { type: "google.longrunning.OperationInfo", id: 1049, extend: "google.protobuf.MethodOptions" }, Operations: { options: { "(google.api.default_host)": "longrunning.googleapis.com" }, methods: { ListOperations: { requestType: "ListOperationsRequest", responseType: "ListOperationsResponse", options: { "(google.api.http).get": "/v1/{name=operations}", "(google.api.method_signature)": "name,filter" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=operations}" } }, { "(google.api.method_signature)": "name,filter" }] }, GetOperation: { requestType: "GetOperationRequest", responseType: "Operation", options: { "(google.api.http).get": "/v1/operations/{name}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/operations/{name}" } }, { "(google.api.method_signature)": "name" }] }, DeleteOperation: { requestType: "DeleteOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).delete": "/v1/{name=operations/**}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { delete: "/v1/{name=operations/**}" } }, { "(google.api.method_signature)": "name" }] }, CancelOperation: { requestType: "CancelOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).post": "/v1/{name=operations/**}:cancel", "(google.api.http).body": "*", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{name=operations/**}:cancel", body: "*" } }, { "(google.api.method_signature)": "name" }] }, WaitOperation: { requestType: "WaitOperationRequest", responseType: "Operation" } } }, Operation: { oneofs: { result: { oneof: ["error", "response"] } }, fields: { name: { type: "string", id: 1 }, metadata: { type: "google.protobuf.Any", id: 2 }, done: { type: "bool", id: 3 }, error: { type: "google.rpc.Status", id: 4 }, response: { type: "google.protobuf.Any", id: 5 } } }, GetOperationRequest: { fields: { name: { type: "string", id: 1 } } }, ListOperationsRequest: { fields: { name: { type: "string", id: 4 }, filter: { type: "string", id: 1 }, pageSize: { type: "int32", id: 2 }, pageToken: { type: "string", id: 3 } } }, ListOperationsResponse: { fields: { operations: { rule: "repeated", type: "Operation", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, CancelOperationRequest: { fields: { name: { type: "string", id: 1 } } }, DeleteOperationRequest: { fields: { name: { type: "string", id: 1 } } }, WaitOperationRequest: { fields: { name: { type: "string", id: 1 }, timeout: { type: "google.protobuf.Duration", id: 2 } } }, OperationInfo: { fields: { responseType: { type: "string", id: 1 }, metadataType: { type: "string", id: 2 } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ClientProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" } } }, protobuf: { options: { go_package: "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, Duration: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } }, Empty: { fields: {} } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/status;status", java_multiple_files: true, java_outer_classname: "StatusProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/transcoding.js
var require_transcoding = __commonJS({
  "node_modules/google-gax/build/src/transcoding.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.overrideHttpRules = exports2.transcode = exports2.isProto3OptionalField = exports2.flattenObject = exports2.match = exports2.applyPattern = exports2.encodeWithoutSlashes = exports2.encodeWithSlashes = exports2.buildQueryStringComponents = exports2.deleteField = exports2.deepCopyWithoutMatchedFields = exports2.getField = void 0;
    var util_1 = require_util4();
    var httpOptionName = "(google.api.http)";
    var proto3OptionalName = "proto3_optional";
    var supportedHttpMethods = ["get", "post", "put", "patch", "delete"];
    function getField(request, field, allowObjects = false) {
      const parts = field.split(".");
      let value = request;
      for (const part of parts) {
        if (typeof value !== "object") {
          return void 0;
        }
        value = value[part];
      }
      if (!allowObjects && typeof value === "object" && !Array.isArray(value) && value !== null) {
        return void 0;
      }
      return value;
    }
    exports2.getField = getField;
    function deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = "") {
      if (typeof request !== "object" || request === null) {
        return request;
      }
      const copy = Object.assign({}, request);
      for (const key in copy) {
        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {
          delete copy[key];
          continue;
        }
        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;
        if (Array.isArray(copy[key])) {
          copy[key] = copy[key].map((value) => deepCopyWithoutMatchedFields(value, /* @__PURE__ */ new Set()));
        } else if (typeof copy[key] === "object" && copy[key] !== null) {
          copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);
        }
      }
      return copy;
    }
    exports2.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;
    function deleteField(request, field) {
      const parts = field.split(".");
      while (parts.length > 1) {
        if (typeof request !== "object") {
          return;
        }
        const part2 = parts.shift();
        request = request[part2];
      }
      const part = parts.shift();
      if (typeof request !== "object") {
        return;
      }
      delete request[part];
    }
    exports2.deleteField = deleteField;
    function buildQueryStringComponents(request, prefix = "") {
      const resultList = [];
      for (const key in request) {
        if (Array.isArray(request[key])) {
          for (const value of request[key]) {
            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);
          }
        } else if (typeof request[key] === "object" && request[key] !== null) {
          resultList.push(...buildQueryStringComponents(request[key], `${key}.`));
        } else {
          resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? "null" : request[key].toString())}`);
        }
      }
      return resultList;
    }
    exports2.buildQueryStringComponents = buildQueryStringComponents;
    function encodeWithSlashes(str) {
      return str.split("").map((c) => c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)).join("");
    }
    exports2.encodeWithSlashes = encodeWithSlashes;
    function encodeWithoutSlashes(str) {
      return str.split("").map((c) => c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)).join("");
    }
    exports2.encodeWithoutSlashes = encodeWithoutSlashes;
    function escapeRegExp(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function applyPattern(pattern, fieldValue) {
      if (!pattern || pattern === "*") {
        return encodeWithSlashes(fieldValue);
      }
      if (!pattern.includes("*") && pattern !== fieldValue) {
        return void 0;
      }
      const regex = new RegExp("^" + escapeRegExp(pattern).replace(/\\\*\\\*/g, "(.+)").replace(/\\\*/g, "([^/]+)") + "$");
      if (!fieldValue.match(regex)) {
        return void 0;
      }
      return encodeWithoutSlashes(fieldValue);
    }
    exports2.applyPattern = applyPattern;
    function fieldToCamelCase(field) {
      const parts = field.split(".");
      return parts.map((part) => (0, util_1.toCamelCase)(part)).join(".");
    }
    function match(request, pattern) {
      let url = pattern;
      const matchedFields = [];
      for (; ; ) {
        const match2 = url.match(/^(.*)\{([^}=]+)(?:=([^}]*))?\}(.*)/);
        if (!match2) {
          break;
        }
        const [, before, field, pattern2, after] = match2;
        const camelCasedField = fieldToCamelCase(field);
        matchedFields.push(fieldToCamelCase(camelCasedField));
        const fieldValue = getField(request, camelCasedField);
        if (fieldValue === void 0) {
          return void 0;
        }
        const appliedPattern = applyPattern(pattern2, fieldValue === null ? "null" : fieldValue.toString());
        if (appliedPattern === void 0) {
          return void 0;
        }
        url = before + appliedPattern + after;
      }
      return { matchedFields, url };
    }
    exports2.match = match;
    function flattenObject(request) {
      const result = {};
      for (const key in request) {
        if (request[key] === void 0) {
          continue;
        }
        if (Array.isArray(request[key])) {
          result[key] = request[key];
          continue;
        }
        if (typeof request[key] === "object" && request[key] !== null) {
          const nested = flattenObject(request[key]);
          for (const nestedKey in nested) {
            result[`${key}.${nestedKey}`] = nested[nestedKey];
          }
          continue;
        }
        result[key] = request[key];
      }
      return result;
    }
    exports2.flattenObject = flattenObject;
    function isProto3OptionalField(field) {
      return field && field.options && field.options[proto3OptionalName];
    }
    exports2.isProto3OptionalField = isProto3OptionalField;
    function transcode(request, parsedOptions) {
      const httpRules = [];
      for (const option of parsedOptions) {
        if (!(httpOptionName in option)) {
          continue;
        }
        const httpRule = option[httpOptionName];
        httpRules.push(httpRule);
        if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {
          const additionalBindings = Array.isArray(httpRule.additional_bindings) ? httpRule.additional_bindings : [httpRule.additional_bindings];
          httpRules.push(...additionalBindings);
        }
      }
      for (const httpRule of httpRules) {
        for (const httpMethod of supportedHttpMethods) {
          if (!(httpMethod in httpRule)) {
            continue;
          }
          const pathTemplate = httpRule[httpMethod];
          const matchResult = match(request, pathTemplate);
          if (matchResult === void 0) {
            continue;
          }
          const { url, matchedFields } = matchResult;
          let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));
          if (httpRule.body === "*") {
            return { httpMethod, url, queryString: "", data };
          }
          const queryStringObject = data;
          if (httpRule.body) {
            data = getField(
              queryStringObject,
              fieldToCamelCase(httpRule.body),
              /*allowObjects:*/
              true
            );
            deleteField(queryStringObject, fieldToCamelCase(httpRule.body));
          } else {
            data = "";
          }
          const queryStringComponents = buildQueryStringComponents(queryStringObject);
          const queryString = queryStringComponents.join("&");
          if (!data || typeof data === "object" && Object.keys(data).length === 0) {
            data = "";
          }
          return { httpMethod, url, queryString, data };
        }
      }
      return void 0;
    }
    exports2.transcode = transcode;
    function overrideHttpRules(httpRules, protoJson) {
      for (const rule of httpRules) {
        if (!rule.selector) {
          continue;
        }
        const rpc = protoJson.lookup(rule.selector);
        if (!rpc || !rpc.parsedOptions) {
          continue;
        }
        for (const item of rpc.parsedOptions) {
          if (!(httpOptionName in item)) {
            continue;
          }
          const httpOptions = item[httpOptionName];
          for (const httpMethod in httpOptions) {
            if (httpMethod in rule) {
              if (httpMethod === "additional_bindings") {
                continue;
              }
              httpOptions[httpMethod] = rule[httpMethod];
            }
            if (rule.additional_bindings) {
              httpOptions["additional_bindings"] = !httpOptions["additional_bindings"] ? [] : Array.isArray(httpOptions["additional_bindings"]) ? httpOptions["additional_bindings"] : [httpOptions["additional_bindings"]];
              httpOptions["additional_bindings"].push(...rule.additional_bindings);
            }
          }
        }
      }
    }
    exports2.overrideHttpRules = overrideHttpRules;
  }
});

// node_modules/google-gax/package.json
var require_package3 = __commonJS({
  "node_modules/google-gax/package.json"(exports2, module2) {
    module2.exports = {
      name: "google-gax",
      version: "4.0.4",
      description: "Google API Extensions",
      main: "build/src/index.js",
      types: "build/src/index.d.ts",
      files: [
        "build/src",
        "build/protos/",
        "!build/src/**/*.map"
      ],
      dependencies: {
        "@grpc/grpc-js": "~1.9.0",
        "@grpc/proto-loader": "^0.7.0",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        duplexify: "^4.0.0",
        "google-auth-library": "^9.0.0",
        "node-fetch": "^2.6.1",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^2.0.0",
        protobufjs: "7.2.5",
        "retry-request": "^6.0.0"
      },
      devDependencies: {
        "@babel/plugin-proposal-private-methods": "^7.18.6",
        "@compodoc/compodoc": "1.1.21",
        "@types/mocha": "^9.0.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^20.5.0",
        "@types/node-fetch": "^2.5.4",
        "@types/object-hash": "^3.0.0",
        "@types/proxyquire": "^1.3.28",
        "@types/pumpify": "^1.4.1",
        "@types/sinon": "^10.0.0",
        "@types/uglify-js": "^3.17.0",
        c8: "^8.0.0",
        codecov: "^3.1.0",
        execa: "^5.0.0",
        "google-proto-files": "^4.0.0",
        gts: "^5.0.0",
        linkinator: "^4.0.0",
        long: "^4.0.0",
        mkdirp: "^2.0.0",
        mocha: "^9.0.0",
        ncp: "^2.0.0",
        "null-loader": "^4.0.0",
        "protobufjs-cli": "1.1.2",
        proxyquire: "^2.0.1",
        pumpify: "^2.0.0",
        rimraf: "^5.0.1",
        sinon: "^15.0.0",
        "stream-events": "^1.0.4",
        "ts-loader": "^8.0.0",
        typescript: "^5.1.6",
        "uglify-js": "^3.17.0",
        walkdir: "^0.4.0",
        webpack: "^4.0.0",
        "webpack-cli": "^4.0.0"
      },
      scripts: {
        docs: "compodoc src/",
        pretest: "npm run prepare",
        test: "c8 mocha build/test/unit",
        lint: "gts check src samples test",
        clean: "gts clean",
        compile: "tsc -p . && cp src/*.json build/src && cp -r test/fixtures build/test && cp -r protos build/",
        "compile-operation-protos": "pbjs -t json google/longrunning/operations.proto -p ./protos > protos/operations.json && pbjs -t static-module -r operations_protos google/longrunning/operations.proto -p ./protos > protos/operations.js && pbts protos/operations.js -o protos/operations.d.ts",
        "compile-compute-operations-protos": "pbjs -t json google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.json && pbjs -t static-module -r compute_operations_protos google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.js && pbts protos/compute_operations.js -o protos/compute_operations.d.ts",
        "compile-iam-protos": "pbjs -t json google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.json && pbjs -t static-module -r iam_protos google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.js && pbts protos/iam_service.js -o protos/iam_service.d.ts",
        "compile-location-protos": "pbjs -t json google/cloud/location/locations.proto -p ./protos > protos/locations.json && pbjs -t static-module -r locations_protos google/cloud/location/locations.proto -p ./protos > protos/locations.js && pbts protos/locations.js -o protos/locations.d.ts",
        "compile-status-protos": "pbjs -t json google/rpc/status.proto google/rpc/error_details.proto -p ./protos > protos/status.json",
        "compile-http-protos": "pbjs -t static-module -r http_proto --keep-case google/api/http.proto -p ./protos > protos/http.js && pbts protos/http.js -o protos/http.d.ts",
        "compile-showcase-proto": "pbjs -t json google/showcase/v1beta1/echo.proto google/showcase/v1beta1/identity.proto google/showcase/v1beta1/messaging.proto google/showcase/v1beta1/testing.proto -p ./protos > test/fixtures/google-gax-packaging-test-app/protos/protos.json && pbjs -t static-module -r showcase_protos google/showcase/v1beta1/echo.proto google/showcase/v1beta1/identity.proto google/showcase/v1beta1/messaging.proto google/showcase/v1beta1/testing.proto -p ./protos > test/fixtures/google-gax-packaging-test-app/protos/protos.js && pbts test/fixtures/google-gax-packaging-test-app/protos/protos.js -o test/fixtures/google-gax-packaging-test-app/protos/protos.d.ts",
        fix: "gts fix",
        prepare: "npm run compile && node ./build/tools/src/prepublish.js . && mkdirp build/protos && cp -r protos/* build/protos/ && npm run minify-proto-json",
        "system-test": "c8 mocha build/test/system-test --timeout 600000 && npm run test-application",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        "browser-test": "cd test/browser-test && npm run prefetch && npm install && npm test",
        "test-application": "cd test/test-application && npm run prefetch && npm install && npm start",
        prelint: "cd samples; npm link ../; npm install",
        precompile: "gts clean",
        "update-protos": "node ./build/tools/src/listProtos.js .",
        "minify-proto-json": "node ./build/tools/src/minify.js"
      },
      repository: "googleapis/gax-nodejs",
      keywords: [
        "grpc"
      ],
      author: "Google API Authors",
      license: "Apache-2.0",
      bugs: {
        url: "https://github.com/googleapis/gax-nodejs/issues"
      },
      homepage: "https://github.com/googleapis/gax-nodejs#readme",
      engines: {
        node: ">=14"
      },
      browser: "build/src/fallback.js"
    };
  }
});

// node_modules/google-gax/build/src/operationsClient.js
var require_operationsClient = __commonJS({
  "node_modules/google-gax/build/src/operationsClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OperationsClientBuilder = exports2.OperationsClient = exports2.ALL_SCOPES = exports2.SERVICE_ADDRESS = void 0;
    var createApiCall_1 = require_createApiCall();
    var descriptor_1 = require_descriptor();
    var gax = require_gax();
    var configData = require_operations_client_config();
    var operationProtoJson = require_operations2();
    var transcoding_1 = require_transcoding();
    exports2.SERVICE_ADDRESS = "longrunning.googleapis.com";
    var version = require_package3().version;
    var DEFAULT_SERVICE_PORT = 443;
    var CODE_GEN_NAME_VERSION = "gapic/0.7.1";
    exports2.ALL_SCOPES = [];
    var OperationsClient = class {
      constructor(gaxGrpc, operationsProtos, options) {
        const opts = Object.assign({
          servicePath: exports2.SERVICE_ADDRESS,
          port: DEFAULT_SERVICE_PORT,
          clientConfig: {}
        }, options);
        const googleApiClient = ["gl-node/" + process.versions.node];
        if (opts.libName && opts.libVersion) {
          googleApiClient.push(opts.libName + "/" + opts.libVersion);
        }
        googleApiClient.push(CODE_GEN_NAME_VERSION, "gax/" + version);
        if (opts.fallback) {
          googleApiClient.push("gl-web/" + version);
        } else {
          googleApiClient.push("grpc/" + gaxGrpc.grpcVersion);
        }
        const defaults = gaxGrpc.constructSettings("google.longrunning.Operations", configData, opts.clientConfig || {}, { "x-goog-api-client": googleApiClient.join(" ") });
        this.auth = gaxGrpc.auth;
        this.innerApiCalls = {};
        this.descriptor = {
          listOperations: new descriptor_1.PageDescriptor("pageToken", "nextPageToken", "operations")
        };
        this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService("google.longrunning.Operations") : operationsProtos.google.longrunning.Operations, opts);
        const operationsStubMethods = [
          "getOperation",
          "listOperations",
          "cancelOperation",
          "deleteOperation"
        ];
        for (const methodName of operationsStubMethods) {
          const innerCallPromise = this.operationsStub.then((stub) => (...args) => {
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);
        }
      }
      /** Closes this operations client. */
      close() {
        this.operationsStub.then((stub) => stub.close());
      }
      getProjectId(callback) {
        if (this.auth && "getProjectId" in this.auth) {
          return this.auth.getProjectId(callback);
        }
        if (callback) {
          callback(new Error("Cannot determine project ID."));
        } else {
          return Promise.reject("Cannot determine project ID.");
        }
      }
      // Service calls
      getOperationInternal(request, options, callback) {
        request = request || {};
        options = options || {};
        return this.innerApiCalls.getOperation(request, options, callback);
      }
      /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       *   details.
       * @param {function(?Error, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is an object representing
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}. The promise has a method named
       * "cancel" which cancels the ongoing API call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * const name = '';
       * const [response] = await client.getOperation({name});
       * // doThingsWith(response)
       */
      getOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.getOperation(request, options, callback);
      }
      /**
       * Lists operations that match the specified filter in the request. If the
       * server doesn't support this method, it returns `UNIMPLEMENTED`.
       *
       * NOTE: the `name` binding below allows API services to override the binding
       * to use different resource name schemes.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       * details.
       * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is Array of
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}.
       *
       *   When autoPaginate: false is specified through options, it contains the
       * result in a single response. If the response indicates the next page
       * exists, the third parameter is set to be used for the next request object.
       * The fourth parameter keeps the raw response object of an object
       * representing [google.longrunning.ListOperationsResponse]{@link
       * external:"google.longrunning.ListOperationsResponse"}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is Array of
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}.
       *
       *   When autoPaginate: false is specified through options, the array has
       * three elements. The first element is Array of
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"} in a single response. The second
       * element is the next request object if the response indicates the next page
       * exists, or null. The third element is an object representing
       * [google.longrunning.ListOperationsResponse]{@link
       * external:"google.longrunning.ListOperationsResponse"}.
       *
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * const request = {
       *     name: '',
       *     filter: ''
       * };
       * // Iterate over all elements.
       * const [resources] = await client.listOperations(request);
       * for (const resource of resources) {
       *   console.log(resources);
       * }
       *
       * // Or obtain the paged response.
       * const options = {autoPaginate: false};
       * let nextRequest = request;
       * while(nextRequest) {
       *   const response = await client.listOperations(nextRequest, options);
       *   const resources = response[0];
       *   nextRequest = response[1];
       *   const rawResponse = response[2];
       *   for (const resource of resources) {
       *     // doThingsWith(resource);
       *   }
       * };
       */
      listOperations(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.listOperations(request, options, callback);
      }
      /**
       * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.
       *
       * This fetches the paged responses for {@link listOperations} continuously
       * and invokes the callback registered for 'data' event for each element in
       * the responses.
       *
       * The returned object has 'end' method when no more elements are required.
       *
       * autoPaginate option will be ignored.
       *
       * @see {@link https://nodejs.org/api/stream.html}
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize -
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       *   details.
       * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:"google.longrunning.Operation"} on 'data' event.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * const request = {
       *   name: '',
       *   filter: ''
       * };
       * client.listOperationsStream(request)
       *   .on('data', element => {
       *     // doThingsWith(element)
       *   })
       *   .on('error', err => {
       *     console.error(err);
       *   });
       */
      listOperationsStream(request, options) {
        const callSettings = new gax.CallSettings(options);
        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);
      }
      /**
       * Equivalent to {@link listOperations}, but returns an iterable object.
       *
       * for-await-of syntax is used with the iterable to recursively get response element on-demand.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize -
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       *   details.
       * @returns {Object}
       *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
       */
      listOperationsAsync(request, options) {
        request = request || {};
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);
      }
      /**
       * Starts asynchronous cancellation on a long-running operation.  The server
       * makes a best effort to cancel the operation, but success is not
       * guaranteed.  If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
       * {@link Operations.GetOperation} or
       * other methods to check whether the cancellation succeeded or whether the
       * operation completed despite cancellation. On successful cancellation,
       * the operation is not deleted; instead, it becomes an operation with
       * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
       * 1, corresponding to `Code.CANCELLED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be cancelled.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       * details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * await client.cancelOperation({name: ''});
       */
      cancelOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.cancelOperation(request, options, callback);
      }
      /**
       * Deletes a long-running operation. This method indicates that the client is
       * no longer interested in the operation result. It does not cancel the
       * operation. If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be deleted.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       * details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * await client.deleteOperation({name: ''});
       */
      deleteOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.deleteOperation(request, options, callback);
      }
    };
    exports2.OperationsClient = OperationsClient;
    var OperationsClientBuilder = class {
      /**
       * Builds a new Operations Client
       * @param gaxGrpc {GrpcClient}
       */
      constructor(gaxGrpc, protoJson) {
        if (protoJson && gaxGrpc.httpRules) {
          (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);
        }
        const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);
        this.operationsClient = (opts) => {
          if (gaxGrpc.fallback) {
            opts.fallback = gaxGrpc.fallback;
          }
          return new OperationsClient(gaxGrpc, operationsProtos, opts);
        };
        Object.assign(this.operationsClient, OperationsClient);
      }
    };
    exports2.OperationsClientBuilder = OperationsClientBuilder;
  }
});

// node_modules/google-gax/build/src/fallbackRest.js
var require_fallbackRest = __commonJS({
  "node_modules/google-gax/build/src/fallbackRest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeResponse = exports2.encodeRequest = void 0;
    var serializer = require_src12();
    var fallback_1 = require_fallback();
    var googleError_1 = require_googleError();
    var transcoding_1 = require_transcoding();
    function encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {
      const headers = {
        "Content-Type": "application/json"
      };
      const message = rpc.resolvedRequestType.fromObject(request);
      const json = serializer.toProto3JSON(message, {
        numericEnums
      });
      if (!json) {
        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);
      }
      if (typeof json !== "object" || Array.isArray(json)) {
        throw new Error(`Request to RPC ${rpc.name} must be an object.`);
      }
      const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);
      if (!transcoded) {
        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);
      }
      if (numericEnums) {
        transcoded.queryString = (transcoded.queryString ? `${transcoded.queryString}&` : "") + "$alt=json%3Benum-encoding=int";
      }
      const method = transcoded.httpMethod.toUpperCase();
      const body = JSON.stringify(transcoded.data);
      const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\//, "")}?${transcoded.queryString}`;
      return {
        method,
        url,
        headers,
        body
      };
    }
    exports2.encodeRequest = encodeRequest;
    function decodeResponse(rpc, ok, response) {
      const decodedString = new TextDecoder().decode(response);
      const json = JSON.parse(decodedString);
      if (!ok) {
        const error = googleError_1.GoogleError.parseHttpError(json);
        throw error;
      }
      const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);
      if (!message) {
        throw new Error(`Received null response from RPC ${rpc.name}`);
      }
      return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);
    }
    exports2.decodeResponse = decodeResponse;
  }
});

// node_modules/node-fetch/browser.js
var require_browser5 = __commonJS({
  "node_modules/node-fetch/browser.js"(exports2, module2) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global2 !== "undefined") {
        return global2;
      }
      throw new Error("unable to locate global object");
    };
    var global2 = getGlobal();
    module2.exports = exports2 = global2.fetch;
    if (global2.fetch) {
      exports2.default = global2.fetch.bind(global2);
    }
    exports2.Headers = global2.Headers;
    exports2.Request = global2.Request;
    exports2.Response = global2.Response;
  }
});

// node_modules/abort-controller/browser.js
var require_browser6 = __commonJS({
  "node_modules/abort-controller/browser.js"(exports2, module2) {
    "use strict";
    var { AbortController: AbortController2, AbortSignal } = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : (
      /* otherwise */
      void 0
    );
    module2.exports = AbortController2;
    module2.exports.AbortSignal = AbortSignal;
    module2.exports.default = AbortController2;
  }
});

// node_modules/google-gax/build/src/streamArrayParser.js
var require_streamArrayParser = __commonJS({
  "node_modules/google-gax/build/src/streamArrayParser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamArrayParser = void 0;
    var abort_controller_1 = require_browser6();
    var stream_1 = require_stream();
    var fallbackRest_1 = require_fallbackRest();
    var featureDetection_1 = require_featureDetection();
    var StreamArrayParser = class extends stream_1.Transform {
      /**
       * StreamArrayParser processes array of valid JSON objects in random chunks
       * through readable stream, and produces a stream of plain Javascript objects
       * where it converted from the corresponding protobuf message instance.
       *
       * The default JSON parser decodes the input stream under the
       * following rules:
       *  1. The stream represents a valid JSON array (must start with a "[" and
       * close with the corresponding "]"). Each element of this array is assumed to
       * be either an array or an object, and will be decoded as a JS object and
       *    delivered.
       *  2. All JSON elements in the buffer will be decoded and delivered in a
       * stream.
       *
       * @private
       * @constructor
       * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.
       * @param {Object} options - the options pass to Transform Stream. See more
       * details
       * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.
       */
      constructor(rpc, options) {
        super(Object.assign({}, options, { readableObjectMode: true }));
        this._done = false;
        this._prevBlock = Buffer.from("");
        this._isInString = false;
        this._isSkipped = false;
        this._level = 0;
        this.rpc = rpc;
        this.cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();
        this.cancelSignal = this.cancelController.signal;
        this.cancelRequested = false;
      }
      _transform(chunk, _, callback) {
        let objectStart = 0;
        let curIndex = 0;
        if (this._level === 0 && curIndex === 0) {
          if (String.fromCharCode(chunk[0]) !== "[") {
            this.emit("error", new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));
          }
          curIndex++;
          this._level++;
        }
        while (curIndex < chunk.length) {
          const curValue = String.fromCharCode(chunk[curIndex]);
          if (!this._isSkipped) {
            switch (curValue) {
              case "{":
                if (!this._isInString) {
                  this._level++;
                }
                if (!this._isInString && this._level === 2) {
                  objectStart = curIndex;
                }
                break;
              case '"':
                this._isInString = !this._isInString;
                break;
              case "}":
                if (!this._isInString) {
                  this._level--;
                }
                if (!this._isInString && this._level === 1) {
                  const objBuff = Buffer.concat([
                    this._prevBlock,
                    chunk.slice(objectStart, curIndex + 1)
                  ]);
                  try {
                    const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);
                    this.push(msgObj);
                  } catch (err) {
                    this.emit("error", err);
                  }
                  objectStart = curIndex + 1;
                  this._prevBlock = Buffer.from("");
                }
                break;
              case "]":
                if (!this._isInString && this._level === 1) {
                  this._done = true;
                  this.push(null);
                }
                break;
              case "\\":
                this._isSkipped = true;
                break;
              default:
                break;
            }
          } else {
            this._isSkipped = false;
          }
          curIndex++;
        }
        if (this._level > 1) {
          this._prevBlock = Buffer.concat([
            this._prevBlock,
            chunk.slice(objectStart, curIndex)
          ]);
        }
        callback();
      }
      _flush(callback) {
        callback();
      }
      cancel() {
        this._done = true;
        this.cancelRequested = true;
        this.cancelController.abort();
        this.end();
      }
    };
    exports2.StreamArrayParser = StreamArrayParser;
  }
});

// node_modules/google-gax/build/src/fallbackServiceStub.js
var require_fallbackServiceStub = __commonJS({
  "node_modules/google-gax/build/src/fallbackServiceStub.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generateServiceStub = void 0;
    var node_fetch_1 = require_browser5();
    var abort_controller_1 = require_browser6();
    var featureDetection_1 = require_featureDetection();
    var streamArrayParser_1 = require_streamArrayParser();
    var stream_1 = require_stream();
    function generateServiceStub(rpcs, protocol, servicePath, servicePort, authClient, requestEncoder, responseDecoder, numericEnums) {
      const fetch = (0, featureDetection_1.hasWindowFetch)() ? window.fetch : node_fetch_1.default;
      const serviceStub = {
        // close method should close all cancel controllers. If this feature request in the future, we can have a cancelControllerFactory that tracks created cancel controllers, and abort them all in close method.
        close: () => {
          return { cancel: () => {
          } };
        }
      };
      for (const [rpcName, rpc] of Object.entries(rpcs)) {
        serviceStub[rpcName] = (request, options, _metadata, callback) => {
          options !== null && options !== void 0 ? options : options = {};
          let fetchParameters;
          try {
            fetchParameters = requestEncoder(rpc, protocol, servicePath, servicePort, request, numericEnums);
          } catch (err) {
            if (callback) {
              callback(err);
            }
            return {
              cancel() {
              }
            };
          }
          const cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();
          const cancelSignal = cancelController.signal;
          let cancelRequested = false;
          const url = fetchParameters.url;
          const headers = fetchParameters.headers;
          for (const key of Object.keys(options)) {
            headers[key] = options[key][0];
          }
          const streamArrayParser = new streamArrayParser_1.StreamArrayParser(rpc);
          authClient.getRequestHeaders().then((authHeader) => {
            const fetchRequest = {
              headers: {
                ...authHeader,
                ...headers
              },
              body: fetchParameters.body,
              method: fetchParameters.method,
              signal: cancelSignal
            };
            if (fetchParameters.method === "GET" || fetchParameters.method === "DELETE") {
              delete fetchRequest["body"];
            }
            return fetch(url, fetchRequest);
          }).then((response) => {
            if (response.ok && rpc.responseStream) {
              (0, stream_1.pipeline)(response.body, streamArrayParser, (err) => {
                if (err && (!cancelRequested || err instanceof Error && err.name !== "AbortError")) {
                  if (callback) {
                    callback(err);
                  }
                  streamArrayParser.emit("error", err);
                }
              });
              return;
            } else {
              return Promise.all([
                Promise.resolve(response.ok),
                response.arrayBuffer()
              ]).then(([ok, buffer]) => {
                const response2 = responseDecoder(rpc, ok, buffer);
                callback(null, response2);
              }).catch((err) => {
                if (!cancelRequested || err.name !== "AbortError") {
                  if (rpc.responseStream) {
                    if (callback) {
                      callback(err);
                    }
                    streamArrayParser.emit("error", err);
                  } else if (callback) {
                    callback(err);
                  } else {
                    throw err;
                  }
                }
              });
            }
          }).catch((err) => {
            if (rpc.responseStream) {
              if (callback) {
                callback(err);
              }
              streamArrayParser.emit("error", err);
            } else if (callback) {
              callback(err);
            } else {
              throw err;
            }
          });
          if (rpc.responseStream) {
            return streamArrayParser;
          }
          return {
            cancel: () => {
              cancelRequested = true;
              cancelController.abort();
            }
          };
        };
      }
      return serviceStub;
    }
    exports2.generateServiceStub = generateServiceStub;
  }
});

// node_modules/google-gax/build/protos/iam_service.js
var require_iam_service = __commonJS({
  "node_modules/google-gax/build/protos/iam_service.js"(exports2, module2) {
    !function(e) {
      "function" == typeof define && define.amd ? define(["protobufjs/minimal"], e) : "function" == typeof __require && "object" == typeof module2 && module2 && module2.exports && (module2.exports = e(require_minimal2()));
    }(function(o) {
      "use strict";
      var e, t, n, r, F, a = o.Reader, i = o.Writer, p = o.util, l = o.roots.iam_protos || (o.roots.iam_protos = {});
      function B(e2, t2, n2) {
        o.rpc.Service.call(this, e2, t2, n2);
      }
      function s(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function u(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function c(e2) {
        if (this.permissions = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function G(e2) {
        if (this.permissions = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function U(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function d(e2) {
        if (this.bindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function g(e2) {
        if (this.members = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function M(e2) {
        if (this.bindingDeltas = [], this.auditConfigDeltas = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function f(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function y(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function L(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function J(e2) {
        if (this.rules = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function h(e2) {
        if (this.additionalBindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function _(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function b(e2) {
        if (this.pattern = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function H(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function q(e2) {
        if (this.file = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function m(e2) {
        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function O(e2) {
        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function v(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Y(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function z(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function P(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function W(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function w(e2) {
        if (this.value = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function X(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function j(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function D(e2) {
        if (this.method = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function x(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function S(e2) {
        if (this.uninterpretedOption = [], this[".google.api.resourceDefinition"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function k(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function T(e2) {
        if (this.uninterpretedOption = [], this[".google.api.fieldBehavior"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Q(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function E(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function K(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function A(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function N(e2) {
        if (this.uninterpretedOption = [], this[".google.api.methodSignature"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function R(e2) {
        if (this.name = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Z(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function $(e2) {
        if (this.location = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function I(e2) {
        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function ee(e2) {
        if (this.annotation = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function C(e2) {
        if (this.path = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function V(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      return l.google = ((F = {}).iam = ((n = {}).v1 = ((t = {}).IAMPolicy = (((B.prototype = Object.create(o.rpc.Service.prototype)).constructor = B).create = function(e2, t2, n2) {
        return new this(e2, t2, n2);
      }, Object.defineProperty(B.prototype.setIamPolicy = function e2(t2, n2) {
        return this.rpcCall(e2, l.google.iam.v1.SetIamPolicyRequest, l.google.iam.v1.Policy, t2, n2);
      }, "name", { value: "SetIamPolicy" }), Object.defineProperty(B.prototype.getIamPolicy = function e2(t2, n2) {
        return this.rpcCall(e2, l.google.iam.v1.GetIamPolicyRequest, l.google.iam.v1.Policy, t2, n2);
      }, "name", { value: "GetIamPolicy" }), Object.defineProperty(B.prototype.testIamPermissions = function e2(t2, n2) {
        return this.rpcCall(e2, l.google.iam.v1.TestIamPermissionsRequest, l.google.iam.v1.TestIamPermissionsResponse, t2, n2);
      }, "name", { value: "TestIamPermissions" }), B), t.SetIamPolicyRequest = (s.prototype.resource = "", s.prototype.policy = null, s.create = function(e2) {
        return new s(e2);
      }, s.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.resource && Object.hasOwnProperty.call(e2, "resource") && t2.uint32(10).string(e2.resource), null != e2.policy && Object.hasOwnProperty.call(e2, "policy") && l.google.iam.v1.Policy.encode(e2.policy, t2.uint32(18).fork()).ldelim(), t2;
      }, s.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, s.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.SetIamPolicyRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.resource = e2.string();
              break;
            case 2:
              o2.policy = l.google.iam.v1.Policy.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, s.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, s.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.resource && e2.hasOwnProperty("resource") && !p.isString(e2.resource))
          return "resource: string expected";
        if (null != e2.policy && e2.hasOwnProperty("policy")) {
          e2 = l.google.iam.v1.Policy.verify(e2.policy);
          if (e2)
            return "policy." + e2;
        }
        return null;
      }, s.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.SetIamPolicyRequest)
          return e2;
        var t2 = new l.google.iam.v1.SetIamPolicyRequest();
        if (null != e2.resource && (t2.resource = String(e2.resource)), null != e2.policy) {
          if ("object" != typeof e2.policy)
            throw TypeError(".google.iam.v1.SetIamPolicyRequest.policy: object expected");
          t2.policy = l.google.iam.v1.Policy.fromObject(e2.policy);
        }
        return t2;
      }, s.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.resource = "", n2.policy = null), null != e2.resource && e2.hasOwnProperty("resource") && (n2.resource = e2.resource), null != e2.policy && e2.hasOwnProperty("policy") && (n2.policy = l.google.iam.v1.Policy.toObject(e2.policy, t2)), n2;
      }, s.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, s), t.GetIamPolicyRequest = (u.prototype.resource = "", u.prototype.options = null, u.create = function(e2) {
        return new u(e2);
      }, u.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.resource && Object.hasOwnProperty.call(e2, "resource") && t2.uint32(10).string(e2.resource), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.iam.v1.GetPolicyOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, u.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, u.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.GetIamPolicyRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.resource = e2.string();
              break;
            case 2:
              o2.options = l.google.iam.v1.GetPolicyOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, u.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, u.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.resource && e2.hasOwnProperty("resource") && !p.isString(e2.resource))
          return "resource: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.iam.v1.GetPolicyOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, u.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.GetIamPolicyRequest)
          return e2;
        var t2 = new l.google.iam.v1.GetIamPolicyRequest();
        if (null != e2.resource && (t2.resource = String(e2.resource)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.iam.v1.GetIamPolicyRequest.options: object expected");
          t2.options = l.google.iam.v1.GetPolicyOptions.fromObject(e2.options);
        }
        return t2;
      }, u.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.resource = "", n2.options = null), null != e2.resource && e2.hasOwnProperty("resource") && (n2.resource = e2.resource), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.iam.v1.GetPolicyOptions.toObject(e2.options, t2)), n2;
      }, u.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, u), t.TestIamPermissionsRequest = (c.prototype.resource = "", c.prototype.permissions = p.emptyArray, c.create = function(e2) {
        return new c(e2);
      }, c.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.resource && Object.hasOwnProperty.call(e2, "resource") && t2.uint32(10).string(e2.resource), null != e2.permissions && e2.permissions.length)
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.uint32(18).string(e2.permissions[n2]);
        return t2;
      }, c.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, c.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.TestIamPermissionsRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.resource = e2.string();
              break;
            case 2:
              o2.permissions && o2.permissions.length || (o2.permissions = []), o2.permissions.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, c.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, c.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.resource && e2.hasOwnProperty("resource") && !p.isString(e2.resource))
          return "resource: string expected";
        if (null != e2.permissions && e2.hasOwnProperty("permissions")) {
          if (!Array.isArray(e2.permissions))
            return "permissions: array expected";
          for (var t2 = 0; t2 < e2.permissions.length; ++t2)
            if (!p.isString(e2.permissions[t2]))
              return "permissions: string[] expected";
        }
        return null;
      }, c.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.TestIamPermissionsRequest)
          return e2;
        var t2 = new l.google.iam.v1.TestIamPermissionsRequest();
        if (null != e2.resource && (t2.resource = String(e2.resource)), e2.permissions) {
          if (!Array.isArray(e2.permissions))
            throw TypeError(".google.iam.v1.TestIamPermissionsRequest.permissions: array expected");
          t2.permissions = [];
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.permissions[n2] = String(e2.permissions[n2]);
        }
        return t2;
      }, c.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.permissions = []), t2.defaults && (n2.resource = ""), null != e2.resource && e2.hasOwnProperty("resource") && (n2.resource = e2.resource), e2.permissions && e2.permissions.length) {
          n2.permissions = [];
          for (var o2 = 0; o2 < e2.permissions.length; ++o2)
            n2.permissions[o2] = e2.permissions[o2];
        }
        return n2;
      }, c.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, c), t.TestIamPermissionsResponse = (G.prototype.permissions = p.emptyArray, G.create = function(e2) {
        return new G(e2);
      }, G.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.permissions && e2.permissions.length)
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.uint32(10).string(e2.permissions[n2]);
        return t2;
      }, G.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, G.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.TestIamPermissionsResponse(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.permissions && o2.permissions.length || (o2.permissions = []), o2.permissions.push(e2.string())) : e2.skipType(7 & r2);
        }
        return o2;
      }, G.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, G.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.permissions && e2.hasOwnProperty("permissions")) {
          if (!Array.isArray(e2.permissions))
            return "permissions: array expected";
          for (var t2 = 0; t2 < e2.permissions.length; ++t2)
            if (!p.isString(e2.permissions[t2]))
              return "permissions: string[] expected";
        }
        return null;
      }, G.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.TestIamPermissionsResponse)
          return e2;
        var t2 = new l.google.iam.v1.TestIamPermissionsResponse();
        if (e2.permissions) {
          if (!Array.isArray(e2.permissions))
            throw TypeError(".google.iam.v1.TestIamPermissionsResponse.permissions: array expected");
          t2.permissions = [];
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.permissions[n2] = String(e2.permissions[n2]);
        }
        return t2;
      }, G.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.permissions = []), e2.permissions && e2.permissions.length) {
          n2.permissions = [];
          for (var o2 = 0; o2 < e2.permissions.length; ++o2)
            n2.permissions[o2] = e2.permissions[o2];
        }
        return n2;
      }, G.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, G), t.GetPolicyOptions = (U.prototype.requestedPolicyVersion = 0, U.create = function(e2) {
        return new U(e2);
      }, U.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.requestedPolicyVersion && Object.hasOwnProperty.call(e2, "requestedPolicyVersion") && t2.uint32(8).int32(e2.requestedPolicyVersion), t2;
      }, U.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, U.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.GetPolicyOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.requestedPolicyVersion = e2.int32() : e2.skipType(7 & r2);
        }
        return o2;
      }, U.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, U.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.requestedPolicyVersion && e2.hasOwnProperty("requestedPolicyVersion") && !p.isInteger(e2.requestedPolicyVersion) ? "requestedPolicyVersion: integer expected" : null;
      }, U.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.iam.v1.GetPolicyOptions ? e2 : (t2 = new l.google.iam.v1.GetPolicyOptions(), null != e2.requestedPolicyVersion && (t2.requestedPolicyVersion = 0 | e2.requestedPolicyVersion), t2);
      }, U.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.requestedPolicyVersion = 0), null != e2.requestedPolicyVersion && e2.hasOwnProperty("requestedPolicyVersion") && (n2.requestedPolicyVersion = e2.requestedPolicyVersion), n2;
      }, U.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, U), t.Policy = (d.prototype.version = 0, d.prototype.bindings = p.emptyArray, d.prototype.etag = p.newBuffer([]), d.create = function(e2) {
        return new d(e2);
      }, d.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.version && Object.hasOwnProperty.call(e2, "version") && t2.uint32(8).int32(e2.version), null != e2.etag && Object.hasOwnProperty.call(e2, "etag") && t2.uint32(26).bytes(e2.etag), null != e2.bindings && e2.bindings.length)
          for (var n2 = 0; n2 < e2.bindings.length; ++n2)
            l.google.iam.v1.Binding.encode(e2.bindings[n2], t2.uint32(34).fork()).ldelim();
        return t2;
      }, d.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, d.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.Policy(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.version = e2.int32();
              break;
            case 4:
              o2.bindings && o2.bindings.length || (o2.bindings = []), o2.bindings.push(l.google.iam.v1.Binding.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.etag = e2.bytes();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, d.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, d.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.version && e2.hasOwnProperty("version") && !p.isInteger(e2.version))
          return "version: integer expected";
        if (null != e2.bindings && e2.hasOwnProperty("bindings")) {
          if (!Array.isArray(e2.bindings))
            return "bindings: array expected";
          for (var t2 = 0; t2 < e2.bindings.length; ++t2) {
            var n2 = l.google.iam.v1.Binding.verify(e2.bindings[t2]);
            if (n2)
              return "bindings." + n2;
          }
        }
        return null != e2.etag && e2.hasOwnProperty("etag") && !(e2.etag && "number" == typeof e2.etag.length || p.isString(e2.etag)) ? "etag: buffer expected" : null;
      }, d.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.Policy)
          return e2;
        var t2 = new l.google.iam.v1.Policy();
        if (null != e2.version && (t2.version = 0 | e2.version), e2.bindings) {
          if (!Array.isArray(e2.bindings))
            throw TypeError(".google.iam.v1.Policy.bindings: array expected");
          t2.bindings = [];
          for (var n2 = 0; n2 < e2.bindings.length; ++n2) {
            if ("object" != typeof e2.bindings[n2])
              throw TypeError(".google.iam.v1.Policy.bindings: object expected");
            t2.bindings[n2] = l.google.iam.v1.Binding.fromObject(e2.bindings[n2]);
          }
        }
        return null != e2.etag && ("string" == typeof e2.etag ? p.base64.decode(e2.etag, t2.etag = p.newBuffer(p.base64.length(e2.etag)), 0) : e2.etag.length && (t2.etag = e2.etag)), t2;
      }, d.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.bindings = []), t2.defaults && (n2.version = 0, t2.bytes === String ? n2.etag = "" : (n2.etag = [], t2.bytes !== Array && (n2.etag = p.newBuffer(n2.etag)))), null != e2.version && e2.hasOwnProperty("version") && (n2.version = e2.version), null != e2.etag && e2.hasOwnProperty("etag") && (n2.etag = t2.bytes === String ? p.base64.encode(e2.etag, 0, e2.etag.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.etag) : e2.etag), e2.bindings && e2.bindings.length) {
          n2.bindings = [];
          for (var o2 = 0; o2 < e2.bindings.length; ++o2)
            n2.bindings[o2] = l.google.iam.v1.Binding.toObject(e2.bindings[o2], t2);
        }
        return n2;
      }, d.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, d), t.Binding = (g.prototype.role = "", g.prototype.members = p.emptyArray, g.prototype.condition = null, g.create = function(e2) {
        return new g(e2);
      }, g.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.role && Object.hasOwnProperty.call(e2, "role") && t2.uint32(10).string(e2.role), null != e2.members && e2.members.length)
          for (var n2 = 0; n2 < e2.members.length; ++n2)
            t2.uint32(18).string(e2.members[n2]);
        return null != e2.condition && Object.hasOwnProperty.call(e2, "condition") && l.google.type.Expr.encode(e2.condition, t2.uint32(26).fork()).ldelim(), t2;
      }, g.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, g.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.Binding(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.role = e2.string();
              break;
            case 2:
              o2.members && o2.members.length || (o2.members = []), o2.members.push(e2.string());
              break;
            case 3:
              o2.condition = l.google.type.Expr.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, g.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, g.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.role && e2.hasOwnProperty("role") && !p.isString(e2.role))
          return "role: string expected";
        if (null != e2.members && e2.hasOwnProperty("members")) {
          if (!Array.isArray(e2.members))
            return "members: array expected";
          for (var t2 = 0; t2 < e2.members.length; ++t2)
            if (!p.isString(e2.members[t2]))
              return "members: string[] expected";
        }
        if (null != e2.condition && e2.hasOwnProperty("condition")) {
          var n2 = l.google.type.Expr.verify(e2.condition);
          if (n2)
            return "condition." + n2;
        }
        return null;
      }, g.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.Binding)
          return e2;
        var t2 = new l.google.iam.v1.Binding();
        if (null != e2.role && (t2.role = String(e2.role)), e2.members) {
          if (!Array.isArray(e2.members))
            throw TypeError(".google.iam.v1.Binding.members: array expected");
          t2.members = [];
          for (var n2 = 0; n2 < e2.members.length; ++n2)
            t2.members[n2] = String(e2.members[n2]);
        }
        if (null != e2.condition) {
          if ("object" != typeof e2.condition)
            throw TypeError(".google.iam.v1.Binding.condition: object expected");
          t2.condition = l.google.type.Expr.fromObject(e2.condition);
        }
        return t2;
      }, g.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.members = []), t2.defaults && (n2.role = "", n2.condition = null), null != e2.role && e2.hasOwnProperty("role") && (n2.role = e2.role), e2.members && e2.members.length) {
          n2.members = [];
          for (var o2 = 0; o2 < e2.members.length; ++o2)
            n2.members[o2] = e2.members[o2];
        }
        return null != e2.condition && e2.hasOwnProperty("condition") && (n2.condition = l.google.type.Expr.toObject(e2.condition, t2)), n2;
      }, g.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, g), t.PolicyDelta = (M.prototype.bindingDeltas = p.emptyArray, M.prototype.auditConfigDeltas = p.emptyArray, M.create = function(e2) {
        return new M(e2);
      }, M.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.bindingDeltas && e2.bindingDeltas.length)
          for (var n2 = 0; n2 < e2.bindingDeltas.length; ++n2)
            l.google.iam.v1.BindingDelta.encode(e2.bindingDeltas[n2], t2.uint32(10).fork()).ldelim();
        if (null != e2.auditConfigDeltas && e2.auditConfigDeltas.length)
          for (n2 = 0; n2 < e2.auditConfigDeltas.length; ++n2)
            l.google.iam.v1.AuditConfigDelta.encode(e2.auditConfigDeltas[n2], t2.uint32(18).fork()).ldelim();
        return t2;
      }, M.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, M.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.PolicyDelta(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.bindingDeltas && o2.bindingDeltas.length || (o2.bindingDeltas = []), o2.bindingDeltas.push(l.google.iam.v1.BindingDelta.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.auditConfigDeltas && o2.auditConfigDeltas.length || (o2.auditConfigDeltas = []), o2.auditConfigDeltas.push(l.google.iam.v1.AuditConfigDelta.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, M.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, M.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.bindingDeltas && e2.hasOwnProperty("bindingDeltas")) {
          if (!Array.isArray(e2.bindingDeltas))
            return "bindingDeltas: array expected";
          for (var t2 = 0; t2 < e2.bindingDeltas.length; ++t2)
            if (n2 = l.google.iam.v1.BindingDelta.verify(e2.bindingDeltas[t2]))
              return "bindingDeltas." + n2;
        }
        if (null != e2.auditConfigDeltas && e2.hasOwnProperty("auditConfigDeltas")) {
          if (!Array.isArray(e2.auditConfigDeltas))
            return "auditConfigDeltas: array expected";
          for (var n2, t2 = 0; t2 < e2.auditConfigDeltas.length; ++t2)
            if (n2 = l.google.iam.v1.AuditConfigDelta.verify(e2.auditConfigDeltas[t2]))
              return "auditConfigDeltas." + n2;
        }
        return null;
      }, M.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.PolicyDelta)
          return e2;
        var t2 = new l.google.iam.v1.PolicyDelta();
        if (e2.bindingDeltas) {
          if (!Array.isArray(e2.bindingDeltas))
            throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: array expected");
          t2.bindingDeltas = [];
          for (var n2 = 0; n2 < e2.bindingDeltas.length; ++n2) {
            if ("object" != typeof e2.bindingDeltas[n2])
              throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: object expected");
            t2.bindingDeltas[n2] = l.google.iam.v1.BindingDelta.fromObject(e2.bindingDeltas[n2]);
          }
        }
        if (e2.auditConfigDeltas) {
          if (!Array.isArray(e2.auditConfigDeltas))
            throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected");
          t2.auditConfigDeltas = [];
          for (n2 = 0; n2 < e2.auditConfigDeltas.length; ++n2) {
            if ("object" != typeof e2.auditConfigDeltas[n2])
              throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected");
            t2.auditConfigDeltas[n2] = l.google.iam.v1.AuditConfigDelta.fromObject(e2.auditConfigDeltas[n2]);
          }
        }
        return t2;
      }, M.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.bindingDeltas = [], n2.auditConfigDeltas = []), e2.bindingDeltas && e2.bindingDeltas.length) {
          n2.bindingDeltas = [];
          for (var o2 = 0; o2 < e2.bindingDeltas.length; ++o2)
            n2.bindingDeltas[o2] = l.google.iam.v1.BindingDelta.toObject(e2.bindingDeltas[o2], t2);
        }
        if (e2.auditConfigDeltas && e2.auditConfigDeltas.length) {
          n2.auditConfigDeltas = [];
          for (o2 = 0; o2 < e2.auditConfigDeltas.length; ++o2)
            n2.auditConfigDeltas[o2] = l.google.iam.v1.AuditConfigDelta.toObject(e2.auditConfigDeltas[o2], t2);
        }
        return n2;
      }, M.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, M), t.BindingDelta = (f.prototype.action = 0, f.prototype.role = "", f.prototype.member = "", f.prototype.condition = null, f.create = function(e2) {
        return new f(e2);
      }, f.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.action && Object.hasOwnProperty.call(e2, "action") && t2.uint32(8).int32(e2.action), null != e2.role && Object.hasOwnProperty.call(e2, "role") && t2.uint32(18).string(e2.role), null != e2.member && Object.hasOwnProperty.call(e2, "member") && t2.uint32(26).string(e2.member), null != e2.condition && Object.hasOwnProperty.call(e2, "condition") && l.google.type.Expr.encode(e2.condition, t2.uint32(34).fork()).ldelim(), t2;
      }, f.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, f.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.BindingDelta(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.action = e2.int32();
              break;
            case 2:
              o2.role = e2.string();
              break;
            case 3:
              o2.member = e2.string();
              break;
            case 4:
              o2.condition = l.google.type.Expr.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, f.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, f.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.action && e2.hasOwnProperty("action"))
          switch (e2.action) {
            default:
              return "action: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.role && e2.hasOwnProperty("role") && !p.isString(e2.role))
          return "role: string expected";
        if (null != e2.member && e2.hasOwnProperty("member") && !p.isString(e2.member))
          return "member: string expected";
        if (null != e2.condition && e2.hasOwnProperty("condition")) {
          e2 = l.google.type.Expr.verify(e2.condition);
          if (e2)
            return "condition." + e2;
        }
        return null;
      }, f.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.BindingDelta)
          return e2;
        var t2 = new l.google.iam.v1.BindingDelta();
        switch (e2.action) {
          case "ACTION_UNSPECIFIED":
          case 0:
            t2.action = 0;
            break;
          case "ADD":
          case 1:
            t2.action = 1;
            break;
          case "REMOVE":
          case 2:
            t2.action = 2;
        }
        if (null != e2.role && (t2.role = String(e2.role)), null != e2.member && (t2.member = String(e2.member)), null != e2.condition) {
          if ("object" != typeof e2.condition)
            throw TypeError(".google.iam.v1.BindingDelta.condition: object expected");
          t2.condition = l.google.type.Expr.fromObject(e2.condition);
        }
        return t2;
      }, f.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.action = t2.enums === String ? "ACTION_UNSPECIFIED" : 0, n2.role = "", n2.member = "", n2.condition = null), null != e2.action && e2.hasOwnProperty("action") && (n2.action = t2.enums === String ? l.google.iam.v1.BindingDelta.Action[e2.action] : e2.action), null != e2.role && e2.hasOwnProperty("role") && (n2.role = e2.role), null != e2.member && e2.hasOwnProperty("member") && (n2.member = e2.member), null != e2.condition && e2.hasOwnProperty("condition") && (n2.condition = l.google.type.Expr.toObject(e2.condition, t2)), n2;
      }, f.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, f.Action = (e = {}, (r = Object.create(e))[e[0] = "ACTION_UNSPECIFIED"] = 0, r[e[1] = "ADD"] = 1, r[e[2] = "REMOVE"] = 2, r), f), t.AuditConfigDelta = (y.prototype.action = 0, y.prototype.service = "", y.prototype.exemptedMember = "", y.prototype.logType = "", y.create = function(e2) {
        return new y(e2);
      }, y.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.action && Object.hasOwnProperty.call(e2, "action") && t2.uint32(8).int32(e2.action), null != e2.service && Object.hasOwnProperty.call(e2, "service") && t2.uint32(18).string(e2.service), null != e2.exemptedMember && Object.hasOwnProperty.call(e2, "exemptedMember") && t2.uint32(26).string(e2.exemptedMember), null != e2.logType && Object.hasOwnProperty.call(e2, "logType") && t2.uint32(34).string(e2.logType), t2;
      }, y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.AuditConfigDelta(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.action = e2.int32();
              break;
            case 2:
              o2.service = e2.string();
              break;
            case 3:
              o2.exemptedMember = e2.string();
              break;
            case 4:
              o2.logType = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, y.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.action && e2.hasOwnProperty("action"))
          switch (e2.action) {
            default:
              return "action: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        return null != e2.service && e2.hasOwnProperty("service") && !p.isString(e2.service) ? "service: string expected" : null != e2.exemptedMember && e2.hasOwnProperty("exemptedMember") && !p.isString(e2.exemptedMember) ? "exemptedMember: string expected" : null != e2.logType && e2.hasOwnProperty("logType") && !p.isString(e2.logType) ? "logType: string expected" : null;
      }, y.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.AuditConfigDelta)
          return e2;
        var t2 = new l.google.iam.v1.AuditConfigDelta();
        switch (e2.action) {
          case "ACTION_UNSPECIFIED":
          case 0:
            t2.action = 0;
            break;
          case "ADD":
          case 1:
            t2.action = 1;
            break;
          case "REMOVE":
          case 2:
            t2.action = 2;
        }
        return null != e2.service && (t2.service = String(e2.service)), null != e2.exemptedMember && (t2.exemptedMember = String(e2.exemptedMember)), null != e2.logType && (t2.logType = String(e2.logType)), t2;
      }, y.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.action = t2.enums === String ? "ACTION_UNSPECIFIED" : 0, n2.service = "", n2.exemptedMember = "", n2.logType = ""), null != e2.action && e2.hasOwnProperty("action") && (n2.action = t2.enums === String ? l.google.iam.v1.AuditConfigDelta.Action[e2.action] : e2.action), null != e2.service && e2.hasOwnProperty("service") && (n2.service = e2.service), null != e2.exemptedMember && e2.hasOwnProperty("exemptedMember") && (n2.exemptedMember = e2.exemptedMember), null != e2.logType && e2.hasOwnProperty("logType") && (n2.logType = e2.logType), n2;
      }, y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, y.Action = (e = {}, (r = Object.create(e))[e[0] = "ACTION_UNSPECIFIED"] = 0, r[e[1] = "ADD"] = 1, r[e[2] = "REMOVE"] = 2, r), y), t.logging = ((e = {}).AuditData = (L.prototype.policyDelta = null, L.create = function(e2) {
        return new L(e2);
      }, L.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.policyDelta && Object.hasOwnProperty.call(e2, "policyDelta") && l.google.iam.v1.PolicyDelta.encode(e2.policyDelta, t2.uint32(18).fork()).ldelim(), t2;
      }, L.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, L.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.logging.AuditData(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 2 ? o2.policyDelta = l.google.iam.v1.PolicyDelta.decode(e2, e2.uint32()) : e2.skipType(7 & r2);
        }
        return o2;
      }, L.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, L.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.policyDelta && e2.hasOwnProperty("policyDelta")) {
          e2 = l.google.iam.v1.PolicyDelta.verify(e2.policyDelta);
          if (e2)
            return "policyDelta." + e2;
        }
        return null;
      }, L.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.logging.AuditData)
          return e2;
        var t2 = new l.google.iam.v1.logging.AuditData();
        if (null != e2.policyDelta) {
          if ("object" != typeof e2.policyDelta)
            throw TypeError(".google.iam.v1.logging.AuditData.policyDelta: object expected");
          t2.policyDelta = l.google.iam.v1.PolicyDelta.fromObject(e2.policyDelta);
        }
        return t2;
      }, L.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.policyDelta = null), null != e2.policyDelta && e2.hasOwnProperty("policyDelta") && (n2.policyDelta = l.google.iam.v1.PolicyDelta.toObject(e2.policyDelta, t2)), n2;
      }, L.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, L), e), t), n), F.api = ((r = {}).Http = (J.prototype.rules = p.emptyArray, J.prototype.fullyDecodeReservedExpansion = false, J.create = function(e2) {
        return new J(e2);
      }, J.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.rules && e2.rules.length)
          for (var n2 = 0; n2 < e2.rules.length; ++n2)
            l.google.api.HttpRule.encode(e2.rules[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e2, "fullyDecodeReservedExpansion") && t2.uint32(16).bool(e2.fullyDecodeReservedExpansion), t2;
      }, J.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, J.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.Http(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.rules && o2.rules.length || (o2.rules = []), o2.rules.push(l.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.fullyDecodeReservedExpansion = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, J.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, J.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.rules && e2.hasOwnProperty("rules")) {
          if (!Array.isArray(e2.rules))
            return "rules: array expected";
          for (var t2 = 0; t2 < e2.rules.length; ++t2) {
            var n2 = l.google.api.HttpRule.verify(e2.rules[t2]);
            if (n2)
              return "rules." + n2;
          }
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && "boolean" != typeof e2.fullyDecodeReservedExpansion ? "fullyDecodeReservedExpansion: boolean expected" : null;
      }, J.fromObject = function(e2) {
        if (e2 instanceof l.google.api.Http)
          return e2;
        var t2 = new l.google.api.Http();
        if (e2.rules) {
          if (!Array.isArray(e2.rules))
            throw TypeError(".google.api.Http.rules: array expected");
          t2.rules = [];
          for (var n2 = 0; n2 < e2.rules.length; ++n2) {
            if ("object" != typeof e2.rules[n2])
              throw TypeError(".google.api.Http.rules: object expected");
            t2.rules[n2] = l.google.api.HttpRule.fromObject(e2.rules[n2]);
          }
        }
        return null != e2.fullyDecodeReservedExpansion && (t2.fullyDecodeReservedExpansion = Boolean(e2.fullyDecodeReservedExpansion)), t2;
      }, J.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.rules = []), t2.defaults && (n2.fullyDecodeReservedExpansion = false), e2.rules && e2.rules.length) {
          n2.rules = [];
          for (var o2 = 0; o2 < e2.rules.length; ++o2)
            n2.rules[o2] = l.google.api.HttpRule.toObject(e2.rules[o2], t2);
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && (n2.fullyDecodeReservedExpansion = e2.fullyDecodeReservedExpansion), n2;
      }, J.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, J), r.HttpRule = (h.prototype.selector = "", h.prototype.get = "", h.prototype.put = "", h.prototype.post = "", h.prototype.delete = "", h.prototype.patch = "", h.prototype.custom = null, h.prototype.body = "", h.prototype.responseBody = "", h.prototype.additionalBindings = p.emptyArray, Object.defineProperty(h.prototype, "pattern", { get: p.oneOfGetter(e = ["get", "put", "post", "delete", "patch", "custom"]), set: p.oneOfSetter(e) }), h.create = function(e2) {
        return new h(e2);
      }, h.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.selector && Object.hasOwnProperty.call(e2, "selector") && t2.uint32(10).string(e2.selector), null != e2.get && Object.hasOwnProperty.call(e2, "get") && t2.uint32(18).string(e2.get), null != e2.put && Object.hasOwnProperty.call(e2, "put") && t2.uint32(26).string(e2.put), null != e2.post && Object.hasOwnProperty.call(e2, "post") && t2.uint32(34).string(e2.post), null != e2.delete && Object.hasOwnProperty.call(e2, "delete") && t2.uint32(42).string(e2.delete), null != e2.patch && Object.hasOwnProperty.call(e2, "patch") && t2.uint32(50).string(e2.patch), null != e2.body && Object.hasOwnProperty.call(e2, "body") && t2.uint32(58).string(e2.body), null != e2.custom && Object.hasOwnProperty.call(e2, "custom") && l.google.api.CustomHttpPattern.encode(e2.custom, t2.uint32(66).fork()).ldelim(), null != e2.additionalBindings && e2.additionalBindings.length)
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2)
            l.google.api.HttpRule.encode(e2.additionalBindings[n2], t2.uint32(90).fork()).ldelim();
        return null != e2.responseBody && Object.hasOwnProperty.call(e2, "responseBody") && t2.uint32(98).string(e2.responseBody), t2;
      }, h.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, h.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.HttpRule(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.selector = e2.string();
              break;
            case 2:
              o2.get = e2.string();
              break;
            case 3:
              o2.put = e2.string();
              break;
            case 4:
              o2.post = e2.string();
              break;
            case 5:
              o2.delete = e2.string();
              break;
            case 6:
              o2.patch = e2.string();
              break;
            case 8:
              o2.custom = l.google.api.CustomHttpPattern.decode(e2, e2.uint32());
              break;
            case 7:
              o2.body = e2.string();
              break;
            case 12:
              o2.responseBody = e2.string();
              break;
            case 11:
              o2.additionalBindings && o2.additionalBindings.length || (o2.additionalBindings = []), o2.additionalBindings.push(l.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, h.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, h.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2 = {};
        if (null != e2.selector && e2.hasOwnProperty("selector") && !p.isString(e2.selector))
          return "selector: string expected";
        if (null != e2.get && e2.hasOwnProperty("get") && (t2.pattern = 1, !p.isString(e2.get)))
          return "get: string expected";
        if (null != e2.put && e2.hasOwnProperty("put")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.put))
            return "put: string expected";
        }
        if (null != e2.post && e2.hasOwnProperty("post")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.post))
            return "post: string expected";
        }
        if (null != e2.delete && e2.hasOwnProperty("delete")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.delete))
            return "delete: string expected";
        }
        if (null != e2.patch && e2.hasOwnProperty("patch")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.patch))
            return "patch: string expected";
        }
        if (null != e2.custom && e2.hasOwnProperty("custom")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, n2 = l.google.api.CustomHttpPattern.verify(e2.custom))
            return "custom." + n2;
        }
        if (null != e2.body && e2.hasOwnProperty("body") && !p.isString(e2.body))
          return "body: string expected";
        if (null != e2.responseBody && e2.hasOwnProperty("responseBody") && !p.isString(e2.responseBody))
          return "responseBody: string expected";
        if (null != e2.additionalBindings && e2.hasOwnProperty("additionalBindings")) {
          if (!Array.isArray(e2.additionalBindings))
            return "additionalBindings: array expected";
          for (var n2, o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            if (n2 = l.google.api.HttpRule.verify(e2.additionalBindings[o2]))
              return "additionalBindings." + n2;
        }
        return null;
      }, h.fromObject = function(e2) {
        if (e2 instanceof l.google.api.HttpRule)
          return e2;
        var t2 = new l.google.api.HttpRule();
        if (null != e2.selector && (t2.selector = String(e2.selector)), null != e2.get && (t2.get = String(e2.get)), null != e2.put && (t2.put = String(e2.put)), null != e2.post && (t2.post = String(e2.post)), null != e2.delete && (t2.delete = String(e2.delete)), null != e2.patch && (t2.patch = String(e2.patch)), null != e2.custom) {
          if ("object" != typeof e2.custom)
            throw TypeError(".google.api.HttpRule.custom: object expected");
          t2.custom = l.google.api.CustomHttpPattern.fromObject(e2.custom);
        }
        if (null != e2.body && (t2.body = String(e2.body)), null != e2.responseBody && (t2.responseBody = String(e2.responseBody)), e2.additionalBindings) {
          if (!Array.isArray(e2.additionalBindings))
            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
          t2.additionalBindings = [];
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2) {
            if ("object" != typeof e2.additionalBindings[n2])
              throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
            t2.additionalBindings[n2] = l.google.api.HttpRule.fromObject(e2.additionalBindings[n2]);
          }
        }
        return t2;
      }, h.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.additionalBindings = []), t2.defaults && (n2.selector = "", n2.body = "", n2.responseBody = ""), null != e2.selector && e2.hasOwnProperty("selector") && (n2.selector = e2.selector), null != e2.get && e2.hasOwnProperty("get") && (n2.get = e2.get, t2.oneofs) && (n2.pattern = "get"), null != e2.put && e2.hasOwnProperty("put") && (n2.put = e2.put, t2.oneofs) && (n2.pattern = "put"), null != e2.post && e2.hasOwnProperty("post") && (n2.post = e2.post, t2.oneofs) && (n2.pattern = "post"), null != e2.delete && e2.hasOwnProperty("delete") && (n2.delete = e2.delete, t2.oneofs) && (n2.pattern = "delete"), null != e2.patch && e2.hasOwnProperty("patch") && (n2.patch = e2.patch, t2.oneofs) && (n2.pattern = "patch"), null != e2.body && e2.hasOwnProperty("body") && (n2.body = e2.body), null != e2.custom && e2.hasOwnProperty("custom") && (n2.custom = l.google.api.CustomHttpPattern.toObject(e2.custom, t2), t2.oneofs) && (n2.pattern = "custom"), e2.additionalBindings && e2.additionalBindings.length) {
          n2.additionalBindings = [];
          for (var o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            n2.additionalBindings[o2] = l.google.api.HttpRule.toObject(e2.additionalBindings[o2], t2);
        }
        return null != e2.responseBody && e2.hasOwnProperty("responseBody") && (n2.responseBody = e2.responseBody), n2;
      }, h.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, h), r.CustomHttpPattern = (_.prototype.kind = "", _.prototype.path = "", _.create = function(e2) {
        return new _(e2);
      }, _.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.kind && Object.hasOwnProperty.call(e2, "kind") && t2.uint32(10).string(e2.kind), null != e2.path && Object.hasOwnProperty.call(e2, "path") && t2.uint32(18).string(e2.path), t2;
      }, _.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, _.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.CustomHttpPattern(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.kind = e2.string();
              break;
            case 2:
              o2.path = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, _.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, _.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.kind && e2.hasOwnProperty("kind") && !p.isString(e2.kind) ? "kind: string expected" : null != e2.path && e2.hasOwnProperty("path") && !p.isString(e2.path) ? "path: string expected" : null;
      }, _.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.api.CustomHttpPattern ? e2 : (t2 = new l.google.api.CustomHttpPattern(), null != e2.kind && (t2.kind = String(e2.kind)), null != e2.path && (t2.path = String(e2.path)), t2);
      }, _.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.kind = "", n2.path = ""), null != e2.kind && e2.hasOwnProperty("kind") && (n2.kind = e2.kind), null != e2.path && e2.hasOwnProperty("path") && (n2.path = e2.path), n2;
      }, _.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, _), r.FieldBehavior = (e = {}, (t = Object.create(e))[e[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0, t[e[1] = "OPTIONAL"] = 1, t[e[2] = "REQUIRED"] = 2, t[e[3] = "OUTPUT_ONLY"] = 3, t[e[4] = "INPUT_ONLY"] = 4, t[e[5] = "IMMUTABLE"] = 5, t), r.ResourceDescriptor = (b.prototype.type = "", b.prototype.pattern = p.emptyArray, b.prototype.nameField = "", b.prototype.history = 0, b.prototype.plural = "", b.prototype.singular = "", b.create = function(e2) {
        return new b(e2);
      }, b.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(10).string(e2.type), null != e2.pattern && e2.pattern.length)
          for (var n2 = 0; n2 < e2.pattern.length; ++n2)
            t2.uint32(18).string(e2.pattern[n2]);
        return null != e2.nameField && Object.hasOwnProperty.call(e2, "nameField") && t2.uint32(26).string(e2.nameField), null != e2.history && Object.hasOwnProperty.call(e2, "history") && t2.uint32(32).int32(e2.history), null != e2.plural && Object.hasOwnProperty.call(e2, "plural") && t2.uint32(42).string(e2.plural), null != e2.singular && Object.hasOwnProperty.call(e2, "singular") && t2.uint32(50).string(e2.singular), t2;
      }, b.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, b.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.ResourceDescriptor(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type = e2.string();
              break;
            case 2:
              o2.pattern && o2.pattern.length || (o2.pattern = []), o2.pattern.push(e2.string());
              break;
            case 3:
              o2.nameField = e2.string();
              break;
            case 4:
              o2.history = e2.int32();
              break;
            case 5:
              o2.plural = e2.string();
              break;
            case 6:
              o2.singular = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, b.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, b.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.type && e2.hasOwnProperty("type") && !p.isString(e2.type))
          return "type: string expected";
        if (null != e2.pattern && e2.hasOwnProperty("pattern")) {
          if (!Array.isArray(e2.pattern))
            return "pattern: array expected";
          for (var t2 = 0; t2 < e2.pattern.length; ++t2)
            if (!p.isString(e2.pattern[t2]))
              return "pattern: string[] expected";
        }
        if (null != e2.nameField && e2.hasOwnProperty("nameField") && !p.isString(e2.nameField))
          return "nameField: string expected";
        if (null != e2.history && e2.hasOwnProperty("history"))
          switch (e2.history) {
            default:
              return "history: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        return null != e2.plural && e2.hasOwnProperty("plural") && !p.isString(e2.plural) ? "plural: string expected" : null != e2.singular && e2.hasOwnProperty("singular") && !p.isString(e2.singular) ? "singular: string expected" : null;
      }, b.fromObject = function(e2) {
        if (e2 instanceof l.google.api.ResourceDescriptor)
          return e2;
        var t2 = new l.google.api.ResourceDescriptor();
        if (null != e2.type && (t2.type = String(e2.type)), e2.pattern) {
          if (!Array.isArray(e2.pattern))
            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
          t2.pattern = [];
          for (var n2 = 0; n2 < e2.pattern.length; ++n2)
            t2.pattern[n2] = String(e2.pattern[n2]);
        }
        switch (null != e2.nameField && (t2.nameField = String(e2.nameField)), e2.history) {
          case "HISTORY_UNSPECIFIED":
          case 0:
            t2.history = 0;
            break;
          case "ORIGINALLY_SINGLE_PATTERN":
          case 1:
            t2.history = 1;
            break;
          case "FUTURE_MULTI_PATTERN":
          case 2:
            t2.history = 2;
        }
        return null != e2.plural && (t2.plural = String(e2.plural)), null != e2.singular && (t2.singular = String(e2.singular)), t2;
      }, b.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.pattern = []), t2.defaults && (n2.type = "", n2.nameField = "", n2.history = t2.enums === String ? "HISTORY_UNSPECIFIED" : 0, n2.plural = "", n2.singular = ""), null != e2.type && e2.hasOwnProperty("type") && (n2.type = e2.type), e2.pattern && e2.pattern.length) {
          n2.pattern = [];
          for (var o2 = 0; o2 < e2.pattern.length; ++o2)
            n2.pattern[o2] = e2.pattern[o2];
        }
        return null != e2.nameField && e2.hasOwnProperty("nameField") && (n2.nameField = e2.nameField), null != e2.history && e2.hasOwnProperty("history") && (n2.history = t2.enums === String ? l.google.api.ResourceDescriptor.History[e2.history] : e2.history), null != e2.plural && e2.hasOwnProperty("plural") && (n2.plural = e2.plural), null != e2.singular && e2.hasOwnProperty("singular") && (n2.singular = e2.singular), n2;
      }, b.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, b.History = (e = {}, (t = Object.create(e))[e[0] = "HISTORY_UNSPECIFIED"] = 0, t[e[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1, t[e[2] = "FUTURE_MULTI_PATTERN"] = 2, t), b), r.ResourceReference = (H.prototype.type = "", H.prototype.childType = "", H.create = function(e2) {
        return new H(e2);
      }, H.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(10).string(e2.type), null != e2.childType && Object.hasOwnProperty.call(e2, "childType") && t2.uint32(18).string(e2.childType), t2;
      }, H.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, H.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.ResourceReference(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type = e2.string();
              break;
            case 2:
              o2.childType = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, H.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, H.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.type && e2.hasOwnProperty("type") && !p.isString(e2.type) ? "type: string expected" : null != e2.childType && e2.hasOwnProperty("childType") && !p.isString(e2.childType) ? "childType: string expected" : null;
      }, H.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.api.ResourceReference ? e2 : (t2 = new l.google.api.ResourceReference(), null != e2.type && (t2.type = String(e2.type)), null != e2.childType && (t2.childType = String(e2.childType)), t2);
      }, H.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.type = "", n2.childType = ""), null != e2.type && e2.hasOwnProperty("type") && (n2.type = e2.type), null != e2.childType && e2.hasOwnProperty("childType") && (n2.childType = e2.childType), n2;
      }, H.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, H), r), F.protobuf = ((n = {}).FileDescriptorSet = (q.prototype.file = p.emptyArray, q.create = function(e2) {
        return new q(e2);
      }, q.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.file && e2.file.length)
          for (var n2 = 0; n2 < e2.file.length; ++n2)
            l.google.protobuf.FileDescriptorProto.encode(e2.file[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FileDescriptorSet(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.file && o2.file.length || (o2.file = []), o2.file.push(l.google.protobuf.FileDescriptorProto.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, q.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.file && e2.hasOwnProperty("file")) {
          if (!Array.isArray(e2.file))
            return "file: array expected";
          for (var t2 = 0; t2 < e2.file.length; ++t2) {
            var n2 = l.google.protobuf.FileDescriptorProto.verify(e2.file[t2]);
            if (n2)
              return "file." + n2;
          }
        }
        return null;
      }, q.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FileDescriptorSet)
          return e2;
        var t2 = new l.google.protobuf.FileDescriptorSet();
        if (e2.file) {
          if (!Array.isArray(e2.file))
            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
          t2.file = [];
          for (var n2 = 0; n2 < e2.file.length; ++n2) {
            if ("object" != typeof e2.file[n2])
              throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
            t2.file[n2] = l.google.protobuf.FileDescriptorProto.fromObject(e2.file[n2]);
          }
        }
        return t2;
      }, q.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.file = []), e2.file && e2.file.length) {
          n2.file = [];
          for (var o2 = 0; o2 < e2.file.length; ++o2)
            n2.file[o2] = l.google.protobuf.FileDescriptorProto.toObject(e2.file[o2], t2);
        }
        return n2;
      }, q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, q), n.FileDescriptorProto = (m.prototype.name = "", m.prototype.package = "", m.prototype.dependency = p.emptyArray, m.prototype.publicDependency = p.emptyArray, m.prototype.weakDependency = p.emptyArray, m.prototype.messageType = p.emptyArray, m.prototype.enumType = p.emptyArray, m.prototype.service = p.emptyArray, m.prototype.extension = p.emptyArray, m.prototype.options = null, m.prototype.sourceCodeInfo = null, m.prototype.syntax = "", m.create = function(e2) {
        return new m(e2);
      }, m.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.package && Object.hasOwnProperty.call(e2, "package") && t2.uint32(18).string(e2.package), null != e2.dependency && e2.dependency.length)
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.uint32(26).string(e2.dependency[n2]);
        if (null != e2.messageType && e2.messageType.length)
          for (n2 = 0; n2 < e2.messageType.length; ++n2)
            l.google.protobuf.DescriptorProto.encode(e2.messageType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            l.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.service && e2.service.length)
          for (n2 = 0; n2 < e2.service.length; ++n2)
            l.google.protobuf.ServiceDescriptorProto.encode(e2.service[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            l.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(58).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.FileOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.sourceCodeInfo && Object.hasOwnProperty.call(e2, "sourceCodeInfo") && l.google.protobuf.SourceCodeInfo.encode(e2.sourceCodeInfo, t2.uint32(74).fork()).ldelim(), null != e2.publicDependency && e2.publicDependency.length)
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.uint32(80).int32(e2.publicDependency[n2]);
        if (null != e2.weakDependency && e2.weakDependency.length)
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.uint32(88).int32(e2.weakDependency[n2]);
        return null != e2.syntax && Object.hasOwnProperty.call(e2, "syntax") && t2.uint32(98).string(e2.syntax), t2;
      }, m.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, m.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FileDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.package = e2.string();
              break;
            case 3:
              o2.dependency && o2.dependency.length || (o2.dependency = []), o2.dependency.push(e2.string());
              break;
            case 10:
              if (o2.publicDependency && o2.publicDependency.length || (o2.publicDependency = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.publicDependency.push(e2.int32());
              else
                o2.publicDependency.push(e2.int32());
              break;
            case 11:
              if (o2.weakDependency && o2.weakDependency.length || (o2.weakDependency = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.weakDependency.push(e2.int32());
              else
                o2.weakDependency.push(e2.int32());
              break;
            case 4:
              o2.messageType && o2.messageType.length || (o2.messageType = []), o2.messageType.push(l.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.service && o2.service.length || (o2.service = []), o2.service.push(l.google.protobuf.ServiceDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.options = l.google.protobuf.FileOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.decode(e2, e2.uint32());
              break;
            case 12:
              o2.syntax = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, m.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, m.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.package && e2.hasOwnProperty("package") && !p.isString(e2.package))
          return "package: string expected";
        if (null != e2.dependency && e2.hasOwnProperty("dependency")) {
          if (!Array.isArray(e2.dependency))
            return "dependency: array expected";
          for (var t2 = 0; t2 < e2.dependency.length; ++t2)
            if (!p.isString(e2.dependency[t2]))
              return "dependency: string[] expected";
        }
        if (null != e2.publicDependency && e2.hasOwnProperty("publicDependency")) {
          if (!Array.isArray(e2.publicDependency))
            return "publicDependency: array expected";
          for (t2 = 0; t2 < e2.publicDependency.length; ++t2)
            if (!p.isInteger(e2.publicDependency[t2]))
              return "publicDependency: integer[] expected";
        }
        if (null != e2.weakDependency && e2.hasOwnProperty("weakDependency")) {
          if (!Array.isArray(e2.weakDependency))
            return "weakDependency: array expected";
          for (t2 = 0; t2 < e2.weakDependency.length; ++t2)
            if (!p.isInteger(e2.weakDependency[t2]))
              return "weakDependency: integer[] expected";
        }
        if (null != e2.messageType && e2.hasOwnProperty("messageType")) {
          if (!Array.isArray(e2.messageType))
            return "messageType: array expected";
          for (t2 = 0; t2 < e2.messageType.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.verify(e2.messageType[t2]))
              return "messageType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = l.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.service && e2.hasOwnProperty("service")) {
          if (!Array.isArray(e2.service))
            return "service: array expected";
          for (t2 = 0; t2 < e2.service.length; ++t2)
            if (n2 = l.google.protobuf.ServiceDescriptorProto.verify(e2.service[t2]))
              return "service." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = l.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.FileOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2 = l.google.protobuf.SourceCodeInfo.verify(e2.sourceCodeInfo)))
          return "sourceCodeInfo." + n2;
        return null != e2.syntax && e2.hasOwnProperty("syntax") && !p.isString(e2.syntax) ? "syntax: string expected" : null;
      }, m.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FileDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.FileDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.package && (t2.package = String(e2.package)), e2.dependency) {
          if (!Array.isArray(e2.dependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
          t2.dependency = [];
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.dependency[n2] = String(e2.dependency[n2]);
        }
        if (e2.publicDependency) {
          if (!Array.isArray(e2.publicDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
          t2.publicDependency = [];
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.publicDependency[n2] = 0 | e2.publicDependency[n2];
        }
        if (e2.weakDependency) {
          if (!Array.isArray(e2.weakDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
          t2.weakDependency = [];
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.weakDependency[n2] = 0 | e2.weakDependency[n2];
        }
        if (e2.messageType) {
          if (!Array.isArray(e2.messageType))
            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
          t2.messageType = [];
          for (n2 = 0; n2 < e2.messageType.length; ++n2) {
            if ("object" != typeof e2.messageType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
            t2.messageType[n2] = l.google.protobuf.DescriptorProto.fromObject(e2.messageType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
            t2.enumType[n2] = l.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.service) {
          if (!Array.isArray(e2.service))
            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
          t2.service = [];
          for (n2 = 0; n2 < e2.service.length; ++n2) {
            if ("object" != typeof e2.service[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
            t2.service[n2] = l.google.protobuf.ServiceDescriptorProto.fromObject(e2.service[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
            t2.extension[n2] = l.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.FileOptions.fromObject(e2.options);
        }
        if (null != e2.sourceCodeInfo) {
          if ("object" != typeof e2.sourceCodeInfo)
            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
          t2.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.fromObject(e2.sourceCodeInfo);
        }
        return null != e2.syntax && (t2.syntax = String(e2.syntax)), t2;
      }, m.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.dependency = [], n2.messageType = [], n2.enumType = [], n2.service = [], n2.extension = [], n2.publicDependency = [], n2.weakDependency = []), t2.defaults && (n2.name = "", n2.package = "", n2.options = null, n2.sourceCodeInfo = null, n2.syntax = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.package && e2.hasOwnProperty("package") && (n2.package = e2.package), e2.dependency && e2.dependency.length) {
          n2.dependency = [];
          for (var o2 = 0; o2 < e2.dependency.length; ++o2)
            n2.dependency[o2] = e2.dependency[o2];
        }
        if (e2.messageType && e2.messageType.length) {
          n2.messageType = [];
          for (o2 = 0; o2 < e2.messageType.length; ++o2)
            n2.messageType[o2] = l.google.protobuf.DescriptorProto.toObject(e2.messageType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = l.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.service && e2.service.length) {
          n2.service = [];
          for (o2 = 0; o2 < e2.service.length; ++o2)
            n2.service[o2] = l.google.protobuf.ServiceDescriptorProto.toObject(e2.service[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = l.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.FileOptions.toObject(e2.options, t2)), null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.toObject(e2.sourceCodeInfo, t2)), e2.publicDependency && e2.publicDependency.length) {
          n2.publicDependency = [];
          for (o2 = 0; o2 < e2.publicDependency.length; ++o2)
            n2.publicDependency[o2] = e2.publicDependency[o2];
        }
        if (e2.weakDependency && e2.weakDependency.length) {
          n2.weakDependency = [];
          for (o2 = 0; o2 < e2.weakDependency.length; ++o2)
            n2.weakDependency[o2] = e2.weakDependency[o2];
        }
        return null != e2.syntax && e2.hasOwnProperty("syntax") && (n2.syntax = e2.syntax), n2;
      }, m.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, m), n.DescriptorProto = (O.prototype.name = "", O.prototype.field = p.emptyArray, O.prototype.extension = p.emptyArray, O.prototype.nestedType = p.emptyArray, O.prototype.enumType = p.emptyArray, O.prototype.extensionRange = p.emptyArray, O.prototype.oneofDecl = p.emptyArray, O.prototype.options = null, O.prototype.reservedRange = p.emptyArray, O.prototype.reservedName = p.emptyArray, O.create = function(e2) {
        return new O(e2);
      }, O.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.field && e2.field.length)
          for (var n2 = 0; n2 < e2.field.length; ++n2)
            l.google.protobuf.FieldDescriptorProto.encode(e2.field[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.nestedType && e2.nestedType.length)
          for (n2 = 0; n2 < e2.nestedType.length; ++n2)
            l.google.protobuf.DescriptorProto.encode(e2.nestedType[n2], t2.uint32(26).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            l.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.extensionRange && e2.extensionRange.length)
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2)
            l.google.protobuf.DescriptorProto.ExtensionRange.encode(e2.extensionRange[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            l.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.MessageOptions.encode(e2.options, t2.uint32(58).fork()).ldelim(), null != e2.oneofDecl && e2.oneofDecl.length)
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2)
            l.google.protobuf.OneofDescriptorProto.encode(e2.oneofDecl[n2], t2.uint32(66).fork()).ldelim();
        if (null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            l.google.protobuf.DescriptorProto.ReservedRange.encode(e2.reservedRange[n2], t2.uint32(74).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(82).string(e2.reservedName[n2]);
        return t2;
      }, O.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, O.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.DescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.field && o2.field.length || (o2.field = []), o2.field.push(l.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.nestedType && o2.nestedType.length || (o2.nestedType = []), o2.nestedType.push(l.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 4:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.extensionRange && o2.extensionRange.length || (o2.extensionRange = []), o2.extensionRange.push(l.google.protobuf.DescriptorProto.ExtensionRange.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.oneofDecl && o2.oneofDecl.length || (o2.oneofDecl = []), o2.oneofDecl.push(l.google.protobuf.OneofDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.options = l.google.protobuf.MessageOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(l.google.protobuf.DescriptorProto.ReservedRange.decode(e2, e2.uint32()));
              break;
            case 10:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, O.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, O.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.field && e2.hasOwnProperty("field")) {
          if (!Array.isArray(e2.field))
            return "field: array expected";
          for (var t2 = 0; t2 < e2.field.length; ++t2)
            if (n2 = l.google.protobuf.FieldDescriptorProto.verify(e2.field[t2]))
              return "field." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = l.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        if (null != e2.nestedType && e2.hasOwnProperty("nestedType")) {
          if (!Array.isArray(e2.nestedType))
            return "nestedType: array expected";
          for (t2 = 0; t2 < e2.nestedType.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.verify(e2.nestedType[t2]))
              return "nestedType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = l.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.extensionRange && e2.hasOwnProperty("extensionRange")) {
          if (!Array.isArray(e2.extensionRange))
            return "extensionRange: array expected";
          for (t2 = 0; t2 < e2.extensionRange.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.ExtensionRange.verify(e2.extensionRange[t2]))
              return "extensionRange." + n2;
        }
        if (null != e2.oneofDecl && e2.hasOwnProperty("oneofDecl")) {
          if (!Array.isArray(e2.oneofDecl))
            return "oneofDecl: array expected";
          for (t2 = 0; t2 < e2.oneofDecl.length; ++t2)
            if (n2 = l.google.protobuf.OneofDescriptorProto.verify(e2.oneofDecl[t2]))
              return "oneofDecl." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.MessageOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.ReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!p.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, O.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.DescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.DescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.field) {
          if (!Array.isArray(e2.field))
            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
          t2.field = [];
          for (var n2 = 0; n2 < e2.field.length; ++n2) {
            if ("object" != typeof e2.field[n2])
              throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
            t2.field[n2] = l.google.protobuf.FieldDescriptorProto.fromObject(e2.field[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
            t2.extension[n2] = l.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (e2.nestedType) {
          if (!Array.isArray(e2.nestedType))
            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
          t2.nestedType = [];
          for (n2 = 0; n2 < e2.nestedType.length; ++n2) {
            if ("object" != typeof e2.nestedType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
            t2.nestedType[n2] = l.google.protobuf.DescriptorProto.fromObject(e2.nestedType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
            t2.enumType[n2] = l.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.extensionRange) {
          if (!Array.isArray(e2.extensionRange))
            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
          t2.extensionRange = [];
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2) {
            if ("object" != typeof e2.extensionRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
            t2.extensionRange[n2] = l.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e2.extensionRange[n2]);
          }
        }
        if (e2.oneofDecl) {
          if (!Array.isArray(e2.oneofDecl))
            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
          t2.oneofDecl = [];
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2) {
            if ("object" != typeof e2.oneofDecl[n2])
              throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
            t2.oneofDecl[n2] = l.google.protobuf.OneofDescriptorProto.fromObject(e2.oneofDecl[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
          t2.options = l.google.protobuf.MessageOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = l.google.protobuf.DescriptorProto.ReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, O.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.field = [], n2.nestedType = [], n2.enumType = [], n2.extensionRange = [], n2.extension = [], n2.oneofDecl = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.field && e2.field.length) {
          n2.field = [];
          for (var o2 = 0; o2 < e2.field.length; ++o2)
            n2.field[o2] = l.google.protobuf.FieldDescriptorProto.toObject(e2.field[o2], t2);
        }
        if (e2.nestedType && e2.nestedType.length) {
          n2.nestedType = [];
          for (o2 = 0; o2 < e2.nestedType.length; ++o2)
            n2.nestedType[o2] = l.google.protobuf.DescriptorProto.toObject(e2.nestedType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = l.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.extensionRange && e2.extensionRange.length) {
          n2.extensionRange = [];
          for (o2 = 0; o2 < e2.extensionRange.length; ++o2)
            n2.extensionRange[o2] = l.google.protobuf.DescriptorProto.ExtensionRange.toObject(e2.extensionRange[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = l.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.MessageOptions.toObject(e2.options, t2)), e2.oneofDecl && e2.oneofDecl.length) {
          n2.oneofDecl = [];
          for (o2 = 0; o2 < e2.oneofDecl.length; ++o2)
            n2.oneofDecl[o2] = l.google.protobuf.OneofDescriptorProto.toObject(e2.oneofDecl[o2], t2);
        }
        if (e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = l.google.protobuf.DescriptorProto.ReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, O.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, O.ExtensionRange = (v.prototype.start = 0, v.prototype.end = 0, v.prototype.options = null, v.create = function(e2) {
        return new v(e2);
      }, v.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.ExtensionRangeOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, v.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, v.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.DescriptorProto.ExtensionRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            case 3:
              o2.options = l.google.protobuf.ExtensionRangeOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, v.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, v.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.start && e2.hasOwnProperty("start") && !p.isInteger(e2.start))
          return "start: integer expected";
        if (null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end))
          return "end: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.protobuf.ExtensionRangeOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, v.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.DescriptorProto.ExtensionRange)
          return e2;
        var t2 = new l.google.protobuf.DescriptorProto.ExtensionRange();
        if (null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
          t2.options = l.google.protobuf.ExtensionRangeOptions.fromObject(e2.options);
        }
        return t2;
      }, v.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0, n2.options = null), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.ExtensionRangeOptions.toObject(e2.options, t2)), n2;
      }, v.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, v), O.ReservedRange = (Y.prototype.start = 0, Y.prototype.end = 0, Y.create = function(e2) {
        return new Y(e2);
      }, Y.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, Y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.DescriptorProto.ReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, Y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Y.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !p.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end) ? "end: integer expected" : null;
      }, Y.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.protobuf.DescriptorProto.ReservedRange ? e2 : (t2 = new l.google.protobuf.DescriptorProto.ReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, Y.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, Y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Y), O), n.ExtensionRangeOptions = (z.prototype.uninterpretedOption = p.emptyArray, z.create = function(e2) {
        return new z(e2);
      }, z.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, z.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, z.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.ExtensionRangeOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, z.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, z.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, z.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.ExtensionRangeOptions)
          return e2;
        var t2 = new l.google.protobuf.ExtensionRangeOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, z.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, z.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, z), n.FieldDescriptorProto = (P.prototype.name = "", P.prototype.number = 0, P.prototype.label = 1, P.prototype.type = 1, P.prototype.typeName = "", P.prototype.extendee = "", P.prototype.defaultValue = "", P.prototype.oneofIndex = 0, P.prototype.jsonName = "", P.prototype.options = null, P.prototype.proto3Optional = false, P.create = function(e2) {
        return new P(e2);
      }, P.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.extendee && Object.hasOwnProperty.call(e2, "extendee") && t2.uint32(18).string(e2.extendee), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(24).int32(e2.number), null != e2.label && Object.hasOwnProperty.call(e2, "label") && t2.uint32(32).int32(e2.label), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(40).int32(e2.type), null != e2.typeName && Object.hasOwnProperty.call(e2, "typeName") && t2.uint32(50).string(e2.typeName), null != e2.defaultValue && Object.hasOwnProperty.call(e2, "defaultValue") && t2.uint32(58).string(e2.defaultValue), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.FieldOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.oneofIndex && Object.hasOwnProperty.call(e2, "oneofIndex") && t2.uint32(72).int32(e2.oneofIndex), null != e2.jsonName && Object.hasOwnProperty.call(e2, "jsonName") && t2.uint32(82).string(e2.jsonName), null != e2.proto3Optional && Object.hasOwnProperty.call(e2, "proto3Optional") && t2.uint32(136).bool(e2.proto3Optional), t2;
      }, P.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, P.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FieldDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 3:
              o2.number = e2.int32();
              break;
            case 4:
              o2.label = e2.int32();
              break;
            case 5:
              o2.type = e2.int32();
              break;
            case 6:
              o2.typeName = e2.string();
              break;
            case 2:
              o2.extendee = e2.string();
              break;
            case 7:
              o2.defaultValue = e2.string();
              break;
            case 9:
              o2.oneofIndex = e2.int32();
              break;
            case 10:
              o2.jsonName = e2.string();
              break;
            case 8:
              o2.options = l.google.protobuf.FieldOptions.decode(e2, e2.uint32());
              break;
            case 17:
              o2.proto3Optional = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, P.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, P.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !p.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.label && e2.hasOwnProperty("label"))
          switch (e2.label) {
            default:
              return "label: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.type && e2.hasOwnProperty("type"))
          switch (e2.type) {
            default:
              return "type: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
          }
        if (null != e2.typeName && e2.hasOwnProperty("typeName") && !p.isString(e2.typeName))
          return "typeName: string expected";
        if (null != e2.extendee && e2.hasOwnProperty("extendee") && !p.isString(e2.extendee))
          return "extendee: string expected";
        if (null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && !p.isString(e2.defaultValue))
          return "defaultValue: string expected";
        if (null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && !p.isInteger(e2.oneofIndex))
          return "oneofIndex: integer expected";
        if (null != e2.jsonName && e2.hasOwnProperty("jsonName") && !p.isString(e2.jsonName))
          return "jsonName: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = l.google.protobuf.FieldOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && "boolean" != typeof e2.proto3Optional ? "proto3Optional: boolean expected" : null;
      }, P.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FieldDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.FieldDescriptorProto();
        switch (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), e2.label) {
          case "LABEL_OPTIONAL":
          case 1:
            t2.label = 1;
            break;
          case "LABEL_REQUIRED":
          case 2:
            t2.label = 2;
            break;
          case "LABEL_REPEATED":
          case 3:
            t2.label = 3;
        }
        switch (e2.type) {
          case "TYPE_DOUBLE":
          case 1:
            t2.type = 1;
            break;
          case "TYPE_FLOAT":
          case 2:
            t2.type = 2;
            break;
          case "TYPE_INT64":
          case 3:
            t2.type = 3;
            break;
          case "TYPE_UINT64":
          case 4:
            t2.type = 4;
            break;
          case "TYPE_INT32":
          case 5:
            t2.type = 5;
            break;
          case "TYPE_FIXED64":
          case 6:
            t2.type = 6;
            break;
          case "TYPE_FIXED32":
          case 7:
            t2.type = 7;
            break;
          case "TYPE_BOOL":
          case 8:
            t2.type = 8;
            break;
          case "TYPE_STRING":
          case 9:
            t2.type = 9;
            break;
          case "TYPE_GROUP":
          case 10:
            t2.type = 10;
            break;
          case "TYPE_MESSAGE":
          case 11:
            t2.type = 11;
            break;
          case "TYPE_BYTES":
          case 12:
            t2.type = 12;
            break;
          case "TYPE_UINT32":
          case 13:
            t2.type = 13;
            break;
          case "TYPE_ENUM":
          case 14:
            t2.type = 14;
            break;
          case "TYPE_SFIXED32":
          case 15:
            t2.type = 15;
            break;
          case "TYPE_SFIXED64":
          case 16:
            t2.type = 16;
            break;
          case "TYPE_SINT32":
          case 17:
            t2.type = 17;
            break;
          case "TYPE_SINT64":
          case 18:
            t2.type = 18;
        }
        if (null != e2.typeName && (t2.typeName = String(e2.typeName)), null != e2.extendee && (t2.extendee = String(e2.extendee)), null != e2.defaultValue && (t2.defaultValue = String(e2.defaultValue)), null != e2.oneofIndex && (t2.oneofIndex = 0 | e2.oneofIndex), null != e2.jsonName && (t2.jsonName = String(e2.jsonName)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.FieldOptions.fromObject(e2.options);
        }
        return null != e2.proto3Optional && (t2.proto3Optional = Boolean(e2.proto3Optional)), t2;
      }, P.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.extendee = "", n2.number = 0, n2.label = t2.enums === String ? "LABEL_OPTIONAL" : 1, n2.type = t2.enums === String ? "TYPE_DOUBLE" : 1, n2.typeName = "", n2.defaultValue = "", n2.options = null, n2.oneofIndex = 0, n2.jsonName = "", n2.proto3Optional = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.extendee && e2.hasOwnProperty("extendee") && (n2.extendee = e2.extendee), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.label && e2.hasOwnProperty("label") && (n2.label = t2.enums === String ? l.google.protobuf.FieldDescriptorProto.Label[e2.label] : e2.label), null != e2.type && e2.hasOwnProperty("type") && (n2.type = t2.enums === String ? l.google.protobuf.FieldDescriptorProto.Type[e2.type] : e2.type), null != e2.typeName && e2.hasOwnProperty("typeName") && (n2.typeName = e2.typeName), null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && (n2.defaultValue = e2.defaultValue), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.FieldOptions.toObject(e2.options, t2)), null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && (n2.oneofIndex = e2.oneofIndex), null != e2.jsonName && e2.hasOwnProperty("jsonName") && (n2.jsonName = e2.jsonName), null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && (n2.proto3Optional = e2.proto3Optional), n2;
      }, P.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, P.Type = (e = {}, (t = Object.create(e))[e[1] = "TYPE_DOUBLE"] = 1, t[e[2] = "TYPE_FLOAT"] = 2, t[e[3] = "TYPE_INT64"] = 3, t[e[4] = "TYPE_UINT64"] = 4, t[e[5] = "TYPE_INT32"] = 5, t[e[6] = "TYPE_FIXED64"] = 6, t[e[7] = "TYPE_FIXED32"] = 7, t[e[8] = "TYPE_BOOL"] = 8, t[e[9] = "TYPE_STRING"] = 9, t[e[10] = "TYPE_GROUP"] = 10, t[e[11] = "TYPE_MESSAGE"] = 11, t[e[12] = "TYPE_BYTES"] = 12, t[e[13] = "TYPE_UINT32"] = 13, t[e[14] = "TYPE_ENUM"] = 14, t[e[15] = "TYPE_SFIXED32"] = 15, t[e[16] = "TYPE_SFIXED64"] = 16, t[e[17] = "TYPE_SINT32"] = 17, t[e[18] = "TYPE_SINT64"] = 18, t), P.Label = (e = {}, (t = Object.create(e))[e[1] = "LABEL_OPTIONAL"] = 1, t[e[2] = "LABEL_REQUIRED"] = 2, t[e[3] = "LABEL_REPEATED"] = 3, t), P), n.OneofDescriptorProto = (W.prototype.name = "", W.prototype.options = null, W.create = function(e2) {
        return new W(e2);
      }, W.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.OneofOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, W.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, W.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.OneofDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.options = l.google.protobuf.OneofOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, W.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, W.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.protobuf.OneofOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, W.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.OneofDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.OneofDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.OneofOptions.fromObject(e2.options);
        }
        return t2;
      }, W.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.OneofOptions.toObject(e2.options, t2)), n2;
      }, W.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, W), n.EnumDescriptorProto = (w.prototype.name = "", w.prototype.value = p.emptyArray, w.prototype.options = null, w.prototype.reservedRange = p.emptyArray, w.prototype.reservedName = p.emptyArray, w.create = function(e2) {
        return new w(e2);
      }, w.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.value && e2.value.length)
          for (var n2 = 0; n2 < e2.value.length; ++n2)
            l.google.protobuf.EnumValueDescriptorProto.encode(e2.value[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.EnumOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            l.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e2.reservedRange[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(42).string(e2.reservedName[n2]);
        return t2;
      }, w.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, w.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.value && o2.value.length || (o2.value = []), o2.value.push(l.google.protobuf.EnumValueDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = l.google.protobuf.EnumOptions.decode(e2, e2.uint32());
              break;
            case 4:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(l.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, w.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, w.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.value && e2.hasOwnProperty("value")) {
          if (!Array.isArray(e2.value))
            return "value: array expected";
          for (var t2 = 0; t2 < e2.value.length; ++t2)
            if (n2 = l.google.protobuf.EnumValueDescriptorProto.verify(e2.value[t2]))
              return "value." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.EnumOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!p.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, w.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.EnumDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.value) {
          if (!Array.isArray(e2.value))
            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
          t2.value = [];
          for (var n2 = 0; n2 < e2.value.length; ++n2) {
            if ("object" != typeof e2.value[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
            t2.value[n2] = l.google.protobuf.EnumValueDescriptorProto.fromObject(e2.value[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.EnumOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, w.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.value = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.value && e2.value.length) {
          n2.value = [];
          for (var o2 = 0; o2 < e2.value.length; ++o2)
            n2.value[o2] = l.google.protobuf.EnumValueDescriptorProto.toObject(e2.value[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.EnumOptions.toObject(e2.options, t2)), e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, w.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, w.EnumReservedRange = (X.prototype.start = 0, X.prototype.end = 0, X.create = function(e2) {
        return new X(e2);
      }, X.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, X.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, X.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumDescriptorProto.EnumReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, X.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, X.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !p.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end) ? "end: integer expected" : null;
      }, X.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e2 : (t2 = new l.google.protobuf.EnumDescriptorProto.EnumReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, X.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, X.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, X), w), n.EnumValueDescriptorProto = (j.prototype.name = "", j.prototype.number = 0, j.prototype.options = null, j.create = function(e2) {
        return new j(e2);
      }, j.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(16).int32(e2.number), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.EnumValueOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, j.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, j.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumValueDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.number = e2.int32();
              break;
            case 3:
              o2.options = l.google.protobuf.EnumValueOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, j.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, j.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !p.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.protobuf.EnumValueOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, j.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumValueDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.EnumValueDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.EnumValueOptions.fromObject(e2.options);
        }
        return t2;
      }, j.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.number = 0, n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.EnumValueOptions.toObject(e2.options, t2)), n2;
      }, j.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, j), n.ServiceDescriptorProto = (D.prototype.name = "", D.prototype.method = p.emptyArray, D.prototype.options = null, D.create = function(e2) {
        return new D(e2);
      }, D.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.method && e2.method.length)
          for (var n2 = 0; n2 < e2.method.length; ++n2)
            l.google.protobuf.MethodDescriptorProto.encode(e2.method[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.ServiceOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, D.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, D.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.ServiceDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.method && o2.method.length || (o2.method = []), o2.method.push(l.google.protobuf.MethodDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = l.google.protobuf.ServiceOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, D.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, D.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.method && e2.hasOwnProperty("method")) {
          if (!Array.isArray(e2.method))
            return "method: array expected";
          for (var t2 = 0; t2 < e2.method.length; ++t2)
            if (n2 = l.google.protobuf.MethodDescriptorProto.verify(e2.method[t2]))
              return "method." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.ServiceOptions.verify(e2.options)))
          return "options." + n2;
        return null;
      }, D.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.ServiceDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.ServiceDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.method) {
          if (!Array.isArray(e2.method))
            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
          t2.method = [];
          for (var n2 = 0; n2 < e2.method.length; ++n2) {
            if ("object" != typeof e2.method[n2])
              throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
            t2.method[n2] = l.google.protobuf.MethodDescriptorProto.fromObject(e2.method[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.ServiceOptions.fromObject(e2.options);
        }
        return t2;
      }, D.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.method = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.method && e2.method.length) {
          n2.method = [];
          for (var o2 = 0; o2 < e2.method.length; ++o2)
            n2.method[o2] = l.google.protobuf.MethodDescriptorProto.toObject(e2.method[o2], t2);
        }
        return null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.ServiceOptions.toObject(e2.options, t2)), n2;
      }, D.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, D), n.MethodDescriptorProto = (x.prototype.name = "", x.prototype.inputType = "", x.prototype.outputType = "", x.prototype.options = null, x.prototype.clientStreaming = false, x.prototype.serverStreaming = false, x.create = function(e2) {
        return new x(e2);
      }, x.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.inputType && Object.hasOwnProperty.call(e2, "inputType") && t2.uint32(18).string(e2.inputType), null != e2.outputType && Object.hasOwnProperty.call(e2, "outputType") && t2.uint32(26).string(e2.outputType), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.MethodOptions.encode(e2.options, t2.uint32(34).fork()).ldelim(), null != e2.clientStreaming && Object.hasOwnProperty.call(e2, "clientStreaming") && t2.uint32(40).bool(e2.clientStreaming), null != e2.serverStreaming && Object.hasOwnProperty.call(e2, "serverStreaming") && t2.uint32(48).bool(e2.serverStreaming), t2;
      }, x.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, x.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.MethodDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.inputType = e2.string();
              break;
            case 3:
              o2.outputType = e2.string();
              break;
            case 4:
              o2.options = l.google.protobuf.MethodOptions.decode(e2, e2.uint32());
              break;
            case 5:
              o2.clientStreaming = e2.bool();
              break;
            case 6:
              o2.serverStreaming = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, x.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, x.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.inputType && e2.hasOwnProperty("inputType") && !p.isString(e2.inputType))
          return "inputType: string expected";
        if (null != e2.outputType && e2.hasOwnProperty("outputType") && !p.isString(e2.outputType))
          return "outputType: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = l.google.protobuf.MethodOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && "boolean" != typeof e2.clientStreaming ? "clientStreaming: boolean expected" : null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && "boolean" != typeof e2.serverStreaming ? "serverStreaming: boolean expected" : null;
      }, x.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.MethodDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.MethodDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.inputType && (t2.inputType = String(e2.inputType)), null != e2.outputType && (t2.outputType = String(e2.outputType)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.MethodOptions.fromObject(e2.options);
        }
        return null != e2.clientStreaming && (t2.clientStreaming = Boolean(e2.clientStreaming)), null != e2.serverStreaming && (t2.serverStreaming = Boolean(e2.serverStreaming)), t2;
      }, x.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.inputType = "", n2.outputType = "", n2.options = null, n2.clientStreaming = false, n2.serverStreaming = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.inputType && e2.hasOwnProperty("inputType") && (n2.inputType = e2.inputType), null != e2.outputType && e2.hasOwnProperty("outputType") && (n2.outputType = e2.outputType), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.MethodOptions.toObject(e2.options, t2)), null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && (n2.clientStreaming = e2.clientStreaming), null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && (n2.serverStreaming = e2.serverStreaming), n2;
      }, x.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, x), n.FileOptions = (S.prototype.javaPackage = "", S.prototype.javaOuterClassname = "", S.prototype.javaMultipleFiles = false, S.prototype.javaGenerateEqualsAndHash = false, S.prototype.javaStringCheckUtf8 = false, S.prototype.optimizeFor = 1, S.prototype.goPackage = "", S.prototype.ccGenericServices = false, S.prototype.javaGenericServices = false, S.prototype.pyGenericServices = false, S.prototype.phpGenericServices = false, S.prototype.deprecated = false, S.prototype.ccEnableArenas = true, S.prototype.objcClassPrefix = "", S.prototype.csharpNamespace = "", S.prototype.swiftPrefix = "", S.prototype.phpClassPrefix = "", S.prototype.phpNamespace = "", S.prototype.phpMetadataNamespace = "", S.prototype.rubyPackage = "", S.prototype.uninterpretedOption = p.emptyArray, S.prototype[".google.api.resourceDefinition"] = p.emptyArray, S.create = function(e2) {
        return new S(e2);
      }, S.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.javaPackage && Object.hasOwnProperty.call(e2, "javaPackage") && t2.uint32(10).string(e2.javaPackage), null != e2.javaOuterClassname && Object.hasOwnProperty.call(e2, "javaOuterClassname") && t2.uint32(66).string(e2.javaOuterClassname), null != e2.optimizeFor && Object.hasOwnProperty.call(e2, "optimizeFor") && t2.uint32(72).int32(e2.optimizeFor), null != e2.javaMultipleFiles && Object.hasOwnProperty.call(e2, "javaMultipleFiles") && t2.uint32(80).bool(e2.javaMultipleFiles), null != e2.goPackage && Object.hasOwnProperty.call(e2, "goPackage") && t2.uint32(90).string(e2.goPackage), null != e2.ccGenericServices && Object.hasOwnProperty.call(e2, "ccGenericServices") && t2.uint32(128).bool(e2.ccGenericServices), null != e2.javaGenericServices && Object.hasOwnProperty.call(e2, "javaGenericServices") && t2.uint32(136).bool(e2.javaGenericServices), null != e2.pyGenericServices && Object.hasOwnProperty.call(e2, "pyGenericServices") && t2.uint32(144).bool(e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e2, "javaGenerateEqualsAndHash") && t2.uint32(160).bool(e2.javaGenerateEqualsAndHash), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(184).bool(e2.deprecated), null != e2.javaStringCheckUtf8 && Object.hasOwnProperty.call(e2, "javaStringCheckUtf8") && t2.uint32(216).bool(e2.javaStringCheckUtf8), null != e2.ccEnableArenas && Object.hasOwnProperty.call(e2, "ccEnableArenas") && t2.uint32(248).bool(e2.ccEnableArenas), null != e2.objcClassPrefix && Object.hasOwnProperty.call(e2, "objcClassPrefix") && t2.uint32(290).string(e2.objcClassPrefix), null != e2.csharpNamespace && Object.hasOwnProperty.call(e2, "csharpNamespace") && t2.uint32(298).string(e2.csharpNamespace), null != e2.swiftPrefix && Object.hasOwnProperty.call(e2, "swiftPrefix") && t2.uint32(314).string(e2.swiftPrefix), null != e2.phpClassPrefix && Object.hasOwnProperty.call(e2, "phpClassPrefix") && t2.uint32(322).string(e2.phpClassPrefix), null != e2.phpNamespace && Object.hasOwnProperty.call(e2, "phpNamespace") && t2.uint32(330).string(e2.phpNamespace), null != e2.phpGenericServices && Object.hasOwnProperty.call(e2, "phpGenericServices") && t2.uint32(336).bool(e2.phpGenericServices), null != e2.phpMetadataNamespace && Object.hasOwnProperty.call(e2, "phpMetadataNamespace") && t2.uint32(354).string(e2.phpMetadataNamespace), null != e2.rubyPackage && Object.hasOwnProperty.call(e2, "rubyPackage") && t2.uint32(362).string(e2.rubyPackage), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.resourceDefinition"] && e2[".google.api.resourceDefinition"].length)
          for (n2 = 0; n2 < e2[".google.api.resourceDefinition"].length; ++n2)
            l.google.api.ResourceDescriptor.encode(e2[".google.api.resourceDefinition"][n2], t2.uint32(8426).fork()).ldelim();
        return t2;
      }, S.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, S.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FileOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.javaPackage = e2.string();
              break;
            case 8:
              o2.javaOuterClassname = e2.string();
              break;
            case 10:
              o2.javaMultipleFiles = e2.bool();
              break;
            case 20:
              o2.javaGenerateEqualsAndHash = e2.bool();
              break;
            case 27:
              o2.javaStringCheckUtf8 = e2.bool();
              break;
            case 9:
              o2.optimizeFor = e2.int32();
              break;
            case 11:
              o2.goPackage = e2.string();
              break;
            case 16:
              o2.ccGenericServices = e2.bool();
              break;
            case 17:
              o2.javaGenericServices = e2.bool();
              break;
            case 18:
              o2.pyGenericServices = e2.bool();
              break;
            case 42:
              o2.phpGenericServices = e2.bool();
              break;
            case 23:
              o2.deprecated = e2.bool();
              break;
            case 31:
              o2.ccEnableArenas = e2.bool();
              break;
            case 36:
              o2.objcClassPrefix = e2.string();
              break;
            case 37:
              o2.csharpNamespace = e2.string();
              break;
            case 39:
              o2.swiftPrefix = e2.string();
              break;
            case 40:
              o2.phpClassPrefix = e2.string();
              break;
            case 41:
              o2.phpNamespace = e2.string();
              break;
            case 44:
              o2.phpMetadataNamespace = e2.string();
              break;
            case 45:
              o2.rubyPackage = e2.string();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1053:
              o2[".google.api.resourceDefinition"] && o2[".google.api.resourceDefinition"].length || (o2[".google.api.resourceDefinition"] = []), o2[".google.api.resourceDefinition"].push(l.google.api.ResourceDescriptor.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, S.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, S.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && !p.isString(e2.javaPackage))
          return "javaPackage: string expected";
        if (null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && !p.isString(e2.javaOuterClassname))
          return "javaOuterClassname: string expected";
        if (null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && "boolean" != typeof e2.javaMultipleFiles)
          return "javaMultipleFiles: boolean expected";
        if (null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && "boolean" != typeof e2.javaGenerateEqualsAndHash)
          return "javaGenerateEqualsAndHash: boolean expected";
        if (null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && "boolean" != typeof e2.javaStringCheckUtf8)
          return "javaStringCheckUtf8: boolean expected";
        if (null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor"))
          switch (e2.optimizeFor) {
            default:
              return "optimizeFor: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.goPackage && e2.hasOwnProperty("goPackage") && !p.isString(e2.goPackage))
          return "goPackage: string expected";
        if (null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && "boolean" != typeof e2.ccGenericServices)
          return "ccGenericServices: boolean expected";
        if (null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && "boolean" != typeof e2.javaGenericServices)
          return "javaGenericServices: boolean expected";
        if (null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && "boolean" != typeof e2.pyGenericServices)
          return "pyGenericServices: boolean expected";
        if (null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && "boolean" != typeof e2.phpGenericServices)
          return "phpGenericServices: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && "boolean" != typeof e2.ccEnableArenas)
          return "ccEnableArenas: boolean expected";
        if (null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && !p.isString(e2.objcClassPrefix))
          return "objcClassPrefix: string expected";
        if (null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && !p.isString(e2.csharpNamespace))
          return "csharpNamespace: string expected";
        if (null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && !p.isString(e2.swiftPrefix))
          return "swiftPrefix: string expected";
        if (null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && !p.isString(e2.phpClassPrefix))
          return "phpClassPrefix: string expected";
        if (null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && !p.isString(e2.phpNamespace))
          return "phpNamespace: string expected";
        if (null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && !p.isString(e2.phpMetadataNamespace))
          return "phpMetadataNamespace: string expected";
        if (null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && !p.isString(e2.rubyPackage))
          return "rubyPackage: string expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        if (null != e2[".google.api.resourceDefinition"] && e2.hasOwnProperty(".google.api.resourceDefinition")) {
          if (!Array.isArray(e2[".google.api.resourceDefinition"]))
            return ".google.api.resourceDefinition: array expected";
          for (var n2, t2 = 0; t2 < e2[".google.api.resourceDefinition"].length; ++t2)
            if (n2 = l.google.api.ResourceDescriptor.verify(e2[".google.api.resourceDefinition"][t2]))
              return ".google.api.resourceDefinition." + n2;
        }
        return null;
      }, S.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FileOptions)
          return e2;
        var t2 = new l.google.protobuf.FileOptions();
        switch (null != e2.javaPackage && (t2.javaPackage = String(e2.javaPackage)), null != e2.javaOuterClassname && (t2.javaOuterClassname = String(e2.javaOuterClassname)), null != e2.javaMultipleFiles && (t2.javaMultipleFiles = Boolean(e2.javaMultipleFiles)), null != e2.javaGenerateEqualsAndHash && (t2.javaGenerateEqualsAndHash = Boolean(e2.javaGenerateEqualsAndHash)), null != e2.javaStringCheckUtf8 && (t2.javaStringCheckUtf8 = Boolean(e2.javaStringCheckUtf8)), e2.optimizeFor) {
          case "SPEED":
          case 1:
            t2.optimizeFor = 1;
            break;
          case "CODE_SIZE":
          case 2:
            t2.optimizeFor = 2;
            break;
          case "LITE_RUNTIME":
          case 3:
            t2.optimizeFor = 3;
        }
        if (null != e2.goPackage && (t2.goPackage = String(e2.goPackage)), null != e2.ccGenericServices && (t2.ccGenericServices = Boolean(e2.ccGenericServices)), null != e2.javaGenericServices && (t2.javaGenericServices = Boolean(e2.javaGenericServices)), null != e2.pyGenericServices && (t2.pyGenericServices = Boolean(e2.pyGenericServices)), null != e2.phpGenericServices && (t2.phpGenericServices = Boolean(e2.phpGenericServices)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.ccEnableArenas && (t2.ccEnableArenas = Boolean(e2.ccEnableArenas)), null != e2.objcClassPrefix && (t2.objcClassPrefix = String(e2.objcClassPrefix)), null != e2.csharpNamespace && (t2.csharpNamespace = String(e2.csharpNamespace)), null != e2.swiftPrefix && (t2.swiftPrefix = String(e2.swiftPrefix)), null != e2.phpClassPrefix && (t2.phpClassPrefix = String(e2.phpClassPrefix)), null != e2.phpNamespace && (t2.phpNamespace = String(e2.phpNamespace)), null != e2.phpMetadataNamespace && (t2.phpMetadataNamespace = String(e2.phpMetadataNamespace)), null != e2.rubyPackage && (t2.rubyPackage = String(e2.rubyPackage)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (e2[".google.api.resourceDefinition"]) {
          if (!Array.isArray(e2[".google.api.resourceDefinition"]))
            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
          t2[".google.api.resourceDefinition"] = [];
          for (n2 = 0; n2 < e2[".google.api.resourceDefinition"].length; ++n2) {
            if ("object" != typeof e2[".google.api.resourceDefinition"][n2])
              throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
            t2[".google.api.resourceDefinition"][n2] = l.google.api.ResourceDescriptor.fromObject(e2[".google.api.resourceDefinition"][n2]);
          }
        }
        return t2;
      }, S.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.resourceDefinition"] = []), t2.defaults && (n2.javaPackage = "", n2.javaOuterClassname = "", n2.optimizeFor = t2.enums === String ? "SPEED" : 1, n2.javaMultipleFiles = false, n2.goPackage = "", n2.ccGenericServices = false, n2.javaGenericServices = false, n2.pyGenericServices = false, n2.javaGenerateEqualsAndHash = false, n2.deprecated = false, n2.javaStringCheckUtf8 = false, n2.ccEnableArenas = true, n2.objcClassPrefix = "", n2.csharpNamespace = "", n2.swiftPrefix = "", n2.phpClassPrefix = "", n2.phpNamespace = "", n2.phpGenericServices = false, n2.phpMetadataNamespace = "", n2.rubyPackage = ""), null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && (n2.javaPackage = e2.javaPackage), null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && (n2.javaOuterClassname = e2.javaOuterClassname), null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor") && (n2.optimizeFor = t2.enums === String ? l.google.protobuf.FileOptions.OptimizeMode[e2.optimizeFor] : e2.optimizeFor), null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && (n2.javaMultipleFiles = e2.javaMultipleFiles), null != e2.goPackage && e2.hasOwnProperty("goPackage") && (n2.goPackage = e2.goPackage), null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && (n2.ccGenericServices = e2.ccGenericServices), null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && (n2.javaGenericServices = e2.javaGenericServices), null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && (n2.pyGenericServices = e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && (n2.javaGenerateEqualsAndHash = e2.javaGenerateEqualsAndHash), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && (n2.javaStringCheckUtf8 = e2.javaStringCheckUtf8), null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && (n2.ccEnableArenas = e2.ccEnableArenas), null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && (n2.objcClassPrefix = e2.objcClassPrefix), null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && (n2.csharpNamespace = e2.csharpNamespace), null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && (n2.swiftPrefix = e2.swiftPrefix), null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && (n2.phpClassPrefix = e2.phpClassPrefix), null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && (n2.phpNamespace = e2.phpNamespace), null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && (n2.phpGenericServices = e2.phpGenericServices), null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && (n2.phpMetadataNamespace = e2.phpMetadataNamespace), null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && (n2.rubyPackage = e2.rubyPackage), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.resourceDefinition"] && e2[".google.api.resourceDefinition"].length) {
          n2[".google.api.resourceDefinition"] = [];
          for (o2 = 0; o2 < e2[".google.api.resourceDefinition"].length; ++o2)
            n2[".google.api.resourceDefinition"][o2] = l.google.api.ResourceDescriptor.toObject(e2[".google.api.resourceDefinition"][o2], t2);
        }
        return n2;
      }, S.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, S.OptimizeMode = (e = {}, (t = Object.create(e))[e[1] = "SPEED"] = 1, t[e[2] = "CODE_SIZE"] = 2, t[e[3] = "LITE_RUNTIME"] = 3, t), S), n.MessageOptions = (k.prototype.messageSetWireFormat = false, k.prototype.noStandardDescriptorAccessor = false, k.prototype.deprecated = false, k.prototype.mapEntry = false, k.prototype.uninterpretedOption = p.emptyArray, k.prototype[".google.api.resource"] = null, k.create = function(e2) {
        return new k(e2);
      }, k.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.messageSetWireFormat && Object.hasOwnProperty.call(e2, "messageSetWireFormat") && t2.uint32(8).bool(e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e2, "noStandardDescriptorAccessor") && t2.uint32(16).bool(e2.noStandardDescriptorAccessor), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.mapEntry && Object.hasOwnProperty.call(e2, "mapEntry") && t2.uint32(56).bool(e2.mapEntry), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.resource"] && Object.hasOwnProperty.call(e2, ".google.api.resource") && l.google.api.ResourceDescriptor.encode(e2[".google.api.resource"], t2.uint32(8426).fork()).ldelim(), t2;
      }, k.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, k.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.MessageOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.messageSetWireFormat = e2.bool();
              break;
            case 2:
              o2.noStandardDescriptorAccessor = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 7:
              o2.mapEntry = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1053:
              o2[".google.api.resource"] = l.google.api.ResourceDescriptor.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, k.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, k.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && "boolean" != typeof e2.messageSetWireFormat)
          return "messageSetWireFormat: boolean expected";
        if (null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && "boolean" != typeof e2.noStandardDescriptorAccessor)
          return "noStandardDescriptorAccessor: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && "boolean" != typeof e2.mapEntry)
          return "mapEntry: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.api.resource"] && e2.hasOwnProperty(".google.api.resource") && (n2 = l.google.api.ResourceDescriptor.verify(e2[".google.api.resource"])))
          return ".google.api.resource." + n2;
        return null;
      }, k.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.MessageOptions)
          return e2;
        var t2 = new l.google.protobuf.MessageOptions();
        if (null != e2.messageSetWireFormat && (t2.messageSetWireFormat = Boolean(e2.messageSetWireFormat)), null != e2.noStandardDescriptorAccessor && (t2.noStandardDescriptorAccessor = Boolean(e2.noStandardDescriptorAccessor)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.mapEntry && (t2.mapEntry = Boolean(e2.mapEntry)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.api.resource"]) {
          if ("object" != typeof e2[".google.api.resource"])
            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
          t2[".google.api.resource"] = l.google.api.ResourceDescriptor.fromObject(e2[".google.api.resource"]);
        }
        return t2;
      }, k.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.messageSetWireFormat = false, n2.noStandardDescriptorAccessor = false, n2.deprecated = false, n2.mapEntry = false, n2[".google.api.resource"] = null), null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && (n2.messageSetWireFormat = e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && (n2.noStandardDescriptorAccessor = e2.noStandardDescriptorAccessor), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && (n2.mapEntry = e2.mapEntry), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.resource"] && e2.hasOwnProperty(".google.api.resource") && (n2[".google.api.resource"] = l.google.api.ResourceDescriptor.toObject(e2[".google.api.resource"], t2)), n2;
      }, k.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, k), n.FieldOptions = (T.prototype.ctype = 0, T.prototype.packed = false, T.prototype.jstype = 0, T.prototype.lazy = false, T.prototype.deprecated = false, T.prototype.weak = false, T.prototype.uninterpretedOption = p.emptyArray, T.prototype[".google.api.fieldBehavior"] = p.emptyArray, T.prototype[".google.api.resourceReference"] = null, T.create = function(e2) {
        return new T(e2);
      }, T.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.ctype && Object.hasOwnProperty.call(e2, "ctype") && t2.uint32(8).int32(e2.ctype), null != e2.packed && Object.hasOwnProperty.call(e2, "packed") && t2.uint32(16).bool(e2.packed), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.lazy && Object.hasOwnProperty.call(e2, "lazy") && t2.uint32(40).bool(e2.lazy), null != e2.jstype && Object.hasOwnProperty.call(e2, "jstype") && t2.uint32(48).int32(e2.jstype), null != e2.weak && Object.hasOwnProperty.call(e2, "weak") && t2.uint32(80).bool(e2.weak), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.fieldBehavior"] && e2[".google.api.fieldBehavior"].length) {
          t2.uint32(8418).fork();
          for (n2 = 0; n2 < e2[".google.api.fieldBehavior"].length; ++n2)
            t2.int32(e2[".google.api.fieldBehavior"][n2]);
          t2.ldelim();
        }
        return null != e2[".google.api.resourceReference"] && Object.hasOwnProperty.call(e2, ".google.api.resourceReference") && l.google.api.ResourceReference.encode(e2[".google.api.resourceReference"], t2.uint32(8442).fork()).ldelim(), t2;
      }, T.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, T.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FieldOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.ctype = e2.int32();
              break;
            case 2:
              o2.packed = e2.bool();
              break;
            case 6:
              o2.jstype = e2.int32();
              break;
            case 5:
              o2.lazy = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 10:
              o2.weak = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1052:
              if (o2[".google.api.fieldBehavior"] && o2[".google.api.fieldBehavior"].length || (o2[".google.api.fieldBehavior"] = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2[".google.api.fieldBehavior"].push(e2.int32());
              else
                o2[".google.api.fieldBehavior"].push(e2.int32());
              break;
            case 1055:
              o2[".google.api.resourceReference"] = l.google.api.ResourceReference.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, T.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, T.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.ctype && e2.hasOwnProperty("ctype"))
          switch (e2.ctype) {
            default:
              return "ctype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.packed && e2.hasOwnProperty("packed") && "boolean" != typeof e2.packed)
          return "packed: boolean expected";
        if (null != e2.jstype && e2.hasOwnProperty("jstype"))
          switch (e2.jstype) {
            default:
              return "jstype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.lazy && e2.hasOwnProperty("lazy") && "boolean" != typeof e2.lazy)
          return "lazy: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.weak && e2.hasOwnProperty("weak") && "boolean" != typeof e2.weak)
          return "weak: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        if (null != e2[".google.api.fieldBehavior"] && e2.hasOwnProperty(".google.api.fieldBehavior")) {
          if (!Array.isArray(e2[".google.api.fieldBehavior"]))
            return ".google.api.fieldBehavior: array expected";
          for (t2 = 0; t2 < e2[".google.api.fieldBehavior"].length; ++t2)
            switch (e2[".google.api.fieldBehavior"][t2]) {
              default:
                return ".google.api.fieldBehavior: enum value[] expected";
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
            }
        }
        var n2;
        if (null != e2[".google.api.resourceReference"] && e2.hasOwnProperty(".google.api.resourceReference") && (n2 = l.google.api.ResourceReference.verify(e2[".google.api.resourceReference"])))
          return ".google.api.resourceReference." + n2;
        return null;
      }, T.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FieldOptions)
          return e2;
        var t2 = new l.google.protobuf.FieldOptions();
        switch (e2.ctype) {
          case "STRING":
          case 0:
            t2.ctype = 0;
            break;
          case "CORD":
          case 1:
            t2.ctype = 1;
            break;
          case "STRING_PIECE":
          case 2:
            t2.ctype = 2;
        }
        switch (null != e2.packed && (t2.packed = Boolean(e2.packed)), e2.jstype) {
          case "JS_NORMAL":
          case 0:
            t2.jstype = 0;
            break;
          case "JS_STRING":
          case 1:
            t2.jstype = 1;
            break;
          case "JS_NUMBER":
          case 2:
            t2.jstype = 2;
        }
        if (null != e2.lazy && (t2.lazy = Boolean(e2.lazy)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.weak && (t2.weak = Boolean(e2.weak)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (e2[".google.api.fieldBehavior"]) {
          if (!Array.isArray(e2[".google.api.fieldBehavior"]))
            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
          t2[".google.api.fieldBehavior"] = [];
          for (n2 = 0; n2 < e2[".google.api.fieldBehavior"].length; ++n2)
            switch (e2[".google.api.fieldBehavior"][n2]) {
              default:
              case "FIELD_BEHAVIOR_UNSPECIFIED":
              case 0:
                t2[".google.api.fieldBehavior"][n2] = 0;
                break;
              case "OPTIONAL":
              case 1:
                t2[".google.api.fieldBehavior"][n2] = 1;
                break;
              case "REQUIRED":
              case 2:
                t2[".google.api.fieldBehavior"][n2] = 2;
                break;
              case "OUTPUT_ONLY":
              case 3:
                t2[".google.api.fieldBehavior"][n2] = 3;
                break;
              case "INPUT_ONLY":
              case 4:
                t2[".google.api.fieldBehavior"][n2] = 4;
                break;
              case "IMMUTABLE":
              case 5:
                t2[".google.api.fieldBehavior"][n2] = 5;
            }
        }
        if (null != e2[".google.api.resourceReference"]) {
          if ("object" != typeof e2[".google.api.resourceReference"])
            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
          t2[".google.api.resourceReference"] = l.google.api.ResourceReference.fromObject(e2[".google.api.resourceReference"]);
        }
        return t2;
      }, T.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.fieldBehavior"] = []), t2.defaults && (n2.ctype = t2.enums === String ? "STRING" : 0, n2.packed = false, n2.deprecated = false, n2.lazy = false, n2.jstype = t2.enums === String ? "JS_NORMAL" : 0, n2.weak = false, n2[".google.api.resourceReference"] = null), null != e2.ctype && e2.hasOwnProperty("ctype") && (n2.ctype = t2.enums === String ? l.google.protobuf.FieldOptions.CType[e2.ctype] : e2.ctype), null != e2.packed && e2.hasOwnProperty("packed") && (n2.packed = e2.packed), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.lazy && e2.hasOwnProperty("lazy") && (n2.lazy = e2.lazy), null != e2.jstype && e2.hasOwnProperty("jstype") && (n2.jstype = t2.enums === String ? l.google.protobuf.FieldOptions.JSType[e2.jstype] : e2.jstype), null != e2.weak && e2.hasOwnProperty("weak") && (n2.weak = e2.weak), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.fieldBehavior"] && e2[".google.api.fieldBehavior"].length) {
          n2[".google.api.fieldBehavior"] = [];
          for (o2 = 0; o2 < e2[".google.api.fieldBehavior"].length; ++o2)
            n2[".google.api.fieldBehavior"][o2] = t2.enums === String ? l.google.api.FieldBehavior[e2[".google.api.fieldBehavior"][o2]] : e2[".google.api.fieldBehavior"][o2];
        }
        return null != e2[".google.api.resourceReference"] && e2.hasOwnProperty(".google.api.resourceReference") && (n2[".google.api.resourceReference"] = l.google.api.ResourceReference.toObject(e2[".google.api.resourceReference"], t2)), n2;
      }, T.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, T.CType = (e = {}, (t = Object.create(e))[e[0] = "STRING"] = 0, t[e[1] = "CORD"] = 1, t[e[2] = "STRING_PIECE"] = 2, t), T.JSType = (e = {}, (t = Object.create(e))[e[0] = "JS_NORMAL"] = 0, t[e[1] = "JS_STRING"] = 1, t[e[2] = "JS_NUMBER"] = 2, t), T), n.OneofOptions = (Q.prototype.uninterpretedOption = p.emptyArray, Q.create = function(e2) {
        return new Q(e2);
      }, Q.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, Q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.OneofOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, Q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Q.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, Q.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.OneofOptions)
          return e2;
        var t2 = new l.google.protobuf.OneofOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, Q.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, Q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Q), n.EnumOptions = (E.prototype.allowAlias = false, E.prototype.deprecated = false, E.prototype.uninterpretedOption = p.emptyArray, E.create = function(e2) {
        return new E(e2);
      }, E.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.allowAlias && Object.hasOwnProperty.call(e2, "allowAlias") && t2.uint32(16).bool(e2.allowAlias), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, E.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, E.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.allowAlias = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, E.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, E.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && "boolean" != typeof e2.allowAlias)
          return "allowAlias: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, E.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumOptions)
          return e2;
        var t2 = new l.google.protobuf.EnumOptions();
        if (null != e2.allowAlias && (t2.allowAlias = Boolean(e2.allowAlias)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, E.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.allowAlias = false, n2.deprecated = false), null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && (n2.allowAlias = e2.allowAlias), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, E.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, E), n.EnumValueOptions = (K.prototype.deprecated = false, K.prototype.uninterpretedOption = p.emptyArray, K.create = function(e2) {
        return new K(e2);
      }, K.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(8).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, K.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, K.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumValueOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, K.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, K.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, K.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumValueOptions)
          return e2;
        var t2 = new l.google.protobuf.EnumValueOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, K.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, K.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, K), n.ServiceOptions = (A.prototype.deprecated = false, A.prototype.uninterpretedOption = p.emptyArray, A.prototype[".google.api.defaultHost"] = "", A.prototype[".google.api.oauthScopes"] = "", A.create = function(e2) {
        return new A(e2);
      }, A.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.defaultHost"] && Object.hasOwnProperty.call(e2, ".google.api.defaultHost") && t2.uint32(8394).string(e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && Object.hasOwnProperty.call(e2, ".google.api.oauthScopes") && t2.uint32(8402).string(e2[".google.api.oauthScopes"]), t2;
      }, A.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, A.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.ServiceOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.api.defaultHost"] = e2.string();
              break;
            case 1050:
              o2[".google.api.oauthScopes"] = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, A.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, A.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && !p.isString(e2[".google.api.defaultHost"]) ? ".google.api.defaultHost: string expected" : null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && !p.isString(e2[".google.api.oauthScopes"]) ? ".google.api.oauthScopes: string expected" : null;
      }, A.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.ServiceOptions)
          return e2;
        var t2 = new l.google.protobuf.ServiceOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return null != e2[".google.api.defaultHost"] && (t2[".google.api.defaultHost"] = String(e2[".google.api.defaultHost"])), null != e2[".google.api.oauthScopes"] && (t2[".google.api.oauthScopes"] = String(e2[".google.api.oauthScopes"])), t2;
      }, A.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false, n2[".google.api.defaultHost"] = "", n2[".google.api.oauthScopes"] = ""), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && (n2[".google.api.defaultHost"] = e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && (n2[".google.api.oauthScopes"] = e2[".google.api.oauthScopes"]), n2;
      }, A.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, A), n.MethodOptions = (N.prototype.deprecated = false, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = p.emptyArray, N.prototype[".google.api.http"] = null, N.prototype[".google.api.methodSignature"] = p.emptyArray, N.create = function(e2) {
        return new N(e2);
      }, N.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.idempotencyLevel && Object.hasOwnProperty.call(e2, "idempotencyLevel") && t2.uint32(272).int32(e2.idempotencyLevel), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length)
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2.uint32(8410).string(e2[".google.api.methodSignature"][n2]);
        return null != e2[".google.api.http"] && Object.hasOwnProperty.call(e2, ".google.api.http") && l.google.api.HttpRule.encode(e2[".google.api.http"], t2.uint32(578365826).fork()).ldelim(), t2;
      }, N.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, N.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.MethodOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 34:
              o2.idempotencyLevel = e2.int32();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 72295728:
              o2[".google.api.http"] = l.google.api.HttpRule.decode(e2, e2.uint32());
              break;
            case 1051:
              o2[".google.api.methodSignature"] && o2[".google.api.methodSignature"].length || (o2[".google.api.methodSignature"] = []), o2[".google.api.methodSignature"].push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, N.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, N.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel"))
          switch (e2.idempotencyLevel) {
            default:
              return "idempotencyLevel: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2 = l.google.api.HttpRule.verify(e2[".google.api.http"])))
          return ".google.api.http." + n2;
        if (null != e2[".google.api.methodSignature"] && e2.hasOwnProperty(".google.api.methodSignature")) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            return ".google.api.methodSignature: array expected";
          for (t2 = 0; t2 < e2[".google.api.methodSignature"].length; ++t2)
            if (!p.isString(e2[".google.api.methodSignature"][t2]))
              return ".google.api.methodSignature: string[] expected";
        }
        return null;
      }, N.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.MethodOptions)
          return e2;
        var t2 = new l.google.protobuf.MethodOptions();
        switch (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.idempotencyLevel) {
          case "IDEMPOTENCY_UNKNOWN":
          case 0:
            t2.idempotencyLevel = 0;
            break;
          case "NO_SIDE_EFFECTS":
          case 1:
            t2.idempotencyLevel = 1;
            break;
          case "IDEMPOTENT":
          case 2:
            t2.idempotencyLevel = 2;
        }
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.api.http"]) {
          if ("object" != typeof e2[".google.api.http"])
            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
          t2[".google.api.http"] = l.google.api.HttpRule.fromObject(e2[".google.api.http"]);
        }
        if (e2[".google.api.methodSignature"]) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
          t2[".google.api.methodSignature"] = [];
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2[".google.api.methodSignature"][n2] = String(e2[".google.api.methodSignature"][n2]);
        }
        return t2;
      }, N.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.methodSignature"] = []), t2.defaults && (n2.deprecated = false, n2.idempotencyLevel = t2.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0, n2[".google.api.http"] = null), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel") && (n2.idempotencyLevel = t2.enums === String ? l.google.protobuf.MethodOptions.IdempotencyLevel[e2.idempotencyLevel] : e2.idempotencyLevel), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length) {
          n2[".google.api.methodSignature"] = [];
          for (o2 = 0; o2 < e2[".google.api.methodSignature"].length; ++o2)
            n2[".google.api.methodSignature"][o2] = e2[".google.api.methodSignature"][o2];
        }
        return null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2[".google.api.http"] = l.google.api.HttpRule.toObject(e2[".google.api.http"], t2)), n2;
      }, N.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, N.IdempotencyLevel = (e = {}, (t = Object.create(e))[e[0] = "IDEMPOTENCY_UNKNOWN"] = 0, t[e[1] = "NO_SIDE_EFFECTS"] = 1, t[e[2] = "IDEMPOTENT"] = 2, t), N), n.UninterpretedOption = (R.prototype.name = p.emptyArray, R.prototype.identifierValue = "", R.prototype.positiveIntValue = p.Long ? p.Long.fromBits(0, 0, true) : 0, R.prototype.negativeIntValue = p.Long ? p.Long.fromBits(0, 0, false) : 0, R.prototype.doubleValue = 0, R.prototype.stringValue = p.newBuffer([]), R.prototype.aggregateValue = "", R.create = function(e2) {
        return new R(e2);
      }, R.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && e2.name.length)
          for (var n2 = 0; n2 < e2.name.length; ++n2)
            l.google.protobuf.UninterpretedOption.NamePart.encode(e2.name[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.identifierValue && Object.hasOwnProperty.call(e2, "identifierValue") && t2.uint32(26).string(e2.identifierValue), null != e2.positiveIntValue && Object.hasOwnProperty.call(e2, "positiveIntValue") && t2.uint32(32).uint64(e2.positiveIntValue), null != e2.negativeIntValue && Object.hasOwnProperty.call(e2, "negativeIntValue") && t2.uint32(40).int64(e2.negativeIntValue), null != e2.doubleValue && Object.hasOwnProperty.call(e2, "doubleValue") && t2.uint32(49).double(e2.doubleValue), null != e2.stringValue && Object.hasOwnProperty.call(e2, "stringValue") && t2.uint32(58).bytes(e2.stringValue), null != e2.aggregateValue && Object.hasOwnProperty.call(e2, "aggregateValue") && t2.uint32(66).string(e2.aggregateValue), t2;
      }, R.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, R.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.UninterpretedOption(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.name && o2.name.length || (o2.name = []), o2.name.push(l.google.protobuf.UninterpretedOption.NamePart.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.identifierValue = e2.string();
              break;
            case 4:
              o2.positiveIntValue = e2.uint64();
              break;
            case 5:
              o2.negativeIntValue = e2.int64();
              break;
            case 6:
              o2.doubleValue = e2.double();
              break;
            case 7:
              o2.stringValue = e2.bytes();
              break;
            case 8:
              o2.aggregateValue = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, R.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, R.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name")) {
          if (!Array.isArray(e2.name))
            return "name: array expected";
          for (var t2 = 0; t2 < e2.name.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.NamePart.verify(e2.name[t2]);
            if (n2)
              return "name." + n2;
          }
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && !p.isString(e2.identifierValue) ? "identifierValue: string expected" : null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && !(p.isInteger(e2.positiveIntValue) || e2.positiveIntValue && p.isInteger(e2.positiveIntValue.low) && p.isInteger(e2.positiveIntValue.high)) ? "positiveIntValue: integer|Long expected" : null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && !(p.isInteger(e2.negativeIntValue) || e2.negativeIntValue && p.isInteger(e2.negativeIntValue.low) && p.isInteger(e2.negativeIntValue.high)) ? "negativeIntValue: integer|Long expected" : null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && "number" != typeof e2.doubleValue ? "doubleValue: number expected" : null != e2.stringValue && e2.hasOwnProperty("stringValue") && !(e2.stringValue && "number" == typeof e2.stringValue.length || p.isString(e2.stringValue)) ? "stringValue: buffer expected" : null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && !p.isString(e2.aggregateValue) ? "aggregateValue: string expected" : null;
      }, R.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.UninterpretedOption)
          return e2;
        var t2 = new l.google.protobuf.UninterpretedOption();
        if (e2.name) {
          if (!Array.isArray(e2.name))
            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
          t2.name = [];
          for (var n2 = 0; n2 < e2.name.length; ++n2) {
            if ("object" != typeof e2.name[n2])
              throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
            t2.name[n2] = l.google.protobuf.UninterpretedOption.NamePart.fromObject(e2.name[n2]);
          }
        }
        return null != e2.identifierValue && (t2.identifierValue = String(e2.identifierValue)), null != e2.positiveIntValue && (p.Long ? (t2.positiveIntValue = p.Long.fromValue(e2.positiveIntValue)).unsigned = true : "string" == typeof e2.positiveIntValue ? t2.positiveIntValue = parseInt(e2.positiveIntValue, 10) : "number" == typeof e2.positiveIntValue ? t2.positiveIntValue = e2.positiveIntValue : "object" == typeof e2.positiveIntValue && (t2.positiveIntValue = new p.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true))), null != e2.negativeIntValue && (p.Long ? (t2.negativeIntValue = p.Long.fromValue(e2.negativeIntValue)).unsigned = false : "string" == typeof e2.negativeIntValue ? t2.negativeIntValue = parseInt(e2.negativeIntValue, 10) : "number" == typeof e2.negativeIntValue ? t2.negativeIntValue = e2.negativeIntValue : "object" == typeof e2.negativeIntValue && (t2.negativeIntValue = new p.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber())), null != e2.doubleValue && (t2.doubleValue = Number(e2.doubleValue)), null != e2.stringValue && ("string" == typeof e2.stringValue ? p.base64.decode(e2.stringValue, t2.stringValue = p.newBuffer(p.base64.length(e2.stringValue)), 0) : e2.stringValue.length && (t2.stringValue = e2.stringValue)), null != e2.aggregateValue && (t2.aggregateValue = String(e2.aggregateValue)), t2;
      }, R.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (o2.name = []), t2.defaults && (o2.identifierValue = "", p.Long ? (n2 = new p.Long(0, 0, true), o2.positiveIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.positiveIntValue = t2.longs === String ? "0" : 0, p.Long ? (n2 = new p.Long(0, 0, false), o2.negativeIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.negativeIntValue = t2.longs === String ? "0" : 0, o2.doubleValue = 0, t2.bytes === String ? o2.stringValue = "" : (o2.stringValue = [], t2.bytes !== Array && (o2.stringValue = p.newBuffer(o2.stringValue))), o2.aggregateValue = ""), e2.name && e2.name.length) {
          o2.name = [];
          for (var r2 = 0; r2 < e2.name.length; ++r2)
            o2.name[r2] = l.google.protobuf.UninterpretedOption.NamePart.toObject(e2.name[r2], t2);
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && (o2.identifierValue = e2.identifierValue), null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && ("number" == typeof e2.positiveIntValue ? o2.positiveIntValue = t2.longs === String ? String(e2.positiveIntValue) : e2.positiveIntValue : o2.positiveIntValue = t2.longs === String ? p.Long.prototype.toString.call(e2.positiveIntValue) : t2.longs === Number ? new p.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true) : e2.positiveIntValue), null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && ("number" == typeof e2.negativeIntValue ? o2.negativeIntValue = t2.longs === String ? String(e2.negativeIntValue) : e2.negativeIntValue : o2.negativeIntValue = t2.longs === String ? p.Long.prototype.toString.call(e2.negativeIntValue) : t2.longs === Number ? new p.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber() : e2.negativeIntValue), null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && (o2.doubleValue = t2.json && !isFinite(e2.doubleValue) ? String(e2.doubleValue) : e2.doubleValue), null != e2.stringValue && e2.hasOwnProperty("stringValue") && (o2.stringValue = t2.bytes === String ? p.base64.encode(e2.stringValue, 0, e2.stringValue.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.stringValue) : e2.stringValue), null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && (o2.aggregateValue = e2.aggregateValue), o2;
      }, R.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, R.NamePart = (Z.prototype.namePart = "", Z.prototype.isExtension = false, Z.create = function(e2) {
        return new Z(e2);
      }, Z.encode = function(e2, t2) {
        return (t2 = t2 || i.create()).uint32(10).string(e2.namePart), t2.uint32(16).bool(e2.isExtension), t2;
      }, Z.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Z.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.UninterpretedOption.NamePart(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.namePart = e2.string();
              break;
            case 2:
              o2.isExtension = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        if (!o2.hasOwnProperty("namePart"))
          throw p.ProtocolError("missing required 'namePart'", { instance: o2 });
        if (o2.hasOwnProperty("isExtension"))
          return o2;
        throw p.ProtocolError("missing required 'isExtension'", { instance: o2 });
      }, Z.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Z.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : p.isString(e2.namePart) ? "boolean" != typeof e2.isExtension ? "isExtension: boolean expected" : null : "namePart: string expected";
      }, Z.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.protobuf.UninterpretedOption.NamePart ? e2 : (t2 = new l.google.protobuf.UninterpretedOption.NamePart(), null != e2.namePart && (t2.namePart = String(e2.namePart)), null != e2.isExtension && (t2.isExtension = Boolean(e2.isExtension)), t2);
      }, Z.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.namePart = "", n2.isExtension = false), null != e2.namePart && e2.hasOwnProperty("namePart") && (n2.namePart = e2.namePart), null != e2.isExtension && e2.hasOwnProperty("isExtension") && (n2.isExtension = e2.isExtension), n2;
      }, Z.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Z), R), n.SourceCodeInfo = ($.prototype.location = p.emptyArray, $.create = function(e2) {
        return new $(e2);
      }, $.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.location && e2.location.length)
          for (var n2 = 0; n2 < e2.location.length; ++n2)
            l.google.protobuf.SourceCodeInfo.Location.encode(e2.location[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, $.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, $.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.SourceCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.location && o2.location.length || (o2.location = []), o2.location.push(l.google.protobuf.SourceCodeInfo.Location.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, $.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, $.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.location && e2.hasOwnProperty("location")) {
          if (!Array.isArray(e2.location))
            return "location: array expected";
          for (var t2 = 0; t2 < e2.location.length; ++t2) {
            var n2 = l.google.protobuf.SourceCodeInfo.Location.verify(e2.location[t2]);
            if (n2)
              return "location." + n2;
          }
        }
        return null;
      }, $.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.SourceCodeInfo)
          return e2;
        var t2 = new l.google.protobuf.SourceCodeInfo();
        if (e2.location) {
          if (!Array.isArray(e2.location))
            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
          t2.location = [];
          for (var n2 = 0; n2 < e2.location.length; ++n2) {
            if ("object" != typeof e2.location[n2])
              throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
            t2.location[n2] = l.google.protobuf.SourceCodeInfo.Location.fromObject(e2.location[n2]);
          }
        }
        return t2;
      }, $.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.location = []), e2.location && e2.location.length) {
          n2.location = [];
          for (var o2 = 0; o2 < e2.location.length; ++o2)
            n2.location[o2] = l.google.protobuf.SourceCodeInfo.Location.toObject(e2.location[o2], t2);
        }
        return n2;
      }, $.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, $.Location = (I.prototype.path = p.emptyArray, I.prototype.span = p.emptyArray, I.prototype.leadingComments = "", I.prototype.trailingComments = "", I.prototype.leadingDetachedComments = p.emptyArray, I.create = function(e2) {
        return new I(e2);
      }, I.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        if (null != e2.span && e2.span.length) {
          t2.uint32(18).fork();
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.int32(e2.span[n2]);
          t2.ldelim();
        }
        if (null != e2.leadingComments && Object.hasOwnProperty.call(e2, "leadingComments") && t2.uint32(26).string(e2.leadingComments), null != e2.trailingComments && Object.hasOwnProperty.call(e2, "trailingComments") && t2.uint32(34).string(e2.trailingComments), null != e2.leadingDetachedComments && e2.leadingDetachedComments.length)
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.uint32(50).string(e2.leadingDetachedComments[n2]);
        return t2;
      }, I.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, I.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.SourceCodeInfo.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              if (o2.span && o2.span.length || (o2.span = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.span.push(e2.int32());
              else
                o2.span.push(e2.int32());
              break;
            case 3:
              o2.leadingComments = e2.string();
              break;
            case 4:
              o2.trailingComments = e2.string();
              break;
            case 6:
              o2.leadingDetachedComments && o2.leadingDetachedComments.length || (o2.leadingDetachedComments = []), o2.leadingDetachedComments.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, I.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, I.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!p.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        if (null != e2.span && e2.hasOwnProperty("span")) {
          if (!Array.isArray(e2.span))
            return "span: array expected";
          for (t2 = 0; t2 < e2.span.length; ++t2)
            if (!p.isInteger(e2.span[t2]))
              return "span: integer[] expected";
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && !p.isString(e2.leadingComments))
          return "leadingComments: string expected";
        if (null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && !p.isString(e2.trailingComments))
          return "trailingComments: string expected";
        if (null != e2.leadingDetachedComments && e2.hasOwnProperty("leadingDetachedComments")) {
          if (!Array.isArray(e2.leadingDetachedComments))
            return "leadingDetachedComments: array expected";
          for (t2 = 0; t2 < e2.leadingDetachedComments.length; ++t2)
            if (!p.isString(e2.leadingDetachedComments[t2]))
              return "leadingDetachedComments: string[] expected";
        }
        return null;
      }, I.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.SourceCodeInfo.Location)
          return e2;
        var t2 = new l.google.protobuf.SourceCodeInfo.Location();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        if (e2.span) {
          if (!Array.isArray(e2.span))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
          t2.span = [];
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.span[n2] = 0 | e2.span[n2];
        }
        if (null != e2.leadingComments && (t2.leadingComments = String(e2.leadingComments)), null != e2.trailingComments && (t2.trailingComments = String(e2.trailingComments)), e2.leadingDetachedComments) {
          if (!Array.isArray(e2.leadingDetachedComments))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
          t2.leadingDetachedComments = [];
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.leadingDetachedComments[n2] = String(e2.leadingDetachedComments[n2]);
        }
        return t2;
      }, I.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = [], n2.span = [], n2.leadingDetachedComments = []), t2.defaults && (n2.leadingComments = "", n2.trailingComments = ""), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        if (e2.span && e2.span.length) {
          n2.span = [];
          for (o2 = 0; o2 < e2.span.length; ++o2)
            n2.span[o2] = e2.span[o2];
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && (n2.leadingComments = e2.leadingComments), null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && (n2.trailingComments = e2.trailingComments), e2.leadingDetachedComments && e2.leadingDetachedComments.length) {
          n2.leadingDetachedComments = [];
          for (o2 = 0; o2 < e2.leadingDetachedComments.length; ++o2)
            n2.leadingDetachedComments[o2] = e2.leadingDetachedComments[o2];
        }
        return n2;
      }, I.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, I), $), n.GeneratedCodeInfo = (ee.prototype.annotation = p.emptyArray, ee.create = function(e2) {
        return new ee(e2);
      }, ee.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.annotation && e2.annotation.length)
          for (var n2 = 0; n2 < e2.annotation.length; ++n2)
            l.google.protobuf.GeneratedCodeInfo.Annotation.encode(e2.annotation[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, ee.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, ee.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.GeneratedCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.annotation && o2.annotation.length || (o2.annotation = []), o2.annotation.push(l.google.protobuf.GeneratedCodeInfo.Annotation.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, ee.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, ee.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.annotation && e2.hasOwnProperty("annotation")) {
          if (!Array.isArray(e2.annotation))
            return "annotation: array expected";
          for (var t2 = 0; t2 < e2.annotation.length; ++t2) {
            var n2 = l.google.protobuf.GeneratedCodeInfo.Annotation.verify(e2.annotation[t2]);
            if (n2)
              return "annotation." + n2;
          }
        }
        return null;
      }, ee.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.GeneratedCodeInfo)
          return e2;
        var t2 = new l.google.protobuf.GeneratedCodeInfo();
        if (e2.annotation) {
          if (!Array.isArray(e2.annotation))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
          t2.annotation = [];
          for (var n2 = 0; n2 < e2.annotation.length; ++n2) {
            if ("object" != typeof e2.annotation[n2])
              throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
            t2.annotation[n2] = l.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e2.annotation[n2]);
          }
        }
        return t2;
      }, ee.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.annotation = []), e2.annotation && e2.annotation.length) {
          n2.annotation = [];
          for (var o2 = 0; o2 < e2.annotation.length; ++o2)
            n2.annotation[o2] = l.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e2.annotation[o2], t2);
        }
        return n2;
      }, ee.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, ee.Annotation = (C.prototype.path = p.emptyArray, C.prototype.sourceFile = "", C.prototype.begin = 0, C.prototype.end = 0, C.create = function(e2) {
        return new C(e2);
      }, C.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        return null != e2.sourceFile && Object.hasOwnProperty.call(e2, "sourceFile") && t2.uint32(18).string(e2.sourceFile), null != e2.begin && Object.hasOwnProperty.call(e2, "begin") && t2.uint32(24).int32(e2.begin), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(32).int32(e2.end), t2;
      }, C.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, C.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.GeneratedCodeInfo.Annotation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              o2.sourceFile = e2.string();
              break;
            case 3:
              o2.begin = e2.int32();
              break;
            case 4:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, C.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, C.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!p.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && !p.isString(e2.sourceFile) ? "sourceFile: string expected" : null != e2.begin && e2.hasOwnProperty("begin") && !p.isInteger(e2.begin) ? "begin: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end) ? "end: integer expected" : null;
      }, C.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.GeneratedCodeInfo.Annotation)
          return e2;
        var t2 = new l.google.protobuf.GeneratedCodeInfo.Annotation();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        return null != e2.sourceFile && (t2.sourceFile = String(e2.sourceFile)), null != e2.begin && (t2.begin = 0 | e2.begin), null != e2.end && (t2.end = 0 | e2.end), t2;
      }, C.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = []), t2.defaults && (n2.sourceFile = "", n2.begin = 0, n2.end = 0), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && (n2.sourceFile = e2.sourceFile), null != e2.begin && e2.hasOwnProperty("begin") && (n2.begin = e2.begin), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, C.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, C), ee), n), F.type = ((r = {}).Expr = (V.prototype.expression = "", V.prototype.title = "", V.prototype.description = "", V.prototype.location = "", V.create = function(e2) {
        return new V(e2);
      }, V.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.expression && Object.hasOwnProperty.call(e2, "expression") && t2.uint32(10).string(e2.expression), null != e2.title && Object.hasOwnProperty.call(e2, "title") && t2.uint32(18).string(e2.title), null != e2.description && Object.hasOwnProperty.call(e2, "description") && t2.uint32(26).string(e2.description), null != e2.location && Object.hasOwnProperty.call(e2, "location") && t2.uint32(34).string(e2.location), t2;
      }, V.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, V.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.type.Expr(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.expression = e2.string();
              break;
            case 2:
              o2.title = e2.string();
              break;
            case 3:
              o2.description = e2.string();
              break;
            case 4:
              o2.location = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, V.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, V.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.expression && e2.hasOwnProperty("expression") && !p.isString(e2.expression) ? "expression: string expected" : null != e2.title && e2.hasOwnProperty("title") && !p.isString(e2.title) ? "title: string expected" : null != e2.description && e2.hasOwnProperty("description") && !p.isString(e2.description) ? "description: string expected" : null != e2.location && e2.hasOwnProperty("location") && !p.isString(e2.location) ? "location: string expected" : null;
      }, V.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.type.Expr ? e2 : (t2 = new l.google.type.Expr(), null != e2.expression && (t2.expression = String(e2.expression)), null != e2.title && (t2.title = String(e2.title)), null != e2.description && (t2.description = String(e2.description)), null != e2.location && (t2.location = String(e2.location)), t2);
      }, V.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.expression = "", n2.title = "", n2.description = "", n2.location = ""), null != e2.expression && e2.hasOwnProperty("expression") && (n2.expression = e2.expression), null != e2.title && e2.hasOwnProperty("title") && (n2.title = e2.title), null != e2.description && e2.hasOwnProperty("description") && (n2.description = e2.description), null != e2.location && e2.hasOwnProperty("location") && (n2.location = e2.location), n2;
      }, V.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, V), r), F), l;
    });
  }
});

// node_modules/google-gax/build/protos/locations.js
var require_locations = __commonJS({
  "node_modules/google-gax/build/protos/locations.js"(exports2, module2) {
    !function(e) {
      "function" == typeof define && define.amd ? define(["protobufjs/minimal"], e) : "function" == typeof __require && "object" == typeof module2 && module2 && module2.exports && (module2.exports = e(require_minimal2()));
    }(function(o) {
      "use strict";
      var e, t, n, F, s = o.Reader, r = o.Writer, u = o.util, c = o.roots.locations_protos || (o.roots.locations_protos = {});
      function L(e2, t2, n2) {
        o.rpc.Service.call(this, e2, t2, n2);
      }
      function i(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function a(e2) {
        if (this.locations = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function G(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function p(e2) {
        if (this.labels = {}, e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function l(e2) {
        if (this.rules = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function d(e2) {
        if (this.additionalBindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function g(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function B(e2) {
        if (this.file = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function f(e2) {
        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function y(e2) {
        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function h(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function b(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function U(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function O(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function m(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function v(e2) {
        if (this.value = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function P(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function w(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function j(e2) {
        if (this.method = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function x(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function S(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function k(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function D(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function M(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function T(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function E(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function A(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function N(e2) {
        if (this.uninterpretedOption = [], this[".google.api.methodSignature"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function I(e2) {
        if (this.name = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function R(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function _(e2) {
        if (this.location = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function C(e2) {
        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function J(e2) {
        if (this.annotation = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function V(e2) {
        if (this.path = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function H(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      return c.google = ((F = {}).cloud = ((n = {}).location = ((e = {}).Locations = (((L.prototype = Object.create(o.rpc.Service.prototype)).constructor = L).create = function(e2, t2, n2) {
        return new this(e2, t2, n2);
      }, Object.defineProperty(L.prototype.listLocations = function e2(t2, n2) {
        return this.rpcCall(e2, c.google.cloud.location.ListLocationsRequest, c.google.cloud.location.ListLocationsResponse, t2, n2);
      }, "name", { value: "ListLocations" }), Object.defineProperty(L.prototype.getLocation = function e2(t2, n2) {
        return this.rpcCall(e2, c.google.cloud.location.GetLocationRequest, c.google.cloud.location.Location, t2, n2);
      }, "name", { value: "GetLocation" }), L), e.ListLocationsRequest = (i.prototype.name = "", i.prototype.filter = "", i.prototype.pageSize = 0, i.prototype.pageToken = "", i.create = function(e2) {
        return new i(e2);
      }, i.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.filter && Object.hasOwnProperty.call(e2, "filter") && t2.uint32(18).string(e2.filter), null != e2.pageSize && Object.hasOwnProperty.call(e2, "pageSize") && t2.uint32(24).int32(e2.pageSize), null != e2.pageToken && Object.hasOwnProperty.call(e2, "pageToken") && t2.uint32(34).string(e2.pageToken), t2;
      }, i.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, i.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.ListLocationsRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.filter = e2.string();
              break;
            case 3:
              o2.pageSize = e2.int32();
              break;
            case 4:
              o2.pageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, i.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, i.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name) ? "name: string expected" : null != e2.filter && e2.hasOwnProperty("filter") && !u.isString(e2.filter) ? "filter: string expected" : null != e2.pageSize && e2.hasOwnProperty("pageSize") && !u.isInteger(e2.pageSize) ? "pageSize: integer expected" : null != e2.pageToken && e2.hasOwnProperty("pageToken") && !u.isString(e2.pageToken) ? "pageToken: string expected" : null;
      }, i.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.cloud.location.ListLocationsRequest ? e2 : (t2 = new c.google.cloud.location.ListLocationsRequest(), null != e2.name && (t2.name = String(e2.name)), null != e2.filter && (t2.filter = String(e2.filter)), null != e2.pageSize && (t2.pageSize = 0 | e2.pageSize), null != e2.pageToken && (t2.pageToken = String(e2.pageToken)), t2);
      }, i.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.filter = "", n2.pageSize = 0, n2.pageToken = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.filter && e2.hasOwnProperty("filter") && (n2.filter = e2.filter), null != e2.pageSize && e2.hasOwnProperty("pageSize") && (n2.pageSize = e2.pageSize), null != e2.pageToken && e2.hasOwnProperty("pageToken") && (n2.pageToken = e2.pageToken), n2;
      }, i.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, i), e.ListLocationsResponse = (a.prototype.locations = u.emptyArray, a.prototype.nextPageToken = "", a.create = function(e2) {
        return new a(e2);
      }, a.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.locations && e2.locations.length)
          for (var n2 = 0; n2 < e2.locations.length; ++n2)
            c.google.cloud.location.Location.encode(e2.locations[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.nextPageToken && Object.hasOwnProperty.call(e2, "nextPageToken") && t2.uint32(18).string(e2.nextPageToken), t2;
      }, a.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, a.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.ListLocationsResponse(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.locations && o2.locations.length || (o2.locations = []), o2.locations.push(c.google.cloud.location.Location.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.nextPageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, a.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, a.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.locations && e2.hasOwnProperty("locations")) {
          if (!Array.isArray(e2.locations))
            return "locations: array expected";
          for (var t2 = 0; t2 < e2.locations.length; ++t2) {
            var n2 = c.google.cloud.location.Location.verify(e2.locations[t2]);
            if (n2)
              return "locations." + n2;
          }
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && !u.isString(e2.nextPageToken) ? "nextPageToken: string expected" : null;
      }, a.fromObject = function(e2) {
        if (e2 instanceof c.google.cloud.location.ListLocationsResponse)
          return e2;
        var t2 = new c.google.cloud.location.ListLocationsResponse();
        if (e2.locations) {
          if (!Array.isArray(e2.locations))
            throw TypeError(".google.cloud.location.ListLocationsResponse.locations: array expected");
          t2.locations = [];
          for (var n2 = 0; n2 < e2.locations.length; ++n2) {
            if ("object" != typeof e2.locations[n2])
              throw TypeError(".google.cloud.location.ListLocationsResponse.locations: object expected");
            t2.locations[n2] = c.google.cloud.location.Location.fromObject(e2.locations[n2]);
          }
        }
        return null != e2.nextPageToken && (t2.nextPageToken = String(e2.nextPageToken)), t2;
      }, a.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.locations = []), t2.defaults && (n2.nextPageToken = ""), e2.locations && e2.locations.length) {
          n2.locations = [];
          for (var o2 = 0; o2 < e2.locations.length; ++o2)
            n2.locations[o2] = c.google.cloud.location.Location.toObject(e2.locations[o2], t2);
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && (n2.nextPageToken = e2.nextPageToken), n2;
      }, a.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, a), e.GetLocationRequest = (G.prototype.name = "", G.create = function(e2) {
        return new G(e2);
      }, G.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, G.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, G.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.GetLocationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, G.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, G.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name) ? "name: string expected" : null;
      }, G.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.cloud.location.GetLocationRequest ? e2 : (t2 = new c.google.cloud.location.GetLocationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, G.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, G.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, G), e.Location = (p.prototype.name = "", p.prototype.locationId = "", p.prototype.displayName = "", p.prototype.labels = u.emptyObject, p.prototype.metadata = null, p.create = function(e2) {
        return new p(e2);
      }, p.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.labels && Object.hasOwnProperty.call(e2, "labels"))
          for (var n2 = Object.keys(e2.labels), o2 = 0; o2 < n2.length; ++o2)
            t2.uint32(18).fork().uint32(10).string(n2[o2]).uint32(18).string(e2.labels[n2[o2]]).ldelim();
        return null != e2.metadata && Object.hasOwnProperty.call(e2, "metadata") && c.google.protobuf.Any.encode(e2.metadata, t2.uint32(26).fork()).ldelim(), null != e2.locationId && Object.hasOwnProperty.call(e2, "locationId") && t2.uint32(34).string(e2.locationId), null != e2.displayName && Object.hasOwnProperty.call(e2, "displayName") && t2.uint32(42).string(e2.displayName), t2;
      }, p.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, p.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 4:
              o2.locationId = e2.string();
              break;
            case 5:
              o2.displayName = e2.string();
              break;
            case 2:
              o2.labels === u.emptyObject && (o2.labels = {});
              for (var i2 = e2.uint32() + e2.pos, a2 = "", p2 = ""; e2.pos < i2; ) {
                var l2 = e2.uint32();
                switch (l2 >>> 3) {
                  case 1:
                    a2 = e2.string();
                    break;
                  case 2:
                    p2 = e2.string();
                    break;
                  default:
                    e2.skipType(7 & l2);
                }
              }
              o2.labels[a2] = p2;
              break;
            case 3:
              o2.metadata = c.google.protobuf.Any.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, p.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, p.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.locationId && e2.hasOwnProperty("locationId") && !u.isString(e2.locationId))
          return "locationId: string expected";
        if (null != e2.displayName && e2.hasOwnProperty("displayName") && !u.isString(e2.displayName))
          return "displayName: string expected";
        if (null != e2.labels && e2.hasOwnProperty("labels")) {
          if (!u.isObject(e2.labels))
            return "labels: object expected";
          for (var t2 = Object.keys(e2.labels), n2 = 0; n2 < t2.length; ++n2)
            if (!u.isString(e2.labels[t2[n2]]))
              return "labels: string{k:string} expected";
        }
        if (null != e2.metadata && e2.hasOwnProperty("metadata")) {
          var o2 = c.google.protobuf.Any.verify(e2.metadata);
          if (o2)
            return "metadata." + o2;
        }
        return null;
      }, p.fromObject = function(e2) {
        if (e2 instanceof c.google.cloud.location.Location)
          return e2;
        var t2 = new c.google.cloud.location.Location();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.locationId && (t2.locationId = String(e2.locationId)), null != e2.displayName && (t2.displayName = String(e2.displayName)), e2.labels) {
          if ("object" != typeof e2.labels)
            throw TypeError(".google.cloud.location.Location.labels: object expected");
          t2.labels = {};
          for (var n2 = Object.keys(e2.labels), o2 = 0; o2 < n2.length; ++o2)
            t2.labels[n2[o2]] = String(e2.labels[n2[o2]]);
        }
        if (null != e2.metadata) {
          if ("object" != typeof e2.metadata)
            throw TypeError(".google.cloud.location.Location.metadata: object expected");
          t2.metadata = c.google.protobuf.Any.fromObject(e2.metadata);
        }
        return t2;
      }, p.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).objects || t2.defaults) && (o2.labels = {}), t2.defaults && (o2.name = "", o2.metadata = null, o2.locationId = "", o2.displayName = ""), null != e2.name && e2.hasOwnProperty("name") && (o2.name = e2.name), e2.labels && (n2 = Object.keys(e2.labels)).length) {
          o2.labels = {};
          for (var r2 = 0; r2 < n2.length; ++r2)
            o2.labels[n2[r2]] = e2.labels[n2[r2]];
        }
        return null != e2.metadata && e2.hasOwnProperty("metadata") && (o2.metadata = c.google.protobuf.Any.toObject(e2.metadata, t2)), null != e2.locationId && e2.hasOwnProperty("locationId") && (o2.locationId = e2.locationId), null != e2.displayName && e2.hasOwnProperty("displayName") && (o2.displayName = e2.displayName), o2;
      }, p.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, p), e), n), F.api = ((e = {}).Http = (l.prototype.rules = u.emptyArray, l.prototype.fullyDecodeReservedExpansion = false, l.create = function(e2) {
        return new l(e2);
      }, l.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.rules && e2.rules.length)
          for (var n2 = 0; n2 < e2.rules.length; ++n2)
            c.google.api.HttpRule.encode(e2.rules[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e2, "fullyDecodeReservedExpansion") && t2.uint32(16).bool(e2.fullyDecodeReservedExpansion), t2;
      }, l.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, l.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.api.Http(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.rules && o2.rules.length || (o2.rules = []), o2.rules.push(c.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.fullyDecodeReservedExpansion = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, l.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, l.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.rules && e2.hasOwnProperty("rules")) {
          if (!Array.isArray(e2.rules))
            return "rules: array expected";
          for (var t2 = 0; t2 < e2.rules.length; ++t2) {
            var n2 = c.google.api.HttpRule.verify(e2.rules[t2]);
            if (n2)
              return "rules." + n2;
          }
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && "boolean" != typeof e2.fullyDecodeReservedExpansion ? "fullyDecodeReservedExpansion: boolean expected" : null;
      }, l.fromObject = function(e2) {
        if (e2 instanceof c.google.api.Http)
          return e2;
        var t2 = new c.google.api.Http();
        if (e2.rules) {
          if (!Array.isArray(e2.rules))
            throw TypeError(".google.api.Http.rules: array expected");
          t2.rules = [];
          for (var n2 = 0; n2 < e2.rules.length; ++n2) {
            if ("object" != typeof e2.rules[n2])
              throw TypeError(".google.api.Http.rules: object expected");
            t2.rules[n2] = c.google.api.HttpRule.fromObject(e2.rules[n2]);
          }
        }
        return null != e2.fullyDecodeReservedExpansion && (t2.fullyDecodeReservedExpansion = Boolean(e2.fullyDecodeReservedExpansion)), t2;
      }, l.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.rules = []), t2.defaults && (n2.fullyDecodeReservedExpansion = false), e2.rules && e2.rules.length) {
          n2.rules = [];
          for (var o2 = 0; o2 < e2.rules.length; ++o2)
            n2.rules[o2] = c.google.api.HttpRule.toObject(e2.rules[o2], t2);
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && (n2.fullyDecodeReservedExpansion = e2.fullyDecodeReservedExpansion), n2;
      }, l.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, l), e.HttpRule = (d.prototype.selector = "", d.prototype.get = null, d.prototype.put = null, d.prototype.post = null, d.prototype.delete = null, d.prototype.patch = null, d.prototype.custom = null, d.prototype.body = "", d.prototype.responseBody = "", d.prototype.additionalBindings = u.emptyArray, Object.defineProperty(d.prototype, "pattern", { get: u.oneOfGetter(n = ["get", "put", "post", "delete", "patch", "custom"]), set: u.oneOfSetter(n) }), d.create = function(e2) {
        return new d(e2);
      }, d.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.selector && Object.hasOwnProperty.call(e2, "selector") && t2.uint32(10).string(e2.selector), null != e2.get && Object.hasOwnProperty.call(e2, "get") && t2.uint32(18).string(e2.get), null != e2.put && Object.hasOwnProperty.call(e2, "put") && t2.uint32(26).string(e2.put), null != e2.post && Object.hasOwnProperty.call(e2, "post") && t2.uint32(34).string(e2.post), null != e2.delete && Object.hasOwnProperty.call(e2, "delete") && t2.uint32(42).string(e2.delete), null != e2.patch && Object.hasOwnProperty.call(e2, "patch") && t2.uint32(50).string(e2.patch), null != e2.body && Object.hasOwnProperty.call(e2, "body") && t2.uint32(58).string(e2.body), null != e2.custom && Object.hasOwnProperty.call(e2, "custom") && c.google.api.CustomHttpPattern.encode(e2.custom, t2.uint32(66).fork()).ldelim(), null != e2.additionalBindings && e2.additionalBindings.length)
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2)
            c.google.api.HttpRule.encode(e2.additionalBindings[n2], t2.uint32(90).fork()).ldelim();
        return null != e2.responseBody && Object.hasOwnProperty.call(e2, "responseBody") && t2.uint32(98).string(e2.responseBody), t2;
      }, d.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, d.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.api.HttpRule(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.selector = e2.string();
              break;
            case 2:
              o2.get = e2.string();
              break;
            case 3:
              o2.put = e2.string();
              break;
            case 4:
              o2.post = e2.string();
              break;
            case 5:
              o2.delete = e2.string();
              break;
            case 6:
              o2.patch = e2.string();
              break;
            case 8:
              o2.custom = c.google.api.CustomHttpPattern.decode(e2, e2.uint32());
              break;
            case 7:
              o2.body = e2.string();
              break;
            case 12:
              o2.responseBody = e2.string();
              break;
            case 11:
              o2.additionalBindings && o2.additionalBindings.length || (o2.additionalBindings = []), o2.additionalBindings.push(c.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, d.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, d.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2 = {};
        if (null != e2.selector && e2.hasOwnProperty("selector") && !u.isString(e2.selector))
          return "selector: string expected";
        if (null != e2.get && e2.hasOwnProperty("get") && (t2.pattern = 1, !u.isString(e2.get)))
          return "get: string expected";
        if (null != e2.put && e2.hasOwnProperty("put")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.put))
            return "put: string expected";
        }
        if (null != e2.post && e2.hasOwnProperty("post")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.post))
            return "post: string expected";
        }
        if (null != e2.delete && e2.hasOwnProperty("delete")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.delete))
            return "delete: string expected";
        }
        if (null != e2.patch && e2.hasOwnProperty("patch")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.patch))
            return "patch: string expected";
        }
        if (null != e2.custom && e2.hasOwnProperty("custom")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, n2 = c.google.api.CustomHttpPattern.verify(e2.custom))
            return "custom." + n2;
        }
        if (null != e2.body && e2.hasOwnProperty("body") && !u.isString(e2.body))
          return "body: string expected";
        if (null != e2.responseBody && e2.hasOwnProperty("responseBody") && !u.isString(e2.responseBody))
          return "responseBody: string expected";
        if (null != e2.additionalBindings && e2.hasOwnProperty("additionalBindings")) {
          if (!Array.isArray(e2.additionalBindings))
            return "additionalBindings: array expected";
          for (var n2, o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            if (n2 = c.google.api.HttpRule.verify(e2.additionalBindings[o2]))
              return "additionalBindings." + n2;
        }
        return null;
      }, d.fromObject = function(e2) {
        if (e2 instanceof c.google.api.HttpRule)
          return e2;
        var t2 = new c.google.api.HttpRule();
        if (null != e2.selector && (t2.selector = String(e2.selector)), null != e2.get && (t2.get = String(e2.get)), null != e2.put && (t2.put = String(e2.put)), null != e2.post && (t2.post = String(e2.post)), null != e2.delete && (t2.delete = String(e2.delete)), null != e2.patch && (t2.patch = String(e2.patch)), null != e2.custom) {
          if ("object" != typeof e2.custom)
            throw TypeError(".google.api.HttpRule.custom: object expected");
          t2.custom = c.google.api.CustomHttpPattern.fromObject(e2.custom);
        }
        if (null != e2.body && (t2.body = String(e2.body)), null != e2.responseBody && (t2.responseBody = String(e2.responseBody)), e2.additionalBindings) {
          if (!Array.isArray(e2.additionalBindings))
            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
          t2.additionalBindings = [];
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2) {
            if ("object" != typeof e2.additionalBindings[n2])
              throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
            t2.additionalBindings[n2] = c.google.api.HttpRule.fromObject(e2.additionalBindings[n2]);
          }
        }
        return t2;
      }, d.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.additionalBindings = []), t2.defaults && (n2.selector = "", n2.body = "", n2.responseBody = ""), null != e2.selector && e2.hasOwnProperty("selector") && (n2.selector = e2.selector), null != e2.get && e2.hasOwnProperty("get") && (n2.get = e2.get, t2.oneofs) && (n2.pattern = "get"), null != e2.put && e2.hasOwnProperty("put") && (n2.put = e2.put, t2.oneofs) && (n2.pattern = "put"), null != e2.post && e2.hasOwnProperty("post") && (n2.post = e2.post, t2.oneofs) && (n2.pattern = "post"), null != e2.delete && e2.hasOwnProperty("delete") && (n2.delete = e2.delete, t2.oneofs) && (n2.pattern = "delete"), null != e2.patch && e2.hasOwnProperty("patch") && (n2.patch = e2.patch, t2.oneofs) && (n2.pattern = "patch"), null != e2.body && e2.hasOwnProperty("body") && (n2.body = e2.body), null != e2.custom && e2.hasOwnProperty("custom") && (n2.custom = c.google.api.CustomHttpPattern.toObject(e2.custom, t2), t2.oneofs) && (n2.pattern = "custom"), e2.additionalBindings && e2.additionalBindings.length) {
          n2.additionalBindings = [];
          for (var o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            n2.additionalBindings[o2] = c.google.api.HttpRule.toObject(e2.additionalBindings[o2], t2);
        }
        return null != e2.responseBody && e2.hasOwnProperty("responseBody") && (n2.responseBody = e2.responseBody), n2;
      }, d.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, d), e.CustomHttpPattern = (g.prototype.kind = "", g.prototype.path = "", g.create = function(e2) {
        return new g(e2);
      }, g.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.kind && Object.hasOwnProperty.call(e2, "kind") && t2.uint32(10).string(e2.kind), null != e2.path && Object.hasOwnProperty.call(e2, "path") && t2.uint32(18).string(e2.path), t2;
      }, g.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, g.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.api.CustomHttpPattern(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.kind = e2.string();
              break;
            case 2:
              o2.path = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, g.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, g.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.kind && e2.hasOwnProperty("kind") && !u.isString(e2.kind) ? "kind: string expected" : null != e2.path && e2.hasOwnProperty("path") && !u.isString(e2.path) ? "path: string expected" : null;
      }, g.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.api.CustomHttpPattern ? e2 : (t2 = new c.google.api.CustomHttpPattern(), null != e2.kind && (t2.kind = String(e2.kind)), null != e2.path && (t2.path = String(e2.path)), t2);
      }, g.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.kind = "", n2.path = ""), null != e2.kind && e2.hasOwnProperty("kind") && (n2.kind = e2.kind), null != e2.path && e2.hasOwnProperty("path") && (n2.path = e2.path), n2;
      }, g.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, g), e), F.protobuf = ((n = {}).FileDescriptorSet = (B.prototype.file = u.emptyArray, B.create = function(e2) {
        return new B(e2);
      }, B.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.file && e2.file.length)
          for (var n2 = 0; n2 < e2.file.length; ++n2)
            c.google.protobuf.FileDescriptorProto.encode(e2.file[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, B.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, B.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FileDescriptorSet(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.file && o2.file.length || (o2.file = []), o2.file.push(c.google.protobuf.FileDescriptorProto.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, B.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, B.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.file && e2.hasOwnProperty("file")) {
          if (!Array.isArray(e2.file))
            return "file: array expected";
          for (var t2 = 0; t2 < e2.file.length; ++t2) {
            var n2 = c.google.protobuf.FileDescriptorProto.verify(e2.file[t2]);
            if (n2)
              return "file." + n2;
          }
        }
        return null;
      }, B.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FileDescriptorSet)
          return e2;
        var t2 = new c.google.protobuf.FileDescriptorSet();
        if (e2.file) {
          if (!Array.isArray(e2.file))
            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
          t2.file = [];
          for (var n2 = 0; n2 < e2.file.length; ++n2) {
            if ("object" != typeof e2.file[n2])
              throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
            t2.file[n2] = c.google.protobuf.FileDescriptorProto.fromObject(e2.file[n2]);
          }
        }
        return t2;
      }, B.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.file = []), e2.file && e2.file.length) {
          n2.file = [];
          for (var o2 = 0; o2 < e2.file.length; ++o2)
            n2.file[o2] = c.google.protobuf.FileDescriptorProto.toObject(e2.file[o2], t2);
        }
        return n2;
      }, B.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, B), n.FileDescriptorProto = (f.prototype.name = "", f.prototype.package = "", f.prototype.dependency = u.emptyArray, f.prototype.publicDependency = u.emptyArray, f.prototype.weakDependency = u.emptyArray, f.prototype.messageType = u.emptyArray, f.prototype.enumType = u.emptyArray, f.prototype.service = u.emptyArray, f.prototype.extension = u.emptyArray, f.prototype.options = null, f.prototype.sourceCodeInfo = null, f.prototype.syntax = "", f.create = function(e2) {
        return new f(e2);
      }, f.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.package && Object.hasOwnProperty.call(e2, "package") && t2.uint32(18).string(e2.package), null != e2.dependency && e2.dependency.length)
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.uint32(26).string(e2.dependency[n2]);
        if (null != e2.messageType && e2.messageType.length)
          for (n2 = 0; n2 < e2.messageType.length; ++n2)
            c.google.protobuf.DescriptorProto.encode(e2.messageType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            c.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.service && e2.service.length)
          for (n2 = 0; n2 < e2.service.length; ++n2)
            c.google.protobuf.ServiceDescriptorProto.encode(e2.service[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            c.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(58).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.FileOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.sourceCodeInfo && Object.hasOwnProperty.call(e2, "sourceCodeInfo") && c.google.protobuf.SourceCodeInfo.encode(e2.sourceCodeInfo, t2.uint32(74).fork()).ldelim(), null != e2.publicDependency && e2.publicDependency.length)
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.uint32(80).int32(e2.publicDependency[n2]);
        if (null != e2.weakDependency && e2.weakDependency.length)
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.uint32(88).int32(e2.weakDependency[n2]);
        return null != e2.syntax && Object.hasOwnProperty.call(e2, "syntax") && t2.uint32(98).string(e2.syntax), t2;
      }, f.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, f.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FileDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.package = e2.string();
              break;
            case 3:
              o2.dependency && o2.dependency.length || (o2.dependency = []), o2.dependency.push(e2.string());
              break;
            case 10:
              if (o2.publicDependency && o2.publicDependency.length || (o2.publicDependency = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.publicDependency.push(e2.int32());
              else
                o2.publicDependency.push(e2.int32());
              break;
            case 11:
              if (o2.weakDependency && o2.weakDependency.length || (o2.weakDependency = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.weakDependency.push(e2.int32());
              else
                o2.weakDependency.push(e2.int32());
              break;
            case 4:
              o2.messageType && o2.messageType.length || (o2.messageType = []), o2.messageType.push(c.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.service && o2.service.length || (o2.service = []), o2.service.push(c.google.protobuf.ServiceDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.options = c.google.protobuf.FileOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.decode(e2, e2.uint32());
              break;
            case 12:
              o2.syntax = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, f.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, f.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.package && e2.hasOwnProperty("package") && !u.isString(e2.package))
          return "package: string expected";
        if (null != e2.dependency && e2.hasOwnProperty("dependency")) {
          if (!Array.isArray(e2.dependency))
            return "dependency: array expected";
          for (var t2 = 0; t2 < e2.dependency.length; ++t2)
            if (!u.isString(e2.dependency[t2]))
              return "dependency: string[] expected";
        }
        if (null != e2.publicDependency && e2.hasOwnProperty("publicDependency")) {
          if (!Array.isArray(e2.publicDependency))
            return "publicDependency: array expected";
          for (t2 = 0; t2 < e2.publicDependency.length; ++t2)
            if (!u.isInteger(e2.publicDependency[t2]))
              return "publicDependency: integer[] expected";
        }
        if (null != e2.weakDependency && e2.hasOwnProperty("weakDependency")) {
          if (!Array.isArray(e2.weakDependency))
            return "weakDependency: array expected";
          for (t2 = 0; t2 < e2.weakDependency.length; ++t2)
            if (!u.isInteger(e2.weakDependency[t2]))
              return "weakDependency: integer[] expected";
        }
        if (null != e2.messageType && e2.hasOwnProperty("messageType")) {
          if (!Array.isArray(e2.messageType))
            return "messageType: array expected";
          for (t2 = 0; t2 < e2.messageType.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.verify(e2.messageType[t2]))
              return "messageType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = c.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.service && e2.hasOwnProperty("service")) {
          if (!Array.isArray(e2.service))
            return "service: array expected";
          for (t2 = 0; t2 < e2.service.length; ++t2)
            if (n2 = c.google.protobuf.ServiceDescriptorProto.verify(e2.service[t2]))
              return "service." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = c.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.FileOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2 = c.google.protobuf.SourceCodeInfo.verify(e2.sourceCodeInfo)))
          return "sourceCodeInfo." + n2;
        return null != e2.syntax && e2.hasOwnProperty("syntax") && !u.isString(e2.syntax) ? "syntax: string expected" : null;
      }, f.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FileDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.FileDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.package && (t2.package = String(e2.package)), e2.dependency) {
          if (!Array.isArray(e2.dependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
          t2.dependency = [];
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.dependency[n2] = String(e2.dependency[n2]);
        }
        if (e2.publicDependency) {
          if (!Array.isArray(e2.publicDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
          t2.publicDependency = [];
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.publicDependency[n2] = 0 | e2.publicDependency[n2];
        }
        if (e2.weakDependency) {
          if (!Array.isArray(e2.weakDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
          t2.weakDependency = [];
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.weakDependency[n2] = 0 | e2.weakDependency[n2];
        }
        if (e2.messageType) {
          if (!Array.isArray(e2.messageType))
            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
          t2.messageType = [];
          for (n2 = 0; n2 < e2.messageType.length; ++n2) {
            if ("object" != typeof e2.messageType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
            t2.messageType[n2] = c.google.protobuf.DescriptorProto.fromObject(e2.messageType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
            t2.enumType[n2] = c.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.service) {
          if (!Array.isArray(e2.service))
            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
          t2.service = [];
          for (n2 = 0; n2 < e2.service.length; ++n2) {
            if ("object" != typeof e2.service[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
            t2.service[n2] = c.google.protobuf.ServiceDescriptorProto.fromObject(e2.service[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
            t2.extension[n2] = c.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.FileOptions.fromObject(e2.options);
        }
        if (null != e2.sourceCodeInfo) {
          if ("object" != typeof e2.sourceCodeInfo)
            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
          t2.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.fromObject(e2.sourceCodeInfo);
        }
        return null != e2.syntax && (t2.syntax = String(e2.syntax)), t2;
      }, f.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.dependency = [], n2.messageType = [], n2.enumType = [], n2.service = [], n2.extension = [], n2.publicDependency = [], n2.weakDependency = []), t2.defaults && (n2.name = "", n2.package = "", n2.options = null, n2.sourceCodeInfo = null, n2.syntax = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.package && e2.hasOwnProperty("package") && (n2.package = e2.package), e2.dependency && e2.dependency.length) {
          n2.dependency = [];
          for (var o2 = 0; o2 < e2.dependency.length; ++o2)
            n2.dependency[o2] = e2.dependency[o2];
        }
        if (e2.messageType && e2.messageType.length) {
          n2.messageType = [];
          for (o2 = 0; o2 < e2.messageType.length; ++o2)
            n2.messageType[o2] = c.google.protobuf.DescriptorProto.toObject(e2.messageType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = c.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.service && e2.service.length) {
          n2.service = [];
          for (o2 = 0; o2 < e2.service.length; ++o2)
            n2.service[o2] = c.google.protobuf.ServiceDescriptorProto.toObject(e2.service[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = c.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.FileOptions.toObject(e2.options, t2)), null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.toObject(e2.sourceCodeInfo, t2)), e2.publicDependency && e2.publicDependency.length) {
          n2.publicDependency = [];
          for (o2 = 0; o2 < e2.publicDependency.length; ++o2)
            n2.publicDependency[o2] = e2.publicDependency[o2];
        }
        if (e2.weakDependency && e2.weakDependency.length) {
          n2.weakDependency = [];
          for (o2 = 0; o2 < e2.weakDependency.length; ++o2)
            n2.weakDependency[o2] = e2.weakDependency[o2];
        }
        return null != e2.syntax && e2.hasOwnProperty("syntax") && (n2.syntax = e2.syntax), n2;
      }, f.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, f), n.DescriptorProto = (y.prototype.name = "", y.prototype.field = u.emptyArray, y.prototype.extension = u.emptyArray, y.prototype.nestedType = u.emptyArray, y.prototype.enumType = u.emptyArray, y.prototype.extensionRange = u.emptyArray, y.prototype.oneofDecl = u.emptyArray, y.prototype.options = null, y.prototype.reservedRange = u.emptyArray, y.prototype.reservedName = u.emptyArray, y.create = function(e2) {
        return new y(e2);
      }, y.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.field && e2.field.length)
          for (var n2 = 0; n2 < e2.field.length; ++n2)
            c.google.protobuf.FieldDescriptorProto.encode(e2.field[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.nestedType && e2.nestedType.length)
          for (n2 = 0; n2 < e2.nestedType.length; ++n2)
            c.google.protobuf.DescriptorProto.encode(e2.nestedType[n2], t2.uint32(26).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            c.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.extensionRange && e2.extensionRange.length)
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2)
            c.google.protobuf.DescriptorProto.ExtensionRange.encode(e2.extensionRange[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            c.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.MessageOptions.encode(e2.options, t2.uint32(58).fork()).ldelim(), null != e2.oneofDecl && e2.oneofDecl.length)
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2)
            c.google.protobuf.OneofDescriptorProto.encode(e2.oneofDecl[n2], t2.uint32(66).fork()).ldelim();
        if (null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            c.google.protobuf.DescriptorProto.ReservedRange.encode(e2.reservedRange[n2], t2.uint32(74).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(82).string(e2.reservedName[n2]);
        return t2;
      }, y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, y.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.DescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.field && o2.field.length || (o2.field = []), o2.field.push(c.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.nestedType && o2.nestedType.length || (o2.nestedType = []), o2.nestedType.push(c.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 4:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.extensionRange && o2.extensionRange.length || (o2.extensionRange = []), o2.extensionRange.push(c.google.protobuf.DescriptorProto.ExtensionRange.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.oneofDecl && o2.oneofDecl.length || (o2.oneofDecl = []), o2.oneofDecl.push(c.google.protobuf.OneofDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.options = c.google.protobuf.MessageOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(c.google.protobuf.DescriptorProto.ReservedRange.decode(e2, e2.uint32()));
              break;
            case 10:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, y.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, y.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.field && e2.hasOwnProperty("field")) {
          if (!Array.isArray(e2.field))
            return "field: array expected";
          for (var t2 = 0; t2 < e2.field.length; ++t2)
            if (n2 = c.google.protobuf.FieldDescriptorProto.verify(e2.field[t2]))
              return "field." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = c.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        if (null != e2.nestedType && e2.hasOwnProperty("nestedType")) {
          if (!Array.isArray(e2.nestedType))
            return "nestedType: array expected";
          for (t2 = 0; t2 < e2.nestedType.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.verify(e2.nestedType[t2]))
              return "nestedType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = c.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.extensionRange && e2.hasOwnProperty("extensionRange")) {
          if (!Array.isArray(e2.extensionRange))
            return "extensionRange: array expected";
          for (t2 = 0; t2 < e2.extensionRange.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.ExtensionRange.verify(e2.extensionRange[t2]))
              return "extensionRange." + n2;
        }
        if (null != e2.oneofDecl && e2.hasOwnProperty("oneofDecl")) {
          if (!Array.isArray(e2.oneofDecl))
            return "oneofDecl: array expected";
          for (t2 = 0; t2 < e2.oneofDecl.length; ++t2)
            if (n2 = c.google.protobuf.OneofDescriptorProto.verify(e2.oneofDecl[t2]))
              return "oneofDecl." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.MessageOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.ReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!u.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, y.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.DescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.DescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.field) {
          if (!Array.isArray(e2.field))
            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
          t2.field = [];
          for (var n2 = 0; n2 < e2.field.length; ++n2) {
            if ("object" != typeof e2.field[n2])
              throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
            t2.field[n2] = c.google.protobuf.FieldDescriptorProto.fromObject(e2.field[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
            t2.extension[n2] = c.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (e2.nestedType) {
          if (!Array.isArray(e2.nestedType))
            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
          t2.nestedType = [];
          for (n2 = 0; n2 < e2.nestedType.length; ++n2) {
            if ("object" != typeof e2.nestedType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
            t2.nestedType[n2] = c.google.protobuf.DescriptorProto.fromObject(e2.nestedType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
            t2.enumType[n2] = c.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.extensionRange) {
          if (!Array.isArray(e2.extensionRange))
            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
          t2.extensionRange = [];
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2) {
            if ("object" != typeof e2.extensionRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
            t2.extensionRange[n2] = c.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e2.extensionRange[n2]);
          }
        }
        if (e2.oneofDecl) {
          if (!Array.isArray(e2.oneofDecl))
            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
          t2.oneofDecl = [];
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2) {
            if ("object" != typeof e2.oneofDecl[n2])
              throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
            t2.oneofDecl[n2] = c.google.protobuf.OneofDescriptorProto.fromObject(e2.oneofDecl[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
          t2.options = c.google.protobuf.MessageOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = c.google.protobuf.DescriptorProto.ReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, y.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.field = [], n2.nestedType = [], n2.enumType = [], n2.extensionRange = [], n2.extension = [], n2.oneofDecl = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.field && e2.field.length) {
          n2.field = [];
          for (var o2 = 0; o2 < e2.field.length; ++o2)
            n2.field[o2] = c.google.protobuf.FieldDescriptorProto.toObject(e2.field[o2], t2);
        }
        if (e2.nestedType && e2.nestedType.length) {
          n2.nestedType = [];
          for (o2 = 0; o2 < e2.nestedType.length; ++o2)
            n2.nestedType[o2] = c.google.protobuf.DescriptorProto.toObject(e2.nestedType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = c.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.extensionRange && e2.extensionRange.length) {
          n2.extensionRange = [];
          for (o2 = 0; o2 < e2.extensionRange.length; ++o2)
            n2.extensionRange[o2] = c.google.protobuf.DescriptorProto.ExtensionRange.toObject(e2.extensionRange[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = c.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.MessageOptions.toObject(e2.options, t2)), e2.oneofDecl && e2.oneofDecl.length) {
          n2.oneofDecl = [];
          for (o2 = 0; o2 < e2.oneofDecl.length; ++o2)
            n2.oneofDecl[o2] = c.google.protobuf.OneofDescriptorProto.toObject(e2.oneofDecl[o2], t2);
        }
        if (e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = c.google.protobuf.DescriptorProto.ReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, y.ExtensionRange = (h.prototype.start = 0, h.prototype.end = 0, h.prototype.options = null, h.create = function(e2) {
        return new h(e2);
      }, h.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.ExtensionRangeOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, h.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, h.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.DescriptorProto.ExtensionRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            case 3:
              o2.options = c.google.protobuf.ExtensionRangeOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, h.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, h.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.start && e2.hasOwnProperty("start") && !u.isInteger(e2.start))
          return "start: integer expected";
        if (null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end))
          return "end: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = c.google.protobuf.ExtensionRangeOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, h.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.DescriptorProto.ExtensionRange)
          return e2;
        var t2 = new c.google.protobuf.DescriptorProto.ExtensionRange();
        if (null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
          t2.options = c.google.protobuf.ExtensionRangeOptions.fromObject(e2.options);
        }
        return t2;
      }, h.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0, n2.options = null), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.ExtensionRangeOptions.toObject(e2.options, t2)), n2;
      }, h.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, h), y.ReservedRange = (b.prototype.start = 0, b.prototype.end = 0, b.create = function(e2) {
        return new b(e2);
      }, b.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, b.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, b.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.DescriptorProto.ReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, b.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, b.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !u.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end) ? "end: integer expected" : null;
      }, b.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.DescriptorProto.ReservedRange ? e2 : (t2 = new c.google.protobuf.DescriptorProto.ReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, b.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, b.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, b), y), n.ExtensionRangeOptions = (U.prototype.uninterpretedOption = u.emptyArray, U.create = function(e2) {
        return new U(e2);
      }, U.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, U.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, U.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.ExtensionRangeOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, U.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, U.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, U.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.ExtensionRangeOptions)
          return e2;
        var t2 = new c.google.protobuf.ExtensionRangeOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, U.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, U.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, U), n.FieldDescriptorProto = (O.prototype.name = "", O.prototype.number = 0, O.prototype.label = 1, O.prototype.type = 1, O.prototype.typeName = "", O.prototype.extendee = "", O.prototype.defaultValue = "", O.prototype.oneofIndex = 0, O.prototype.jsonName = "", O.prototype.options = null, O.prototype.proto3Optional = false, O.create = function(e2) {
        return new O(e2);
      }, O.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.extendee && Object.hasOwnProperty.call(e2, "extendee") && t2.uint32(18).string(e2.extendee), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(24).int32(e2.number), null != e2.label && Object.hasOwnProperty.call(e2, "label") && t2.uint32(32).int32(e2.label), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(40).int32(e2.type), null != e2.typeName && Object.hasOwnProperty.call(e2, "typeName") && t2.uint32(50).string(e2.typeName), null != e2.defaultValue && Object.hasOwnProperty.call(e2, "defaultValue") && t2.uint32(58).string(e2.defaultValue), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.FieldOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.oneofIndex && Object.hasOwnProperty.call(e2, "oneofIndex") && t2.uint32(72).int32(e2.oneofIndex), null != e2.jsonName && Object.hasOwnProperty.call(e2, "jsonName") && t2.uint32(82).string(e2.jsonName), null != e2.proto3Optional && Object.hasOwnProperty.call(e2, "proto3Optional") && t2.uint32(136).bool(e2.proto3Optional), t2;
      }, O.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, O.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FieldDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 3:
              o2.number = e2.int32();
              break;
            case 4:
              o2.label = e2.int32();
              break;
            case 5:
              o2.type = e2.int32();
              break;
            case 6:
              o2.typeName = e2.string();
              break;
            case 2:
              o2.extendee = e2.string();
              break;
            case 7:
              o2.defaultValue = e2.string();
              break;
            case 9:
              o2.oneofIndex = e2.int32();
              break;
            case 10:
              o2.jsonName = e2.string();
              break;
            case 8:
              o2.options = c.google.protobuf.FieldOptions.decode(e2, e2.uint32());
              break;
            case 17:
              o2.proto3Optional = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, O.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, O.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !u.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.label && e2.hasOwnProperty("label"))
          switch (e2.label) {
            default:
              return "label: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.type && e2.hasOwnProperty("type"))
          switch (e2.type) {
            default:
              return "type: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
          }
        if (null != e2.typeName && e2.hasOwnProperty("typeName") && !u.isString(e2.typeName))
          return "typeName: string expected";
        if (null != e2.extendee && e2.hasOwnProperty("extendee") && !u.isString(e2.extendee))
          return "extendee: string expected";
        if (null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && !u.isString(e2.defaultValue))
          return "defaultValue: string expected";
        if (null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && !u.isInteger(e2.oneofIndex))
          return "oneofIndex: integer expected";
        if (null != e2.jsonName && e2.hasOwnProperty("jsonName") && !u.isString(e2.jsonName))
          return "jsonName: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = c.google.protobuf.FieldOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && "boolean" != typeof e2.proto3Optional ? "proto3Optional: boolean expected" : null;
      }, O.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FieldDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.FieldDescriptorProto();
        switch (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), e2.label) {
          case "LABEL_OPTIONAL":
          case 1:
            t2.label = 1;
            break;
          case "LABEL_REQUIRED":
          case 2:
            t2.label = 2;
            break;
          case "LABEL_REPEATED":
          case 3:
            t2.label = 3;
        }
        switch (e2.type) {
          case "TYPE_DOUBLE":
          case 1:
            t2.type = 1;
            break;
          case "TYPE_FLOAT":
          case 2:
            t2.type = 2;
            break;
          case "TYPE_INT64":
          case 3:
            t2.type = 3;
            break;
          case "TYPE_UINT64":
          case 4:
            t2.type = 4;
            break;
          case "TYPE_INT32":
          case 5:
            t2.type = 5;
            break;
          case "TYPE_FIXED64":
          case 6:
            t2.type = 6;
            break;
          case "TYPE_FIXED32":
          case 7:
            t2.type = 7;
            break;
          case "TYPE_BOOL":
          case 8:
            t2.type = 8;
            break;
          case "TYPE_STRING":
          case 9:
            t2.type = 9;
            break;
          case "TYPE_GROUP":
          case 10:
            t2.type = 10;
            break;
          case "TYPE_MESSAGE":
          case 11:
            t2.type = 11;
            break;
          case "TYPE_BYTES":
          case 12:
            t2.type = 12;
            break;
          case "TYPE_UINT32":
          case 13:
            t2.type = 13;
            break;
          case "TYPE_ENUM":
          case 14:
            t2.type = 14;
            break;
          case "TYPE_SFIXED32":
          case 15:
            t2.type = 15;
            break;
          case "TYPE_SFIXED64":
          case 16:
            t2.type = 16;
            break;
          case "TYPE_SINT32":
          case 17:
            t2.type = 17;
            break;
          case "TYPE_SINT64":
          case 18:
            t2.type = 18;
        }
        if (null != e2.typeName && (t2.typeName = String(e2.typeName)), null != e2.extendee && (t2.extendee = String(e2.extendee)), null != e2.defaultValue && (t2.defaultValue = String(e2.defaultValue)), null != e2.oneofIndex && (t2.oneofIndex = 0 | e2.oneofIndex), null != e2.jsonName && (t2.jsonName = String(e2.jsonName)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.FieldOptions.fromObject(e2.options);
        }
        return null != e2.proto3Optional && (t2.proto3Optional = Boolean(e2.proto3Optional)), t2;
      }, O.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.extendee = "", n2.number = 0, n2.label = t2.enums === String ? "LABEL_OPTIONAL" : 1, n2.type = t2.enums === String ? "TYPE_DOUBLE" : 1, n2.typeName = "", n2.defaultValue = "", n2.options = null, n2.oneofIndex = 0, n2.jsonName = "", n2.proto3Optional = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.extendee && e2.hasOwnProperty("extendee") && (n2.extendee = e2.extendee), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.label && e2.hasOwnProperty("label") && (n2.label = t2.enums === String ? c.google.protobuf.FieldDescriptorProto.Label[e2.label] : e2.label), null != e2.type && e2.hasOwnProperty("type") && (n2.type = t2.enums === String ? c.google.protobuf.FieldDescriptorProto.Type[e2.type] : e2.type), null != e2.typeName && e2.hasOwnProperty("typeName") && (n2.typeName = e2.typeName), null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && (n2.defaultValue = e2.defaultValue), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.FieldOptions.toObject(e2.options, t2)), null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && (n2.oneofIndex = e2.oneofIndex), null != e2.jsonName && e2.hasOwnProperty("jsonName") && (n2.jsonName = e2.jsonName), null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && (n2.proto3Optional = e2.proto3Optional), n2;
      }, O.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, O.Type = (e = {}, (t = Object.create(e))[e[1] = "TYPE_DOUBLE"] = 1, t[e[2] = "TYPE_FLOAT"] = 2, t[e[3] = "TYPE_INT64"] = 3, t[e[4] = "TYPE_UINT64"] = 4, t[e[5] = "TYPE_INT32"] = 5, t[e[6] = "TYPE_FIXED64"] = 6, t[e[7] = "TYPE_FIXED32"] = 7, t[e[8] = "TYPE_BOOL"] = 8, t[e[9] = "TYPE_STRING"] = 9, t[e[10] = "TYPE_GROUP"] = 10, t[e[11] = "TYPE_MESSAGE"] = 11, t[e[12] = "TYPE_BYTES"] = 12, t[e[13] = "TYPE_UINT32"] = 13, t[e[14] = "TYPE_ENUM"] = 14, t[e[15] = "TYPE_SFIXED32"] = 15, t[e[16] = "TYPE_SFIXED64"] = 16, t[e[17] = "TYPE_SINT32"] = 17, t[e[18] = "TYPE_SINT64"] = 18, t), O.Label = (e = {}, (t = Object.create(e))[e[1] = "LABEL_OPTIONAL"] = 1, t[e[2] = "LABEL_REQUIRED"] = 2, t[e[3] = "LABEL_REPEATED"] = 3, t), O), n.OneofDescriptorProto = (m.prototype.name = "", m.prototype.options = null, m.create = function(e2) {
        return new m(e2);
      }, m.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.OneofOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, m.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, m.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.OneofDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.options = c.google.protobuf.OneofOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, m.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, m.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = c.google.protobuf.OneofOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, m.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.OneofDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.OneofDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.OneofOptions.fromObject(e2.options);
        }
        return t2;
      }, m.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.OneofOptions.toObject(e2.options, t2)), n2;
      }, m.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, m), n.EnumDescriptorProto = (v.prototype.name = "", v.prototype.value = u.emptyArray, v.prototype.options = null, v.prototype.reservedRange = u.emptyArray, v.prototype.reservedName = u.emptyArray, v.create = function(e2) {
        return new v(e2);
      }, v.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.value && e2.value.length)
          for (var n2 = 0; n2 < e2.value.length; ++n2)
            c.google.protobuf.EnumValueDescriptorProto.encode(e2.value[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.EnumOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            c.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e2.reservedRange[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(42).string(e2.reservedName[n2]);
        return t2;
      }, v.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, v.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.value && o2.value.length || (o2.value = []), o2.value.push(c.google.protobuf.EnumValueDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = c.google.protobuf.EnumOptions.decode(e2, e2.uint32());
              break;
            case 4:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(c.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, v.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, v.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.value && e2.hasOwnProperty("value")) {
          if (!Array.isArray(e2.value))
            return "value: array expected";
          for (var t2 = 0; t2 < e2.value.length; ++t2)
            if (n2 = c.google.protobuf.EnumValueDescriptorProto.verify(e2.value[t2]))
              return "value." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.EnumOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!u.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, v.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.EnumDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.value) {
          if (!Array.isArray(e2.value))
            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
          t2.value = [];
          for (var n2 = 0; n2 < e2.value.length; ++n2) {
            if ("object" != typeof e2.value[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
            t2.value[n2] = c.google.protobuf.EnumValueDescriptorProto.fromObject(e2.value[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.EnumOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, v.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.value = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.value && e2.value.length) {
          n2.value = [];
          for (var o2 = 0; o2 < e2.value.length; ++o2)
            n2.value[o2] = c.google.protobuf.EnumValueDescriptorProto.toObject(e2.value[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.EnumOptions.toObject(e2.options, t2)), e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, v.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, v.EnumReservedRange = (P.prototype.start = 0, P.prototype.end = 0, P.create = function(e2) {
        return new P(e2);
      }, P.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, P.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, P.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumDescriptorProto.EnumReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, P.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, P.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !u.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end) ? "end: integer expected" : null;
      }, P.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e2 : (t2 = new c.google.protobuf.EnumDescriptorProto.EnumReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, P.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, P.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, P), v), n.EnumValueDescriptorProto = (w.prototype.name = "", w.prototype.number = 0, w.prototype.options = null, w.create = function(e2) {
        return new w(e2);
      }, w.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(16).int32(e2.number), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.EnumValueOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, w.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, w.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumValueDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.number = e2.int32();
              break;
            case 3:
              o2.options = c.google.protobuf.EnumValueOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, w.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, w.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !u.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = c.google.protobuf.EnumValueOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, w.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumValueDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.EnumValueDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.EnumValueOptions.fromObject(e2.options);
        }
        return t2;
      }, w.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.number = 0, n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.EnumValueOptions.toObject(e2.options, t2)), n2;
      }, w.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, w), n.ServiceDescriptorProto = (j.prototype.name = "", j.prototype.method = u.emptyArray, j.prototype.options = null, j.create = function(e2) {
        return new j(e2);
      }, j.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.method && e2.method.length)
          for (var n2 = 0; n2 < e2.method.length; ++n2)
            c.google.protobuf.MethodDescriptorProto.encode(e2.method[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.ServiceOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, j.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, j.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.ServiceDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.method && o2.method.length || (o2.method = []), o2.method.push(c.google.protobuf.MethodDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = c.google.protobuf.ServiceOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, j.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, j.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.method && e2.hasOwnProperty("method")) {
          if (!Array.isArray(e2.method))
            return "method: array expected";
          for (var t2 = 0; t2 < e2.method.length; ++t2)
            if (n2 = c.google.protobuf.MethodDescriptorProto.verify(e2.method[t2]))
              return "method." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.ServiceOptions.verify(e2.options)))
          return "options." + n2;
        return null;
      }, j.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.ServiceDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.ServiceDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.method) {
          if (!Array.isArray(e2.method))
            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
          t2.method = [];
          for (var n2 = 0; n2 < e2.method.length; ++n2) {
            if ("object" != typeof e2.method[n2])
              throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
            t2.method[n2] = c.google.protobuf.MethodDescriptorProto.fromObject(e2.method[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.ServiceOptions.fromObject(e2.options);
        }
        return t2;
      }, j.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.method = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.method && e2.method.length) {
          n2.method = [];
          for (var o2 = 0; o2 < e2.method.length; ++o2)
            n2.method[o2] = c.google.protobuf.MethodDescriptorProto.toObject(e2.method[o2], t2);
        }
        return null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.ServiceOptions.toObject(e2.options, t2)), n2;
      }, j.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, j), n.MethodDescriptorProto = (x.prototype.name = "", x.prototype.inputType = "", x.prototype.outputType = "", x.prototype.options = null, x.prototype.clientStreaming = false, x.prototype.serverStreaming = false, x.create = function(e2) {
        return new x(e2);
      }, x.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.inputType && Object.hasOwnProperty.call(e2, "inputType") && t2.uint32(18).string(e2.inputType), null != e2.outputType && Object.hasOwnProperty.call(e2, "outputType") && t2.uint32(26).string(e2.outputType), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.MethodOptions.encode(e2.options, t2.uint32(34).fork()).ldelim(), null != e2.clientStreaming && Object.hasOwnProperty.call(e2, "clientStreaming") && t2.uint32(40).bool(e2.clientStreaming), null != e2.serverStreaming && Object.hasOwnProperty.call(e2, "serverStreaming") && t2.uint32(48).bool(e2.serverStreaming), t2;
      }, x.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, x.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.MethodDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.inputType = e2.string();
              break;
            case 3:
              o2.outputType = e2.string();
              break;
            case 4:
              o2.options = c.google.protobuf.MethodOptions.decode(e2, e2.uint32());
              break;
            case 5:
              o2.clientStreaming = e2.bool();
              break;
            case 6:
              o2.serverStreaming = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, x.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, x.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.inputType && e2.hasOwnProperty("inputType") && !u.isString(e2.inputType))
          return "inputType: string expected";
        if (null != e2.outputType && e2.hasOwnProperty("outputType") && !u.isString(e2.outputType))
          return "outputType: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = c.google.protobuf.MethodOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && "boolean" != typeof e2.clientStreaming ? "clientStreaming: boolean expected" : null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && "boolean" != typeof e2.serverStreaming ? "serverStreaming: boolean expected" : null;
      }, x.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.MethodDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.MethodDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.inputType && (t2.inputType = String(e2.inputType)), null != e2.outputType && (t2.outputType = String(e2.outputType)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.MethodOptions.fromObject(e2.options);
        }
        return null != e2.clientStreaming && (t2.clientStreaming = Boolean(e2.clientStreaming)), null != e2.serverStreaming && (t2.serverStreaming = Boolean(e2.serverStreaming)), t2;
      }, x.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.inputType = "", n2.outputType = "", n2.options = null, n2.clientStreaming = false, n2.serverStreaming = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.inputType && e2.hasOwnProperty("inputType") && (n2.inputType = e2.inputType), null != e2.outputType && e2.hasOwnProperty("outputType") && (n2.outputType = e2.outputType), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.MethodOptions.toObject(e2.options, t2)), null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && (n2.clientStreaming = e2.clientStreaming), null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && (n2.serverStreaming = e2.serverStreaming), n2;
      }, x.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, x), n.FileOptions = (S.prototype.javaPackage = "", S.prototype.javaOuterClassname = "", S.prototype.javaMultipleFiles = false, S.prototype.javaGenerateEqualsAndHash = false, S.prototype.javaStringCheckUtf8 = false, S.prototype.optimizeFor = 1, S.prototype.goPackage = "", S.prototype.ccGenericServices = false, S.prototype.javaGenericServices = false, S.prototype.pyGenericServices = false, S.prototype.phpGenericServices = false, S.prototype.deprecated = false, S.prototype.ccEnableArenas = true, S.prototype.objcClassPrefix = "", S.prototype.csharpNamespace = "", S.prototype.swiftPrefix = "", S.prototype.phpClassPrefix = "", S.prototype.phpNamespace = "", S.prototype.phpMetadataNamespace = "", S.prototype.rubyPackage = "", S.prototype.uninterpretedOption = u.emptyArray, S.create = function(e2) {
        return new S(e2);
      }, S.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.javaPackage && Object.hasOwnProperty.call(e2, "javaPackage") && t2.uint32(10).string(e2.javaPackage), null != e2.javaOuterClassname && Object.hasOwnProperty.call(e2, "javaOuterClassname") && t2.uint32(66).string(e2.javaOuterClassname), null != e2.optimizeFor && Object.hasOwnProperty.call(e2, "optimizeFor") && t2.uint32(72).int32(e2.optimizeFor), null != e2.javaMultipleFiles && Object.hasOwnProperty.call(e2, "javaMultipleFiles") && t2.uint32(80).bool(e2.javaMultipleFiles), null != e2.goPackage && Object.hasOwnProperty.call(e2, "goPackage") && t2.uint32(90).string(e2.goPackage), null != e2.ccGenericServices && Object.hasOwnProperty.call(e2, "ccGenericServices") && t2.uint32(128).bool(e2.ccGenericServices), null != e2.javaGenericServices && Object.hasOwnProperty.call(e2, "javaGenericServices") && t2.uint32(136).bool(e2.javaGenericServices), null != e2.pyGenericServices && Object.hasOwnProperty.call(e2, "pyGenericServices") && t2.uint32(144).bool(e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e2, "javaGenerateEqualsAndHash") && t2.uint32(160).bool(e2.javaGenerateEqualsAndHash), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(184).bool(e2.deprecated), null != e2.javaStringCheckUtf8 && Object.hasOwnProperty.call(e2, "javaStringCheckUtf8") && t2.uint32(216).bool(e2.javaStringCheckUtf8), null != e2.ccEnableArenas && Object.hasOwnProperty.call(e2, "ccEnableArenas") && t2.uint32(248).bool(e2.ccEnableArenas), null != e2.objcClassPrefix && Object.hasOwnProperty.call(e2, "objcClassPrefix") && t2.uint32(290).string(e2.objcClassPrefix), null != e2.csharpNamespace && Object.hasOwnProperty.call(e2, "csharpNamespace") && t2.uint32(298).string(e2.csharpNamespace), null != e2.swiftPrefix && Object.hasOwnProperty.call(e2, "swiftPrefix") && t2.uint32(314).string(e2.swiftPrefix), null != e2.phpClassPrefix && Object.hasOwnProperty.call(e2, "phpClassPrefix") && t2.uint32(322).string(e2.phpClassPrefix), null != e2.phpNamespace && Object.hasOwnProperty.call(e2, "phpNamespace") && t2.uint32(330).string(e2.phpNamespace), null != e2.phpGenericServices && Object.hasOwnProperty.call(e2, "phpGenericServices") && t2.uint32(336).bool(e2.phpGenericServices), null != e2.phpMetadataNamespace && Object.hasOwnProperty.call(e2, "phpMetadataNamespace") && t2.uint32(354).string(e2.phpMetadataNamespace), null != e2.rubyPackage && Object.hasOwnProperty.call(e2, "rubyPackage") && t2.uint32(362).string(e2.rubyPackage), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, S.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, S.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FileOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.javaPackage = e2.string();
              break;
            case 8:
              o2.javaOuterClassname = e2.string();
              break;
            case 10:
              o2.javaMultipleFiles = e2.bool();
              break;
            case 20:
              o2.javaGenerateEqualsAndHash = e2.bool();
              break;
            case 27:
              o2.javaStringCheckUtf8 = e2.bool();
              break;
            case 9:
              o2.optimizeFor = e2.int32();
              break;
            case 11:
              o2.goPackage = e2.string();
              break;
            case 16:
              o2.ccGenericServices = e2.bool();
              break;
            case 17:
              o2.javaGenericServices = e2.bool();
              break;
            case 18:
              o2.pyGenericServices = e2.bool();
              break;
            case 42:
              o2.phpGenericServices = e2.bool();
              break;
            case 23:
              o2.deprecated = e2.bool();
              break;
            case 31:
              o2.ccEnableArenas = e2.bool();
              break;
            case 36:
              o2.objcClassPrefix = e2.string();
              break;
            case 37:
              o2.csharpNamespace = e2.string();
              break;
            case 39:
              o2.swiftPrefix = e2.string();
              break;
            case 40:
              o2.phpClassPrefix = e2.string();
              break;
            case 41:
              o2.phpNamespace = e2.string();
              break;
            case 44:
              o2.phpMetadataNamespace = e2.string();
              break;
            case 45:
              o2.rubyPackage = e2.string();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, S.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, S.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && !u.isString(e2.javaPackage))
          return "javaPackage: string expected";
        if (null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && !u.isString(e2.javaOuterClassname))
          return "javaOuterClassname: string expected";
        if (null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && "boolean" != typeof e2.javaMultipleFiles)
          return "javaMultipleFiles: boolean expected";
        if (null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && "boolean" != typeof e2.javaGenerateEqualsAndHash)
          return "javaGenerateEqualsAndHash: boolean expected";
        if (null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && "boolean" != typeof e2.javaStringCheckUtf8)
          return "javaStringCheckUtf8: boolean expected";
        if (null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor"))
          switch (e2.optimizeFor) {
            default:
              return "optimizeFor: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.goPackage && e2.hasOwnProperty("goPackage") && !u.isString(e2.goPackage))
          return "goPackage: string expected";
        if (null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && "boolean" != typeof e2.ccGenericServices)
          return "ccGenericServices: boolean expected";
        if (null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && "boolean" != typeof e2.javaGenericServices)
          return "javaGenericServices: boolean expected";
        if (null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && "boolean" != typeof e2.pyGenericServices)
          return "pyGenericServices: boolean expected";
        if (null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && "boolean" != typeof e2.phpGenericServices)
          return "phpGenericServices: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && "boolean" != typeof e2.ccEnableArenas)
          return "ccEnableArenas: boolean expected";
        if (null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && !u.isString(e2.objcClassPrefix))
          return "objcClassPrefix: string expected";
        if (null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && !u.isString(e2.csharpNamespace))
          return "csharpNamespace: string expected";
        if (null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && !u.isString(e2.swiftPrefix))
          return "swiftPrefix: string expected";
        if (null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && !u.isString(e2.phpClassPrefix))
          return "phpClassPrefix: string expected";
        if (null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && !u.isString(e2.phpNamespace))
          return "phpNamespace: string expected";
        if (null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && !u.isString(e2.phpMetadataNamespace))
          return "phpMetadataNamespace: string expected";
        if (null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && !u.isString(e2.rubyPackage))
          return "rubyPackage: string expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, S.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FileOptions)
          return e2;
        var t2 = new c.google.protobuf.FileOptions();
        switch (null != e2.javaPackage && (t2.javaPackage = String(e2.javaPackage)), null != e2.javaOuterClassname && (t2.javaOuterClassname = String(e2.javaOuterClassname)), null != e2.javaMultipleFiles && (t2.javaMultipleFiles = Boolean(e2.javaMultipleFiles)), null != e2.javaGenerateEqualsAndHash && (t2.javaGenerateEqualsAndHash = Boolean(e2.javaGenerateEqualsAndHash)), null != e2.javaStringCheckUtf8 && (t2.javaStringCheckUtf8 = Boolean(e2.javaStringCheckUtf8)), e2.optimizeFor) {
          case "SPEED":
          case 1:
            t2.optimizeFor = 1;
            break;
          case "CODE_SIZE":
          case 2:
            t2.optimizeFor = 2;
            break;
          case "LITE_RUNTIME":
          case 3:
            t2.optimizeFor = 3;
        }
        if (null != e2.goPackage && (t2.goPackage = String(e2.goPackage)), null != e2.ccGenericServices && (t2.ccGenericServices = Boolean(e2.ccGenericServices)), null != e2.javaGenericServices && (t2.javaGenericServices = Boolean(e2.javaGenericServices)), null != e2.pyGenericServices && (t2.pyGenericServices = Boolean(e2.pyGenericServices)), null != e2.phpGenericServices && (t2.phpGenericServices = Boolean(e2.phpGenericServices)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.ccEnableArenas && (t2.ccEnableArenas = Boolean(e2.ccEnableArenas)), null != e2.objcClassPrefix && (t2.objcClassPrefix = String(e2.objcClassPrefix)), null != e2.csharpNamespace && (t2.csharpNamespace = String(e2.csharpNamespace)), null != e2.swiftPrefix && (t2.swiftPrefix = String(e2.swiftPrefix)), null != e2.phpClassPrefix && (t2.phpClassPrefix = String(e2.phpClassPrefix)), null != e2.phpNamespace && (t2.phpNamespace = String(e2.phpNamespace)), null != e2.phpMetadataNamespace && (t2.phpMetadataNamespace = String(e2.phpMetadataNamespace)), null != e2.rubyPackage && (t2.rubyPackage = String(e2.rubyPackage)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, S.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.javaPackage = "", n2.javaOuterClassname = "", n2.optimizeFor = t2.enums === String ? "SPEED" : 1, n2.javaMultipleFiles = false, n2.goPackage = "", n2.ccGenericServices = false, n2.javaGenericServices = false, n2.pyGenericServices = false, n2.javaGenerateEqualsAndHash = false, n2.deprecated = false, n2.javaStringCheckUtf8 = false, n2.ccEnableArenas = true, n2.objcClassPrefix = "", n2.csharpNamespace = "", n2.swiftPrefix = "", n2.phpClassPrefix = "", n2.phpNamespace = "", n2.phpGenericServices = false, n2.phpMetadataNamespace = "", n2.rubyPackage = ""), null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && (n2.javaPackage = e2.javaPackage), null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && (n2.javaOuterClassname = e2.javaOuterClassname), null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor") && (n2.optimizeFor = t2.enums === String ? c.google.protobuf.FileOptions.OptimizeMode[e2.optimizeFor] : e2.optimizeFor), null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && (n2.javaMultipleFiles = e2.javaMultipleFiles), null != e2.goPackage && e2.hasOwnProperty("goPackage") && (n2.goPackage = e2.goPackage), null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && (n2.ccGenericServices = e2.ccGenericServices), null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && (n2.javaGenericServices = e2.javaGenericServices), null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && (n2.pyGenericServices = e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && (n2.javaGenerateEqualsAndHash = e2.javaGenerateEqualsAndHash), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && (n2.javaStringCheckUtf8 = e2.javaStringCheckUtf8), null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && (n2.ccEnableArenas = e2.ccEnableArenas), null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && (n2.objcClassPrefix = e2.objcClassPrefix), null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && (n2.csharpNamespace = e2.csharpNamespace), null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && (n2.swiftPrefix = e2.swiftPrefix), null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && (n2.phpClassPrefix = e2.phpClassPrefix), null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && (n2.phpNamespace = e2.phpNamespace), null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && (n2.phpGenericServices = e2.phpGenericServices), null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && (n2.phpMetadataNamespace = e2.phpMetadataNamespace), null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && (n2.rubyPackage = e2.rubyPackage), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, S.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, S.OptimizeMode = (e = {}, (t = Object.create(e))[e[1] = "SPEED"] = 1, t[e[2] = "CODE_SIZE"] = 2, t[e[3] = "LITE_RUNTIME"] = 3, t), S), n.MessageOptions = (k.prototype.messageSetWireFormat = false, k.prototype.noStandardDescriptorAccessor = false, k.prototype.deprecated = false, k.prototype.mapEntry = false, k.prototype.uninterpretedOption = u.emptyArray, k.create = function(e2) {
        return new k(e2);
      }, k.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.messageSetWireFormat && Object.hasOwnProperty.call(e2, "messageSetWireFormat") && t2.uint32(8).bool(e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e2, "noStandardDescriptorAccessor") && t2.uint32(16).bool(e2.noStandardDescriptorAccessor), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.mapEntry && Object.hasOwnProperty.call(e2, "mapEntry") && t2.uint32(56).bool(e2.mapEntry), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, k.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, k.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.MessageOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.messageSetWireFormat = e2.bool();
              break;
            case 2:
              o2.noStandardDescriptorAccessor = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 7:
              o2.mapEntry = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, k.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, k.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && "boolean" != typeof e2.messageSetWireFormat)
          return "messageSetWireFormat: boolean expected";
        if (null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && "boolean" != typeof e2.noStandardDescriptorAccessor)
          return "noStandardDescriptorAccessor: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && "boolean" != typeof e2.mapEntry)
          return "mapEntry: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, k.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.MessageOptions)
          return e2;
        var t2 = new c.google.protobuf.MessageOptions();
        if (null != e2.messageSetWireFormat && (t2.messageSetWireFormat = Boolean(e2.messageSetWireFormat)), null != e2.noStandardDescriptorAccessor && (t2.noStandardDescriptorAccessor = Boolean(e2.noStandardDescriptorAccessor)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.mapEntry && (t2.mapEntry = Boolean(e2.mapEntry)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, k.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.messageSetWireFormat = false, n2.noStandardDescriptorAccessor = false, n2.deprecated = false, n2.mapEntry = false), null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && (n2.messageSetWireFormat = e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && (n2.noStandardDescriptorAccessor = e2.noStandardDescriptorAccessor), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && (n2.mapEntry = e2.mapEntry), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, k.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, k), n.FieldOptions = (D.prototype.ctype = 0, D.prototype.packed = false, D.prototype.jstype = 0, D.prototype.lazy = false, D.prototype.deprecated = false, D.prototype.weak = false, D.prototype.uninterpretedOption = u.emptyArray, D.create = function(e2) {
        return new D(e2);
      }, D.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.ctype && Object.hasOwnProperty.call(e2, "ctype") && t2.uint32(8).int32(e2.ctype), null != e2.packed && Object.hasOwnProperty.call(e2, "packed") && t2.uint32(16).bool(e2.packed), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.lazy && Object.hasOwnProperty.call(e2, "lazy") && t2.uint32(40).bool(e2.lazy), null != e2.jstype && Object.hasOwnProperty.call(e2, "jstype") && t2.uint32(48).int32(e2.jstype), null != e2.weak && Object.hasOwnProperty.call(e2, "weak") && t2.uint32(80).bool(e2.weak), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, D.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, D.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FieldOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.ctype = e2.int32();
              break;
            case 2:
              o2.packed = e2.bool();
              break;
            case 6:
              o2.jstype = e2.int32();
              break;
            case 5:
              o2.lazy = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 10:
              o2.weak = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, D.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, D.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.ctype && e2.hasOwnProperty("ctype"))
          switch (e2.ctype) {
            default:
              return "ctype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.packed && e2.hasOwnProperty("packed") && "boolean" != typeof e2.packed)
          return "packed: boolean expected";
        if (null != e2.jstype && e2.hasOwnProperty("jstype"))
          switch (e2.jstype) {
            default:
              return "jstype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.lazy && e2.hasOwnProperty("lazy") && "boolean" != typeof e2.lazy)
          return "lazy: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.weak && e2.hasOwnProperty("weak") && "boolean" != typeof e2.weak)
          return "weak: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, D.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FieldOptions)
          return e2;
        var t2 = new c.google.protobuf.FieldOptions();
        switch (e2.ctype) {
          case "STRING":
          case 0:
            t2.ctype = 0;
            break;
          case "CORD":
          case 1:
            t2.ctype = 1;
            break;
          case "STRING_PIECE":
          case 2:
            t2.ctype = 2;
        }
        switch (null != e2.packed && (t2.packed = Boolean(e2.packed)), e2.jstype) {
          case "JS_NORMAL":
          case 0:
            t2.jstype = 0;
            break;
          case "JS_STRING":
          case 1:
            t2.jstype = 1;
            break;
          case "JS_NUMBER":
          case 2:
            t2.jstype = 2;
        }
        if (null != e2.lazy && (t2.lazy = Boolean(e2.lazy)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.weak && (t2.weak = Boolean(e2.weak)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, D.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.ctype = t2.enums === String ? "STRING" : 0, n2.packed = false, n2.deprecated = false, n2.lazy = false, n2.jstype = t2.enums === String ? "JS_NORMAL" : 0, n2.weak = false), null != e2.ctype && e2.hasOwnProperty("ctype") && (n2.ctype = t2.enums === String ? c.google.protobuf.FieldOptions.CType[e2.ctype] : e2.ctype), null != e2.packed && e2.hasOwnProperty("packed") && (n2.packed = e2.packed), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.lazy && e2.hasOwnProperty("lazy") && (n2.lazy = e2.lazy), null != e2.jstype && e2.hasOwnProperty("jstype") && (n2.jstype = t2.enums === String ? c.google.protobuf.FieldOptions.JSType[e2.jstype] : e2.jstype), null != e2.weak && e2.hasOwnProperty("weak") && (n2.weak = e2.weak), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, D.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, D.CType = (e = {}, (t = Object.create(e))[e[0] = "STRING"] = 0, t[e[1] = "CORD"] = 1, t[e[2] = "STRING_PIECE"] = 2, t), D.JSType = (e = {}, (t = Object.create(e))[e[0] = "JS_NORMAL"] = 0, t[e[1] = "JS_STRING"] = 1, t[e[2] = "JS_NUMBER"] = 2, t), D), n.OneofOptions = (M.prototype.uninterpretedOption = u.emptyArray, M.create = function(e2) {
        return new M(e2);
      }, M.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, M.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, M.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.OneofOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, M.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, M.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, M.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.OneofOptions)
          return e2;
        var t2 = new c.google.protobuf.OneofOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, M.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, M.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, M), n.EnumOptions = (T.prototype.allowAlias = false, T.prototype.deprecated = false, T.prototype.uninterpretedOption = u.emptyArray, T.create = function(e2) {
        return new T(e2);
      }, T.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.allowAlias && Object.hasOwnProperty.call(e2, "allowAlias") && t2.uint32(16).bool(e2.allowAlias), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, T.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, T.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.allowAlias = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, T.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, T.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && "boolean" != typeof e2.allowAlias)
          return "allowAlias: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, T.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumOptions)
          return e2;
        var t2 = new c.google.protobuf.EnumOptions();
        if (null != e2.allowAlias && (t2.allowAlias = Boolean(e2.allowAlias)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, T.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.allowAlias = false, n2.deprecated = false), null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && (n2.allowAlias = e2.allowAlias), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, T.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, T), n.EnumValueOptions = (E.prototype.deprecated = false, E.prototype.uninterpretedOption = u.emptyArray, E.create = function(e2) {
        return new E(e2);
      }, E.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(8).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, E.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, E.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumValueOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, E.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, E.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, E.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumValueOptions)
          return e2;
        var t2 = new c.google.protobuf.EnumValueOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, E.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, E.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, E), n.ServiceOptions = (A.prototype.deprecated = false, A.prototype.uninterpretedOption = u.emptyArray, A.prototype[".google.api.defaultHost"] = "", A.prototype[".google.api.oauthScopes"] = "", A.create = function(e2) {
        return new A(e2);
      }, A.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.defaultHost"] && Object.hasOwnProperty.call(e2, ".google.api.defaultHost") && t2.uint32(8394).string(e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && Object.hasOwnProperty.call(e2, ".google.api.oauthScopes") && t2.uint32(8402).string(e2[".google.api.oauthScopes"]), t2;
      }, A.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, A.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.ServiceOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.api.defaultHost"] = e2.string();
              break;
            case 1050:
              o2[".google.api.oauthScopes"] = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, A.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, A.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && !u.isString(e2[".google.api.defaultHost"]) ? ".google.api.defaultHost: string expected" : null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && !u.isString(e2[".google.api.oauthScopes"]) ? ".google.api.oauthScopes: string expected" : null;
      }, A.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.ServiceOptions)
          return e2;
        var t2 = new c.google.protobuf.ServiceOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return null != e2[".google.api.defaultHost"] && (t2[".google.api.defaultHost"] = String(e2[".google.api.defaultHost"])), null != e2[".google.api.oauthScopes"] && (t2[".google.api.oauthScopes"] = String(e2[".google.api.oauthScopes"])), t2;
      }, A.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false, n2[".google.api.defaultHost"] = "", n2[".google.api.oauthScopes"] = ""), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && (n2[".google.api.defaultHost"] = e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && (n2[".google.api.oauthScopes"] = e2[".google.api.oauthScopes"]), n2;
      }, A.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, A), n.MethodOptions = (N.prototype.deprecated = false, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = u.emptyArray, N.prototype[".google.api.http"] = null, N.prototype[".google.api.methodSignature"] = u.emptyArray, N.create = function(e2) {
        return new N(e2);
      }, N.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.idempotencyLevel && Object.hasOwnProperty.call(e2, "idempotencyLevel") && t2.uint32(272).int32(e2.idempotencyLevel), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length)
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2.uint32(8410).string(e2[".google.api.methodSignature"][n2]);
        return null != e2[".google.api.http"] && Object.hasOwnProperty.call(e2, ".google.api.http") && c.google.api.HttpRule.encode(e2[".google.api.http"], t2.uint32(578365826).fork()).ldelim(), t2;
      }, N.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, N.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.MethodOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 34:
              o2.idempotencyLevel = e2.int32();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 72295728:
              o2[".google.api.http"] = c.google.api.HttpRule.decode(e2, e2.uint32());
              break;
            case 1051:
              o2[".google.api.methodSignature"] && o2[".google.api.methodSignature"].length || (o2[".google.api.methodSignature"] = []), o2[".google.api.methodSignature"].push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, N.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, N.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel"))
          switch (e2.idempotencyLevel) {
            default:
              return "idempotencyLevel: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2 = c.google.api.HttpRule.verify(e2[".google.api.http"])))
          return ".google.api.http." + n2;
        if (null != e2[".google.api.methodSignature"] && e2.hasOwnProperty(".google.api.methodSignature")) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            return ".google.api.methodSignature: array expected";
          for (t2 = 0; t2 < e2[".google.api.methodSignature"].length; ++t2)
            if (!u.isString(e2[".google.api.methodSignature"][t2]))
              return ".google.api.methodSignature: string[] expected";
        }
        return null;
      }, N.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.MethodOptions)
          return e2;
        var t2 = new c.google.protobuf.MethodOptions();
        switch (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.idempotencyLevel) {
          case "IDEMPOTENCY_UNKNOWN":
          case 0:
            t2.idempotencyLevel = 0;
            break;
          case "NO_SIDE_EFFECTS":
          case 1:
            t2.idempotencyLevel = 1;
            break;
          case "IDEMPOTENT":
          case 2:
            t2.idempotencyLevel = 2;
        }
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.api.http"]) {
          if ("object" != typeof e2[".google.api.http"])
            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
          t2[".google.api.http"] = c.google.api.HttpRule.fromObject(e2[".google.api.http"]);
        }
        if (e2[".google.api.methodSignature"]) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
          t2[".google.api.methodSignature"] = [];
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2[".google.api.methodSignature"][n2] = String(e2[".google.api.methodSignature"][n2]);
        }
        return t2;
      }, N.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.methodSignature"] = []), t2.defaults && (n2.deprecated = false, n2.idempotencyLevel = t2.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0, n2[".google.api.http"] = null), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel") && (n2.idempotencyLevel = t2.enums === String ? c.google.protobuf.MethodOptions.IdempotencyLevel[e2.idempotencyLevel] : e2.idempotencyLevel), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length) {
          n2[".google.api.methodSignature"] = [];
          for (o2 = 0; o2 < e2[".google.api.methodSignature"].length; ++o2)
            n2[".google.api.methodSignature"][o2] = e2[".google.api.methodSignature"][o2];
        }
        return null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2[".google.api.http"] = c.google.api.HttpRule.toObject(e2[".google.api.http"], t2)), n2;
      }, N.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, N.IdempotencyLevel = (e = {}, (t = Object.create(e))[e[0] = "IDEMPOTENCY_UNKNOWN"] = 0, t[e[1] = "NO_SIDE_EFFECTS"] = 1, t[e[2] = "IDEMPOTENT"] = 2, t), N), n.UninterpretedOption = (I.prototype.name = u.emptyArray, I.prototype.identifierValue = "", I.prototype.positiveIntValue = u.Long ? u.Long.fromBits(0, 0, true) : 0, I.prototype.negativeIntValue = u.Long ? u.Long.fromBits(0, 0, false) : 0, I.prototype.doubleValue = 0, I.prototype.stringValue = u.newBuffer([]), I.prototype.aggregateValue = "", I.create = function(e2) {
        return new I(e2);
      }, I.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && e2.name.length)
          for (var n2 = 0; n2 < e2.name.length; ++n2)
            c.google.protobuf.UninterpretedOption.NamePart.encode(e2.name[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.identifierValue && Object.hasOwnProperty.call(e2, "identifierValue") && t2.uint32(26).string(e2.identifierValue), null != e2.positiveIntValue && Object.hasOwnProperty.call(e2, "positiveIntValue") && t2.uint32(32).uint64(e2.positiveIntValue), null != e2.negativeIntValue && Object.hasOwnProperty.call(e2, "negativeIntValue") && t2.uint32(40).int64(e2.negativeIntValue), null != e2.doubleValue && Object.hasOwnProperty.call(e2, "doubleValue") && t2.uint32(49).double(e2.doubleValue), null != e2.stringValue && Object.hasOwnProperty.call(e2, "stringValue") && t2.uint32(58).bytes(e2.stringValue), null != e2.aggregateValue && Object.hasOwnProperty.call(e2, "aggregateValue") && t2.uint32(66).string(e2.aggregateValue), t2;
      }, I.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, I.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.UninterpretedOption(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.name && o2.name.length || (o2.name = []), o2.name.push(c.google.protobuf.UninterpretedOption.NamePart.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.identifierValue = e2.string();
              break;
            case 4:
              o2.positiveIntValue = e2.uint64();
              break;
            case 5:
              o2.negativeIntValue = e2.int64();
              break;
            case 6:
              o2.doubleValue = e2.double();
              break;
            case 7:
              o2.stringValue = e2.bytes();
              break;
            case 8:
              o2.aggregateValue = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, I.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, I.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name")) {
          if (!Array.isArray(e2.name))
            return "name: array expected";
          for (var t2 = 0; t2 < e2.name.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.NamePart.verify(e2.name[t2]);
            if (n2)
              return "name." + n2;
          }
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && !u.isString(e2.identifierValue) ? "identifierValue: string expected" : null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && !(u.isInteger(e2.positiveIntValue) || e2.positiveIntValue && u.isInteger(e2.positiveIntValue.low) && u.isInteger(e2.positiveIntValue.high)) ? "positiveIntValue: integer|Long expected" : null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && !(u.isInteger(e2.negativeIntValue) || e2.negativeIntValue && u.isInteger(e2.negativeIntValue.low) && u.isInteger(e2.negativeIntValue.high)) ? "negativeIntValue: integer|Long expected" : null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && "number" != typeof e2.doubleValue ? "doubleValue: number expected" : null != e2.stringValue && e2.hasOwnProperty("stringValue") && !(e2.stringValue && "number" == typeof e2.stringValue.length || u.isString(e2.stringValue)) ? "stringValue: buffer expected" : null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && !u.isString(e2.aggregateValue) ? "aggregateValue: string expected" : null;
      }, I.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.UninterpretedOption)
          return e2;
        var t2 = new c.google.protobuf.UninterpretedOption();
        if (e2.name) {
          if (!Array.isArray(e2.name))
            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
          t2.name = [];
          for (var n2 = 0; n2 < e2.name.length; ++n2) {
            if ("object" != typeof e2.name[n2])
              throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
            t2.name[n2] = c.google.protobuf.UninterpretedOption.NamePart.fromObject(e2.name[n2]);
          }
        }
        return null != e2.identifierValue && (t2.identifierValue = String(e2.identifierValue)), null != e2.positiveIntValue && (u.Long ? (t2.positiveIntValue = u.Long.fromValue(e2.positiveIntValue)).unsigned = true : "string" == typeof e2.positiveIntValue ? t2.positiveIntValue = parseInt(e2.positiveIntValue, 10) : "number" == typeof e2.positiveIntValue ? t2.positiveIntValue = e2.positiveIntValue : "object" == typeof e2.positiveIntValue && (t2.positiveIntValue = new u.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true))), null != e2.negativeIntValue && (u.Long ? (t2.negativeIntValue = u.Long.fromValue(e2.negativeIntValue)).unsigned = false : "string" == typeof e2.negativeIntValue ? t2.negativeIntValue = parseInt(e2.negativeIntValue, 10) : "number" == typeof e2.negativeIntValue ? t2.negativeIntValue = e2.negativeIntValue : "object" == typeof e2.negativeIntValue && (t2.negativeIntValue = new u.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber())), null != e2.doubleValue && (t2.doubleValue = Number(e2.doubleValue)), null != e2.stringValue && ("string" == typeof e2.stringValue ? u.base64.decode(e2.stringValue, t2.stringValue = u.newBuffer(u.base64.length(e2.stringValue)), 0) : e2.stringValue.length && (t2.stringValue = e2.stringValue)), null != e2.aggregateValue && (t2.aggregateValue = String(e2.aggregateValue)), t2;
      }, I.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (o2.name = []), t2.defaults && (o2.identifierValue = "", u.Long ? (n2 = new u.Long(0, 0, true), o2.positiveIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.positiveIntValue = t2.longs === String ? "0" : 0, u.Long ? (n2 = new u.Long(0, 0, false), o2.negativeIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.negativeIntValue = t2.longs === String ? "0" : 0, o2.doubleValue = 0, t2.bytes === String ? o2.stringValue = "" : (o2.stringValue = [], t2.bytes !== Array && (o2.stringValue = u.newBuffer(o2.stringValue))), o2.aggregateValue = ""), e2.name && e2.name.length) {
          o2.name = [];
          for (var r2 = 0; r2 < e2.name.length; ++r2)
            o2.name[r2] = c.google.protobuf.UninterpretedOption.NamePart.toObject(e2.name[r2], t2);
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && (o2.identifierValue = e2.identifierValue), null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && ("number" == typeof e2.positiveIntValue ? o2.positiveIntValue = t2.longs === String ? String(e2.positiveIntValue) : e2.positiveIntValue : o2.positiveIntValue = t2.longs === String ? u.Long.prototype.toString.call(e2.positiveIntValue) : t2.longs === Number ? new u.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true) : e2.positiveIntValue), null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && ("number" == typeof e2.negativeIntValue ? o2.negativeIntValue = t2.longs === String ? String(e2.negativeIntValue) : e2.negativeIntValue : o2.negativeIntValue = t2.longs === String ? u.Long.prototype.toString.call(e2.negativeIntValue) : t2.longs === Number ? new u.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber() : e2.negativeIntValue), null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && (o2.doubleValue = t2.json && !isFinite(e2.doubleValue) ? String(e2.doubleValue) : e2.doubleValue), null != e2.stringValue && e2.hasOwnProperty("stringValue") && (o2.stringValue = t2.bytes === String ? u.base64.encode(e2.stringValue, 0, e2.stringValue.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.stringValue) : e2.stringValue), null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && (o2.aggregateValue = e2.aggregateValue), o2;
      }, I.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, I.NamePart = (R.prototype.namePart = "", R.prototype.isExtension = false, R.create = function(e2) {
        return new R(e2);
      }, R.encode = function(e2, t2) {
        return (t2 = t2 || r.create()).uint32(10).string(e2.namePart), t2.uint32(16).bool(e2.isExtension), t2;
      }, R.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, R.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.UninterpretedOption.NamePart(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.namePart = e2.string();
              break;
            case 2:
              o2.isExtension = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        if (!o2.hasOwnProperty("namePart"))
          throw u.ProtocolError("missing required 'namePart'", { instance: o2 });
        if (o2.hasOwnProperty("isExtension"))
          return o2;
        throw u.ProtocolError("missing required 'isExtension'", { instance: o2 });
      }, R.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, R.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : u.isString(e2.namePart) ? "boolean" != typeof e2.isExtension ? "isExtension: boolean expected" : null : "namePart: string expected";
      }, R.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.UninterpretedOption.NamePart ? e2 : (t2 = new c.google.protobuf.UninterpretedOption.NamePart(), null != e2.namePart && (t2.namePart = String(e2.namePart)), null != e2.isExtension && (t2.isExtension = Boolean(e2.isExtension)), t2);
      }, R.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.namePart = "", n2.isExtension = false), null != e2.namePart && e2.hasOwnProperty("namePart") && (n2.namePart = e2.namePart), null != e2.isExtension && e2.hasOwnProperty("isExtension") && (n2.isExtension = e2.isExtension), n2;
      }, R.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, R), I), n.SourceCodeInfo = (_.prototype.location = u.emptyArray, _.create = function(e2) {
        return new _(e2);
      }, _.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.location && e2.location.length)
          for (var n2 = 0; n2 < e2.location.length; ++n2)
            c.google.protobuf.SourceCodeInfo.Location.encode(e2.location[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, _.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, _.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.SourceCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.location && o2.location.length || (o2.location = []), o2.location.push(c.google.protobuf.SourceCodeInfo.Location.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, _.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, _.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.location && e2.hasOwnProperty("location")) {
          if (!Array.isArray(e2.location))
            return "location: array expected";
          for (var t2 = 0; t2 < e2.location.length; ++t2) {
            var n2 = c.google.protobuf.SourceCodeInfo.Location.verify(e2.location[t2]);
            if (n2)
              return "location." + n2;
          }
        }
        return null;
      }, _.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.SourceCodeInfo)
          return e2;
        var t2 = new c.google.protobuf.SourceCodeInfo();
        if (e2.location) {
          if (!Array.isArray(e2.location))
            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
          t2.location = [];
          for (var n2 = 0; n2 < e2.location.length; ++n2) {
            if ("object" != typeof e2.location[n2])
              throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
            t2.location[n2] = c.google.protobuf.SourceCodeInfo.Location.fromObject(e2.location[n2]);
          }
        }
        return t2;
      }, _.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.location = []), e2.location && e2.location.length) {
          n2.location = [];
          for (var o2 = 0; o2 < e2.location.length; ++o2)
            n2.location[o2] = c.google.protobuf.SourceCodeInfo.Location.toObject(e2.location[o2], t2);
        }
        return n2;
      }, _.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, _.Location = (C.prototype.path = u.emptyArray, C.prototype.span = u.emptyArray, C.prototype.leadingComments = "", C.prototype.trailingComments = "", C.prototype.leadingDetachedComments = u.emptyArray, C.create = function(e2) {
        return new C(e2);
      }, C.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        if (null != e2.span && e2.span.length) {
          t2.uint32(18).fork();
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.int32(e2.span[n2]);
          t2.ldelim();
        }
        if (null != e2.leadingComments && Object.hasOwnProperty.call(e2, "leadingComments") && t2.uint32(26).string(e2.leadingComments), null != e2.trailingComments && Object.hasOwnProperty.call(e2, "trailingComments") && t2.uint32(34).string(e2.trailingComments), null != e2.leadingDetachedComments && e2.leadingDetachedComments.length)
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.uint32(50).string(e2.leadingDetachedComments[n2]);
        return t2;
      }, C.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, C.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.SourceCodeInfo.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              if (o2.span && o2.span.length || (o2.span = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.span.push(e2.int32());
              else
                o2.span.push(e2.int32());
              break;
            case 3:
              o2.leadingComments = e2.string();
              break;
            case 4:
              o2.trailingComments = e2.string();
              break;
            case 6:
              o2.leadingDetachedComments && o2.leadingDetachedComments.length || (o2.leadingDetachedComments = []), o2.leadingDetachedComments.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, C.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, C.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!u.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        if (null != e2.span && e2.hasOwnProperty("span")) {
          if (!Array.isArray(e2.span))
            return "span: array expected";
          for (t2 = 0; t2 < e2.span.length; ++t2)
            if (!u.isInteger(e2.span[t2]))
              return "span: integer[] expected";
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && !u.isString(e2.leadingComments))
          return "leadingComments: string expected";
        if (null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && !u.isString(e2.trailingComments))
          return "trailingComments: string expected";
        if (null != e2.leadingDetachedComments && e2.hasOwnProperty("leadingDetachedComments")) {
          if (!Array.isArray(e2.leadingDetachedComments))
            return "leadingDetachedComments: array expected";
          for (t2 = 0; t2 < e2.leadingDetachedComments.length; ++t2)
            if (!u.isString(e2.leadingDetachedComments[t2]))
              return "leadingDetachedComments: string[] expected";
        }
        return null;
      }, C.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.SourceCodeInfo.Location)
          return e2;
        var t2 = new c.google.protobuf.SourceCodeInfo.Location();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        if (e2.span) {
          if (!Array.isArray(e2.span))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
          t2.span = [];
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.span[n2] = 0 | e2.span[n2];
        }
        if (null != e2.leadingComments && (t2.leadingComments = String(e2.leadingComments)), null != e2.trailingComments && (t2.trailingComments = String(e2.trailingComments)), e2.leadingDetachedComments) {
          if (!Array.isArray(e2.leadingDetachedComments))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
          t2.leadingDetachedComments = [];
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.leadingDetachedComments[n2] = String(e2.leadingDetachedComments[n2]);
        }
        return t2;
      }, C.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = [], n2.span = [], n2.leadingDetachedComments = []), t2.defaults && (n2.leadingComments = "", n2.trailingComments = ""), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        if (e2.span && e2.span.length) {
          n2.span = [];
          for (o2 = 0; o2 < e2.span.length; ++o2)
            n2.span[o2] = e2.span[o2];
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && (n2.leadingComments = e2.leadingComments), null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && (n2.trailingComments = e2.trailingComments), e2.leadingDetachedComments && e2.leadingDetachedComments.length) {
          n2.leadingDetachedComments = [];
          for (o2 = 0; o2 < e2.leadingDetachedComments.length; ++o2)
            n2.leadingDetachedComments[o2] = e2.leadingDetachedComments[o2];
        }
        return n2;
      }, C.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, C), _), n.GeneratedCodeInfo = (J.prototype.annotation = u.emptyArray, J.create = function(e2) {
        return new J(e2);
      }, J.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.annotation && e2.annotation.length)
          for (var n2 = 0; n2 < e2.annotation.length; ++n2)
            c.google.protobuf.GeneratedCodeInfo.Annotation.encode(e2.annotation[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, J.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, J.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.GeneratedCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.annotation && o2.annotation.length || (o2.annotation = []), o2.annotation.push(c.google.protobuf.GeneratedCodeInfo.Annotation.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, J.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, J.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.annotation && e2.hasOwnProperty("annotation")) {
          if (!Array.isArray(e2.annotation))
            return "annotation: array expected";
          for (var t2 = 0; t2 < e2.annotation.length; ++t2) {
            var n2 = c.google.protobuf.GeneratedCodeInfo.Annotation.verify(e2.annotation[t2]);
            if (n2)
              return "annotation." + n2;
          }
        }
        return null;
      }, J.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.GeneratedCodeInfo)
          return e2;
        var t2 = new c.google.protobuf.GeneratedCodeInfo();
        if (e2.annotation) {
          if (!Array.isArray(e2.annotation))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
          t2.annotation = [];
          for (var n2 = 0; n2 < e2.annotation.length; ++n2) {
            if ("object" != typeof e2.annotation[n2])
              throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
            t2.annotation[n2] = c.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e2.annotation[n2]);
          }
        }
        return t2;
      }, J.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.annotation = []), e2.annotation && e2.annotation.length) {
          n2.annotation = [];
          for (var o2 = 0; o2 < e2.annotation.length; ++o2)
            n2.annotation[o2] = c.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e2.annotation[o2], t2);
        }
        return n2;
      }, J.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, J.Annotation = (V.prototype.path = u.emptyArray, V.prototype.sourceFile = "", V.prototype.begin = 0, V.prototype.end = 0, V.create = function(e2) {
        return new V(e2);
      }, V.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        return null != e2.sourceFile && Object.hasOwnProperty.call(e2, "sourceFile") && t2.uint32(18).string(e2.sourceFile), null != e2.begin && Object.hasOwnProperty.call(e2, "begin") && t2.uint32(24).int32(e2.begin), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(32).int32(e2.end), t2;
      }, V.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, V.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.GeneratedCodeInfo.Annotation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              o2.sourceFile = e2.string();
              break;
            case 3:
              o2.begin = e2.int32();
              break;
            case 4:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, V.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, V.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!u.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && !u.isString(e2.sourceFile) ? "sourceFile: string expected" : null != e2.begin && e2.hasOwnProperty("begin") && !u.isInteger(e2.begin) ? "begin: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end) ? "end: integer expected" : null;
      }, V.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.GeneratedCodeInfo.Annotation)
          return e2;
        var t2 = new c.google.protobuf.GeneratedCodeInfo.Annotation();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        return null != e2.sourceFile && (t2.sourceFile = String(e2.sourceFile)), null != e2.begin && (t2.begin = 0 | e2.begin), null != e2.end && (t2.end = 0 | e2.end), t2;
      }, V.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = []), t2.defaults && (n2.sourceFile = "", n2.begin = 0, n2.end = 0), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && (n2.sourceFile = e2.sourceFile), null != e2.begin && e2.hasOwnProperty("begin") && (n2.begin = e2.begin), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, V.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, V), J), n.Any = (H.prototype.type_url = "", H.prototype.value = u.newBuffer([]), H.create = function(e2) {
        return new H(e2);
      }, H.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.type_url && Object.hasOwnProperty.call(e2, "type_url") && t2.uint32(10).string(e2.type_url), null != e2.value && Object.hasOwnProperty.call(e2, "value") && t2.uint32(18).bytes(e2.value), t2;
      }, H.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, H.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.Any(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type_url = e2.string();
              break;
            case 2:
              o2.value = e2.bytes();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, H.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, H.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.type_url && e2.hasOwnProperty("type_url") && !u.isString(e2.type_url) ? "type_url: string expected" : null != e2.value && e2.hasOwnProperty("value") && !(e2.value && "number" == typeof e2.value.length || u.isString(e2.value)) ? "value: buffer expected" : null;
      }, H.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.Any ? e2 : (t2 = new c.google.protobuf.Any(), null != e2.type_url && (t2.type_url = String(e2.type_url)), null != e2.value && ("string" == typeof e2.value ? u.base64.decode(e2.value, t2.value = u.newBuffer(u.base64.length(e2.value)), 0) : e2.value.length && (t2.value = e2.value)), t2);
      }, H.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.type_url = "", t2.bytes === String ? n2.value = "" : (n2.value = [], t2.bytes !== Array && (n2.value = u.newBuffer(n2.value)))), null != e2.type_url && e2.hasOwnProperty("type_url") && (n2.type_url = e2.type_url), null != e2.value && e2.hasOwnProperty("value") && (n2.value = t2.bytes === String ? u.base64.encode(e2.value, 0, e2.value.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.value) : e2.value), n2;
      }, H.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, H), n), F), c;
    });
  }
});

// node_modules/google-gax/build/src/pathTemplate.js
var require_pathTemplate = __commonJS({
  "node_modules/google-gax/build/src/pathTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PathTemplate = void 0;
    var PathTemplate = class {
      /**
       * @param {String} data the of the template
       *
       * @constructor
       */
      constructor(data) {
        this.bindings = {};
        this.data = data;
        this.segments = this.parsePathTemplate(data);
        this.size = this.segments.length;
      }
      /**
       * Matches a fully-qualified path template string.
       *
       * @param {String} path a fully-qualified path template string
       * @return {Object} contains const names matched to binding values
       * @throws {TypeError} if path can't be matched to this template
       */
      match(path) {
        let pathSegments = path.split("/");
        const bindings = {};
        if (pathSegments.length !== this.segments.length) {
          if (!this.data.includes("**")) {
            throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);
          } else if (pathSegments.length !== this.segments.length + 1) {
            throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);
          }
        }
        for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {
          if (this.segments[index] !== pathSegments[0]) {
            if (!this.segments[index].includes("*")) {
              throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);
            } else {
              let segment = this.segments[index];
              const matches = segment.match(/\{[$0-9a-zA-Z_]+=.*?\}/g);
              if (!matches) {
                throw new Error(`Error processing path template segment ${segment}`);
              }
              const variables = matches.map((str) => str.replace(/^\{/, "").replace(/=.*/, ""));
              if (segment.includes("**")) {
                bindings[variables[0]] = pathSegments[0] + "/" + pathSegments[1];
                pathSegments = pathSegments.slice(2);
              } else {
                if (variables.length === 1) {
                  bindings[variables[0]] = pathSegments[0];
                } else {
                  const value = pathSegments[0].split(/[-_.~]/);
                  if (value.length !== variables.length) {
                    throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);
                  }
                  for (const v of variables) {
                    bindings[v] = value[0];
                    segment = segment.replace(`{${v}=*}`, `${value[0]}`);
                    value.shift();
                  }
                  if (segment !== pathSegments[0]) {
                    throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);
                  }
                }
                pathSegments.shift();
              }
            }
          } else {
            pathSegments.shift();
          }
        }
        return bindings;
      }
      /**
       * Renders a path template using the provided bindings.
       *
       * @param {Object} bindings a mapping of const names to binding strings
       * @return {String} a rendered representation of the path template
       * @throws {TypeError} if a key is missing, or if a sub-template cannot be
       *   parsed
       */
      render(bindings) {
        if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {
          throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);
        }
        let path = this.inspect();
        for (const key of Object.keys(bindings)) {
          const b = bindings[key].toString();
          if (!this.bindings[key]) {
            throw new TypeError(`render fails for not matching ${bindings[key]}`);
          }
          const variable = this.bindings[key];
          if (variable === "*") {
            if (!b.match(/[^/{}]+/)) {
              throw new TypeError(`render fails for not matching ${b}`);
            }
            path = path.replace(`{${key}=*}`, `${b}`);
          } else if (variable === "**") {
            if (!b.match(/[^{}]+/)) {
              throw new TypeError(`render fails for not matching ${b}`);
            }
            path = path.replace(`{${key}=**}`, `${b}`);
          }
        }
        return path;
      }
      /**
       * Renders the path template.
       *
       * @return {string} contains const names matched to binding values
       */
      inspect() {
        return this.segments.join("/");
      }
      /**
       * Parse the path template.
       *
       * @return {string[]} return segments of the input path.
       * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]
       */
      parsePathTemplate(data) {
        const pathSegments = splitPathTemplate(data);
        let index = 0;
        let wildCardCount = 0;
        const segments = [];
        let matches;
        pathSegments.forEach((segment) => {
          if (segment === "*" || segment === "**") {
            this.bindings[`$${index}`] = segment;
            segments.push(`{$${index}=${segment}}`);
            index = index + 1;
            if (segment === "**") {
              ++wildCardCount;
            }
          } else if (matches = segment.match(/\{[0-9a-zA-Z-.~_]+(?:=.*?)?\}/g)) {
            for (const subsegment of matches) {
              const pairMatch = subsegment.match(/^\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\}$/);
              if (!pairMatch) {
                throw new Error(`Cannot process path template segment ${subsegment}`);
              }
              const key = pairMatch[1];
              let value = pairMatch[2];
              if (!value) {
                value = "*";
                segment = segment.replace(key, key + "=*");
                this.bindings[key] = value;
              } else if (value === "*") {
                this.bindings[key] = value;
              } else if (value === "**") {
                ++wildCardCount;
                this.bindings[key] = value;
              }
            }
            segments.push(segment);
          } else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {
            segments.push(segment);
          }
        });
        if (wildCardCount > 1) {
          throw new TypeError("Can not have more than one wildcard.");
        }
        return segments;
      }
    };
    exports2.PathTemplate = PathTemplate;
    function splitPathTemplate(data) {
      let left = 0;
      let right = 0;
      let bracketCount = 0;
      const segments = [];
      while (right >= left && right < data.length) {
        if (data.charAt(right) === "{") {
          bracketCount = bracketCount + 1;
        } else if (data.charAt(right) === "}") {
          bracketCount = bracketCount - 1;
        } else if (data.charAt(right) === "/") {
          if (right === data.length - 1) {
            throw new TypeError("Invalid path, it can not be ended by /");
          }
          if (bracketCount === 0) {
            segments.push(data.substring(left, right));
            left = right + 1;
          }
        }
        if (right === data.length - 1) {
          if (bracketCount !== 0) {
            throw new TypeError("Brackets are invalid.");
          }
          segments.push(data.substring(left));
        }
        right = right + 1;
      }
      return segments;
    }
  }
});

// node_modules/google-gax/build/src/iam_policy_service_client_config.json
var require_iam_policy_service_client_config = __commonJS({
  "node_modules/google-gax/build/src/iam_policy_service_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.iam.v1.IAMPolicy": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 2e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 2e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetIamPolicy: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            SetIamPolicy: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            TestIamPermissions: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/protos/iam_service.json
var require_iam_service2 = __commonJS({
  "node_modules/google-gax/build/protos/iam_service.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { iam: { nested: { v1: { options: { cc_enable_arenas: true, csharp_namespace: "Google.Cloud.Iam.V1", go_package: "google.golang.org/genproto/googleapis/iam/v1;iam", java_multiple_files: true, java_outer_classname: "PolicyProto", java_package: "com.google.iam.v1", php_namespace: "Google\\Cloud\\Iam\\V1" }, nested: { IAMPolicy: { options: { "(google.api.default_host)": "iam-meta-api.googleapis.com" }, methods: { SetIamPolicy: { requestType: "SetIamPolicyRequest", responseType: "Policy", options: { "(google.api.http).post": "/v1/{resource=**}:setIamPolicy", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:setIamPolicy", body: "*" } }] }, GetIamPolicy: { requestType: "GetIamPolicyRequest", responseType: "Policy", options: { "(google.api.http).post": "/v1/{resource=**}:getIamPolicy", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:getIamPolicy", body: "*" } }] }, TestIamPermissions: { requestType: "TestIamPermissionsRequest", responseType: "TestIamPermissionsResponse", options: { "(google.api.http).post": "/v1/{resource=**}:testIamPermissions", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:testIamPermissions", body: "*" } }] } } }, SetIamPolicyRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, policy: { type: "Policy", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, GetIamPolicyRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, options: { type: "GetPolicyOptions", id: 2 } } }, TestIamPermissionsRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, permissions: { rule: "repeated", type: "string", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, TestIamPermissionsResponse: { fields: { permissions: { rule: "repeated", type: "string", id: 1 } } }, GetPolicyOptions: { fields: { requestedPolicyVersion: { type: "int32", id: 1 } } }, Policy: { fields: { version: { type: "int32", id: 1 }, bindings: { rule: "repeated", type: "Binding", id: 4 }, etag: { type: "bytes", id: 3 } } }, Binding: { fields: { role: { type: "string", id: 1 }, members: { rule: "repeated", type: "string", id: 2 }, condition: { type: "google.type.Expr", id: 3 } } }, PolicyDelta: { fields: { bindingDeltas: { rule: "repeated", type: "BindingDelta", id: 1 }, auditConfigDeltas: { rule: "repeated", type: "AuditConfigDelta", id: 2 } } }, BindingDelta: { fields: { action: { type: "Action", id: 1 }, role: { type: "string", id: 2 }, member: { type: "string", id: 3 }, condition: { type: "google.type.Expr", id: 4 } }, nested: { Action: { values: { ACTION_UNSPECIFIED: 0, ADD: 1, REMOVE: 2 } } } }, AuditConfigDelta: { fields: { action: { type: "Action", id: 1 }, service: { type: "string", id: 2 }, exemptedMember: { type: "string", id: 3 }, logType: { type: "string", id: 4 } }, nested: { Action: { values: { ACTION_UNSPECIFIED: 0, ADD: 1, REMOVE: 2 } } } }, logging: { options: { csharp_namespace: "Google.Cloud.Iam.V1.Logging", go_package: "google.golang.org/genproto/googleapis/iam/v1/logging;logging", java_multiple_files: true, java_outer_classname: "AuditDataProto", java_package: "com.google.iam.v1.logging" }, nested: { AuditData: { fields: { policyDelta: { type: "google.iam.v1.PolicyDelta", id: 2 } } } } } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ResourceProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" }, fieldBehavior: { rule: "repeated", type: "google.api.FieldBehavior", id: 1052, extend: "google.protobuf.FieldOptions" }, FieldBehavior: { values: { FIELD_BEHAVIOR_UNSPECIFIED: 0, OPTIONAL: 1, REQUIRED: 2, OUTPUT_ONLY: 3, INPUT_ONLY: 4, IMMUTABLE: 5 } }, resourceReference: { type: "google.api.ResourceReference", id: 1055, extend: "google.protobuf.FieldOptions" }, resourceDefinition: { rule: "repeated", type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.FileOptions" }, resource: { type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.MessageOptions" }, ResourceDescriptor: { fields: { type: { type: "string", id: 1 }, pattern: { rule: "repeated", type: "string", id: 2 }, nameField: { type: "string", id: 3 }, history: { type: "History", id: 4 }, plural: { type: "string", id: 5 }, singular: { type: "string", id: 6 } }, nested: { History: { values: { HISTORY_UNSPECIFIED: 0, ORIGINALLY_SINGLE_PATTERN: 1, FUTURE_MULTI_PATTERN: 2 } } } }, ResourceReference: { fields: { type: { type: "string", id: 1 }, childType: { type: "string", id: 2 } } } } }, protobuf: { options: { go_package: "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } } } }, type: { options: { go_package: "google.golang.org/genproto/googleapis/type/expr;expr", java_multiple_files: true, java_outer_classname: "ExprProto", java_package: "com.google.type", objc_class_prefix: "GTP" }, nested: { Expr: { fields: { expression: { type: "string", id: 1 }, title: { type: "string", id: 2 }, description: { type: "string", id: 3 }, location: { type: "string", id: 4 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/iamService.js
var require_iamService = __commonJS({
  "node_modules/google-gax/build/src/iamService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IamClient = void 0;
    var createApiCall_1 = require_createApiCall();
    var routingHeader = require_routingHeader();
    var gapicConfig = require_iam_policy_service_client_config();
    var fallback = require_fallback();
    var version = require_package3().version;
    var jsonProtos = require_iam_service2();
    var IamClient = class {
      constructor(gaxGrpc, options) {
        this._terminated = false;
        this.descriptors = { page: {}, stream: {}, longrunning: {} };
        this.innerApiCalls = {};
        this.gaxGrpc = gaxGrpc;
        const opts = Object.assign({
          servicePath: options.servicePath,
          port: options.port,
          clientConfig: options.clientConfig,
          apiEndpoint: options.apiEndpoint,
          fallback: options.fallback
        }, options);
        version = opts.fallback ? fallback.version : version;
        opts.scopes = this.constructor.scopes;
        this._opts = opts;
        this.auth = gaxGrpc.auth;
        const clientHeader = [`gax/${version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);
        this._defaults = gaxGrpc.constructSettings("google.iam.v1.IAMPolicy", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.iamPolicyStub) {
          return this.iamPolicyStub;
        }
        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.iam.v1.IAMPolicy") : this._protos.google.iam.v1.IAMPolicy, this._opts);
        const iamPolicyStubMethods = [
          "getIamPolicy",
          "setIamPolicy",
          "testIamPermissions"
        ];
        for (const methodName of iamPolicyStubMethods) {
          const innerCallPromise = this.iamPolicyStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);
        }
        return this.iamPolicyStub;
      }
      /**
       * The DNS address for this API service.
       */
      static get servicePath() {
        return "cloudkms.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       */
      static get apiEndpoint() {
        return "cloudkms.googleapis.com";
      }
      /**
       * The port for this API service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       */
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloudkms"
        ];
      }
      getProjectId(callback) {
        if (this.auth && "getProjectId" in this.auth) {
          return this.auth.getProjectId(callback);
        }
        if (callback) {
          callback(new Error("Cannot determine project ID."));
        } else {
          return Promise.reject("Cannot determine project ID.");
        }
      }
      getIamPolicy(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
      }
      setIamPolicy(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
      }
      testIamPermissions(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
      }
      /**
       * Terminate the GRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       */
      close() {
        this.initialize();
        if (!this._terminated) {
          return this.iamPolicyStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.IamClient = IamClient;
  }
});

// node_modules/google-gax/build/protos/locations.json
var require_locations2 = __commonJS({
  "node_modules/google-gax/build/protos/locations.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { cloud: { nested: { location: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/cloud/location;location", java_multiple_files: true, java_outer_classname: "LocationsProto", java_package: "com.google.cloud.location" }, nested: { Locations: { options: { "(google.api.default_host)": "cloud.googleapis.com", "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform" }, methods: { ListLocations: { requestType: "ListLocationsRequest", responseType: "ListLocationsResponse", options: { "(google.api.http).get": "/v1/{name=locations}", "(google.api.http).additional_bindings.get": "/v1/{name=projects/*}/locations" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=locations}", additional_bindings: { get: "/v1/{name=projects/*}/locations" } } }] }, GetLocation: { requestType: "GetLocationRequest", responseType: "Location", options: { "(google.api.http).get": "/v1/{name=locations/*}", "(google.api.http).additional_bindings.get": "/v1/{name=projects/*/locations/*}" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=locations/*}", additional_bindings: { get: "/v1/{name=projects/*/locations/*}" } } }] } } }, ListLocationsRequest: { fields: { name: { type: "string", id: 1 }, filter: { type: "string", id: 2 }, pageSize: { type: "int32", id: 3 }, pageToken: { type: "string", id: 4 } } }, ListLocationsResponse: { fields: { locations: { rule: "repeated", type: "Location", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, GetLocationRequest: { fields: { name: { type: "string", id: 1 } } }, Location: { fields: { name: { type: "string", id: 1 }, locationId: { type: "string", id: 4 }, displayName: { type: "string", id: 5 }, labels: { keyType: "string", type: "string", id: 2 }, metadata: { type: "google.protobuf.Any", id: 3 } } } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ClientProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" } } }, protobuf: { options: { go_package: "google.golang.org/protobuf/types/descriptorpb", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/locations_client_config.json
var require_locations_client_config = __commonJS({
  "node_modules/google-gax/build/src/locations_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.location.Locations": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            ListLocations: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            GetLocation: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/src/locationService.js
var require_locationService = __commonJS({
  "node_modules/google-gax/build/src/locationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LocationsClient = void 0;
    var gax = require_gax();
    var warnings_1 = require_warnings();
    var createApiCall_1 = require_createApiCall();
    var routingHeader = require_routingHeader();
    var pageDescriptor_1 = require_pageDescriptor();
    var jsonProtos = require_locations2();
    var gapicConfig = require_locations_client_config();
    var version = require_package3().version;
    var LocationsClient = class {
      /**
       * Construct an instance of LocationsClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP fallback mode.
       *     In fallback mode, a special browser-compatible transport implementation is used
       *     instead of gRPC transport. In browser context (if the `window` object is defined)
       *     the fallback mode is enabled automatically; set `options.fallback` to `false`
       *     if you need to override this behavior.
       */
      constructor(gaxGrpc, opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        this.gaxGrpc = gaxGrpc;
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        this._opts = opts;
        this.auth = gaxGrpc.auth;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
        } else if (opts.fallback === "rest") {
          clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);
        this.descriptors.page = {
          listLocations: new pageDescriptor_1.PageDescriptor("pageToken", "nextPageToken", "locations")
        };
        this._defaults = gaxGrpc.constructSettings("google.cloud.location.Locations", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = warnings_1.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.locationsStub) {
          return this.locationsStub;
        }
        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.location.Locations") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.location.Locations
        ), this._opts, this._providedCustomServicePath);
        const locationsStubMethods = ["listLocations", "getLocation"];
        for (const methodName of locationsStubMethods) {
          const callPromise = this.locationsStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || void 0;
          const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.locationsStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "cloud.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "cloud.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return ["https://www.googleapis.com/auth/cloud-platform"];
      }
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      /**
       * Gets information about a location.
       *
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   Resource name for the location.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
       *   Please see the
       *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)
       *   for more details and examples.
       * @example
       * const [response] = await client.getLocation(request);
       */
      getLocation(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        this.initialize();
        return this.innerApiCalls.getLocation(request, options, callback);
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   The resource that owns the locations collection, if applicable.
       * @param {string} request.filter
       *   The standard list filter.
       * @param {number} request.pageSize
       *   The standard list page size.
       * @param {string} request.pageToken
       *   The standard list page token.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Promise} - The promise which resolves to an array.
       *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.
       *   The client library will perform auto-pagination by default: it will call the API as many
       *   times as needed and will merge results from all the pages into this array.
       *   Note that it can affect your quota.
       *   We recommend using `listLocationsAsync()`
       *   method described below for async iteration which you can stop as needed.
       *   Please see the
       *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)
       *   for more details and examples.
       */
      listLocations(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        this.initialize();
        return this.innerApiCalls.listLocations(request, options, callback);
      }
      /**
       * Equivalent to `listLocations`, but returns an iterable object.
       *
       * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   The resource that owns the locations collection, if applicable.
       * @param {string} request.filter
       *   The standard list filter.
       * @param {number} request.pageSize
       *   The standard list page size.
       * @param {string} request.pageToken
       *   The standard list page token.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Object}
       *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
       *   When you iterate the returned iterable, each element will be an object representing
       *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
       *   so you can stop the iteration when you don't need more results.
       *   Please see the
       *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)
       *   for more details and examples.
       * @example
       * const iterable = client.listLocationsAsync(request);
       * for await (const response of iterable) {
       *   // process response
       * }
       */
      listLocationsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls["listLocations"], request, callSettings);
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        this.initialize();
        if (!this._terminated) {
          return this.locationsStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.LocationsClient = LocationsClient;
  }
});

// node_modules/google-gax/build/src/fallback.js
var require_fallback = __commonJS({
  "node_modules/google-gax/build/src/fallback.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fallback = exports2.GoogleError = exports2.operation = exports2.Operation = exports2.warn = exports2.protobufMinimal = exports2.protobuf = exports2.createApiCall = exports2.LocationProtos = exports2.IamProtos = exports2.operationsProtos = exports2.lro = exports2.GrpcClient = exports2.defaultToObjectOptions = exports2.LocationsClient = exports2.IamClient = exports2.OperationsClient = exports2.StreamType = exports2.StreamDescriptor = exports2.PageDescriptor = exports2.LongrunningDescriptor = exports2.BundleDescriptor = exports2.version = exports2.createDefaultBackoffSettings = exports2.RetryOptions = exports2.constructSettings = exports2.CallSettings = exports2.routingHeader = exports2.PathTemplate = void 0;
    var objectHash = require_object_hash();
    var protobuf = require_protobufjs();
    exports2.protobuf = protobuf;
    var gax = require_gax();
    var routingHeader = require_routingHeader();
    exports2.routingHeader = routingHeader;
    var status_1 = require_status();
    var google_auth_library_1 = require_src6();
    var operationsClient_1 = require_operationsClient();
    var createApiCall_1 = require_createApiCall();
    var fallbackRest = require_fallbackRest();
    var featureDetection_1 = require_featureDetection();
    var fallbackServiceStub_1 = require_fallbackServiceStub();
    var streaming_1 = require_streaming();
    var util_1 = require_util4();
    var IamProtos = require_iam_service();
    exports2.IamProtos = IamProtos;
    var LocationProtos = require_locations();
    exports2.LocationProtos = LocationProtos;
    var operationsProtos = require_operations();
    exports2.operationsProtos = operationsProtos;
    var pathTemplate_1 = require_pathTemplate();
    Object.defineProperty(exports2, "PathTemplate", { enumerable: true, get: function() {
      return pathTemplate_1.PathTemplate;
    } });
    var gax_1 = require_gax();
    Object.defineProperty(exports2, "CallSettings", { enumerable: true, get: function() {
      return gax_1.CallSettings;
    } });
    Object.defineProperty(exports2, "constructSettings", { enumerable: true, get: function() {
      return gax_1.constructSettings;
    } });
    Object.defineProperty(exports2, "RetryOptions", { enumerable: true, get: function() {
      return gax_1.RetryOptions;
    } });
    Object.defineProperty(exports2, "createDefaultBackoffSettings", { enumerable: true, get: function() {
      return gax_1.createDefaultBackoffSettings;
    } });
    exports2.version = require_package3().version + "-fallback";
    var descriptor_1 = require_descriptor();
    Object.defineProperty(exports2, "BundleDescriptor", { enumerable: true, get: function() {
      return descriptor_1.BundleDescriptor;
    } });
    Object.defineProperty(exports2, "LongrunningDescriptor", { enumerable: true, get: function() {
      return descriptor_1.LongrunningDescriptor;
    } });
    Object.defineProperty(exports2, "PageDescriptor", { enumerable: true, get: function() {
      return descriptor_1.PageDescriptor;
    } });
    Object.defineProperty(exports2, "StreamDescriptor", { enumerable: true, get: function() {
      return descriptor_1.StreamDescriptor;
    } });
    var streaming_2 = require_streaming();
    Object.defineProperty(exports2, "StreamType", { enumerable: true, get: function() {
      return streaming_2.StreamType;
    } });
    var operationsClient_2 = require_operationsClient();
    Object.defineProperty(exports2, "OperationsClient", { enumerable: true, get: function() {
      return operationsClient_2.OperationsClient;
    } });
    var iamService_1 = require_iamService();
    Object.defineProperty(exports2, "IamClient", { enumerable: true, get: function() {
      return iamService_1.IamClient;
    } });
    var locationService_1 = require_locationService();
    Object.defineProperty(exports2, "LocationsClient", { enumerable: true, get: function() {
      return locationService_1.LocationsClient;
    } });
    exports2.defaultToObjectOptions = {
      keepCase: false,
      longs: String,
      enums: String,
      defaults: true,
      oneofs: true
    };
    var CLIENT_VERSION_HEADER = "x-goog-api-client";
    var GrpcClient = class {
      /**
       * In rare cases users might need to deallocate all memory consumed by loaded protos.
       * This method will delete the proto cache content.
       */
      static clearProtoCache() {
        GrpcClient.protoCache.clear();
      }
      /**
       * gRPC-fallback version of GrpcClient
       * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).
       *
       * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library
       *  to use in Node.js. Required for browser, optional for Node.js.
       * @constructor
       */
      constructor(options = {}) {
        var _a;
        if (!(0, featureDetection_1.isNodeJS)()) {
          if (!options.auth) {
            throw new Error(JSON.stringify(options) + "You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.");
          }
          this.auth = options.auth;
        } else {
          this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);
        }
        this.fallback = options.fallback ? true : false;
        this.grpcVersion = require_package3().version;
        this.httpRules = options.httpRules;
        this.numericEnums = (_a = options.numericEnums) !== null && _a !== void 0 ? _a : false;
      }
      /**
       * gRPC-fallback version of loadProto
       * Loads the protobuf root object from a JSON object created from a proto file
       * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js
       * @returns {Object} Root namespace of proto JSON
       */
      loadProto(jsonObject) {
        const rootObject = protobuf.Root.fromJSON(jsonObject);
        return rootObject;
      }
      loadProtoJSON(json, ignoreCache = false) {
        const hash = objectHash(JSON.stringify(json)).toString();
        const cached = GrpcClient.protoCache.get(hash);
        if (cached && !ignoreCache) {
          return cached;
        }
        const root = protobuf.Root.fromJSON(json);
        GrpcClient.protoCache.set(hash, root);
        return root;
      }
      static getServiceMethods(service) {
        const methods = {};
        for (const [methodName, methodObject] of Object.entries(service.methods)) {
          const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);
          methods[methodNameLowerCamelCase] = methodObject;
        }
        return methods;
      }
      /**
       * gRPC-fallback version of constructSettings
       * A wrapper of {@link constructSettings} function under the gRPC context.
       *
       * Most of parameters are common among constructSettings, please take a look.
       * @param {string} serviceName - The fullly-qualified name of the service.
       * @param {Object} clientConfig - A dictionary of the client config.
       * @param {Object} configOverrides - A dictionary of overriding configs.
       * @param {Object} headers - A dictionary of additional HTTP header name to
       *   its value.
       * @return {Object} A mapping of method names to CallSettings.
       */
      constructSettings(serviceName, clientConfig, configOverrides, headers) {
        function buildMetadata(abTests, moreHeaders) {
          const metadata = {};
          if (!headers) {
            headers = {};
          }
          for (const key in headers) {
            metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];
          }
          const clientVersions = [];
          if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {
            clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(" "));
          }
          clientVersions.push(`grpc-web/${exports2.version}`);
          metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(" ")];
          if (!moreHeaders) {
            return metadata;
          }
          for (const key in moreHeaders) {
            if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {
              const value = moreHeaders[key];
              if (Array.isArray(value)) {
                if (metadata[key] === void 0) {
                  metadata[key] = value;
                } else {
                  if (Array.isArray(metadata[key])) {
                    metadata[key].push(...value);
                  } else {
                    throw new Error(`Can not add value ${value} to the call metadata.`);
                  }
                }
              } else {
                metadata[key] = [value];
              }
            }
          }
          return metadata;
        }
        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });
      }
      /**
       * gRPC-fallback version of createStub
       * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance
       *
       * @param {function} CreateStub - The constructor function of the stub.
       * @param {Object} service - A protobufjs Service object (as returned by lookupService)
       * @param {Object} opts - Connection options, as described below.
       * @param {string} opts.servicePath - The hostname of the API endpoint service.
       * @param {number} opts.port - The port of the service.
       * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API
       */
      async createStub(service, opts, customServicePath) {
        if (!this.authClient) {
          if (this.auth && "getClient" in this.auth) {
            this.authClient = await this.auth.getClient();
          } else if (this.auth && "getRequestHeaders" in this.auth) {
            this.authClient = this.auth;
          }
        }
        if (!this.authClient) {
          throw new Error("No authentication was provided");
        }
        service.resolveAll();
        const methods = GrpcClient.getServiceMethods(service);
        const protocol = opts.protocol || "https";
        let servicePath = opts.servicePath;
        if (!servicePath && service.options && service.options["(google.api.default_host)"]) {
          servicePath = service.options["(google.api.default_host)"];
        }
        if (!servicePath) {
          throw new Error(`Cannot determine service API path for service ${service.name}.`);
        }
        let servicePort;
        const match = servicePath.match(/^(.*):(\d+)$/);
        if (match) {
          servicePath = match[1];
          servicePort = parseInt(match[2]);
        }
        if (opts.port) {
          servicePort = opts.port;
        } else if (!servicePort) {
          servicePort = 443;
        }
        const encoder = fallbackRest.encodeRequest;
        const decoder = fallbackRest.decodeResponse;
        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder, this.numericEnums);
        return serviceStub;
      }
      /**
       * Creates a 'bytelength' function for a given proto message class.
       *
       * See {@link BundleDescriptor} about the meaning of the return value.
       *
       * @param {function} message - a constructor function that is generated by
       *   protobuf.js. Assumes 'encoder' field in the message.
       * @return {function(Object):number} - a function to compute the byte length
       *   for an object.
       */
      static createByteLengthFunction(message) {
        return gax.createByteLengthFunction(message);
      }
    };
    exports2.GrpcClient = GrpcClient;
    GrpcClient.protoCache = /* @__PURE__ */ new Map();
    function lro(options) {
      options = Object.assign({ scopes: [] }, options);
      if (options.protoJson) {
        options = Object.assign(options, { fallback: true });
      }
      const gaxGrpc = new GrpcClient(options);
      return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);
    }
    exports2.lro = lro;
    function createApiCall(func, settings, descriptor, _fallback) {
      if (descriptor && "streaming" in descriptor && descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {
        return () => {
          throw new Error("The REST transport currently does not support client-streaming or bidi-stream calls.");
        };
      }
      if (descriptor && "streaming" in descriptor && !(0, featureDetection_1.isNodeJS)()) {
        return () => {
          throw new Error("Server streaming over the REST transport is only supported in Node.js.");
        };
      }
      return (0, createApiCall_1.createApiCall)(func, settings, descriptor);
    }
    exports2.createApiCall = createApiCall;
    exports2.protobufMinimal = require_minimal2();
    var warnings_1 = require_warnings();
    Object.defineProperty(exports2, "warn", { enumerable: true, get: function() {
      return warnings_1.warn;
    } });
    var longrunning_1 = require_longrunning();
    Object.defineProperty(exports2, "Operation", { enumerable: true, get: function() {
      return longrunning_1.Operation;
    } });
    Object.defineProperty(exports2, "operation", { enumerable: true, get: function() {
      return longrunning_1.operation;
    } });
    var googleError_1 = require_googleError();
    Object.defineProperty(exports2, "GoogleError", { enumerable: true, get: function() {
      return googleError_1.GoogleError;
    } });
    var fallback = module2.exports;
    exports2.fallback = fallback;
  }
});

// node_modules/@google-cloud/translate/build/src/v3/translation_service_client.js
var require_translation_service_client = __commonJS({
  "node_modules/@google-cloud/translate/build/src/v3/translation_service_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TranslationServiceClient = void 0;
    var jsonProtos = require_protos();
    var gapicConfig = require_translation_service_client_config();
    var version = require_package2().version;
    var TranslationServiceClient = class {
      /**
       * Construct an instance of TranslationServiceClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
       *     For more information, please check the
       *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
       * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
       *     need to avoid loading the default gRPC version and want to use the fallback
       *     HTTP implementation. Load only fallback version and pass it to the constructor:
       *     ```
       *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
       *     const client = new TranslationServiceClient({fallback: true}, gax);
       *     ```
       */
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        opts.numericEnums = true;
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_fallback();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        this.pathTemplates = {
          glossaryPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/locations/{location}/glossaries/{glossary}"),
          locationPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/locations/{location}")
        };
        this.descriptors.page = {
          listGlossaries: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "glossaries")
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        const lroOptions = {
          auth: this.auth,
          grpc: "grpc" in this._gaxGrpc ? this._gaxGrpc.grpc : void 0
        };
        if (opts.fallback) {
          lroOptions.protoJson = protoFilesRoot;
          lroOptions.httpRules = [
            {
              selector: "google.cloud.location.Locations.GetLocation",
              get: "/v3/{name=projects/*/locations/*}"
            },
            {
              selector: "google.cloud.location.Locations.ListLocations",
              get: "/v3/{name=projects/*}/locations"
            },
            {
              selector: "google.longrunning.Operations.CancelOperation",
              post: "/v3/{name=projects/*/locations/*/operations/*}:cancel",
              body: "*"
            },
            {
              selector: "google.longrunning.Operations.DeleteOperation",
              delete: "/v3/{name=projects/*/locations/*/operations/*}"
            },
            {
              selector: "google.longrunning.Operations.GetOperation",
              get: "/v3/{name=projects/*/locations/*/operations/*}"
            },
            {
              selector: "google.longrunning.Operations.ListOperations",
              get: "/v3/{name=projects/*/locations/*}/operations"
            },
            {
              selector: "google.longrunning.Operations.WaitOperation",
              post: "/v3/{name=projects/*/locations/*/operations/*}:wait",
              body: "*"
            }
          ];
        }
        this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
        const batchTranslateTextResponse = protoFilesRoot.lookup(".google.cloud.translation.v3.BatchTranslateResponse");
        const batchTranslateTextMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3.BatchTranslateMetadata");
        const batchTranslateDocumentResponse = protoFilesRoot.lookup(".google.cloud.translation.v3.BatchTranslateDocumentResponse");
        const batchTranslateDocumentMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3.BatchTranslateDocumentMetadata");
        const createGlossaryResponse = protoFilesRoot.lookup(".google.cloud.translation.v3.Glossary");
        const createGlossaryMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3.CreateGlossaryMetadata");
        const deleteGlossaryResponse = protoFilesRoot.lookup(".google.cloud.translation.v3.DeleteGlossaryResponse");
        const deleteGlossaryMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3.DeleteGlossaryMetadata");
        this.descriptors.longrunning = {
          batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),
          batchTranslateDocument: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateDocumentResponse.decode.bind(batchTranslateDocumentResponse), batchTranslateDocumentMetadata.decode.bind(batchTranslateDocumentMetadata)),
          createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),
          deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))
        };
        this._defaults = this._gaxGrpc.constructSettings("google.cloud.translation.v3.TranslationService", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.translationServiceStub) {
          return this.translationServiceStub;
        }
        this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.translation.v3.TranslationService") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.translation.v3.TranslationService
        ), this._opts, this._providedCustomServicePath);
        const translationServiceStubMethods = [
          "translateText",
          "detectLanguage",
          "getSupportedLanguages",
          "translateDocument",
          "batchTranslateText",
          "batchTranslateDocument",
          "createGlossary",
          "listGlossaries",
          "getGlossary",
          "deleteGlossary"
        ];
        for (const methodName of translationServiceStubMethods) {
          const callPromise = this.translationServiceStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.translationServiceStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "translate.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "translate.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud-translation"
        ];
      }
      /**
       * Return the project ID used by this class.
       * @returns {Promise} A promise that resolves to string containing the project ID.
       */
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      translateText(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.translateText(request, options, callback);
      }
      detectLanguage(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.detectLanguage(request, options, callback);
      }
      getSupportedLanguages(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getSupportedLanguages(request, options, callback);
      }
      translateDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.translateDocument(request, options, callback);
      }
      getGlossary(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getGlossary(request, options, callback);
      }
      batchTranslateText(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchTranslateText(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `batchTranslateText()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3/translation_service.batch_translate_text.js</caption>
       * region_tag:translate_v3_generated_TranslationService_BatchTranslateText_async
       */
      async checkBatchTranslateTextProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.batchTranslateText, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      batchTranslateDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchTranslateDocument(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `batchTranslateDocument()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3/translation_service.batch_translate_document.js</caption>
       * region_tag:translate_v3_generated_TranslationService_BatchTranslateDocument_async
       */
      async checkBatchTranslateDocumentProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.batchTranslateDocument, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      createGlossary(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.createGlossary(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `createGlossary()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3/translation_service.create_glossary.js</caption>
       * region_tag:translate_v3_generated_TranslationService_CreateGlossary_async
       */
      async checkCreateGlossaryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createGlossary, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      deleteGlossary(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.deleteGlossary(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `deleteGlossary()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3/translation_service.delete_glossary.js</caption>
       * region_tag:translate_v3_generated_TranslationService_DeleteGlossary_async
       */
      async checkDeleteGlossaryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteGlossary, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      listGlossaries(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.listGlossaries(request, options, callback);
      }
      /**
       * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.parent
       *   Required. The name of the project from which to list all of the glossaries.
       * @param {number} [request.pageSize]
       *   Optional. Requested page size. The server may return fewer glossaries than
       *   requested. If unspecified, the server picks an appropriate default.
       * @param {string} [request.pageToken]
       *   Optional. A token identifying a page of results the server should return.
       *   Typically, this is the value of [ListGlossariesResponse.next_page_token]
       *   returned from the previous call to `ListGlossaries` method.
       *   The first page is returned if `page_token`is empty or missing.
       * @param {string} [request.filter]
       *   Optional. Filter specifying constraints of a list operation.
       *   Specify the constraint by the format of "key=value", where key must be
       *   "src" or "tgt", and the value must be a valid language code.
       *   For multiple restrictions, concatenate them by "AND" (uppercase only),
       *   such as: "src=en-US AND tgt=zh-CN". Notice that the exact match is used
       *   here, which means using 'en-US' and 'en' can lead to different results,
       *   which depends on the language code you used when you create the glossary.
       *   For the unidirectional glossaries, the "src" and "tgt" add restrictions
       *   on the source and target language code separately.
       *   For the equivalent term set glossaries, the "src" and/or "tgt" add
       *   restrictions on the term set.
       *   For example: "src=en-US AND tgt=zh-CN" will only pick the unidirectional
       *   glossaries which exactly match the source language code as "en-US" and the
       *   target language code "zh-CN", but all equivalent term set glossaries which
       *   contain "en-US" and "zh-CN" in their language set will be picked.
       *   If missing, no filtering is performed.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Stream}
       *   An object stream which emits an object representing {@link protos.google.cloud.translation.v3.Glossary|Glossary} on 'data' event.
       *   The client library will perform auto-pagination by default: it will call the API as many
       *   times as needed. Note that it can affect your quota.
       *   We recommend using `listGlossariesAsync()`
       *   method described below for async iteration which you can stop as needed.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
       *   for more details and examples.
       */
      listGlossariesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listGlossaries"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listGlossaries.createStream(this.innerApiCalls.listGlossaries, request, callSettings);
      }
      /**
       * Equivalent to `listGlossaries`, but returns an iterable object.
       *
       * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.parent
       *   Required. The name of the project from which to list all of the glossaries.
       * @param {number} [request.pageSize]
       *   Optional. Requested page size. The server may return fewer glossaries than
       *   requested. If unspecified, the server picks an appropriate default.
       * @param {string} [request.pageToken]
       *   Optional. A token identifying a page of results the server should return.
       *   Typically, this is the value of [ListGlossariesResponse.next_page_token]
       *   returned from the previous call to `ListGlossaries` method.
       *   The first page is returned if `page_token`is empty or missing.
       * @param {string} [request.filter]
       *   Optional. Filter specifying constraints of a list operation.
       *   Specify the constraint by the format of "key=value", where key must be
       *   "src" or "tgt", and the value must be a valid language code.
       *   For multiple restrictions, concatenate them by "AND" (uppercase only),
       *   such as: "src=en-US AND tgt=zh-CN". Notice that the exact match is used
       *   here, which means using 'en-US' and 'en' can lead to different results,
       *   which depends on the language code you used when you create the glossary.
       *   For the unidirectional glossaries, the "src" and "tgt" add restrictions
       *   on the source and target language code separately.
       *   For the equivalent term set glossaries, the "src" and/or "tgt" add
       *   restrictions on the term set.
       *   For example: "src=en-US AND tgt=zh-CN" will only pick the unidirectional
       *   glossaries which exactly match the source language code as "en-US" and the
       *   target language code "zh-CN", but all equivalent term set glossaries which
       *   contain "en-US" and "zh-CN" in their language set will be picked.
       *   If missing, no filtering is performed.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Object}
       *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
       *   When you iterate the returned iterable, each element will be an object representing
       *   {@link protos.google.cloud.translation.v3.Glossary|Glossary}. The API will be called under the hood as needed, once per the page,
       *   so you can stop the iteration when you don't need more results.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3/translation_service.list_glossaries.js</caption>
       * region_tag:translate_v3_generated_TranslationService_ListGlossaries_async
       */
      listGlossariesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listGlossaries"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listGlossaries.asyncIterate(this.innerApiCalls["listGlossaries"], request, callSettings);
      }
      // --------------------
      // -- Path templates --
      // --------------------
      /**
       * Return a fully-qualified glossary resource name string.
       *
       * @param {string} project
       * @param {string} location
       * @param {string} glossary
       * @returns {string} Resource name string.
       */
      glossaryPath(project, location, glossary) {
        return this.pathTemplates.glossaryPathTemplate.render({
          project,
          location,
          glossary
        });
      }
      /**
       * Parse the project from Glossary resource.
       *
       * @param {string} glossaryName
       *   A fully-qualified path representing Glossary resource.
       * @returns {string} A string representing the project.
       */
      matchProjectFromGlossaryName(glossaryName) {
        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;
      }
      /**
       * Parse the location from Glossary resource.
       *
       * @param {string} glossaryName
       *   A fully-qualified path representing Glossary resource.
       * @returns {string} A string representing the location.
       */
      matchLocationFromGlossaryName(glossaryName) {
        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;
      }
      /**
       * Parse the glossary from Glossary resource.
       *
       * @param {string} glossaryName
       *   A fully-qualified path representing Glossary resource.
       * @returns {string} A string representing the glossary.
       */
      matchGlossaryFromGlossaryName(glossaryName) {
        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;
      }
      /**
       * Return a fully-qualified location resource name string.
       *
       * @param {string} project
       * @param {string} location
       * @returns {string} Resource name string.
       */
      locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
          project,
          location
        });
      }
      /**
       * Parse the project from Location resource.
       *
       * @param {string} locationName
       *   A fully-qualified path representing Location resource.
       * @returns {string} A string representing the project.
       */
      matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
      }
      /**
       * Parse the location from Location resource.
       *
       * @param {string} locationName
       *   A fully-qualified path representing Location resource.
       * @returns {string} A string representing the location.
       */
      matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        if (this.translationServiceStub && !this._terminated) {
          return this.translationServiceStub.then((stub) => {
            this._terminated = true;
            stub.close();
            this.operationsClient.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.TranslationServiceClient = TranslationServiceClient;
  }
});

// node_modules/@google-cloud/translate/build/src/v3/index.js
var require_v32 = __commonJS({
  "node_modules/@google-cloud/translate/build/src/v3/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TranslationServiceClient = void 0;
    var translation_service_client_1 = require_translation_service_client();
    Object.defineProperty(exports2, "TranslationServiceClient", { enumerable: true, get: function() {
      return translation_service_client_1.TranslationServiceClient;
    } });
  }
});

// node_modules/@google-cloud/translate/build/src/v3beta1/translation_service_client_config.json
var require_translation_service_client_config2 = __commonJS({
  "node_modules/@google-cloud/translate/build/src/v3beta1/translation_service_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.translation.v3beta1.TranslationService": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            TranslateText: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            DetectLanguage: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            GetSupportedLanguages: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            TranslateDocument: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            BatchTranslateText: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            BatchTranslateDocument: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            CreateGlossary: {
              timeout_millis: 6e5,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            ListGlossaries: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            GetGlossary: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            DeleteGlossary: {
              timeout_millis: 6e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/translate/build/src/v3beta1/translation_service_client.js
var require_translation_service_client2 = __commonJS({
  "node_modules/@google-cloud/translate/build/src/v3beta1/translation_service_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TranslationServiceClient = void 0;
    var jsonProtos = require_protos();
    var gapicConfig = require_translation_service_client_config2();
    var version = require_package2().version;
    var TranslationServiceClient = class {
      /**
       * Construct an instance of TranslationServiceClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
       *     For more information, please check the
       *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
       * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
       *     need to avoid loading the default gRPC version and want to use the fallback
       *     HTTP implementation. Load only fallback version and pass it to the constructor:
       *     ```
       *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
       *     const client = new TranslationServiceClient({fallback: true}, gax);
       *     ```
       */
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        opts.numericEnums = true;
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_fallback();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        this.pathTemplates = {
          glossaryPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/locations/{location}/glossaries/{glossary}"),
          locationPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/locations/{location}")
        };
        this.descriptors.page = {
          listGlossaries: new this._gaxModule.PageDescriptor("pageToken", "nextPageToken", "glossaries")
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        const lroOptions = {
          auth: this.auth,
          grpc: "grpc" in this._gaxGrpc ? this._gaxGrpc.grpc : void 0
        };
        if (opts.fallback) {
          lroOptions.protoJson = protoFilesRoot;
          lroOptions.httpRules = [
            {
              selector: "google.cloud.location.Locations.GetLocation",
              get: "/v3beta1/{name=projects/*/locations/*}"
            },
            {
              selector: "google.cloud.location.Locations.ListLocations",
              get: "/v3beta1/{name=projects/*}/locations"
            },
            {
              selector: "google.longrunning.Operations.CancelOperation",
              post: "/v3beta1/{name=projects/*/locations/*/operations/*}:cancel",
              body: "*"
            },
            {
              selector: "google.longrunning.Operations.DeleteOperation",
              delete: "/v3beta1/{name=projects/*/locations/*/operations/*}"
            },
            {
              selector: "google.longrunning.Operations.GetOperation",
              get: "/v3beta1/{name=projects/*/locations/*/operations/*}"
            },
            {
              selector: "google.longrunning.Operations.ListOperations",
              get: "/v3beta1/{name=projects/*/locations/*}/operations"
            },
            {
              selector: "google.longrunning.Operations.WaitOperation",
              post: "/v3beta1/{name=projects/*/locations/*/operations/*}:wait",
              body: "*"
            }
          ];
        }
        this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
        const batchTranslateTextResponse = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.BatchTranslateResponse");
        const batchTranslateTextMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.BatchTranslateMetadata");
        const batchTranslateDocumentResponse = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.BatchTranslateDocumentResponse");
        const batchTranslateDocumentMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata");
        const createGlossaryResponse = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.Glossary");
        const createGlossaryMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.CreateGlossaryMetadata");
        const deleteGlossaryResponse = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.DeleteGlossaryResponse");
        const deleteGlossaryMetadata = protoFilesRoot.lookup(".google.cloud.translation.v3beta1.DeleteGlossaryMetadata");
        this.descriptors.longrunning = {
          batchTranslateText: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateTextResponse.decode.bind(batchTranslateTextResponse), batchTranslateTextMetadata.decode.bind(batchTranslateTextMetadata)),
          batchTranslateDocument: new this._gaxModule.LongrunningDescriptor(this.operationsClient, batchTranslateDocumentResponse.decode.bind(batchTranslateDocumentResponse), batchTranslateDocumentMetadata.decode.bind(batchTranslateDocumentMetadata)),
          createGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createGlossaryResponse.decode.bind(createGlossaryResponse), createGlossaryMetadata.decode.bind(createGlossaryMetadata)),
          deleteGlossary: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteGlossaryResponse.decode.bind(deleteGlossaryResponse), deleteGlossaryMetadata.decode.bind(deleteGlossaryMetadata))
        };
        this._defaults = this._gaxGrpc.constructSettings("google.cloud.translation.v3beta1.TranslationService", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.translationServiceStub) {
          return this.translationServiceStub;
        }
        this.translationServiceStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.translation.v3beta1.TranslationService") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.translation.v3beta1.TranslationService
        ), this._opts, this._providedCustomServicePath);
        const translationServiceStubMethods = [
          "translateText",
          "detectLanguage",
          "getSupportedLanguages",
          "translateDocument",
          "batchTranslateText",
          "batchTranslateDocument",
          "createGlossary",
          "listGlossaries",
          "getGlossary",
          "deleteGlossary"
        ];
        for (const methodName of translationServiceStubMethods) {
          const callPromise = this.translationServiceStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.translationServiceStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "translate.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "translate.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloud-translation"
        ];
      }
      /**
       * Return the project ID used by this class.
       * @returns {Promise} A promise that resolves to string containing the project ID.
       */
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      translateText(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.translateText(request, options, callback);
      }
      detectLanguage(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.detectLanguage(request, options, callback);
      }
      getSupportedLanguages(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getSupportedLanguages(request, options, callback);
      }
      translateDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.translateDocument(request, options, callback);
      }
      getGlossary(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.getGlossary(request, options, callback);
      }
      batchTranslateText(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchTranslateText(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `batchTranslateText()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3beta1/translation_service.batch_translate_text.js</caption>
       * region_tag:translate_v3beta1_generated_TranslationService_BatchTranslateText_async
       */
      async checkBatchTranslateTextProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.batchTranslateText, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      batchTranslateDocument(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.batchTranslateDocument(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `batchTranslateDocument()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3beta1/translation_service.batch_translate_document.js</caption>
       * region_tag:translate_v3beta1_generated_TranslationService_BatchTranslateDocument_async
       */
      async checkBatchTranslateDocumentProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.batchTranslateDocument, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      createGlossary(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.createGlossary(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `createGlossary()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3beta1/translation_service.create_glossary.js</caption>
       * region_tag:translate_v3beta1_generated_TranslationService_CreateGlossary_async
       */
      async checkCreateGlossaryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createGlossary, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      deleteGlossary(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          name: (_a = request.name) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.deleteGlossary(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `deleteGlossary()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3beta1/translation_service.delete_glossary.js</caption>
       * region_tag:translate_v3beta1_generated_TranslationService_DeleteGlossary_async
       */
      async checkDeleteGlossaryProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.deleteGlossary, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      listGlossaries(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.listGlossaries(request, options, callback);
      }
      /**
       * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.parent
       *   Required. The name of the project from which to list all of the glossaries.
       * @param {number} [request.pageSize]
       *   Optional. Requested page size. The server may return fewer glossaries than
       *   requested. If unspecified, the server picks an appropriate default.
       * @param {string} [request.pageToken]
       *   Optional. A token identifying a page of results the server should return.
       *   Typically, this is the value of [ListGlossariesResponse.next_page_token]
       *   returned from the previous call to `ListGlossaries` method.
       *   The first page is returned if `page_token`is empty or missing.
       * @param {string} [request.filter]
       *   Optional. Filter specifying constraints of a list operation.
       *   Specify the constraint by the format of "key=value", where key must be
       *   "src" or "tgt", and the value must be a valid language code.
       *   For multiple restrictions, concatenate them by "AND" (uppercase only),
       *   such as: "src=en-US AND tgt=zh-CN". Notice that the exact match is used
       *   here, which means using 'en-US' and 'en' can lead to different results,
       *   which depends on the language code you used when you create the glossary.
       *   For the unidirectional glossaries, the "src" and "tgt" add restrictions
       *   on the source and target language code separately.
       *   For the equivalent term set glossaries, the "src" and/or "tgt" add
       *   restrictions on the term set.
       *   For example: "src=en-US AND tgt=zh-CN" will only pick the unidirectional
       *   glossaries which exactly match the source language code as "en-US" and the
       *   target language code "zh-CN", but all equivalent term set glossaries which
       *   contain "en-US" and "zh-CN" in their language set will be picked.
       *   If missing, no filtering is performed.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Stream}
       *   An object stream which emits an object representing {@link protos.google.cloud.translation.v3beta1.Glossary|Glossary} on 'data' event.
       *   The client library will perform auto-pagination by default: it will call the API as many
       *   times as needed. Note that it can affect your quota.
       *   We recommend using `listGlossariesAsync()`
       *   method described below for async iteration which you can stop as needed.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
       *   for more details and examples.
       */
      listGlossariesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listGlossaries"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listGlossaries.createStream(this.innerApiCalls.listGlossaries, request, callSettings);
      }
      /**
       * Equivalent to `listGlossaries`, but returns an iterable object.
       *
       * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.parent
       *   Required. The name of the project from which to list all of the glossaries.
       * @param {number} [request.pageSize]
       *   Optional. Requested page size. The server may return fewer glossaries than
       *   requested. If unspecified, the server picks an appropriate default.
       * @param {string} [request.pageToken]
       *   Optional. A token identifying a page of results the server should return.
       *   Typically, this is the value of [ListGlossariesResponse.next_page_token]
       *   returned from the previous call to `ListGlossaries` method.
       *   The first page is returned if `page_token`is empty or missing.
       * @param {string} [request.filter]
       *   Optional. Filter specifying constraints of a list operation.
       *   Specify the constraint by the format of "key=value", where key must be
       *   "src" or "tgt", and the value must be a valid language code.
       *   For multiple restrictions, concatenate them by "AND" (uppercase only),
       *   such as: "src=en-US AND tgt=zh-CN". Notice that the exact match is used
       *   here, which means using 'en-US' and 'en' can lead to different results,
       *   which depends on the language code you used when you create the glossary.
       *   For the unidirectional glossaries, the "src" and "tgt" add restrictions
       *   on the source and target language code separately.
       *   For the equivalent term set glossaries, the "src" and/or "tgt" add
       *   restrictions on the term set.
       *   For example: "src=en-US AND tgt=zh-CN" will only pick the unidirectional
       *   glossaries which exactly match the source language code as "en-US" and the
       *   target language code "zh-CN", but all equivalent term set glossaries which
       *   contain "en-US" and "zh-CN" in their language set will be picked.
       *   If missing, no filtering is performed.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Object}
       *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
       *   When you iterate the returned iterable, each element will be an object representing
       *   {@link protos.google.cloud.translation.v3beta1.Glossary|Glossary}. The API will be called under the hood as needed, once per the page,
       *   so you can stop the iteration when you don't need more results.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v3beta1/translation_service.list_glossaries.js</caption>
       * region_tag:translate_v3beta1_generated_TranslationService_ListGlossaries_async
       */
      listGlossariesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        const defaultCallSettings = this._defaults["listGlossaries"];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listGlossaries.asyncIterate(this.innerApiCalls["listGlossaries"], request, callSettings);
      }
      // --------------------
      // -- Path templates --
      // --------------------
      /**
       * Return a fully-qualified glossary resource name string.
       *
       * @param {string} project
       * @param {string} location
       * @param {string} glossary
       * @returns {string} Resource name string.
       */
      glossaryPath(project, location, glossary) {
        return this.pathTemplates.glossaryPathTemplate.render({
          project,
          location,
          glossary
        });
      }
      /**
       * Parse the project from Glossary resource.
       *
       * @param {string} glossaryName
       *   A fully-qualified path representing Glossary resource.
       * @returns {string} A string representing the project.
       */
      matchProjectFromGlossaryName(glossaryName) {
        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).project;
      }
      /**
       * Parse the location from Glossary resource.
       *
       * @param {string} glossaryName
       *   A fully-qualified path representing Glossary resource.
       * @returns {string} A string representing the location.
       */
      matchLocationFromGlossaryName(glossaryName) {
        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).location;
      }
      /**
       * Parse the glossary from Glossary resource.
       *
       * @param {string} glossaryName
       *   A fully-qualified path representing Glossary resource.
       * @returns {string} A string representing the glossary.
       */
      matchGlossaryFromGlossaryName(glossaryName) {
        return this.pathTemplates.glossaryPathTemplate.match(glossaryName).glossary;
      }
      /**
       * Return a fully-qualified location resource name string.
       *
       * @param {string} project
       * @param {string} location
       * @returns {string} Resource name string.
       */
      locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
          project,
          location
        });
      }
      /**
       * Parse the project from Location resource.
       *
       * @param {string} locationName
       *   A fully-qualified path representing Location resource.
       * @returns {string} A string representing the project.
       */
      matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
      }
      /**
       * Parse the location from Location resource.
       *
       * @param {string} locationName
       *   A fully-qualified path representing Location resource.
       * @returns {string} A string representing the location.
       */
      matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        if (this.translationServiceStub && !this._terminated) {
          return this.translationServiceStub.then((stub) => {
            this._terminated = true;
            stub.close();
            this.operationsClient.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.TranslationServiceClient = TranslationServiceClient;
  }
});

// node_modules/@google-cloud/translate/build/src/v3beta1/index.js
var require_v3beta1 = __commonJS({
  "node_modules/@google-cloud/translate/build/src/v3beta1/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TranslationServiceClient = void 0;
    var translation_service_client_1 = require_translation_service_client2();
    Object.defineProperty(exports2, "TranslationServiceClient", { enumerable: true, get: function() {
      return translation_service_client_1.TranslationServiceClient;
    } });
  }
});

// node_modules/google-gax/build/src/protobuf.js
var require_protobuf = __commonJS({
  "node_modules/google-gax/build/src/protobuf.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.protobufMinimal = void 0;
    exports2.protobufMinimal = require_minimal2();
  }
});

// node_modules/@google-cloud/translate/build/protos/protos.js
var require_protos2 = __commonJS({
  "node_modules/@google-cloud/translate/build/protos/protos.js"(exports2, module2) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd)
        define(["protobufjs/minimal"], factory);
      else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2.exports)
        module2.exports = factory(require_protobuf().protobufMinimal);
    })(exports2, function($protobuf) {
      "use strict";
      var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
      var $root = $protobuf.roots._google_cloud_translate_protos || ($protobuf.roots._google_cloud_translate_protos = {});
      $root.google = function() {
        var google = {};
        google.cloud = function() {
          var cloud = {};
          cloud.translation = function() {
            var translation = {};
            translation.v3 = function() {
              var v3 = {};
              v3.TranslationService = function() {
                function TranslationService(rpcImpl, requestDelimited, responseDelimited) {
                  $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
                (TranslationService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TranslationService;
                TranslationService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                  return new this(rpcImpl, requestDelimited, responseDelimited);
                };
                Object.defineProperty(TranslationService.prototype.translateText = function translateText(request, callback) {
                  return this.rpcCall(translateText, $root.google.cloud.translation.v3.TranslateTextRequest, $root.google.cloud.translation.v3.TranslateTextResponse, request, callback);
                }, "name", { value: "TranslateText" });
                Object.defineProperty(TranslationService.prototype.detectLanguage = function detectLanguage(request, callback) {
                  return this.rpcCall(detectLanguage, $root.google.cloud.translation.v3.DetectLanguageRequest, $root.google.cloud.translation.v3.DetectLanguageResponse, request, callback);
                }, "name", { value: "DetectLanguage" });
                Object.defineProperty(TranslationService.prototype.getSupportedLanguages = function getSupportedLanguages(request, callback) {
                  return this.rpcCall(getSupportedLanguages, $root.google.cloud.translation.v3.GetSupportedLanguagesRequest, $root.google.cloud.translation.v3.SupportedLanguages, request, callback);
                }, "name", { value: "GetSupportedLanguages" });
                Object.defineProperty(TranslationService.prototype.translateDocument = function translateDocument(request, callback) {
                  return this.rpcCall(translateDocument, $root.google.cloud.translation.v3.TranslateDocumentRequest, $root.google.cloud.translation.v3.TranslateDocumentResponse, request, callback);
                }, "name", { value: "TranslateDocument" });
                Object.defineProperty(TranslationService.prototype.batchTranslateText = function batchTranslateText(request, callback) {
                  return this.rpcCall(batchTranslateText, $root.google.cloud.translation.v3.BatchTranslateTextRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "BatchTranslateText" });
                Object.defineProperty(TranslationService.prototype.batchTranslateDocument = function batchTranslateDocument(request, callback) {
                  return this.rpcCall(batchTranslateDocument, $root.google.cloud.translation.v3.BatchTranslateDocumentRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "BatchTranslateDocument" });
                Object.defineProperty(TranslationService.prototype.createGlossary = function createGlossary(request, callback) {
                  return this.rpcCall(createGlossary, $root.google.cloud.translation.v3.CreateGlossaryRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "CreateGlossary" });
                Object.defineProperty(TranslationService.prototype.listGlossaries = function listGlossaries(request, callback) {
                  return this.rpcCall(listGlossaries, $root.google.cloud.translation.v3.ListGlossariesRequest, $root.google.cloud.translation.v3.ListGlossariesResponse, request, callback);
                }, "name", { value: "ListGlossaries" });
                Object.defineProperty(TranslationService.prototype.getGlossary = function getGlossary(request, callback) {
                  return this.rpcCall(getGlossary, $root.google.cloud.translation.v3.GetGlossaryRequest, $root.google.cloud.translation.v3.Glossary, request, callback);
                }, "name", { value: "GetGlossary" });
                Object.defineProperty(TranslationService.prototype.deleteGlossary = function deleteGlossary(request, callback) {
                  return this.rpcCall(deleteGlossary, $root.google.cloud.translation.v3.DeleteGlossaryRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "DeleteGlossary" });
                return TranslationService;
              }();
              v3.TranslateTextGlossaryConfig = function() {
                function TranslateTextGlossaryConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateTextGlossaryConfig.prototype.glossary = "";
                TranslateTextGlossaryConfig.prototype.ignoreCase = false;
                TranslateTextGlossaryConfig.create = function create(properties) {
                  return new TranslateTextGlossaryConfig(properties);
                };
                TranslateTextGlossaryConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.glossary != null && Object.hasOwnProperty.call(message, "glossary"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.glossary);
                  if (message.ignoreCase != null && Object.hasOwnProperty.call(message, "ignoreCase"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).bool(message.ignoreCase);
                  return writer;
                };
                TranslateTextGlossaryConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateTextGlossaryConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.TranslateTextGlossaryConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.glossary = reader.string();
                        break;
                      }
                      case 2: {
                        message.ignoreCase = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateTextGlossaryConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateTextGlossaryConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.glossary != null && message.hasOwnProperty("glossary")) {
                    if (!$util.isString(message.glossary))
                      return "glossary: string expected";
                  }
                  if (message.ignoreCase != null && message.hasOwnProperty("ignoreCase")) {
                    if (typeof message.ignoreCase !== "boolean")
                      return "ignoreCase: boolean expected";
                  }
                  return null;
                };
                TranslateTextGlossaryConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.TranslateTextGlossaryConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.TranslateTextGlossaryConfig();
                  if (object.glossary != null)
                    message.glossary = String(object.glossary);
                  if (object.ignoreCase != null)
                    message.ignoreCase = Boolean(object.ignoreCase);
                  return message;
                };
                TranslateTextGlossaryConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.glossary = "";
                    object.ignoreCase = false;
                  }
                  if (message.glossary != null && message.hasOwnProperty("glossary"))
                    object.glossary = message.glossary;
                  if (message.ignoreCase != null && message.hasOwnProperty("ignoreCase"))
                    object.ignoreCase = message.ignoreCase;
                  return object;
                };
                TranslateTextGlossaryConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateTextGlossaryConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.TranslateTextGlossaryConfig";
                };
                return TranslateTextGlossaryConfig;
              }();
              v3.TranslateTextRequest = function() {
                function TranslateTextRequest(properties) {
                  this.contents = [];
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateTextRequest.prototype.contents = $util.emptyArray;
                TranslateTextRequest.prototype.mimeType = "";
                TranslateTextRequest.prototype.sourceLanguageCode = "";
                TranslateTextRequest.prototype.targetLanguageCode = "";
                TranslateTextRequest.prototype.parent = "";
                TranslateTextRequest.prototype.model = "";
                TranslateTextRequest.prototype.glossaryConfig = null;
                TranslateTextRequest.prototype.labels = $util.emptyObject;
                TranslateTextRequest.create = function create(properties) {
                  return new TranslateTextRequest(properties);
                };
                TranslateTextRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.contents != null && message.contents.length)
                    for (var i = 0; i < message.contents.length; ++i)
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(message.contents[i]);
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.mimeType);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCode != null && Object.hasOwnProperty.call(message, "targetLanguageCode"))
                    writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).string(message.targetLanguageCode);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 7, wireType 2 =*/
                      58
                    ).fork()).ldelim();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 8, wireType 2 =*/
                      66
                    ).string(message.parent);
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 10, wireType 2 =*/
                        82
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  return writer;
                };
                TranslateTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateTextRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.TranslateTextRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.contents && message.contents.length))
                          message.contents = [];
                        message.contents.push(reader.string());
                        break;
                      }
                      case 3: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 4: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 5: {
                        message.targetLanguageCode = reader.string();
                        break;
                      }
                      case 8: {
                        message.parent = reader.string();
                        break;
                      }
                      case 6: {
                        message.model = reader.string();
                        break;
                      }
                      case 7: {
                        message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 10: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateTextRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateTextRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.contents != null && message.hasOwnProperty("contents")) {
                    if (!Array.isArray(message.contents))
                      return "contents: array expected";
                    for (var i = 0; i < message.contents.length; ++i)
                      if (!$util.isString(message.contents[i]))
                        return "contents: string[] expected";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode")) {
                    if (!$util.isString(message.targetLanguageCode))
                      return "targetLanguageCode: string expected";
                  }
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  return null;
                };
                TranslateTextRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.TranslateTextRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.TranslateTextRequest();
                  if (object.contents) {
                    if (!Array.isArray(object.contents))
                      throw TypeError(".google.cloud.translation.v3.TranslateTextRequest.contents: array expected");
                    message.contents = [];
                    for (var i = 0; i < object.contents.length; ++i)
                      message.contents[i] = String(object.contents[i]);
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCode != null)
                    message.targetLanguageCode = String(object.targetLanguageCode);
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateTextRequest.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateTextRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  return message;
                };
                TranslateTextRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.contents = [];
                  if (options.objects || options.defaults)
                    object.labels = {};
                  if (options.defaults) {
                    object.mimeType = "";
                    object.sourceLanguageCode = "";
                    object.targetLanguageCode = "";
                    object.model = "";
                    object.glossaryConfig = null;
                    object.parent = "";
                  }
                  if (message.contents && message.contents.length) {
                    object.contents = [];
                    for (var j = 0; j < message.contents.length; ++j)
                      object.contents[j] = message.contents[j];
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode"))
                    object.targetLanguageCode = message.targetLanguageCode;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  var keys2;
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  return object;
                };
                TranslateTextRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.TranslateTextRequest";
                };
                return TranslateTextRequest;
              }();
              v3.TranslateTextResponse = function() {
                function TranslateTextResponse(properties) {
                  this.translations = [];
                  this.glossaryTranslations = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateTextResponse.prototype.translations = $util.emptyArray;
                TranslateTextResponse.prototype.glossaryTranslations = $util.emptyArray;
                TranslateTextResponse.create = function create(properties) {
                  return new TranslateTextResponse(properties);
                };
                TranslateTextResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.translations != null && message.translations.length)
                    for (var i = 0; i < message.translations.length; ++i)
                      $root.google.cloud.translation.v3.Translation.encode(message.translations[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  if (message.glossaryTranslations != null && message.glossaryTranslations.length)
                    for (var i = 0; i < message.glossaryTranslations.length; ++i)
                      $root.google.cloud.translation.v3.Translation.encode(message.glossaryTranslations[i], writer.uint32(
                        /* id 3, wireType 2 =*/
                        26
                      ).fork()).ldelim();
                  return writer;
                };
                TranslateTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateTextResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.TranslateTextResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.translations && message.translations.length))
                          message.translations = [];
                        message.translations.push($root.google.cloud.translation.v3.Translation.decode(reader, reader.uint32()));
                        break;
                      }
                      case 3: {
                        if (!(message.glossaryTranslations && message.glossaryTranslations.length))
                          message.glossaryTranslations = [];
                        message.glossaryTranslations.push($root.google.cloud.translation.v3.Translation.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateTextResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateTextResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.translations != null && message.hasOwnProperty("translations")) {
                    if (!Array.isArray(message.translations))
                      return "translations: array expected";
                    for (var i = 0; i < message.translations.length; ++i) {
                      var error = $root.google.cloud.translation.v3.Translation.verify(message.translations[i]);
                      if (error)
                        return "translations." + error;
                    }
                  }
                  if (message.glossaryTranslations != null && message.hasOwnProperty("glossaryTranslations")) {
                    if (!Array.isArray(message.glossaryTranslations))
                      return "glossaryTranslations: array expected";
                    for (var i = 0; i < message.glossaryTranslations.length; ++i) {
                      var error = $root.google.cloud.translation.v3.Translation.verify(message.glossaryTranslations[i]);
                      if (error)
                        return "glossaryTranslations." + error;
                    }
                  }
                  return null;
                };
                TranslateTextResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.TranslateTextResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3.TranslateTextResponse();
                  if (object.translations) {
                    if (!Array.isArray(object.translations))
                      throw TypeError(".google.cloud.translation.v3.TranslateTextResponse.translations: array expected");
                    message.translations = [];
                    for (var i = 0; i < object.translations.length; ++i) {
                      if (typeof object.translations[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3.TranslateTextResponse.translations: object expected");
                      message.translations[i] = $root.google.cloud.translation.v3.Translation.fromObject(object.translations[i]);
                    }
                  }
                  if (object.glossaryTranslations) {
                    if (!Array.isArray(object.glossaryTranslations))
                      throw TypeError(".google.cloud.translation.v3.TranslateTextResponse.glossaryTranslations: array expected");
                    message.glossaryTranslations = [];
                    for (var i = 0; i < object.glossaryTranslations.length; ++i) {
                      if (typeof object.glossaryTranslations[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3.TranslateTextResponse.glossaryTranslations: object expected");
                      message.glossaryTranslations[i] = $root.google.cloud.translation.v3.Translation.fromObject(object.glossaryTranslations[i]);
                    }
                  }
                  return message;
                };
                TranslateTextResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults) {
                    object.translations = [];
                    object.glossaryTranslations = [];
                  }
                  if (message.translations && message.translations.length) {
                    object.translations = [];
                    for (var j = 0; j < message.translations.length; ++j)
                      object.translations[j] = $root.google.cloud.translation.v3.Translation.toObject(message.translations[j], options);
                  }
                  if (message.glossaryTranslations && message.glossaryTranslations.length) {
                    object.glossaryTranslations = [];
                    for (var j = 0; j < message.glossaryTranslations.length; ++j)
                      object.glossaryTranslations[j] = $root.google.cloud.translation.v3.Translation.toObject(message.glossaryTranslations[j], options);
                  }
                  return object;
                };
                TranslateTextResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateTextResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.TranslateTextResponse";
                };
                return TranslateTextResponse;
              }();
              v3.Translation = function() {
                function Translation(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Translation.prototype.translatedText = "";
                Translation.prototype.model = "";
                Translation.prototype.detectedLanguageCode = "";
                Translation.prototype.glossaryConfig = null;
                Translation.create = function create(properties) {
                  return new Translation(properties);
                };
                Translation.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.translatedText != null && Object.hasOwnProperty.call(message, "translatedText"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.translatedText);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  if (message.detectedLanguageCode != null && Object.hasOwnProperty.call(message, "detectedLanguageCode"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.detectedLanguageCode);
                  return writer;
                };
                Translation.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                Translation.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.Translation();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.translatedText = reader.string();
                        break;
                      }
                      case 2: {
                        message.model = reader.string();
                        break;
                      }
                      case 4: {
                        message.detectedLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                Translation.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                Translation.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.translatedText != null && message.hasOwnProperty("translatedText")) {
                    if (!$util.isString(message.translatedText))
                      return "translatedText: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode")) {
                    if (!$util.isString(message.detectedLanguageCode))
                      return "detectedLanguageCode: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  return null;
                };
                Translation.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.Translation)
                    return object;
                  var message = new $root.google.cloud.translation.v3.Translation();
                  if (object.translatedText != null)
                    message.translatedText = String(object.translatedText);
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.detectedLanguageCode != null)
                    message.detectedLanguageCode = String(object.detectedLanguageCode);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.Translation.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  return message;
                };
                Translation.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.translatedText = "";
                    object.model = "";
                    object.glossaryConfig = null;
                    object.detectedLanguageCode = "";
                  }
                  if (message.translatedText != null && message.hasOwnProperty("translatedText"))
                    object.translatedText = message.translatedText;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode"))
                    object.detectedLanguageCode = message.detectedLanguageCode;
                  return object;
                };
                Translation.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Translation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.Translation";
                };
                return Translation;
              }();
              v3.DetectLanguageRequest = function() {
                function DetectLanguageRequest(properties) {
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DetectLanguageRequest.prototype.parent = "";
                DetectLanguageRequest.prototype.model = "";
                DetectLanguageRequest.prototype.content = null;
                DetectLanguageRequest.prototype.mimeType = "";
                DetectLanguageRequest.prototype.labels = $util.emptyObject;
                var $oneOfFields;
                Object.defineProperty(DetectLanguageRequest.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["content"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                DetectLanguageRequest.create = function create(properties) {
                  return new DetectLanguageRequest(properties);
                };
                DetectLanguageRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.content);
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.mimeType);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.model);
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).string(message.parent);
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 6, wireType 2 =*/
                        50
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  return writer;
                };
                DetectLanguageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DetectLanguageRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DetectLanguageRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 5: {
                        message.parent = reader.string();
                        break;
                      }
                      case 4: {
                        message.model = reader.string();
                        break;
                      }
                      case 1: {
                        message.content = reader.string();
                        break;
                      }
                      case 3: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 6: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DetectLanguageRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DetectLanguageRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.content != null && message.hasOwnProperty("content")) {
                    properties.source = 1;
                    if (!$util.isString(message.content))
                      return "content: string expected";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  return null;
                };
                DetectLanguageRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DetectLanguageRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DetectLanguageRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.content != null)
                    message.content = String(object.content);
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3.DetectLanguageRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  return message;
                };
                DetectLanguageRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.objects || options.defaults)
                    object.labels = {};
                  if (options.defaults) {
                    object.mimeType = "";
                    object.model = "";
                    object.parent = "";
                  }
                  if (message.content != null && message.hasOwnProperty("content")) {
                    object.content = message.content;
                    if (options.oneofs)
                      object.source = "content";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  var keys2;
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  return object;
                };
                DetectLanguageRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DetectLanguageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DetectLanguageRequest";
                };
                return DetectLanguageRequest;
              }();
              v3.DetectedLanguage = function() {
                function DetectedLanguage(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DetectedLanguage.prototype.languageCode = "";
                DetectedLanguage.prototype.confidence = 0;
                DetectedLanguage.create = function create(properties) {
                  return new DetectedLanguage(properties);
                };
                DetectedLanguage.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                    writer.uint32(
                      /* id 2, wireType 5 =*/
                      21
                    ).float(message.confidence);
                  return writer;
                };
                DetectedLanguage.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DetectedLanguage.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DetectedLanguage();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.confidence = reader.float();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DetectedLanguage.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DetectedLanguage.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  if (message.confidence != null && message.hasOwnProperty("confidence")) {
                    if (typeof message.confidence !== "number")
                      return "confidence: number expected";
                  }
                  return null;
                };
                DetectedLanguage.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DetectedLanguage)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DetectedLanguage();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  if (object.confidence != null)
                    message.confidence = Number(object.confidence);
                  return message;
                };
                DetectedLanguage.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.languageCode = "";
                    object.confidence = 0;
                  }
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  if (message.confidence != null && message.hasOwnProperty("confidence"))
                    object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                  return object;
                };
                DetectedLanguage.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DetectedLanguage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DetectedLanguage";
                };
                return DetectedLanguage;
              }();
              v3.DetectLanguageResponse = function() {
                function DetectLanguageResponse(properties) {
                  this.languages = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DetectLanguageResponse.prototype.languages = $util.emptyArray;
                DetectLanguageResponse.create = function create(properties) {
                  return new DetectLanguageResponse(properties);
                };
                DetectLanguageResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languages != null && message.languages.length)
                    for (var i = 0; i < message.languages.length; ++i)
                      $root.google.cloud.translation.v3.DetectedLanguage.encode(message.languages[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  return writer;
                };
                DetectLanguageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DetectLanguageResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DetectLanguageResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.languages && message.languages.length))
                          message.languages = [];
                        message.languages.push($root.google.cloud.translation.v3.DetectedLanguage.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DetectLanguageResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DetectLanguageResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languages != null && message.hasOwnProperty("languages")) {
                    if (!Array.isArray(message.languages))
                      return "languages: array expected";
                    for (var i = 0; i < message.languages.length; ++i) {
                      var error = $root.google.cloud.translation.v3.DetectedLanguage.verify(message.languages[i]);
                      if (error)
                        return "languages." + error;
                    }
                  }
                  return null;
                };
                DetectLanguageResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DetectLanguageResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DetectLanguageResponse();
                  if (object.languages) {
                    if (!Array.isArray(object.languages))
                      throw TypeError(".google.cloud.translation.v3.DetectLanguageResponse.languages: array expected");
                    message.languages = [];
                    for (var i = 0; i < object.languages.length; ++i) {
                      if (typeof object.languages[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3.DetectLanguageResponse.languages: object expected");
                      message.languages[i] = $root.google.cloud.translation.v3.DetectedLanguage.fromObject(object.languages[i]);
                    }
                  }
                  return message;
                };
                DetectLanguageResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.languages = [];
                  if (message.languages && message.languages.length) {
                    object.languages = [];
                    for (var j = 0; j < message.languages.length; ++j)
                      object.languages[j] = $root.google.cloud.translation.v3.DetectedLanguage.toObject(message.languages[j], options);
                  }
                  return object;
                };
                DetectLanguageResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DetectLanguageResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DetectLanguageResponse";
                };
                return DetectLanguageResponse;
              }();
              v3.GetSupportedLanguagesRequest = function() {
                function GetSupportedLanguagesRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GetSupportedLanguagesRequest.prototype.parent = "";
                GetSupportedLanguagesRequest.prototype.displayLanguageCode = "";
                GetSupportedLanguagesRequest.prototype.model = "";
                GetSupportedLanguagesRequest.create = function create(properties) {
                  return new GetSupportedLanguagesRequest(properties);
                };
                GetSupportedLanguagesRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.displayLanguageCode != null && Object.hasOwnProperty.call(message, "displayLanguageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.displayLanguageCode);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.model);
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.parent);
                  return writer;
                };
                GetSupportedLanguagesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GetSupportedLanguagesRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.GetSupportedLanguagesRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 3: {
                        message.parent = reader.string();
                        break;
                      }
                      case 1: {
                        message.displayLanguageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.model = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GetSupportedLanguagesRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GetSupportedLanguagesRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.displayLanguageCode != null && message.hasOwnProperty("displayLanguageCode")) {
                    if (!$util.isString(message.displayLanguageCode))
                      return "displayLanguageCode: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  return null;
                };
                GetSupportedLanguagesRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.GetSupportedLanguagesRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.GetSupportedLanguagesRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.displayLanguageCode != null)
                    message.displayLanguageCode = String(object.displayLanguageCode);
                  if (object.model != null)
                    message.model = String(object.model);
                  return message;
                };
                GetSupportedLanguagesRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.displayLanguageCode = "";
                    object.model = "";
                    object.parent = "";
                  }
                  if (message.displayLanguageCode != null && message.hasOwnProperty("displayLanguageCode"))
                    object.displayLanguageCode = message.displayLanguageCode;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  return object;
                };
                GetSupportedLanguagesRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GetSupportedLanguagesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.GetSupportedLanguagesRequest";
                };
                return GetSupportedLanguagesRequest;
              }();
              v3.SupportedLanguages = function() {
                function SupportedLanguages(properties) {
                  this.languages = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SupportedLanguages.prototype.languages = $util.emptyArray;
                SupportedLanguages.create = function create(properties) {
                  return new SupportedLanguages(properties);
                };
                SupportedLanguages.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languages != null && message.languages.length)
                    for (var i = 0; i < message.languages.length; ++i)
                      $root.google.cloud.translation.v3.SupportedLanguage.encode(message.languages[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  return writer;
                };
                SupportedLanguages.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SupportedLanguages.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.SupportedLanguages();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.languages && message.languages.length))
                          message.languages = [];
                        message.languages.push($root.google.cloud.translation.v3.SupportedLanguage.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SupportedLanguages.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SupportedLanguages.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languages != null && message.hasOwnProperty("languages")) {
                    if (!Array.isArray(message.languages))
                      return "languages: array expected";
                    for (var i = 0; i < message.languages.length; ++i) {
                      var error = $root.google.cloud.translation.v3.SupportedLanguage.verify(message.languages[i]);
                      if (error)
                        return "languages." + error;
                    }
                  }
                  return null;
                };
                SupportedLanguages.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.SupportedLanguages)
                    return object;
                  var message = new $root.google.cloud.translation.v3.SupportedLanguages();
                  if (object.languages) {
                    if (!Array.isArray(object.languages))
                      throw TypeError(".google.cloud.translation.v3.SupportedLanguages.languages: array expected");
                    message.languages = [];
                    for (var i = 0; i < object.languages.length; ++i) {
                      if (typeof object.languages[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3.SupportedLanguages.languages: object expected");
                      message.languages[i] = $root.google.cloud.translation.v3.SupportedLanguage.fromObject(object.languages[i]);
                    }
                  }
                  return message;
                };
                SupportedLanguages.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.languages = [];
                  if (message.languages && message.languages.length) {
                    object.languages = [];
                    for (var j = 0; j < message.languages.length; ++j)
                      object.languages[j] = $root.google.cloud.translation.v3.SupportedLanguage.toObject(message.languages[j], options);
                  }
                  return object;
                };
                SupportedLanguages.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SupportedLanguages.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.SupportedLanguages";
                };
                return SupportedLanguages;
              }();
              v3.SupportedLanguage = function() {
                function SupportedLanguage(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SupportedLanguage.prototype.languageCode = "";
                SupportedLanguage.prototype.displayName = "";
                SupportedLanguage.prototype.supportSource = false;
                SupportedLanguage.prototype.supportTarget = false;
                SupportedLanguage.create = function create(properties) {
                  return new SupportedLanguage(properties);
                };
                SupportedLanguage.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.displayName);
                  if (message.supportSource != null && Object.hasOwnProperty.call(message, "supportSource"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).bool(message.supportSource);
                  if (message.supportTarget != null && Object.hasOwnProperty.call(message, "supportTarget"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).bool(message.supportTarget);
                  return writer;
                };
                SupportedLanguage.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SupportedLanguage.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.SupportedLanguage();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.displayName = reader.string();
                        break;
                      }
                      case 3: {
                        message.supportSource = reader.bool();
                        break;
                      }
                      case 4: {
                        message.supportTarget = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SupportedLanguage.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SupportedLanguage.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  if (message.displayName != null && message.hasOwnProperty("displayName")) {
                    if (!$util.isString(message.displayName))
                      return "displayName: string expected";
                  }
                  if (message.supportSource != null && message.hasOwnProperty("supportSource")) {
                    if (typeof message.supportSource !== "boolean")
                      return "supportSource: boolean expected";
                  }
                  if (message.supportTarget != null && message.hasOwnProperty("supportTarget")) {
                    if (typeof message.supportTarget !== "boolean")
                      return "supportTarget: boolean expected";
                  }
                  return null;
                };
                SupportedLanguage.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.SupportedLanguage)
                    return object;
                  var message = new $root.google.cloud.translation.v3.SupportedLanguage();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  if (object.displayName != null)
                    message.displayName = String(object.displayName);
                  if (object.supportSource != null)
                    message.supportSource = Boolean(object.supportSource);
                  if (object.supportTarget != null)
                    message.supportTarget = Boolean(object.supportTarget);
                  return message;
                };
                SupportedLanguage.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.languageCode = "";
                    object.displayName = "";
                    object.supportSource = false;
                    object.supportTarget = false;
                  }
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  if (message.displayName != null && message.hasOwnProperty("displayName"))
                    object.displayName = message.displayName;
                  if (message.supportSource != null && message.hasOwnProperty("supportSource"))
                    object.supportSource = message.supportSource;
                  if (message.supportTarget != null && message.hasOwnProperty("supportTarget"))
                    object.supportTarget = message.supportTarget;
                  return object;
                };
                SupportedLanguage.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SupportedLanguage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.SupportedLanguage";
                };
                return SupportedLanguage;
              }();
              v3.GcsSource = function() {
                function GcsSource(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GcsSource.prototype.inputUri = "";
                GcsSource.create = function create(properties) {
                  return new GcsSource(properties);
                };
                GcsSource.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.inputUri);
                  return writer;
                };
                GcsSource.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GcsSource.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.GcsSource();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.inputUri = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GcsSource.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GcsSource.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.inputUri != null && message.hasOwnProperty("inputUri")) {
                    if (!$util.isString(message.inputUri))
                      return "inputUri: string expected";
                  }
                  return null;
                };
                GcsSource.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.GcsSource)
                    return object;
                  var message = new $root.google.cloud.translation.v3.GcsSource();
                  if (object.inputUri != null)
                    message.inputUri = String(object.inputUri);
                  return message;
                };
                GcsSource.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.inputUri = "";
                  if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                    object.inputUri = message.inputUri;
                  return object;
                };
                GcsSource.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GcsSource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.GcsSource";
                };
                return GcsSource;
              }();
              v3.InputConfig = function() {
                function InputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                InputConfig.prototype.mimeType = "";
                InputConfig.prototype.gcsSource = null;
                var $oneOfFields;
                Object.defineProperty(InputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                InputConfig.create = function create(properties) {
                  return new InputConfig(properties);
                };
                InputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.mimeType);
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  return writer;
                };
                InputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                InputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.InputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 2: {
                        message.gcsSource = $root.google.cloud.translation.v3.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                InputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                InputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  return null;
                };
                InputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.InputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.InputConfig();
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3.InputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3.GcsSource.fromObject(object.gcsSource);
                  }
                  return message;
                };
                InputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.mimeType = "";
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  return object;
                };
                InputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                InputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.InputConfig";
                };
                return InputConfig;
              }();
              v3.GcsDestination = function() {
                function GcsDestination(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GcsDestination.prototype.outputUriPrefix = "";
                GcsDestination.create = function create(properties) {
                  return new GcsDestination(properties);
                };
                GcsDestination.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.outputUriPrefix != null && Object.hasOwnProperty.call(message, "outputUriPrefix"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.outputUriPrefix);
                  return writer;
                };
                GcsDestination.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GcsDestination.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.GcsDestination();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.outputUriPrefix = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GcsDestination.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GcsDestination.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.outputUriPrefix != null && message.hasOwnProperty("outputUriPrefix")) {
                    if (!$util.isString(message.outputUriPrefix))
                      return "outputUriPrefix: string expected";
                  }
                  return null;
                };
                GcsDestination.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.GcsDestination)
                    return object;
                  var message = new $root.google.cloud.translation.v3.GcsDestination();
                  if (object.outputUriPrefix != null)
                    message.outputUriPrefix = String(object.outputUriPrefix);
                  return message;
                };
                GcsDestination.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.outputUriPrefix = "";
                  if (message.outputUriPrefix != null && message.hasOwnProperty("outputUriPrefix"))
                    object.outputUriPrefix = message.outputUriPrefix;
                  return object;
                };
                GcsDestination.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GcsDestination.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.GcsDestination";
                };
                return GcsDestination;
              }();
              v3.OutputConfig = function() {
                function OutputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                OutputConfig.prototype.gcsDestination = null;
                var $oneOfFields;
                Object.defineProperty(OutputConfig.prototype, "destination", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsDestination"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                OutputConfig.create = function create(properties) {
                  return new OutputConfig(properties);
                };
                OutputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsDestination != null && Object.hasOwnProperty.call(message, "gcsDestination"))
                    $root.google.cloud.translation.v3.GcsDestination.encode(message.gcsDestination, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                OutputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                OutputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.OutputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                OutputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                OutputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    properties.destination = 1;
                    {
                      var error = $root.google.cloud.translation.v3.GcsDestination.verify(message.gcsDestination);
                      if (error)
                        return "gcsDestination." + error;
                    }
                  }
                  return null;
                };
                OutputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.OutputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.OutputConfig();
                  if (object.gcsDestination != null) {
                    if (typeof object.gcsDestination !== "object")
                      throw TypeError(".google.cloud.translation.v3.OutputConfig.gcsDestination: object expected");
                    message.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.fromObject(object.gcsDestination);
                  }
                  return message;
                };
                OutputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    object.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.toObject(message.gcsDestination, options);
                    if (options.oneofs)
                      object.destination = "gcsDestination";
                  }
                  return object;
                };
                OutputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                OutputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.OutputConfig";
                };
                return OutputConfig;
              }();
              v3.DocumentInputConfig = function() {
                function DocumentInputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DocumentInputConfig.prototype.content = null;
                DocumentInputConfig.prototype.gcsSource = null;
                DocumentInputConfig.prototype.mimeType = "";
                var $oneOfFields;
                Object.defineProperty(DocumentInputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["content", "gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                DocumentInputConfig.create = function create(properties) {
                  return new DocumentInputConfig(properties);
                };
                DocumentInputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).bytes(message.content);
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.mimeType);
                  return writer;
                };
                DocumentInputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DocumentInputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DocumentInputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.content = reader.bytes();
                        break;
                      }
                      case 2: {
                        message.gcsSource = $root.google.cloud.translation.v3.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      case 4: {
                        message.mimeType = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DocumentInputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DocumentInputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.content != null && message.hasOwnProperty("content")) {
                    properties.source = 1;
                    if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                      return "content: buffer expected";
                  }
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    if (properties.source === 1)
                      return "source: multiple values";
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  return null;
                };
                DocumentInputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DocumentInputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DocumentInputConfig();
                  if (object.content != null) {
                    if (typeof object.content === "string")
                      $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                    else if (object.content.length >= 0)
                      message.content = object.content;
                  }
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3.DocumentInputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3.GcsSource.fromObject(object.gcsSource);
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  return message;
                };
                DocumentInputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.mimeType = "";
                  if (message.content != null && message.hasOwnProperty("content")) {
                    object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                    if (options.oneofs)
                      object.source = "content";
                  }
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  return object;
                };
                DocumentInputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DocumentInputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DocumentInputConfig";
                };
                return DocumentInputConfig;
              }();
              v3.DocumentOutputConfig = function() {
                function DocumentOutputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DocumentOutputConfig.prototype.gcsDestination = null;
                DocumentOutputConfig.prototype.mimeType = "";
                var $oneOfFields;
                Object.defineProperty(DocumentOutputConfig.prototype, "destination", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsDestination"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                DocumentOutputConfig.create = function create(properties) {
                  return new DocumentOutputConfig(properties);
                };
                DocumentOutputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsDestination != null && Object.hasOwnProperty.call(message, "gcsDestination"))
                    $root.google.cloud.translation.v3.GcsDestination.encode(message.gcsDestination, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.mimeType);
                  return writer;
                };
                DocumentOutputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DocumentOutputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DocumentOutputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.mimeType = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DocumentOutputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DocumentOutputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    properties.destination = 1;
                    {
                      var error = $root.google.cloud.translation.v3.GcsDestination.verify(message.gcsDestination);
                      if (error)
                        return "gcsDestination." + error;
                    }
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  return null;
                };
                DocumentOutputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DocumentOutputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DocumentOutputConfig();
                  if (object.gcsDestination != null) {
                    if (typeof object.gcsDestination !== "object")
                      throw TypeError(".google.cloud.translation.v3.DocumentOutputConfig.gcsDestination: object expected");
                    message.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.fromObject(object.gcsDestination);
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  return message;
                };
                DocumentOutputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.mimeType = "";
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    object.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.toObject(message.gcsDestination, options);
                    if (options.oneofs)
                      object.destination = "gcsDestination";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  return object;
                };
                DocumentOutputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DocumentOutputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DocumentOutputConfig";
                };
                return DocumentOutputConfig;
              }();
              v3.TranslateDocumentRequest = function() {
                function TranslateDocumentRequest(properties) {
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateDocumentRequest.prototype.parent = "";
                TranslateDocumentRequest.prototype.sourceLanguageCode = "";
                TranslateDocumentRequest.prototype.targetLanguageCode = "";
                TranslateDocumentRequest.prototype.documentInputConfig = null;
                TranslateDocumentRequest.prototype.documentOutputConfig = null;
                TranslateDocumentRequest.prototype.model = "";
                TranslateDocumentRequest.prototype.glossaryConfig = null;
                TranslateDocumentRequest.prototype.labels = $util.emptyObject;
                TranslateDocumentRequest.prototype.customizedAttribution = "";
                TranslateDocumentRequest.prototype.isTranslateNativePdfOnly = false;
                TranslateDocumentRequest.prototype.enableShadowRemovalNativePdf = false;
                TranslateDocumentRequest.prototype.enableRotationCorrection = false;
                TranslateDocumentRequest.create = function create(properties) {
                  return new TranslateDocumentRequest(properties);
                };
                TranslateDocumentRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCode != null && Object.hasOwnProperty.call(message, "targetLanguageCode"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.targetLanguageCode);
                  if (message.documentInputConfig != null && Object.hasOwnProperty.call(message, "documentInputConfig"))
                    $root.google.cloud.translation.v3.DocumentInputConfig.encode(message.documentInputConfig, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  if (message.documentOutputConfig != null && Object.hasOwnProperty.call(message, "documentOutputConfig"))
                    $root.google.cloud.translation.v3.DocumentOutputConfig.encode(message.documentOutputConfig, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 7, wireType 2 =*/
                      58
                    ).fork()).ldelim();
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 8, wireType 2 =*/
                        66
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  if (message.customizedAttribution != null && Object.hasOwnProperty.call(message, "customizedAttribution"))
                    writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).string(message.customizedAttribution);
                  if (message.isTranslateNativePdfOnly != null && Object.hasOwnProperty.call(message, "isTranslateNativePdfOnly"))
                    writer.uint32(
                      /* id 11, wireType 0 =*/
                      88
                    ).bool(message.isTranslateNativePdfOnly);
                  if (message.enableShadowRemovalNativePdf != null && Object.hasOwnProperty.call(message, "enableShadowRemovalNativePdf"))
                    writer.uint32(
                      /* id 12, wireType 0 =*/
                      96
                    ).bool(message.enableShadowRemovalNativePdf);
                  if (message.enableRotationCorrection != null && Object.hasOwnProperty.call(message, "enableRotationCorrection"))
                    writer.uint32(
                      /* id 13, wireType 0 =*/
                      104
                    ).bool(message.enableRotationCorrection);
                  return writer;
                };
                TranslateDocumentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateDocumentRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.TranslateDocumentRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        message.targetLanguageCode = reader.string();
                        break;
                      }
                      case 4: {
                        message.documentInputConfig = $root.google.cloud.translation.v3.DocumentInputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 5: {
                        message.documentOutputConfig = $root.google.cloud.translation.v3.DocumentOutputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 6: {
                        message.model = reader.string();
                        break;
                      }
                      case 7: {
                        message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 8: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      case 10: {
                        message.customizedAttribution = reader.string();
                        break;
                      }
                      case 11: {
                        message.isTranslateNativePdfOnly = reader.bool();
                        break;
                      }
                      case 12: {
                        message.enableShadowRemovalNativePdf = reader.bool();
                        break;
                      }
                      case 13: {
                        message.enableRotationCorrection = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateDocumentRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateDocumentRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode")) {
                    if (!$util.isString(message.targetLanguageCode))
                      return "targetLanguageCode: string expected";
                  }
                  if (message.documentInputConfig != null && message.hasOwnProperty("documentInputConfig")) {
                    var error = $root.google.cloud.translation.v3.DocumentInputConfig.verify(message.documentInputConfig);
                    if (error)
                      return "documentInputConfig." + error;
                  }
                  if (message.documentOutputConfig != null && message.hasOwnProperty("documentOutputConfig")) {
                    var error = $root.google.cloud.translation.v3.DocumentOutputConfig.verify(message.documentOutputConfig);
                    if (error)
                      return "documentOutputConfig." + error;
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution")) {
                    if (!$util.isString(message.customizedAttribution))
                      return "customizedAttribution: string expected";
                  }
                  if (message.isTranslateNativePdfOnly != null && message.hasOwnProperty("isTranslateNativePdfOnly")) {
                    if (typeof message.isTranslateNativePdfOnly !== "boolean")
                      return "isTranslateNativePdfOnly: boolean expected";
                  }
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf")) {
                    if (typeof message.enableShadowRemovalNativePdf !== "boolean")
                      return "enableShadowRemovalNativePdf: boolean expected";
                  }
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection")) {
                    if (typeof message.enableRotationCorrection !== "boolean")
                      return "enableRotationCorrection: boolean expected";
                  }
                  return null;
                };
                TranslateDocumentRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.TranslateDocumentRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.TranslateDocumentRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCode != null)
                    message.targetLanguageCode = String(object.targetLanguageCode);
                  if (object.documentInputConfig != null) {
                    if (typeof object.documentInputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateDocumentRequest.documentInputConfig: object expected");
                    message.documentInputConfig = $root.google.cloud.translation.v3.DocumentInputConfig.fromObject(object.documentInputConfig);
                  }
                  if (object.documentOutputConfig != null) {
                    if (typeof object.documentOutputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateDocumentRequest.documentOutputConfig: object expected");
                    message.documentOutputConfig = $root.google.cloud.translation.v3.DocumentOutputConfig.fromObject(object.documentOutputConfig);
                  }
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateDocumentRequest.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateDocumentRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  if (object.customizedAttribution != null)
                    message.customizedAttribution = String(object.customizedAttribution);
                  if (object.isTranslateNativePdfOnly != null)
                    message.isTranslateNativePdfOnly = Boolean(object.isTranslateNativePdfOnly);
                  if (object.enableShadowRemovalNativePdf != null)
                    message.enableShadowRemovalNativePdf = Boolean(object.enableShadowRemovalNativePdf);
                  if (object.enableRotationCorrection != null)
                    message.enableRotationCorrection = Boolean(object.enableRotationCorrection);
                  return message;
                };
                TranslateDocumentRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.objects || options.defaults)
                    object.labels = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.sourceLanguageCode = "";
                    object.targetLanguageCode = "";
                    object.documentInputConfig = null;
                    object.documentOutputConfig = null;
                    object.model = "";
                    object.glossaryConfig = null;
                    object.customizedAttribution = "";
                    object.isTranslateNativePdfOnly = false;
                    object.enableShadowRemovalNativePdf = false;
                    object.enableRotationCorrection = false;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode"))
                    object.targetLanguageCode = message.targetLanguageCode;
                  if (message.documentInputConfig != null && message.hasOwnProperty("documentInputConfig"))
                    object.documentInputConfig = $root.google.cloud.translation.v3.DocumentInputConfig.toObject(message.documentInputConfig, options);
                  if (message.documentOutputConfig != null && message.hasOwnProperty("documentOutputConfig"))
                    object.documentOutputConfig = $root.google.cloud.translation.v3.DocumentOutputConfig.toObject(message.documentOutputConfig, options);
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  var keys2;
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution"))
                    object.customizedAttribution = message.customizedAttribution;
                  if (message.isTranslateNativePdfOnly != null && message.hasOwnProperty("isTranslateNativePdfOnly"))
                    object.isTranslateNativePdfOnly = message.isTranslateNativePdfOnly;
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf"))
                    object.enableShadowRemovalNativePdf = message.enableShadowRemovalNativePdf;
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection"))
                    object.enableRotationCorrection = message.enableRotationCorrection;
                  return object;
                };
                TranslateDocumentRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.TranslateDocumentRequest";
                };
                return TranslateDocumentRequest;
              }();
              v3.DocumentTranslation = function() {
                function DocumentTranslation(properties) {
                  this.byteStreamOutputs = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DocumentTranslation.prototype.byteStreamOutputs = $util.emptyArray;
                DocumentTranslation.prototype.mimeType = "";
                DocumentTranslation.prototype.detectedLanguageCode = "";
                DocumentTranslation.create = function create(properties) {
                  return new DocumentTranslation(properties);
                };
                DocumentTranslation.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.byteStreamOutputs != null && message.byteStreamOutputs.length)
                    for (var i = 0; i < message.byteStreamOutputs.length; ++i)
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).bytes(message.byteStreamOutputs[i]);
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.mimeType);
                  if (message.detectedLanguageCode != null && Object.hasOwnProperty.call(message, "detectedLanguageCode"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.detectedLanguageCode);
                  return writer;
                };
                DocumentTranslation.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DocumentTranslation.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DocumentTranslation();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.byteStreamOutputs && message.byteStreamOutputs.length))
                          message.byteStreamOutputs = [];
                        message.byteStreamOutputs.push(reader.bytes());
                        break;
                      }
                      case 2: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 3: {
                        message.detectedLanguageCode = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DocumentTranslation.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DocumentTranslation.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.byteStreamOutputs != null && message.hasOwnProperty("byteStreamOutputs")) {
                    if (!Array.isArray(message.byteStreamOutputs))
                      return "byteStreamOutputs: array expected";
                    for (var i = 0; i < message.byteStreamOutputs.length; ++i)
                      if (!(message.byteStreamOutputs[i] && typeof message.byteStreamOutputs[i].length === "number" || $util.isString(message.byteStreamOutputs[i])))
                        return "byteStreamOutputs: buffer[] expected";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode")) {
                    if (!$util.isString(message.detectedLanguageCode))
                      return "detectedLanguageCode: string expected";
                  }
                  return null;
                };
                DocumentTranslation.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DocumentTranslation)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DocumentTranslation();
                  if (object.byteStreamOutputs) {
                    if (!Array.isArray(object.byteStreamOutputs))
                      throw TypeError(".google.cloud.translation.v3.DocumentTranslation.byteStreamOutputs: array expected");
                    message.byteStreamOutputs = [];
                    for (var i = 0; i < object.byteStreamOutputs.length; ++i)
                      if (typeof object.byteStreamOutputs[i] === "string")
                        $util.base64.decode(object.byteStreamOutputs[i], message.byteStreamOutputs[i] = $util.newBuffer($util.base64.length(object.byteStreamOutputs[i])), 0);
                      else if (object.byteStreamOutputs[i].length >= 0)
                        message.byteStreamOutputs[i] = object.byteStreamOutputs[i];
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.detectedLanguageCode != null)
                    message.detectedLanguageCode = String(object.detectedLanguageCode);
                  return message;
                };
                DocumentTranslation.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.byteStreamOutputs = [];
                  if (options.defaults) {
                    object.mimeType = "";
                    object.detectedLanguageCode = "";
                  }
                  if (message.byteStreamOutputs && message.byteStreamOutputs.length) {
                    object.byteStreamOutputs = [];
                    for (var j = 0; j < message.byteStreamOutputs.length; ++j)
                      object.byteStreamOutputs[j] = options.bytes === String ? $util.base64.encode(message.byteStreamOutputs[j], 0, message.byteStreamOutputs[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.byteStreamOutputs[j]) : message.byteStreamOutputs[j];
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode"))
                    object.detectedLanguageCode = message.detectedLanguageCode;
                  return object;
                };
                DocumentTranslation.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DocumentTranslation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DocumentTranslation";
                };
                return DocumentTranslation;
              }();
              v3.TranslateDocumentResponse = function() {
                function TranslateDocumentResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateDocumentResponse.prototype.documentTranslation = null;
                TranslateDocumentResponse.prototype.glossaryDocumentTranslation = null;
                TranslateDocumentResponse.prototype.model = "";
                TranslateDocumentResponse.prototype.glossaryConfig = null;
                TranslateDocumentResponse.create = function create(properties) {
                  return new TranslateDocumentResponse(properties);
                };
                TranslateDocumentResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.documentTranslation != null && Object.hasOwnProperty.call(message, "documentTranslation"))
                    $root.google.cloud.translation.v3.DocumentTranslation.encode(message.documentTranslation, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.glossaryDocumentTranslation != null && Object.hasOwnProperty.call(message, "glossaryDocumentTranslation"))
                    $root.google.cloud.translation.v3.DocumentTranslation.encode(message.glossaryDocumentTranslation, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  return writer;
                };
                TranslateDocumentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateDocumentResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.TranslateDocumentResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.documentTranslation = $root.google.cloud.translation.v3.DocumentTranslation.decode(reader, reader.uint32());
                        break;
                      }
                      case 2: {
                        message.glossaryDocumentTranslation = $root.google.cloud.translation.v3.DocumentTranslation.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.model = reader.string();
                        break;
                      }
                      case 4: {
                        message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateDocumentResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateDocumentResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.documentTranslation != null && message.hasOwnProperty("documentTranslation")) {
                    var error = $root.google.cloud.translation.v3.DocumentTranslation.verify(message.documentTranslation);
                    if (error)
                      return "documentTranslation." + error;
                  }
                  if (message.glossaryDocumentTranslation != null && message.hasOwnProperty("glossaryDocumentTranslation")) {
                    var error = $root.google.cloud.translation.v3.DocumentTranslation.verify(message.glossaryDocumentTranslation);
                    if (error)
                      return "glossaryDocumentTranslation." + error;
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  return null;
                };
                TranslateDocumentResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.TranslateDocumentResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3.TranslateDocumentResponse();
                  if (object.documentTranslation != null) {
                    if (typeof object.documentTranslation !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateDocumentResponse.documentTranslation: object expected");
                    message.documentTranslation = $root.google.cloud.translation.v3.DocumentTranslation.fromObject(object.documentTranslation);
                  }
                  if (object.glossaryDocumentTranslation != null) {
                    if (typeof object.glossaryDocumentTranslation !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateDocumentResponse.glossaryDocumentTranslation: object expected");
                    message.glossaryDocumentTranslation = $root.google.cloud.translation.v3.DocumentTranslation.fromObject(object.glossaryDocumentTranslation);
                  }
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.TranslateDocumentResponse.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  return message;
                };
                TranslateDocumentResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.documentTranslation = null;
                    object.glossaryDocumentTranslation = null;
                    object.model = "";
                    object.glossaryConfig = null;
                  }
                  if (message.documentTranslation != null && message.hasOwnProperty("documentTranslation"))
                    object.documentTranslation = $root.google.cloud.translation.v3.DocumentTranslation.toObject(message.documentTranslation, options);
                  if (message.glossaryDocumentTranslation != null && message.hasOwnProperty("glossaryDocumentTranslation"))
                    object.glossaryDocumentTranslation = $root.google.cloud.translation.v3.DocumentTranslation.toObject(message.glossaryDocumentTranslation, options);
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  return object;
                };
                TranslateDocumentResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateDocumentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.TranslateDocumentResponse";
                };
                return TranslateDocumentResponse;
              }();
              v3.BatchTranslateTextRequest = function() {
                function BatchTranslateTextRequest(properties) {
                  this.targetLanguageCodes = [];
                  this.models = {};
                  this.inputConfigs = [];
                  this.glossaries = {};
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateTextRequest.prototype.parent = "";
                BatchTranslateTextRequest.prototype.sourceLanguageCode = "";
                BatchTranslateTextRequest.prototype.targetLanguageCodes = $util.emptyArray;
                BatchTranslateTextRequest.prototype.models = $util.emptyObject;
                BatchTranslateTextRequest.prototype.inputConfigs = $util.emptyArray;
                BatchTranslateTextRequest.prototype.outputConfig = null;
                BatchTranslateTextRequest.prototype.glossaries = $util.emptyObject;
                BatchTranslateTextRequest.prototype.labels = $util.emptyObject;
                BatchTranslateTextRequest.create = function create(properties) {
                  return new BatchTranslateTextRequest(properties);
                };
                BatchTranslateTextRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCodes != null && message.targetLanguageCodes.length)
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      writer.uint32(
                        /* id 3, wireType 2 =*/
                        26
                      ).string(message.targetLanguageCodes[i]);
                  if (message.models != null && Object.hasOwnProperty.call(message, "models"))
                    for (var keys = Object.keys(message.models), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 4, wireType 2 =*/
                        34
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.models[keys[i]]).ldelim();
                  if (message.inputConfigs != null && message.inputConfigs.length)
                    for (var i = 0; i < message.inputConfigs.length; ++i)
                      $root.google.cloud.translation.v3.InputConfig.encode(message.inputConfigs[i], writer.uint32(
                        /* id 5, wireType 2 =*/
                        42
                      ).fork()).ldelim();
                  if (message.outputConfig != null && Object.hasOwnProperty.call(message, "outputConfig"))
                    $root.google.cloud.translation.v3.OutputConfig.encode(message.outputConfig, writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).fork()).ldelim();
                  if (message.glossaries != null && Object.hasOwnProperty.call(message, "glossaries"))
                    for (var keys = Object.keys(message.glossaries), i = 0; i < keys.length; ++i) {
                      writer.uint32(
                        /* id 7, wireType 2 =*/
                        58
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]);
                      $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.encode(message.glossaries[keys[i]], writer.uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).fork()).ldelim().ldelim();
                    }
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 9, wireType 2 =*/
                        74
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  return writer;
                };
                BatchTranslateTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateTextRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchTranslateTextRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        if (!(message.targetLanguageCodes && message.targetLanguageCodes.length))
                          message.targetLanguageCodes = [];
                        message.targetLanguageCodes.push(reader.string());
                        break;
                      }
                      case 4: {
                        if (message.models === $util.emptyObject)
                          message.models = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.models[key] = value;
                        break;
                      }
                      case 5: {
                        if (!(message.inputConfigs && message.inputConfigs.length))
                          message.inputConfigs = [];
                        message.inputConfigs.push($root.google.cloud.translation.v3.InputConfig.decode(reader, reader.uint32()));
                        break;
                      }
                      case 6: {
                        message.outputConfig = $root.google.cloud.translation.v3.OutputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 7: {
                        if (message.glossaries === $util.emptyObject)
                          message.glossaries = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = null;
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.glossaries[key] = value;
                        break;
                      }
                      case 9: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateTextRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateTextRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCodes != null && message.hasOwnProperty("targetLanguageCodes")) {
                    if (!Array.isArray(message.targetLanguageCodes))
                      return "targetLanguageCodes: array expected";
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      if (!$util.isString(message.targetLanguageCodes[i]))
                        return "targetLanguageCodes: string[] expected";
                  }
                  if (message.models != null && message.hasOwnProperty("models")) {
                    if (!$util.isObject(message.models))
                      return "models: object expected";
                    var key = Object.keys(message.models);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.models[key[i]]))
                        return "models: string{k:string} expected";
                  }
                  if (message.inputConfigs != null && message.hasOwnProperty("inputConfigs")) {
                    if (!Array.isArray(message.inputConfigs))
                      return "inputConfigs: array expected";
                    for (var i = 0; i < message.inputConfigs.length; ++i) {
                      var error = $root.google.cloud.translation.v3.InputConfig.verify(message.inputConfigs[i]);
                      if (error)
                        return "inputConfigs." + error;
                    }
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig")) {
                    var error = $root.google.cloud.translation.v3.OutputConfig.verify(message.outputConfig);
                    if (error)
                      return "outputConfig." + error;
                  }
                  if (message.glossaries != null && message.hasOwnProperty("glossaries")) {
                    if (!$util.isObject(message.glossaries))
                      return "glossaries: object expected";
                    var key = Object.keys(message.glossaries);
                    for (var i = 0; i < key.length; ++i) {
                      var error = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.verify(message.glossaries[key[i]]);
                      if (error)
                        return "glossaries." + error;
                    }
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  return null;
                };
                BatchTranslateTextRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchTranslateTextRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchTranslateTextRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCodes) {
                    if (!Array.isArray(object.targetLanguageCodes))
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.targetLanguageCodes: array expected");
                    message.targetLanguageCodes = [];
                    for (var i = 0; i < object.targetLanguageCodes.length; ++i)
                      message.targetLanguageCodes[i] = String(object.targetLanguageCodes[i]);
                  }
                  if (object.models) {
                    if (typeof object.models !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.models: object expected");
                    message.models = {};
                    for (var keys = Object.keys(object.models), i = 0; i < keys.length; ++i)
                      message.models[keys[i]] = String(object.models[keys[i]]);
                  }
                  if (object.inputConfigs) {
                    if (!Array.isArray(object.inputConfigs))
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.inputConfigs: array expected");
                    message.inputConfigs = [];
                    for (var i = 0; i < object.inputConfigs.length; ++i) {
                      if (typeof object.inputConfigs[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.inputConfigs: object expected");
                      message.inputConfigs[i] = $root.google.cloud.translation.v3.InputConfig.fromObject(object.inputConfigs[i]);
                    }
                  }
                  if (object.outputConfig != null) {
                    if (typeof object.outputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.outputConfig: object expected");
                    message.outputConfig = $root.google.cloud.translation.v3.OutputConfig.fromObject(object.outputConfig);
                  }
                  if (object.glossaries) {
                    if (typeof object.glossaries !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.glossaries: object expected");
                    message.glossaries = {};
                    for (var keys = Object.keys(object.glossaries), i = 0; i < keys.length; ++i) {
                      if (typeof object.glossaries[keys[i]] !== "object")
                        throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.glossaries: object expected");
                      message.glossaries[keys[i]] = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.fromObject(object.glossaries[keys[i]]);
                    }
                  }
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateTextRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  return message;
                };
                BatchTranslateTextRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults) {
                    object.targetLanguageCodes = [];
                    object.inputConfigs = [];
                  }
                  if (options.objects || options.defaults) {
                    object.models = {};
                    object.glossaries = {};
                    object.labels = {};
                  }
                  if (options.defaults) {
                    object.parent = "";
                    object.sourceLanguageCode = "";
                    object.outputConfig = null;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCodes && message.targetLanguageCodes.length) {
                    object.targetLanguageCodes = [];
                    for (var j = 0; j < message.targetLanguageCodes.length; ++j)
                      object.targetLanguageCodes[j] = message.targetLanguageCodes[j];
                  }
                  var keys2;
                  if (message.models && (keys2 = Object.keys(message.models)).length) {
                    object.models = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.models[keys2[j]] = message.models[keys2[j]];
                  }
                  if (message.inputConfigs && message.inputConfigs.length) {
                    object.inputConfigs = [];
                    for (var j = 0; j < message.inputConfigs.length; ++j)
                      object.inputConfigs[j] = $root.google.cloud.translation.v3.InputConfig.toObject(message.inputConfigs[j], options);
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig"))
                    object.outputConfig = $root.google.cloud.translation.v3.OutputConfig.toObject(message.outputConfig, options);
                  if (message.glossaries && (keys2 = Object.keys(message.glossaries)).length) {
                    object.glossaries = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.glossaries[keys2[j]] = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.toObject(message.glossaries[keys2[j]], options);
                  }
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  return object;
                };
                BatchTranslateTextRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchTranslateTextRequest";
                };
                return BatchTranslateTextRequest;
              }();
              v3.BatchTranslateMetadata = function() {
                function BatchTranslateMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateMetadata.prototype.state = 0;
                BatchTranslateMetadata.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateMetadata.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateMetadata.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateMetadata.prototype.submitTime = null;
                BatchTranslateMetadata.create = function create(properties) {
                  return new BatchTranslateMetadata(properties);
                };
                BatchTranslateMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int32(message.state);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.failedCharacters);
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int64(message.totalCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchTranslateMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.state = reader.int32();
                        break;
                      }
                      case 2: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 3: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 4: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 5: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                BatchTranslateMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchTranslateMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchTranslateMetadata();
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                BatchTranslateMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3.BatchTranslateMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3.BatchTranslateMetadata.State[message.state] : message.state;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                BatchTranslateMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchTranslateMetadata";
                };
                BatchTranslateMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return BatchTranslateMetadata;
              }();
              v3.BatchTranslateResponse = function() {
                function BatchTranslateResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateResponse.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateResponse.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateResponse.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateResponse.prototype.submitTime = null;
                BatchTranslateResponse.prototype.endTime = null;
                BatchTranslateResponse.create = function create(properties) {
                  return new BatchTranslateResponse(properties);
                };
                BatchTranslateResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int64(message.totalCharacters);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.failedCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchTranslateResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 2: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 3: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 4: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 5: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  return null;
                };
                BatchTranslateResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchTranslateResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchTranslateResponse();
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateResponse.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateResponse.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  return message;
                };
                BatchTranslateResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                    object.endTime = null;
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  return object;
                };
                BatchTranslateResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchTranslateResponse";
                };
                return BatchTranslateResponse;
              }();
              v3.GlossaryInputConfig = function() {
                function GlossaryInputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GlossaryInputConfig.prototype.gcsSource = null;
                var $oneOfFields;
                Object.defineProperty(GlossaryInputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                GlossaryInputConfig.create = function create(properties) {
                  return new GlossaryInputConfig(properties);
                };
                GlossaryInputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                GlossaryInputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GlossaryInputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.GlossaryInputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsSource = $root.google.cloud.translation.v3.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GlossaryInputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GlossaryInputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  return null;
                };
                GlossaryInputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.GlossaryInputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.GlossaryInputConfig();
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3.GlossaryInputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3.GcsSource.fromObject(object.gcsSource);
                  }
                  return message;
                };
                GlossaryInputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  return object;
                };
                GlossaryInputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GlossaryInputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.GlossaryInputConfig";
                };
                return GlossaryInputConfig;
              }();
              v3.Glossary = function() {
                function Glossary(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Glossary.prototype.name = "";
                Glossary.prototype.languagePair = null;
                Glossary.prototype.languageCodesSet = null;
                Glossary.prototype.inputConfig = null;
                Glossary.prototype.entryCount = 0;
                Glossary.prototype.submitTime = null;
                Glossary.prototype.endTime = null;
                Glossary.prototype.displayName = "";
                var $oneOfFields;
                Object.defineProperty(Glossary.prototype, "languages", {
                  get: $util.oneOfGetter($oneOfFields = ["languagePair", "languageCodesSet"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                Glossary.create = function create(properties) {
                  return new Glossary(properties);
                };
                Glossary.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.languagePair != null && Object.hasOwnProperty.call(message, "languagePair"))
                    $root.google.cloud.translation.v3.Glossary.LanguageCodePair.encode(message.languagePair, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  if (message.languageCodesSet != null && Object.hasOwnProperty.call(message, "languageCodesSet"))
                    $root.google.cloud.translation.v3.Glossary.LanguageCodesSet.encode(message.languageCodesSet, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  if (message.inputConfig != null && Object.hasOwnProperty.call(message, "inputConfig"))
                    $root.google.cloud.translation.v3.GlossaryInputConfig.encode(message.inputConfig, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  if (message.entryCount != null && Object.hasOwnProperty.call(message, "entryCount"))
                    writer.uint32(
                      /* id 6, wireType 0 =*/
                      48
                    ).int32(message.entryCount);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 7, wireType 2 =*/
                      58
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 8, wireType 2 =*/
                      66
                    ).fork()).ldelim();
                  if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                    writer.uint32(
                      /* id 9, wireType 2 =*/
                      74
                    ).string(message.displayName);
                  return writer;
                };
                Glossary.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                Glossary.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.Glossary();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 3: {
                        message.languagePair = $root.google.cloud.translation.v3.Glossary.LanguageCodePair.decode(reader, reader.uint32());
                        break;
                      }
                      case 4: {
                        message.languageCodesSet = $root.google.cloud.translation.v3.Glossary.LanguageCodesSet.decode(reader, reader.uint32());
                        break;
                      }
                      case 5: {
                        message.inputConfig = $root.google.cloud.translation.v3.GlossaryInputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 6: {
                        message.entryCount = reader.int32();
                        break;
                      }
                      case 7: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 8: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 9: {
                        message.displayName = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                Glossary.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                Glossary.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.languagePair != null && message.hasOwnProperty("languagePair")) {
                    properties.languages = 1;
                    {
                      var error = $root.google.cloud.translation.v3.Glossary.LanguageCodePair.verify(message.languagePair);
                      if (error)
                        return "languagePair." + error;
                    }
                  }
                  if (message.languageCodesSet != null && message.hasOwnProperty("languageCodesSet")) {
                    if (properties.languages === 1)
                      return "languages: multiple values";
                    properties.languages = 1;
                    {
                      var error = $root.google.cloud.translation.v3.Glossary.LanguageCodesSet.verify(message.languageCodesSet);
                      if (error)
                        return "languageCodesSet." + error;
                    }
                  }
                  if (message.inputConfig != null && message.hasOwnProperty("inputConfig")) {
                    var error = $root.google.cloud.translation.v3.GlossaryInputConfig.verify(message.inputConfig);
                    if (error)
                      return "inputConfig." + error;
                  }
                  if (message.entryCount != null && message.hasOwnProperty("entryCount")) {
                    if (!$util.isInteger(message.entryCount))
                      return "entryCount: integer expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  if (message.displayName != null && message.hasOwnProperty("displayName")) {
                    if (!$util.isString(message.displayName))
                      return "displayName: string expected";
                  }
                  return null;
                };
                Glossary.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.Glossary)
                    return object;
                  var message = new $root.google.cloud.translation.v3.Glossary();
                  if (object.name != null)
                    message.name = String(object.name);
                  if (object.languagePair != null) {
                    if (typeof object.languagePair !== "object")
                      throw TypeError(".google.cloud.translation.v3.Glossary.languagePair: object expected");
                    message.languagePair = $root.google.cloud.translation.v3.Glossary.LanguageCodePair.fromObject(object.languagePair);
                  }
                  if (object.languageCodesSet != null) {
                    if (typeof object.languageCodesSet !== "object")
                      throw TypeError(".google.cloud.translation.v3.Glossary.languageCodesSet: object expected");
                    message.languageCodesSet = $root.google.cloud.translation.v3.Glossary.LanguageCodesSet.fromObject(object.languageCodesSet);
                  }
                  if (object.inputConfig != null) {
                    if (typeof object.inputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.Glossary.inputConfig: object expected");
                    message.inputConfig = $root.google.cloud.translation.v3.GlossaryInputConfig.fromObject(object.inputConfig);
                  }
                  if (object.entryCount != null)
                    message.entryCount = object.entryCount | 0;
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.Glossary.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.Glossary.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  if (object.displayName != null)
                    message.displayName = String(object.displayName);
                  return message;
                };
                Glossary.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.inputConfig = null;
                    object.entryCount = 0;
                    object.submitTime = null;
                    object.endTime = null;
                    object.displayName = "";
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.languagePair != null && message.hasOwnProperty("languagePair")) {
                    object.languagePair = $root.google.cloud.translation.v3.Glossary.LanguageCodePair.toObject(message.languagePair, options);
                    if (options.oneofs)
                      object.languages = "languagePair";
                  }
                  if (message.languageCodesSet != null && message.hasOwnProperty("languageCodesSet")) {
                    object.languageCodesSet = $root.google.cloud.translation.v3.Glossary.LanguageCodesSet.toObject(message.languageCodesSet, options);
                    if (options.oneofs)
                      object.languages = "languageCodesSet";
                  }
                  if (message.inputConfig != null && message.hasOwnProperty("inputConfig"))
                    object.inputConfig = $root.google.cloud.translation.v3.GlossaryInputConfig.toObject(message.inputConfig, options);
                  if (message.entryCount != null && message.hasOwnProperty("entryCount"))
                    object.entryCount = message.entryCount;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  if (message.displayName != null && message.hasOwnProperty("displayName"))
                    object.displayName = message.displayName;
                  return object;
                };
                Glossary.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Glossary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.Glossary";
                };
                Glossary.LanguageCodePair = function() {
                  function LanguageCodePair(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  LanguageCodePair.prototype.sourceLanguageCode = "";
                  LanguageCodePair.prototype.targetLanguageCode = "";
                  LanguageCodePair.create = function create(properties) {
                    return new LanguageCodePair(properties);
                  };
                  LanguageCodePair.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(message.sourceLanguageCode);
                    if (message.targetLanguageCode != null && Object.hasOwnProperty.call(message, "targetLanguageCode"))
                      writer.uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.targetLanguageCode);
                    return writer;
                  };
                  LanguageCodePair.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  LanguageCodePair.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.Glossary.LanguageCodePair();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.sourceLanguageCode = reader.string();
                          break;
                        }
                        case 2: {
                          message.targetLanguageCode = reader.string();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  LanguageCodePair.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  LanguageCodePair.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                      if (!$util.isString(message.sourceLanguageCode))
                        return "sourceLanguageCode: string expected";
                    }
                    if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode")) {
                      if (!$util.isString(message.targetLanguageCode))
                        return "targetLanguageCode: string expected";
                    }
                    return null;
                  };
                  LanguageCodePair.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.cloud.translation.v3.Glossary.LanguageCodePair)
                      return object;
                    var message = new $root.google.cloud.translation.v3.Glossary.LanguageCodePair();
                    if (object.sourceLanguageCode != null)
                      message.sourceLanguageCode = String(object.sourceLanguageCode);
                    if (object.targetLanguageCode != null)
                      message.targetLanguageCode = String(object.targetLanguageCode);
                    return message;
                  };
                  LanguageCodePair.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      object.sourceLanguageCode = "";
                      object.targetLanguageCode = "";
                    }
                    if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                      object.sourceLanguageCode = message.sourceLanguageCode;
                    if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode"))
                      object.targetLanguageCode = message.targetLanguageCode;
                    return object;
                  };
                  LanguageCodePair.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  LanguageCodePair.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.cloud.translation.v3.Glossary.LanguageCodePair";
                  };
                  return LanguageCodePair;
                }();
                Glossary.LanguageCodesSet = function() {
                  function LanguageCodesSet(properties) {
                    this.languageCodes = [];
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  LanguageCodesSet.prototype.languageCodes = $util.emptyArray;
                  LanguageCodesSet.create = function create(properties) {
                    return new LanguageCodesSet(properties);
                  };
                  LanguageCodesSet.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.languageCodes != null && message.languageCodes.length)
                      for (var i = 0; i < message.languageCodes.length; ++i)
                        writer.uint32(
                          /* id 1, wireType 2 =*/
                          10
                        ).string(message.languageCodes[i]);
                    return writer;
                  };
                  LanguageCodesSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  LanguageCodesSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.Glossary.LanguageCodesSet();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          if (!(message.languageCodes && message.languageCodes.length))
                            message.languageCodes = [];
                          message.languageCodes.push(reader.string());
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  LanguageCodesSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  LanguageCodesSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.languageCodes != null && message.hasOwnProperty("languageCodes")) {
                      if (!Array.isArray(message.languageCodes))
                        return "languageCodes: array expected";
                      for (var i = 0; i < message.languageCodes.length; ++i)
                        if (!$util.isString(message.languageCodes[i]))
                          return "languageCodes: string[] expected";
                    }
                    return null;
                  };
                  LanguageCodesSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.cloud.translation.v3.Glossary.LanguageCodesSet)
                      return object;
                    var message = new $root.google.cloud.translation.v3.Glossary.LanguageCodesSet();
                    if (object.languageCodes) {
                      if (!Array.isArray(object.languageCodes))
                        throw TypeError(".google.cloud.translation.v3.Glossary.LanguageCodesSet.languageCodes: array expected");
                      message.languageCodes = [];
                      for (var i = 0; i < object.languageCodes.length; ++i)
                        message.languageCodes[i] = String(object.languageCodes[i]);
                    }
                    return message;
                  };
                  LanguageCodesSet.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                      object.languageCodes = [];
                    if (message.languageCodes && message.languageCodes.length) {
                      object.languageCodes = [];
                      for (var j = 0; j < message.languageCodes.length; ++j)
                        object.languageCodes[j] = message.languageCodes[j];
                    }
                    return object;
                  };
                  LanguageCodesSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  LanguageCodesSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.cloud.translation.v3.Glossary.LanguageCodesSet";
                  };
                  return LanguageCodesSet;
                }();
                return Glossary;
              }();
              v3.CreateGlossaryRequest = function() {
                function CreateGlossaryRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CreateGlossaryRequest.prototype.parent = "";
                CreateGlossaryRequest.prototype.glossary = null;
                CreateGlossaryRequest.create = function create(properties) {
                  return new CreateGlossaryRequest(properties);
                };
                CreateGlossaryRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.glossary != null && Object.hasOwnProperty.call(message, "glossary"))
                    $root.google.cloud.translation.v3.Glossary.encode(message.glossary, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  return writer;
                };
                CreateGlossaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                CreateGlossaryRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.CreateGlossaryRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.glossary = $root.google.cloud.translation.v3.Glossary.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                CreateGlossaryRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                CreateGlossaryRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.glossary != null && message.hasOwnProperty("glossary")) {
                    var error = $root.google.cloud.translation.v3.Glossary.verify(message.glossary);
                    if (error)
                      return "glossary." + error;
                  }
                  return null;
                };
                CreateGlossaryRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.CreateGlossaryRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.CreateGlossaryRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.glossary != null) {
                    if (typeof object.glossary !== "object")
                      throw TypeError(".google.cloud.translation.v3.CreateGlossaryRequest.glossary: object expected");
                    message.glossary = $root.google.cloud.translation.v3.Glossary.fromObject(object.glossary);
                  }
                  return message;
                };
                CreateGlossaryRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.glossary = null;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.glossary != null && message.hasOwnProperty("glossary"))
                    object.glossary = $root.google.cloud.translation.v3.Glossary.toObject(message.glossary, options);
                  return object;
                };
                CreateGlossaryRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CreateGlossaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.CreateGlossaryRequest";
                };
                return CreateGlossaryRequest;
              }();
              v3.GetGlossaryRequest = function() {
                function GetGlossaryRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GetGlossaryRequest.prototype.name = "";
                GetGlossaryRequest.create = function create(properties) {
                  return new GetGlossaryRequest(properties);
                };
                GetGlossaryRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  return writer;
                };
                GetGlossaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GetGlossaryRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.GetGlossaryRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GetGlossaryRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GetGlossaryRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  return null;
                };
                GetGlossaryRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.GetGlossaryRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.GetGlossaryRequest();
                  if (object.name != null)
                    message.name = String(object.name);
                  return message;
                };
                GetGlossaryRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.name = "";
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  return object;
                };
                GetGlossaryRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GetGlossaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.GetGlossaryRequest";
                };
                return GetGlossaryRequest;
              }();
              v3.DeleteGlossaryRequest = function() {
                function DeleteGlossaryRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DeleteGlossaryRequest.prototype.name = "";
                DeleteGlossaryRequest.create = function create(properties) {
                  return new DeleteGlossaryRequest(properties);
                };
                DeleteGlossaryRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  return writer;
                };
                DeleteGlossaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DeleteGlossaryRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DeleteGlossaryRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DeleteGlossaryRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DeleteGlossaryRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  return null;
                };
                DeleteGlossaryRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DeleteGlossaryRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DeleteGlossaryRequest();
                  if (object.name != null)
                    message.name = String(object.name);
                  return message;
                };
                DeleteGlossaryRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.name = "";
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  return object;
                };
                DeleteGlossaryRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DeleteGlossaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DeleteGlossaryRequest";
                };
                return DeleteGlossaryRequest;
              }();
              v3.ListGlossariesRequest = function() {
                function ListGlossariesRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListGlossariesRequest.prototype.parent = "";
                ListGlossariesRequest.prototype.pageSize = 0;
                ListGlossariesRequest.prototype.pageToken = "";
                ListGlossariesRequest.prototype.filter = "";
                ListGlossariesRequest.create = function create(properties) {
                  return new ListGlossariesRequest(properties);
                };
                ListGlossariesRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int32(message.pageSize);
                  if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.pageToken);
                  if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.filter);
                  return writer;
                };
                ListGlossariesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListGlossariesRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.ListGlossariesRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.pageSize = reader.int32();
                        break;
                      }
                      case 3: {
                        message.pageToken = reader.string();
                        break;
                      }
                      case 4: {
                        message.filter = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListGlossariesRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListGlossariesRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.pageSize != null && message.hasOwnProperty("pageSize")) {
                    if (!$util.isInteger(message.pageSize))
                      return "pageSize: integer expected";
                  }
                  if (message.pageToken != null && message.hasOwnProperty("pageToken")) {
                    if (!$util.isString(message.pageToken))
                      return "pageToken: string expected";
                  }
                  if (message.filter != null && message.hasOwnProperty("filter")) {
                    if (!$util.isString(message.filter))
                      return "filter: string expected";
                  }
                  return null;
                };
                ListGlossariesRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.ListGlossariesRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.ListGlossariesRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.pageSize != null)
                    message.pageSize = object.pageSize | 0;
                  if (object.pageToken != null)
                    message.pageToken = String(object.pageToken);
                  if (object.filter != null)
                    message.filter = String(object.filter);
                  return message;
                };
                ListGlossariesRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.pageSize = 0;
                    object.pageToken = "";
                    object.filter = "";
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                    object.pageSize = message.pageSize;
                  if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                    object.pageToken = message.pageToken;
                  if (message.filter != null && message.hasOwnProperty("filter"))
                    object.filter = message.filter;
                  return object;
                };
                ListGlossariesRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListGlossariesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.ListGlossariesRequest";
                };
                return ListGlossariesRequest;
              }();
              v3.ListGlossariesResponse = function() {
                function ListGlossariesResponse(properties) {
                  this.glossaries = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListGlossariesResponse.prototype.glossaries = $util.emptyArray;
                ListGlossariesResponse.prototype.nextPageToken = "";
                ListGlossariesResponse.create = function create(properties) {
                  return new ListGlossariesResponse(properties);
                };
                ListGlossariesResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.glossaries != null && message.glossaries.length)
                    for (var i = 0; i < message.glossaries.length; ++i)
                      $root.google.cloud.translation.v3.Glossary.encode(message.glossaries[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.nextPageToken);
                  return writer;
                };
                ListGlossariesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListGlossariesResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.ListGlossariesResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.glossaries && message.glossaries.length))
                          message.glossaries = [];
                        message.glossaries.push($root.google.cloud.translation.v3.Glossary.decode(reader, reader.uint32()));
                        break;
                      }
                      case 2: {
                        message.nextPageToken = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListGlossariesResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListGlossariesResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.glossaries != null && message.hasOwnProperty("glossaries")) {
                    if (!Array.isArray(message.glossaries))
                      return "glossaries: array expected";
                    for (var i = 0; i < message.glossaries.length; ++i) {
                      var error = $root.google.cloud.translation.v3.Glossary.verify(message.glossaries[i]);
                      if (error)
                        return "glossaries." + error;
                    }
                  }
                  if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken")) {
                    if (!$util.isString(message.nextPageToken))
                      return "nextPageToken: string expected";
                  }
                  return null;
                };
                ListGlossariesResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.ListGlossariesResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3.ListGlossariesResponse();
                  if (object.glossaries) {
                    if (!Array.isArray(object.glossaries))
                      throw TypeError(".google.cloud.translation.v3.ListGlossariesResponse.glossaries: array expected");
                    message.glossaries = [];
                    for (var i = 0; i < object.glossaries.length; ++i) {
                      if (typeof object.glossaries[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3.ListGlossariesResponse.glossaries: object expected");
                      message.glossaries[i] = $root.google.cloud.translation.v3.Glossary.fromObject(object.glossaries[i]);
                    }
                  }
                  if (object.nextPageToken != null)
                    message.nextPageToken = String(object.nextPageToken);
                  return message;
                };
                ListGlossariesResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.glossaries = [];
                  if (options.defaults)
                    object.nextPageToken = "";
                  if (message.glossaries && message.glossaries.length) {
                    object.glossaries = [];
                    for (var j = 0; j < message.glossaries.length; ++j)
                      object.glossaries[j] = $root.google.cloud.translation.v3.Glossary.toObject(message.glossaries[j], options);
                  }
                  if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                    object.nextPageToken = message.nextPageToken;
                  return object;
                };
                ListGlossariesResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListGlossariesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.ListGlossariesResponse";
                };
                return ListGlossariesResponse;
              }();
              v3.CreateGlossaryMetadata = function() {
                function CreateGlossaryMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CreateGlossaryMetadata.prototype.name = "";
                CreateGlossaryMetadata.prototype.state = 0;
                CreateGlossaryMetadata.prototype.submitTime = null;
                CreateGlossaryMetadata.create = function create(properties) {
                  return new CreateGlossaryMetadata(properties);
                };
                CreateGlossaryMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int32(message.state);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  return writer;
                };
                CreateGlossaryMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                CreateGlossaryMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.CreateGlossaryMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 2: {
                        message.state = reader.int32();
                        break;
                      }
                      case 3: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                CreateGlossaryMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                CreateGlossaryMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                CreateGlossaryMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.CreateGlossaryMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3.CreateGlossaryMetadata();
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.CreateGlossaryMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                CreateGlossaryMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    object.submitTime = null;
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3.CreateGlossaryMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3.CreateGlossaryMetadata.State[message.state] : message.state;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                CreateGlossaryMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CreateGlossaryMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.CreateGlossaryMetadata";
                };
                CreateGlossaryMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return CreateGlossaryMetadata;
              }();
              v3.DeleteGlossaryMetadata = function() {
                function DeleteGlossaryMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DeleteGlossaryMetadata.prototype.name = "";
                DeleteGlossaryMetadata.prototype.state = 0;
                DeleteGlossaryMetadata.prototype.submitTime = null;
                DeleteGlossaryMetadata.create = function create(properties) {
                  return new DeleteGlossaryMetadata(properties);
                };
                DeleteGlossaryMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int32(message.state);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  return writer;
                };
                DeleteGlossaryMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DeleteGlossaryMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DeleteGlossaryMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 2: {
                        message.state = reader.int32();
                        break;
                      }
                      case 3: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DeleteGlossaryMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DeleteGlossaryMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                DeleteGlossaryMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DeleteGlossaryMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DeleteGlossaryMetadata();
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.DeleteGlossaryMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                DeleteGlossaryMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    object.submitTime = null;
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3.DeleteGlossaryMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3.DeleteGlossaryMetadata.State[message.state] : message.state;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                DeleteGlossaryMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DeleteGlossaryMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DeleteGlossaryMetadata";
                };
                DeleteGlossaryMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return DeleteGlossaryMetadata;
              }();
              v3.DeleteGlossaryResponse = function() {
                function DeleteGlossaryResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DeleteGlossaryResponse.prototype.name = "";
                DeleteGlossaryResponse.prototype.submitTime = null;
                DeleteGlossaryResponse.prototype.endTime = null;
                DeleteGlossaryResponse.create = function create(properties) {
                  return new DeleteGlossaryResponse(properties);
                };
                DeleteGlossaryResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  return writer;
                };
                DeleteGlossaryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DeleteGlossaryResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.DeleteGlossaryResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 2: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DeleteGlossaryResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DeleteGlossaryResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  return null;
                };
                DeleteGlossaryResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.DeleteGlossaryResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3.DeleteGlossaryResponse();
                  if (object.name != null)
                    message.name = String(object.name);
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.DeleteGlossaryResponse.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.DeleteGlossaryResponse.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  return message;
                };
                DeleteGlossaryResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.submitTime = null;
                    object.endTime = null;
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  return object;
                };
                DeleteGlossaryResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DeleteGlossaryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.DeleteGlossaryResponse";
                };
                return DeleteGlossaryResponse;
              }();
              v3.BatchTranslateDocumentRequest = function() {
                function BatchTranslateDocumentRequest(properties) {
                  this.targetLanguageCodes = [];
                  this.inputConfigs = [];
                  this.models = {};
                  this.glossaries = {};
                  this.formatConversions = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateDocumentRequest.prototype.parent = "";
                BatchTranslateDocumentRequest.prototype.sourceLanguageCode = "";
                BatchTranslateDocumentRequest.prototype.targetLanguageCodes = $util.emptyArray;
                BatchTranslateDocumentRequest.prototype.inputConfigs = $util.emptyArray;
                BatchTranslateDocumentRequest.prototype.outputConfig = null;
                BatchTranslateDocumentRequest.prototype.models = $util.emptyObject;
                BatchTranslateDocumentRequest.prototype.glossaries = $util.emptyObject;
                BatchTranslateDocumentRequest.prototype.formatConversions = $util.emptyObject;
                BatchTranslateDocumentRequest.prototype.customizedAttribution = "";
                BatchTranslateDocumentRequest.prototype.enableShadowRemovalNativePdf = false;
                BatchTranslateDocumentRequest.prototype.enableRotationCorrection = false;
                BatchTranslateDocumentRequest.create = function create(properties) {
                  return new BatchTranslateDocumentRequest(properties);
                };
                BatchTranslateDocumentRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCodes != null && message.targetLanguageCodes.length)
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      writer.uint32(
                        /* id 3, wireType 2 =*/
                        26
                      ).string(message.targetLanguageCodes[i]);
                  if (message.inputConfigs != null && message.inputConfigs.length)
                    for (var i = 0; i < message.inputConfigs.length; ++i)
                      $root.google.cloud.translation.v3.BatchDocumentInputConfig.encode(message.inputConfigs[i], writer.uint32(
                        /* id 4, wireType 2 =*/
                        34
                      ).fork()).ldelim();
                  if (message.outputConfig != null && Object.hasOwnProperty.call(message, "outputConfig"))
                    $root.google.cloud.translation.v3.BatchDocumentOutputConfig.encode(message.outputConfig, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  if (message.models != null && Object.hasOwnProperty.call(message, "models"))
                    for (var keys = Object.keys(message.models), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 6, wireType 2 =*/
                        50
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.models[keys[i]]).ldelim();
                  if (message.glossaries != null && Object.hasOwnProperty.call(message, "glossaries"))
                    for (var keys = Object.keys(message.glossaries), i = 0; i < keys.length; ++i) {
                      writer.uint32(
                        /* id 7, wireType 2 =*/
                        58
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]);
                      $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.encode(message.glossaries[keys[i]], writer.uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).fork()).ldelim().ldelim();
                    }
                  if (message.formatConversions != null && Object.hasOwnProperty.call(message, "formatConversions"))
                    for (var keys = Object.keys(message.formatConversions), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 8, wireType 2 =*/
                        66
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.formatConversions[keys[i]]).ldelim();
                  if (message.customizedAttribution != null && Object.hasOwnProperty.call(message, "customizedAttribution"))
                    writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).string(message.customizedAttribution);
                  if (message.enableShadowRemovalNativePdf != null && Object.hasOwnProperty.call(message, "enableShadowRemovalNativePdf"))
                    writer.uint32(
                      /* id 11, wireType 0 =*/
                      88
                    ).bool(message.enableShadowRemovalNativePdf);
                  if (message.enableRotationCorrection != null && Object.hasOwnProperty.call(message, "enableRotationCorrection"))
                    writer.uint32(
                      /* id 12, wireType 0 =*/
                      96
                    ).bool(message.enableRotationCorrection);
                  return writer;
                };
                BatchTranslateDocumentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateDocumentRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchTranslateDocumentRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        if (!(message.targetLanguageCodes && message.targetLanguageCodes.length))
                          message.targetLanguageCodes = [];
                        message.targetLanguageCodes.push(reader.string());
                        break;
                      }
                      case 4: {
                        if (!(message.inputConfigs && message.inputConfigs.length))
                          message.inputConfigs = [];
                        message.inputConfigs.push($root.google.cloud.translation.v3.BatchDocumentInputConfig.decode(reader, reader.uint32()));
                        break;
                      }
                      case 5: {
                        message.outputConfig = $root.google.cloud.translation.v3.BatchDocumentOutputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 6: {
                        if (message.models === $util.emptyObject)
                          message.models = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.models[key] = value;
                        break;
                      }
                      case 7: {
                        if (message.glossaries === $util.emptyObject)
                          message.glossaries = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = null;
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.glossaries[key] = value;
                        break;
                      }
                      case 8: {
                        if (message.formatConversions === $util.emptyObject)
                          message.formatConversions = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.formatConversions[key] = value;
                        break;
                      }
                      case 10: {
                        message.customizedAttribution = reader.string();
                        break;
                      }
                      case 11: {
                        message.enableShadowRemovalNativePdf = reader.bool();
                        break;
                      }
                      case 12: {
                        message.enableRotationCorrection = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateDocumentRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateDocumentRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCodes != null && message.hasOwnProperty("targetLanguageCodes")) {
                    if (!Array.isArray(message.targetLanguageCodes))
                      return "targetLanguageCodes: array expected";
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      if (!$util.isString(message.targetLanguageCodes[i]))
                        return "targetLanguageCodes: string[] expected";
                  }
                  if (message.inputConfigs != null && message.hasOwnProperty("inputConfigs")) {
                    if (!Array.isArray(message.inputConfigs))
                      return "inputConfigs: array expected";
                    for (var i = 0; i < message.inputConfigs.length; ++i) {
                      var error = $root.google.cloud.translation.v3.BatchDocumentInputConfig.verify(message.inputConfigs[i]);
                      if (error)
                        return "inputConfigs." + error;
                    }
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig")) {
                    var error = $root.google.cloud.translation.v3.BatchDocumentOutputConfig.verify(message.outputConfig);
                    if (error)
                      return "outputConfig." + error;
                  }
                  if (message.models != null && message.hasOwnProperty("models")) {
                    if (!$util.isObject(message.models))
                      return "models: object expected";
                    var key = Object.keys(message.models);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.models[key[i]]))
                        return "models: string{k:string} expected";
                  }
                  if (message.glossaries != null && message.hasOwnProperty("glossaries")) {
                    if (!$util.isObject(message.glossaries))
                      return "glossaries: object expected";
                    var key = Object.keys(message.glossaries);
                    for (var i = 0; i < key.length; ++i) {
                      var error = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.verify(message.glossaries[key[i]]);
                      if (error)
                        return "glossaries." + error;
                    }
                  }
                  if (message.formatConversions != null && message.hasOwnProperty("formatConversions")) {
                    if (!$util.isObject(message.formatConversions))
                      return "formatConversions: object expected";
                    var key = Object.keys(message.formatConversions);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.formatConversions[key[i]]))
                        return "formatConversions: string{k:string} expected";
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution")) {
                    if (!$util.isString(message.customizedAttribution))
                      return "customizedAttribution: string expected";
                  }
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf")) {
                    if (typeof message.enableShadowRemovalNativePdf !== "boolean")
                      return "enableShadowRemovalNativePdf: boolean expected";
                  }
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection")) {
                    if (typeof message.enableRotationCorrection !== "boolean")
                      return "enableRotationCorrection: boolean expected";
                  }
                  return null;
                };
                BatchTranslateDocumentRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchTranslateDocumentRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchTranslateDocumentRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCodes) {
                    if (!Array.isArray(object.targetLanguageCodes))
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.targetLanguageCodes: array expected");
                    message.targetLanguageCodes = [];
                    for (var i = 0; i < object.targetLanguageCodes.length; ++i)
                      message.targetLanguageCodes[i] = String(object.targetLanguageCodes[i]);
                  }
                  if (object.inputConfigs) {
                    if (!Array.isArray(object.inputConfigs))
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.inputConfigs: array expected");
                    message.inputConfigs = [];
                    for (var i = 0; i < object.inputConfigs.length; ++i) {
                      if (typeof object.inputConfigs[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.inputConfigs: object expected");
                      message.inputConfigs[i] = $root.google.cloud.translation.v3.BatchDocumentInputConfig.fromObject(object.inputConfigs[i]);
                    }
                  }
                  if (object.outputConfig != null) {
                    if (typeof object.outputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.outputConfig: object expected");
                    message.outputConfig = $root.google.cloud.translation.v3.BatchDocumentOutputConfig.fromObject(object.outputConfig);
                  }
                  if (object.models) {
                    if (typeof object.models !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.models: object expected");
                    message.models = {};
                    for (var keys = Object.keys(object.models), i = 0; i < keys.length; ++i)
                      message.models[keys[i]] = String(object.models[keys[i]]);
                  }
                  if (object.glossaries) {
                    if (typeof object.glossaries !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.glossaries: object expected");
                    message.glossaries = {};
                    for (var keys = Object.keys(object.glossaries), i = 0; i < keys.length; ++i) {
                      if (typeof object.glossaries[keys[i]] !== "object")
                        throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.glossaries: object expected");
                      message.glossaries[keys[i]] = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.fromObject(object.glossaries[keys[i]]);
                    }
                  }
                  if (object.formatConversions) {
                    if (typeof object.formatConversions !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentRequest.formatConversions: object expected");
                    message.formatConversions = {};
                    for (var keys = Object.keys(object.formatConversions), i = 0; i < keys.length; ++i)
                      message.formatConversions[keys[i]] = String(object.formatConversions[keys[i]]);
                  }
                  if (object.customizedAttribution != null)
                    message.customizedAttribution = String(object.customizedAttribution);
                  if (object.enableShadowRemovalNativePdf != null)
                    message.enableShadowRemovalNativePdf = Boolean(object.enableShadowRemovalNativePdf);
                  if (object.enableRotationCorrection != null)
                    message.enableRotationCorrection = Boolean(object.enableRotationCorrection);
                  return message;
                };
                BatchTranslateDocumentRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults) {
                    object.targetLanguageCodes = [];
                    object.inputConfigs = [];
                  }
                  if (options.objects || options.defaults) {
                    object.models = {};
                    object.glossaries = {};
                    object.formatConversions = {};
                  }
                  if (options.defaults) {
                    object.parent = "";
                    object.sourceLanguageCode = "";
                    object.outputConfig = null;
                    object.customizedAttribution = "";
                    object.enableShadowRemovalNativePdf = false;
                    object.enableRotationCorrection = false;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCodes && message.targetLanguageCodes.length) {
                    object.targetLanguageCodes = [];
                    for (var j = 0; j < message.targetLanguageCodes.length; ++j)
                      object.targetLanguageCodes[j] = message.targetLanguageCodes[j];
                  }
                  if (message.inputConfigs && message.inputConfigs.length) {
                    object.inputConfigs = [];
                    for (var j = 0; j < message.inputConfigs.length; ++j)
                      object.inputConfigs[j] = $root.google.cloud.translation.v3.BatchDocumentInputConfig.toObject(message.inputConfigs[j], options);
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig"))
                    object.outputConfig = $root.google.cloud.translation.v3.BatchDocumentOutputConfig.toObject(message.outputConfig, options);
                  var keys2;
                  if (message.models && (keys2 = Object.keys(message.models)).length) {
                    object.models = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.models[keys2[j]] = message.models[keys2[j]];
                  }
                  if (message.glossaries && (keys2 = Object.keys(message.glossaries)).length) {
                    object.glossaries = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.glossaries[keys2[j]] = $root.google.cloud.translation.v3.TranslateTextGlossaryConfig.toObject(message.glossaries[keys2[j]], options);
                  }
                  if (message.formatConversions && (keys2 = Object.keys(message.formatConversions)).length) {
                    object.formatConversions = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.formatConversions[keys2[j]] = message.formatConversions[keys2[j]];
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution"))
                    object.customizedAttribution = message.customizedAttribution;
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf"))
                    object.enableShadowRemovalNativePdf = message.enableShadowRemovalNativePdf;
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection"))
                    object.enableRotationCorrection = message.enableRotationCorrection;
                  return object;
                };
                BatchTranslateDocumentRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchTranslateDocumentRequest";
                };
                return BatchTranslateDocumentRequest;
              }();
              v3.BatchDocumentInputConfig = function() {
                function BatchDocumentInputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchDocumentInputConfig.prototype.gcsSource = null;
                var $oneOfFields;
                Object.defineProperty(BatchDocumentInputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                BatchDocumentInputConfig.create = function create(properties) {
                  return new BatchDocumentInputConfig(properties);
                };
                BatchDocumentInputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                BatchDocumentInputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchDocumentInputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchDocumentInputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsSource = $root.google.cloud.translation.v3.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchDocumentInputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchDocumentInputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  return null;
                };
                BatchDocumentInputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchDocumentInputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchDocumentInputConfig();
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchDocumentInputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3.GcsSource.fromObject(object.gcsSource);
                  }
                  return message;
                };
                BatchDocumentInputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  return object;
                };
                BatchDocumentInputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchDocumentInputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchDocumentInputConfig";
                };
                return BatchDocumentInputConfig;
              }();
              v3.BatchDocumentOutputConfig = function() {
                function BatchDocumentOutputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchDocumentOutputConfig.prototype.gcsDestination = null;
                var $oneOfFields;
                Object.defineProperty(BatchDocumentOutputConfig.prototype, "destination", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsDestination"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                BatchDocumentOutputConfig.create = function create(properties) {
                  return new BatchDocumentOutputConfig(properties);
                };
                BatchDocumentOutputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsDestination != null && Object.hasOwnProperty.call(message, "gcsDestination"))
                    $root.google.cloud.translation.v3.GcsDestination.encode(message.gcsDestination, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                BatchDocumentOutputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchDocumentOutputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchDocumentOutputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchDocumentOutputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchDocumentOutputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    properties.destination = 1;
                    {
                      var error = $root.google.cloud.translation.v3.GcsDestination.verify(message.gcsDestination);
                      if (error)
                        return "gcsDestination." + error;
                    }
                  }
                  return null;
                };
                BatchDocumentOutputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchDocumentOutputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchDocumentOutputConfig();
                  if (object.gcsDestination != null) {
                    if (typeof object.gcsDestination !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchDocumentOutputConfig.gcsDestination: object expected");
                    message.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.fromObject(object.gcsDestination);
                  }
                  return message;
                };
                BatchDocumentOutputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    object.gcsDestination = $root.google.cloud.translation.v3.GcsDestination.toObject(message.gcsDestination, options);
                    if (options.oneofs)
                      object.destination = "gcsDestination";
                  }
                  return object;
                };
                BatchDocumentOutputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchDocumentOutputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchDocumentOutputConfig";
                };
                return BatchDocumentOutputConfig;
              }();
              v3.BatchTranslateDocumentResponse = function() {
                function BatchTranslateDocumentResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateDocumentResponse.prototype.totalPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.translatedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.failedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.totalBillablePages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.totalBillableCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.submitTime = null;
                BatchTranslateDocumentResponse.prototype.endTime = null;
                BatchTranslateDocumentResponse.create = function create(properties) {
                  return new BatchTranslateDocumentResponse(properties);
                };
                BatchTranslateDocumentResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.totalPages != null && Object.hasOwnProperty.call(message, "totalPages"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int64(message.totalPages);
                  if (message.translatedPages != null && Object.hasOwnProperty.call(message, "translatedPages"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.translatedPages);
                  if (message.failedPages != null && Object.hasOwnProperty.call(message, "failedPages"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.failedPages);
                  if (message.totalBillablePages != null && Object.hasOwnProperty.call(message, "totalBillablePages"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int64(message.totalBillablePages);
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 5, wireType 0 =*/
                      40
                    ).int64(message.totalCharacters);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 6, wireType 0 =*/
                      48
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 7, wireType 0 =*/
                      56
                    ).int64(message.failedCharacters);
                  if (message.totalBillableCharacters != null && Object.hasOwnProperty.call(message, "totalBillableCharacters"))
                    writer.uint32(
                      /* id 8, wireType 0 =*/
                      64
                    ).int64(message.totalBillableCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 9, wireType 2 =*/
                      74
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateDocumentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateDocumentResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchTranslateDocumentResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.totalPages = reader.int64();
                        break;
                      }
                      case 2: {
                        message.translatedPages = reader.int64();
                        break;
                      }
                      case 3: {
                        message.failedPages = reader.int64();
                        break;
                      }
                      case 4: {
                        message.totalBillablePages = reader.int64();
                        break;
                      }
                      case 5: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 6: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 7: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 8: {
                        message.totalBillableCharacters = reader.int64();
                        break;
                      }
                      case 9: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 10: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateDocumentResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateDocumentResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.totalPages != null && message.hasOwnProperty("totalPages")) {
                    if (!$util.isInteger(message.totalPages) && !(message.totalPages && $util.isInteger(message.totalPages.low) && $util.isInteger(message.totalPages.high)))
                      return "totalPages: integer|Long expected";
                  }
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages")) {
                    if (!$util.isInteger(message.translatedPages) && !(message.translatedPages && $util.isInteger(message.translatedPages.low) && $util.isInteger(message.translatedPages.high)))
                      return "translatedPages: integer|Long expected";
                  }
                  if (message.failedPages != null && message.hasOwnProperty("failedPages")) {
                    if (!$util.isInteger(message.failedPages) && !(message.failedPages && $util.isInteger(message.failedPages.low) && $util.isInteger(message.failedPages.high)))
                      return "failedPages: integer|Long expected";
                  }
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages")) {
                    if (!$util.isInteger(message.totalBillablePages) && !(message.totalBillablePages && $util.isInteger(message.totalBillablePages.low) && $util.isInteger(message.totalBillablePages.high)))
                      return "totalBillablePages: integer|Long expected";
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters")) {
                    if (!$util.isInteger(message.totalBillableCharacters) && !(message.totalBillableCharacters && $util.isInteger(message.totalBillableCharacters.low) && $util.isInteger(message.totalBillableCharacters.high)))
                      return "totalBillableCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  return null;
                };
                BatchTranslateDocumentResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchTranslateDocumentResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchTranslateDocumentResponse();
                  if (object.totalPages != null) {
                    if ($util.Long)
                      (message.totalPages = $util.Long.fromValue(object.totalPages)).unsigned = false;
                    else if (typeof object.totalPages === "string")
                      message.totalPages = parseInt(object.totalPages, 10);
                    else if (typeof object.totalPages === "number")
                      message.totalPages = object.totalPages;
                    else if (typeof object.totalPages === "object")
                      message.totalPages = new $util.LongBits(object.totalPages.low >>> 0, object.totalPages.high >>> 0).toNumber();
                  }
                  if (object.translatedPages != null) {
                    if ($util.Long)
                      (message.translatedPages = $util.Long.fromValue(object.translatedPages)).unsigned = false;
                    else if (typeof object.translatedPages === "string")
                      message.translatedPages = parseInt(object.translatedPages, 10);
                    else if (typeof object.translatedPages === "number")
                      message.translatedPages = object.translatedPages;
                    else if (typeof object.translatedPages === "object")
                      message.translatedPages = new $util.LongBits(object.translatedPages.low >>> 0, object.translatedPages.high >>> 0).toNumber();
                  }
                  if (object.failedPages != null) {
                    if ($util.Long)
                      (message.failedPages = $util.Long.fromValue(object.failedPages)).unsigned = false;
                    else if (typeof object.failedPages === "string")
                      message.failedPages = parseInt(object.failedPages, 10);
                    else if (typeof object.failedPages === "number")
                      message.failedPages = object.failedPages;
                    else if (typeof object.failedPages === "object")
                      message.failedPages = new $util.LongBits(object.failedPages.low >>> 0, object.failedPages.high >>> 0).toNumber();
                  }
                  if (object.totalBillablePages != null) {
                    if ($util.Long)
                      (message.totalBillablePages = $util.Long.fromValue(object.totalBillablePages)).unsigned = false;
                    else if (typeof object.totalBillablePages === "string")
                      message.totalBillablePages = parseInt(object.totalBillablePages, 10);
                    else if (typeof object.totalBillablePages === "number")
                      message.totalBillablePages = object.totalBillablePages;
                    else if (typeof object.totalBillablePages === "object")
                      message.totalBillablePages = new $util.LongBits(object.totalBillablePages.low >>> 0, object.totalBillablePages.high >>> 0).toNumber();
                  }
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.totalBillableCharacters != null) {
                    if ($util.Long)
                      (message.totalBillableCharacters = $util.Long.fromValue(object.totalBillableCharacters)).unsigned = false;
                    else if (typeof object.totalBillableCharacters === "string")
                      message.totalBillableCharacters = parseInt(object.totalBillableCharacters, 10);
                    else if (typeof object.totalBillableCharacters === "number")
                      message.totalBillableCharacters = object.totalBillableCharacters;
                    else if (typeof object.totalBillableCharacters === "object")
                      message.totalBillableCharacters = new $util.LongBits(object.totalBillableCharacters.low >>> 0, object.totalBillableCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentResponse.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentResponse.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  return message;
                };
                BatchTranslateDocumentResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillablePages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillablePages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillableCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillableCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                    object.endTime = null;
                  }
                  if (message.totalPages != null && message.hasOwnProperty("totalPages"))
                    if (typeof message.totalPages === "number")
                      object.totalPages = options.longs === String ? String(message.totalPages) : message.totalPages;
                    else
                      object.totalPages = options.longs === String ? $util.Long.prototype.toString.call(message.totalPages) : options.longs === Number ? new $util.LongBits(message.totalPages.low >>> 0, message.totalPages.high >>> 0).toNumber() : message.totalPages;
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages"))
                    if (typeof message.translatedPages === "number")
                      object.translatedPages = options.longs === String ? String(message.translatedPages) : message.translatedPages;
                    else
                      object.translatedPages = options.longs === String ? $util.Long.prototype.toString.call(message.translatedPages) : options.longs === Number ? new $util.LongBits(message.translatedPages.low >>> 0, message.translatedPages.high >>> 0).toNumber() : message.translatedPages;
                  if (message.failedPages != null && message.hasOwnProperty("failedPages"))
                    if (typeof message.failedPages === "number")
                      object.failedPages = options.longs === String ? String(message.failedPages) : message.failedPages;
                    else
                      object.failedPages = options.longs === String ? $util.Long.prototype.toString.call(message.failedPages) : options.longs === Number ? new $util.LongBits(message.failedPages.low >>> 0, message.failedPages.high >>> 0).toNumber() : message.failedPages;
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages"))
                    if (typeof message.totalBillablePages === "number")
                      object.totalBillablePages = options.longs === String ? String(message.totalBillablePages) : message.totalBillablePages;
                    else
                      object.totalBillablePages = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillablePages) : options.longs === Number ? new $util.LongBits(message.totalBillablePages.low >>> 0, message.totalBillablePages.high >>> 0).toNumber() : message.totalBillablePages;
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters"))
                    if (typeof message.totalBillableCharacters === "number")
                      object.totalBillableCharacters = options.longs === String ? String(message.totalBillableCharacters) : message.totalBillableCharacters;
                    else
                      object.totalBillableCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillableCharacters) : options.longs === Number ? new $util.LongBits(message.totalBillableCharacters.low >>> 0, message.totalBillableCharacters.high >>> 0).toNumber() : message.totalBillableCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  return object;
                };
                BatchTranslateDocumentResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateDocumentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchTranslateDocumentResponse";
                };
                return BatchTranslateDocumentResponse;
              }();
              v3.BatchTranslateDocumentMetadata = function() {
                function BatchTranslateDocumentMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateDocumentMetadata.prototype.state = 0;
                BatchTranslateDocumentMetadata.prototype.totalPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.translatedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.failedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.totalBillablePages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.totalBillableCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.submitTime = null;
                BatchTranslateDocumentMetadata.create = function create(properties) {
                  return new BatchTranslateDocumentMetadata(properties);
                };
                BatchTranslateDocumentMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int32(message.state);
                  if (message.totalPages != null && Object.hasOwnProperty.call(message, "totalPages"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.totalPages);
                  if (message.translatedPages != null && Object.hasOwnProperty.call(message, "translatedPages"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.translatedPages);
                  if (message.failedPages != null && Object.hasOwnProperty.call(message, "failedPages"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int64(message.failedPages);
                  if (message.totalBillablePages != null && Object.hasOwnProperty.call(message, "totalBillablePages"))
                    writer.uint32(
                      /* id 5, wireType 0 =*/
                      40
                    ).int64(message.totalBillablePages);
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 6, wireType 0 =*/
                      48
                    ).int64(message.totalCharacters);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 7, wireType 0 =*/
                      56
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 8, wireType 0 =*/
                      64
                    ).int64(message.failedCharacters);
                  if (message.totalBillableCharacters != null && Object.hasOwnProperty.call(message, "totalBillableCharacters"))
                    writer.uint32(
                      /* id 9, wireType 0 =*/
                      72
                    ).int64(message.totalBillableCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateDocumentMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateDocumentMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3.BatchTranslateDocumentMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.state = reader.int32();
                        break;
                      }
                      case 2: {
                        message.totalPages = reader.int64();
                        break;
                      }
                      case 3: {
                        message.translatedPages = reader.int64();
                        break;
                      }
                      case 4: {
                        message.failedPages = reader.int64();
                        break;
                      }
                      case 5: {
                        message.totalBillablePages = reader.int64();
                        break;
                      }
                      case 6: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 7: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 8: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 9: {
                        message.totalBillableCharacters = reader.int64();
                        break;
                      }
                      case 10: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateDocumentMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateDocumentMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.totalPages != null && message.hasOwnProperty("totalPages")) {
                    if (!$util.isInteger(message.totalPages) && !(message.totalPages && $util.isInteger(message.totalPages.low) && $util.isInteger(message.totalPages.high)))
                      return "totalPages: integer|Long expected";
                  }
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages")) {
                    if (!$util.isInteger(message.translatedPages) && !(message.translatedPages && $util.isInteger(message.translatedPages.low) && $util.isInteger(message.translatedPages.high)))
                      return "translatedPages: integer|Long expected";
                  }
                  if (message.failedPages != null && message.hasOwnProperty("failedPages")) {
                    if (!$util.isInteger(message.failedPages) && !(message.failedPages && $util.isInteger(message.failedPages.low) && $util.isInteger(message.failedPages.high)))
                      return "failedPages: integer|Long expected";
                  }
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages")) {
                    if (!$util.isInteger(message.totalBillablePages) && !(message.totalBillablePages && $util.isInteger(message.totalBillablePages.low) && $util.isInteger(message.totalBillablePages.high)))
                      return "totalBillablePages: integer|Long expected";
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters")) {
                    if (!$util.isInteger(message.totalBillableCharacters) && !(message.totalBillableCharacters && $util.isInteger(message.totalBillableCharacters.low) && $util.isInteger(message.totalBillableCharacters.high)))
                      return "totalBillableCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                BatchTranslateDocumentMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3.BatchTranslateDocumentMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3.BatchTranslateDocumentMetadata();
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.totalPages != null) {
                    if ($util.Long)
                      (message.totalPages = $util.Long.fromValue(object.totalPages)).unsigned = false;
                    else if (typeof object.totalPages === "string")
                      message.totalPages = parseInt(object.totalPages, 10);
                    else if (typeof object.totalPages === "number")
                      message.totalPages = object.totalPages;
                    else if (typeof object.totalPages === "object")
                      message.totalPages = new $util.LongBits(object.totalPages.low >>> 0, object.totalPages.high >>> 0).toNumber();
                  }
                  if (object.translatedPages != null) {
                    if ($util.Long)
                      (message.translatedPages = $util.Long.fromValue(object.translatedPages)).unsigned = false;
                    else if (typeof object.translatedPages === "string")
                      message.translatedPages = parseInt(object.translatedPages, 10);
                    else if (typeof object.translatedPages === "number")
                      message.translatedPages = object.translatedPages;
                    else if (typeof object.translatedPages === "object")
                      message.translatedPages = new $util.LongBits(object.translatedPages.low >>> 0, object.translatedPages.high >>> 0).toNumber();
                  }
                  if (object.failedPages != null) {
                    if ($util.Long)
                      (message.failedPages = $util.Long.fromValue(object.failedPages)).unsigned = false;
                    else if (typeof object.failedPages === "string")
                      message.failedPages = parseInt(object.failedPages, 10);
                    else if (typeof object.failedPages === "number")
                      message.failedPages = object.failedPages;
                    else if (typeof object.failedPages === "object")
                      message.failedPages = new $util.LongBits(object.failedPages.low >>> 0, object.failedPages.high >>> 0).toNumber();
                  }
                  if (object.totalBillablePages != null) {
                    if ($util.Long)
                      (message.totalBillablePages = $util.Long.fromValue(object.totalBillablePages)).unsigned = false;
                    else if (typeof object.totalBillablePages === "string")
                      message.totalBillablePages = parseInt(object.totalBillablePages, 10);
                    else if (typeof object.totalBillablePages === "number")
                      message.totalBillablePages = object.totalBillablePages;
                    else if (typeof object.totalBillablePages === "object")
                      message.totalBillablePages = new $util.LongBits(object.totalBillablePages.low >>> 0, object.totalBillablePages.high >>> 0).toNumber();
                  }
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.totalBillableCharacters != null) {
                    if ($util.Long)
                      (message.totalBillableCharacters = $util.Long.fromValue(object.totalBillableCharacters)).unsigned = false;
                    else if (typeof object.totalBillableCharacters === "string")
                      message.totalBillableCharacters = parseInt(object.totalBillableCharacters, 10);
                    else if (typeof object.totalBillableCharacters === "number")
                      message.totalBillableCharacters = object.totalBillableCharacters;
                    else if (typeof object.totalBillableCharacters === "object")
                      message.totalBillableCharacters = new $util.LongBits(object.totalBillableCharacters.low >>> 0, object.totalBillableCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3.BatchTranslateDocumentMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                BatchTranslateDocumentMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillablePages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillablePages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillableCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillableCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3.BatchTranslateDocumentMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3.BatchTranslateDocumentMetadata.State[message.state] : message.state;
                  if (message.totalPages != null && message.hasOwnProperty("totalPages"))
                    if (typeof message.totalPages === "number")
                      object.totalPages = options.longs === String ? String(message.totalPages) : message.totalPages;
                    else
                      object.totalPages = options.longs === String ? $util.Long.prototype.toString.call(message.totalPages) : options.longs === Number ? new $util.LongBits(message.totalPages.low >>> 0, message.totalPages.high >>> 0).toNumber() : message.totalPages;
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages"))
                    if (typeof message.translatedPages === "number")
                      object.translatedPages = options.longs === String ? String(message.translatedPages) : message.translatedPages;
                    else
                      object.translatedPages = options.longs === String ? $util.Long.prototype.toString.call(message.translatedPages) : options.longs === Number ? new $util.LongBits(message.translatedPages.low >>> 0, message.translatedPages.high >>> 0).toNumber() : message.translatedPages;
                  if (message.failedPages != null && message.hasOwnProperty("failedPages"))
                    if (typeof message.failedPages === "number")
                      object.failedPages = options.longs === String ? String(message.failedPages) : message.failedPages;
                    else
                      object.failedPages = options.longs === String ? $util.Long.prototype.toString.call(message.failedPages) : options.longs === Number ? new $util.LongBits(message.failedPages.low >>> 0, message.failedPages.high >>> 0).toNumber() : message.failedPages;
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages"))
                    if (typeof message.totalBillablePages === "number")
                      object.totalBillablePages = options.longs === String ? String(message.totalBillablePages) : message.totalBillablePages;
                    else
                      object.totalBillablePages = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillablePages) : options.longs === Number ? new $util.LongBits(message.totalBillablePages.low >>> 0, message.totalBillablePages.high >>> 0).toNumber() : message.totalBillablePages;
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters"))
                    if (typeof message.totalBillableCharacters === "number")
                      object.totalBillableCharacters = options.longs === String ? String(message.totalBillableCharacters) : message.totalBillableCharacters;
                    else
                      object.totalBillableCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillableCharacters) : options.longs === Number ? new $util.LongBits(message.totalBillableCharacters.low >>> 0, message.totalBillableCharacters.high >>> 0).toNumber() : message.totalBillableCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                BatchTranslateDocumentMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateDocumentMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3.BatchTranslateDocumentMetadata";
                };
                BatchTranslateDocumentMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return BatchTranslateDocumentMetadata;
              }();
              return v3;
            }();
            translation.v3beta1 = function() {
              var v3beta1 = {};
              v3beta1.TranslationService = function() {
                function TranslationService(rpcImpl, requestDelimited, responseDelimited) {
                  $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
                (TranslationService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TranslationService;
                TranslationService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                  return new this(rpcImpl, requestDelimited, responseDelimited);
                };
                Object.defineProperty(TranslationService.prototype.translateText = function translateText(request, callback) {
                  return this.rpcCall(translateText, $root.google.cloud.translation.v3beta1.TranslateTextRequest, $root.google.cloud.translation.v3beta1.TranslateTextResponse, request, callback);
                }, "name", { value: "TranslateText" });
                Object.defineProperty(TranslationService.prototype.detectLanguage = function detectLanguage(request, callback) {
                  return this.rpcCall(detectLanguage, $root.google.cloud.translation.v3beta1.DetectLanguageRequest, $root.google.cloud.translation.v3beta1.DetectLanguageResponse, request, callback);
                }, "name", { value: "DetectLanguage" });
                Object.defineProperty(TranslationService.prototype.getSupportedLanguages = function getSupportedLanguages(request, callback) {
                  return this.rpcCall(getSupportedLanguages, $root.google.cloud.translation.v3beta1.GetSupportedLanguagesRequest, $root.google.cloud.translation.v3beta1.SupportedLanguages, request, callback);
                }, "name", { value: "GetSupportedLanguages" });
                Object.defineProperty(TranslationService.prototype.translateDocument = function translateDocument(request, callback) {
                  return this.rpcCall(translateDocument, $root.google.cloud.translation.v3beta1.TranslateDocumentRequest, $root.google.cloud.translation.v3beta1.TranslateDocumentResponse, request, callback);
                }, "name", { value: "TranslateDocument" });
                Object.defineProperty(TranslationService.prototype.batchTranslateText = function batchTranslateText(request, callback) {
                  return this.rpcCall(batchTranslateText, $root.google.cloud.translation.v3beta1.BatchTranslateTextRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "BatchTranslateText" });
                Object.defineProperty(TranslationService.prototype.batchTranslateDocument = function batchTranslateDocument(request, callback) {
                  return this.rpcCall(batchTranslateDocument, $root.google.cloud.translation.v3beta1.BatchTranslateDocumentRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "BatchTranslateDocument" });
                Object.defineProperty(TranslationService.prototype.createGlossary = function createGlossary(request, callback) {
                  return this.rpcCall(createGlossary, $root.google.cloud.translation.v3beta1.CreateGlossaryRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "CreateGlossary" });
                Object.defineProperty(TranslationService.prototype.listGlossaries = function listGlossaries(request, callback) {
                  return this.rpcCall(listGlossaries, $root.google.cloud.translation.v3beta1.ListGlossariesRequest, $root.google.cloud.translation.v3beta1.ListGlossariesResponse, request, callback);
                }, "name", { value: "ListGlossaries" });
                Object.defineProperty(TranslationService.prototype.getGlossary = function getGlossary(request, callback) {
                  return this.rpcCall(getGlossary, $root.google.cloud.translation.v3beta1.GetGlossaryRequest, $root.google.cloud.translation.v3beta1.Glossary, request, callback);
                }, "name", { value: "GetGlossary" });
                Object.defineProperty(TranslationService.prototype.deleteGlossary = function deleteGlossary(request, callback) {
                  return this.rpcCall(deleteGlossary, $root.google.cloud.translation.v3beta1.DeleteGlossaryRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "DeleteGlossary" });
                return TranslationService;
              }();
              v3beta1.TranslateTextGlossaryConfig = function() {
                function TranslateTextGlossaryConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateTextGlossaryConfig.prototype.glossary = "";
                TranslateTextGlossaryConfig.prototype.ignoreCase = false;
                TranslateTextGlossaryConfig.create = function create(properties) {
                  return new TranslateTextGlossaryConfig(properties);
                };
                TranslateTextGlossaryConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.glossary != null && Object.hasOwnProperty.call(message, "glossary"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.glossary);
                  if (message.ignoreCase != null && Object.hasOwnProperty.call(message, "ignoreCase"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).bool(message.ignoreCase);
                  return writer;
                };
                TranslateTextGlossaryConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateTextGlossaryConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.glossary = reader.string();
                        break;
                      }
                      case 2: {
                        message.ignoreCase = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateTextGlossaryConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateTextGlossaryConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.glossary != null && message.hasOwnProperty("glossary")) {
                    if (!$util.isString(message.glossary))
                      return "glossary: string expected";
                  }
                  if (message.ignoreCase != null && message.hasOwnProperty("ignoreCase")) {
                    if (typeof message.ignoreCase !== "boolean")
                      return "ignoreCase: boolean expected";
                  }
                  return null;
                };
                TranslateTextGlossaryConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig();
                  if (object.glossary != null)
                    message.glossary = String(object.glossary);
                  if (object.ignoreCase != null)
                    message.ignoreCase = Boolean(object.ignoreCase);
                  return message;
                };
                TranslateTextGlossaryConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.glossary = "";
                    object.ignoreCase = false;
                  }
                  if (message.glossary != null && message.hasOwnProperty("glossary"))
                    object.glossary = message.glossary;
                  if (message.ignoreCase != null && message.hasOwnProperty("ignoreCase"))
                    object.ignoreCase = message.ignoreCase;
                  return object;
                };
                TranslateTextGlossaryConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateTextGlossaryConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.TranslateTextGlossaryConfig";
                };
                return TranslateTextGlossaryConfig;
              }();
              v3beta1.TranslateTextRequest = function() {
                function TranslateTextRequest(properties) {
                  this.contents = [];
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateTextRequest.prototype.contents = $util.emptyArray;
                TranslateTextRequest.prototype.mimeType = "";
                TranslateTextRequest.prototype.sourceLanguageCode = "";
                TranslateTextRequest.prototype.targetLanguageCode = "";
                TranslateTextRequest.prototype.parent = "";
                TranslateTextRequest.prototype.model = "";
                TranslateTextRequest.prototype.glossaryConfig = null;
                TranslateTextRequest.prototype.labels = $util.emptyObject;
                TranslateTextRequest.create = function create(properties) {
                  return new TranslateTextRequest(properties);
                };
                TranslateTextRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.contents != null && message.contents.length)
                    for (var i = 0; i < message.contents.length; ++i)
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(message.contents[i]);
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.mimeType);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCode != null && Object.hasOwnProperty.call(message, "targetLanguageCode"))
                    writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).string(message.targetLanguageCode);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 7, wireType 2 =*/
                      58
                    ).fork()).ldelim();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 8, wireType 2 =*/
                      66
                    ).string(message.parent);
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 10, wireType 2 =*/
                        82
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  return writer;
                };
                TranslateTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateTextRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.TranslateTextRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.contents && message.contents.length))
                          message.contents = [];
                        message.contents.push(reader.string());
                        break;
                      }
                      case 3: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 4: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 5: {
                        message.targetLanguageCode = reader.string();
                        break;
                      }
                      case 8: {
                        message.parent = reader.string();
                        break;
                      }
                      case 6: {
                        message.model = reader.string();
                        break;
                      }
                      case 7: {
                        message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 10: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateTextRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateTextRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.contents != null && message.hasOwnProperty("contents")) {
                    if (!Array.isArray(message.contents))
                      return "contents: array expected";
                    for (var i = 0; i < message.contents.length; ++i)
                      if (!$util.isString(message.contents[i]))
                        return "contents: string[] expected";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode")) {
                    if (!$util.isString(message.targetLanguageCode))
                      return "targetLanguageCode: string expected";
                  }
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  return null;
                };
                TranslateTextRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.TranslateTextRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.TranslateTextRequest();
                  if (object.contents) {
                    if (!Array.isArray(object.contents))
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateTextRequest.contents: array expected");
                    message.contents = [];
                    for (var i = 0; i < object.contents.length; ++i)
                      message.contents[i] = String(object.contents[i]);
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCode != null)
                    message.targetLanguageCode = String(object.targetLanguageCode);
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateTextRequest.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateTextRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  return message;
                };
                TranslateTextRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.contents = [];
                  if (options.objects || options.defaults)
                    object.labels = {};
                  if (options.defaults) {
                    object.mimeType = "";
                    object.sourceLanguageCode = "";
                    object.targetLanguageCode = "";
                    object.model = "";
                    object.glossaryConfig = null;
                    object.parent = "";
                  }
                  if (message.contents && message.contents.length) {
                    object.contents = [];
                    for (var j = 0; j < message.contents.length; ++j)
                      object.contents[j] = message.contents[j];
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode"))
                    object.targetLanguageCode = message.targetLanguageCode;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  var keys2;
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  return object;
                };
                TranslateTextRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.TranslateTextRequest";
                };
                return TranslateTextRequest;
              }();
              v3beta1.TranslateTextResponse = function() {
                function TranslateTextResponse(properties) {
                  this.translations = [];
                  this.glossaryTranslations = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateTextResponse.prototype.translations = $util.emptyArray;
                TranslateTextResponse.prototype.glossaryTranslations = $util.emptyArray;
                TranslateTextResponse.create = function create(properties) {
                  return new TranslateTextResponse(properties);
                };
                TranslateTextResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.translations != null && message.translations.length)
                    for (var i = 0; i < message.translations.length; ++i)
                      $root.google.cloud.translation.v3beta1.Translation.encode(message.translations[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  if (message.glossaryTranslations != null && message.glossaryTranslations.length)
                    for (var i = 0; i < message.glossaryTranslations.length; ++i)
                      $root.google.cloud.translation.v3beta1.Translation.encode(message.glossaryTranslations[i], writer.uint32(
                        /* id 3, wireType 2 =*/
                        26
                      ).fork()).ldelim();
                  return writer;
                };
                TranslateTextResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateTextResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.TranslateTextResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.translations && message.translations.length))
                          message.translations = [];
                        message.translations.push($root.google.cloud.translation.v3beta1.Translation.decode(reader, reader.uint32()));
                        break;
                      }
                      case 3: {
                        if (!(message.glossaryTranslations && message.glossaryTranslations.length))
                          message.glossaryTranslations = [];
                        message.glossaryTranslations.push($root.google.cloud.translation.v3beta1.Translation.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateTextResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateTextResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.translations != null && message.hasOwnProperty("translations")) {
                    if (!Array.isArray(message.translations))
                      return "translations: array expected";
                    for (var i = 0; i < message.translations.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.Translation.verify(message.translations[i]);
                      if (error)
                        return "translations." + error;
                    }
                  }
                  if (message.glossaryTranslations != null && message.hasOwnProperty("glossaryTranslations")) {
                    if (!Array.isArray(message.glossaryTranslations))
                      return "glossaryTranslations: array expected";
                    for (var i = 0; i < message.glossaryTranslations.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.Translation.verify(message.glossaryTranslations[i]);
                      if (error)
                        return "glossaryTranslations." + error;
                    }
                  }
                  return null;
                };
                TranslateTextResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.TranslateTextResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.TranslateTextResponse();
                  if (object.translations) {
                    if (!Array.isArray(object.translations))
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateTextResponse.translations: array expected");
                    message.translations = [];
                    for (var i = 0; i < object.translations.length; ++i) {
                      if (typeof object.translations[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.TranslateTextResponse.translations: object expected");
                      message.translations[i] = $root.google.cloud.translation.v3beta1.Translation.fromObject(object.translations[i]);
                    }
                  }
                  if (object.glossaryTranslations) {
                    if (!Array.isArray(object.glossaryTranslations))
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateTextResponse.glossaryTranslations: array expected");
                    message.glossaryTranslations = [];
                    for (var i = 0; i < object.glossaryTranslations.length; ++i) {
                      if (typeof object.glossaryTranslations[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.TranslateTextResponse.glossaryTranslations: object expected");
                      message.glossaryTranslations[i] = $root.google.cloud.translation.v3beta1.Translation.fromObject(object.glossaryTranslations[i]);
                    }
                  }
                  return message;
                };
                TranslateTextResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults) {
                    object.translations = [];
                    object.glossaryTranslations = [];
                  }
                  if (message.translations && message.translations.length) {
                    object.translations = [];
                    for (var j = 0; j < message.translations.length; ++j)
                      object.translations[j] = $root.google.cloud.translation.v3beta1.Translation.toObject(message.translations[j], options);
                  }
                  if (message.glossaryTranslations && message.glossaryTranslations.length) {
                    object.glossaryTranslations = [];
                    for (var j = 0; j < message.glossaryTranslations.length; ++j)
                      object.glossaryTranslations[j] = $root.google.cloud.translation.v3beta1.Translation.toObject(message.glossaryTranslations[j], options);
                  }
                  return object;
                };
                TranslateTextResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateTextResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.TranslateTextResponse";
                };
                return TranslateTextResponse;
              }();
              v3beta1.Translation = function() {
                function Translation(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Translation.prototype.translatedText = "";
                Translation.prototype.model = "";
                Translation.prototype.detectedLanguageCode = "";
                Translation.prototype.glossaryConfig = null;
                Translation.create = function create(properties) {
                  return new Translation(properties);
                };
                Translation.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.translatedText != null && Object.hasOwnProperty.call(message, "translatedText"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.translatedText);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  if (message.detectedLanguageCode != null && Object.hasOwnProperty.call(message, "detectedLanguageCode"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.detectedLanguageCode);
                  return writer;
                };
                Translation.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                Translation.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.Translation();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.translatedText = reader.string();
                        break;
                      }
                      case 2: {
                        message.model = reader.string();
                        break;
                      }
                      case 4: {
                        message.detectedLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                Translation.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                Translation.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.translatedText != null && message.hasOwnProperty("translatedText")) {
                    if (!$util.isString(message.translatedText))
                      return "translatedText: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode")) {
                    if (!$util.isString(message.detectedLanguageCode))
                      return "detectedLanguageCode: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  return null;
                };
                Translation.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.Translation)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.Translation();
                  if (object.translatedText != null)
                    message.translatedText = String(object.translatedText);
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.detectedLanguageCode != null)
                    message.detectedLanguageCode = String(object.detectedLanguageCode);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.Translation.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  return message;
                };
                Translation.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.translatedText = "";
                    object.model = "";
                    object.glossaryConfig = null;
                    object.detectedLanguageCode = "";
                  }
                  if (message.translatedText != null && message.hasOwnProperty("translatedText"))
                    object.translatedText = message.translatedText;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode"))
                    object.detectedLanguageCode = message.detectedLanguageCode;
                  return object;
                };
                Translation.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Translation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.Translation";
                };
                return Translation;
              }();
              v3beta1.DetectLanguageRequest = function() {
                function DetectLanguageRequest(properties) {
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DetectLanguageRequest.prototype.parent = "";
                DetectLanguageRequest.prototype.model = "";
                DetectLanguageRequest.prototype.content = null;
                DetectLanguageRequest.prototype.mimeType = "";
                DetectLanguageRequest.prototype.labels = $util.emptyObject;
                var $oneOfFields;
                Object.defineProperty(DetectLanguageRequest.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["content"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                DetectLanguageRequest.create = function create(properties) {
                  return new DetectLanguageRequest(properties);
                };
                DetectLanguageRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.content);
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.mimeType);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.model);
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).string(message.parent);
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 6, wireType 2 =*/
                        50
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  return writer;
                };
                DetectLanguageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DetectLanguageRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DetectLanguageRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 5: {
                        message.parent = reader.string();
                        break;
                      }
                      case 4: {
                        message.model = reader.string();
                        break;
                      }
                      case 1: {
                        message.content = reader.string();
                        break;
                      }
                      case 3: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 6: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DetectLanguageRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DetectLanguageRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.content != null && message.hasOwnProperty("content")) {
                    properties.source = 1;
                    if (!$util.isString(message.content))
                      return "content: string expected";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  return null;
                };
                DetectLanguageRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DetectLanguageRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DetectLanguageRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.content != null)
                    message.content = String(object.content);
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.DetectLanguageRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  return message;
                };
                DetectLanguageRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.objects || options.defaults)
                    object.labels = {};
                  if (options.defaults) {
                    object.mimeType = "";
                    object.model = "";
                    object.parent = "";
                  }
                  if (message.content != null && message.hasOwnProperty("content")) {
                    object.content = message.content;
                    if (options.oneofs)
                      object.source = "content";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  var keys2;
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  return object;
                };
                DetectLanguageRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DetectLanguageRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DetectLanguageRequest";
                };
                return DetectLanguageRequest;
              }();
              v3beta1.DetectedLanguage = function() {
                function DetectedLanguage(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DetectedLanguage.prototype.languageCode = "";
                DetectedLanguage.prototype.confidence = 0;
                DetectedLanguage.create = function create(properties) {
                  return new DetectedLanguage(properties);
                };
                DetectedLanguage.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                    writer.uint32(
                      /* id 2, wireType 5 =*/
                      21
                    ).float(message.confidence);
                  return writer;
                };
                DetectedLanguage.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DetectedLanguage.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DetectedLanguage();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.confidence = reader.float();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DetectedLanguage.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DetectedLanguage.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  if (message.confidence != null && message.hasOwnProperty("confidence")) {
                    if (typeof message.confidence !== "number")
                      return "confidence: number expected";
                  }
                  return null;
                };
                DetectedLanguage.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DetectedLanguage)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DetectedLanguage();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  if (object.confidence != null)
                    message.confidence = Number(object.confidence);
                  return message;
                };
                DetectedLanguage.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.languageCode = "";
                    object.confidence = 0;
                  }
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  if (message.confidence != null && message.hasOwnProperty("confidence"))
                    object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                  return object;
                };
                DetectedLanguage.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DetectedLanguage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DetectedLanguage";
                };
                return DetectedLanguage;
              }();
              v3beta1.DetectLanguageResponse = function() {
                function DetectLanguageResponse(properties) {
                  this.languages = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DetectLanguageResponse.prototype.languages = $util.emptyArray;
                DetectLanguageResponse.create = function create(properties) {
                  return new DetectLanguageResponse(properties);
                };
                DetectLanguageResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languages != null && message.languages.length)
                    for (var i = 0; i < message.languages.length; ++i)
                      $root.google.cloud.translation.v3beta1.DetectedLanguage.encode(message.languages[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  return writer;
                };
                DetectLanguageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DetectLanguageResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DetectLanguageResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.languages && message.languages.length))
                          message.languages = [];
                        message.languages.push($root.google.cloud.translation.v3beta1.DetectedLanguage.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DetectLanguageResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DetectLanguageResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languages != null && message.hasOwnProperty("languages")) {
                    if (!Array.isArray(message.languages))
                      return "languages: array expected";
                    for (var i = 0; i < message.languages.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.DetectedLanguage.verify(message.languages[i]);
                      if (error)
                        return "languages." + error;
                    }
                  }
                  return null;
                };
                DetectLanguageResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DetectLanguageResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DetectLanguageResponse();
                  if (object.languages) {
                    if (!Array.isArray(object.languages))
                      throw TypeError(".google.cloud.translation.v3beta1.DetectLanguageResponse.languages: array expected");
                    message.languages = [];
                    for (var i = 0; i < object.languages.length; ++i) {
                      if (typeof object.languages[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.DetectLanguageResponse.languages: object expected");
                      message.languages[i] = $root.google.cloud.translation.v3beta1.DetectedLanguage.fromObject(object.languages[i]);
                    }
                  }
                  return message;
                };
                DetectLanguageResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.languages = [];
                  if (message.languages && message.languages.length) {
                    object.languages = [];
                    for (var j = 0; j < message.languages.length; ++j)
                      object.languages[j] = $root.google.cloud.translation.v3beta1.DetectedLanguage.toObject(message.languages[j], options);
                  }
                  return object;
                };
                DetectLanguageResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DetectLanguageResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DetectLanguageResponse";
                };
                return DetectLanguageResponse;
              }();
              v3beta1.GetSupportedLanguagesRequest = function() {
                function GetSupportedLanguagesRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GetSupportedLanguagesRequest.prototype.parent = "";
                GetSupportedLanguagesRequest.prototype.displayLanguageCode = "";
                GetSupportedLanguagesRequest.prototype.model = "";
                GetSupportedLanguagesRequest.create = function create(properties) {
                  return new GetSupportedLanguagesRequest(properties);
                };
                GetSupportedLanguagesRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.displayLanguageCode != null && Object.hasOwnProperty.call(message, "displayLanguageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.displayLanguageCode);
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.model);
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.parent);
                  return writer;
                };
                GetSupportedLanguagesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GetSupportedLanguagesRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.GetSupportedLanguagesRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 3: {
                        message.parent = reader.string();
                        break;
                      }
                      case 1: {
                        message.displayLanguageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.model = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GetSupportedLanguagesRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GetSupportedLanguagesRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.displayLanguageCode != null && message.hasOwnProperty("displayLanguageCode")) {
                    if (!$util.isString(message.displayLanguageCode))
                      return "displayLanguageCode: string expected";
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  return null;
                };
                GetSupportedLanguagesRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.GetSupportedLanguagesRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.GetSupportedLanguagesRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.displayLanguageCode != null)
                    message.displayLanguageCode = String(object.displayLanguageCode);
                  if (object.model != null)
                    message.model = String(object.model);
                  return message;
                };
                GetSupportedLanguagesRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.displayLanguageCode = "";
                    object.model = "";
                    object.parent = "";
                  }
                  if (message.displayLanguageCode != null && message.hasOwnProperty("displayLanguageCode"))
                    object.displayLanguageCode = message.displayLanguageCode;
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  return object;
                };
                GetSupportedLanguagesRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GetSupportedLanguagesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.GetSupportedLanguagesRequest";
                };
                return GetSupportedLanguagesRequest;
              }();
              v3beta1.SupportedLanguages = function() {
                function SupportedLanguages(properties) {
                  this.languages = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SupportedLanguages.prototype.languages = $util.emptyArray;
                SupportedLanguages.create = function create(properties) {
                  return new SupportedLanguages(properties);
                };
                SupportedLanguages.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languages != null && message.languages.length)
                    for (var i = 0; i < message.languages.length; ++i)
                      $root.google.cloud.translation.v3beta1.SupportedLanguage.encode(message.languages[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  return writer;
                };
                SupportedLanguages.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SupportedLanguages.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.SupportedLanguages();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.languages && message.languages.length))
                          message.languages = [];
                        message.languages.push($root.google.cloud.translation.v3beta1.SupportedLanguage.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SupportedLanguages.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SupportedLanguages.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languages != null && message.hasOwnProperty("languages")) {
                    if (!Array.isArray(message.languages))
                      return "languages: array expected";
                    for (var i = 0; i < message.languages.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.SupportedLanguage.verify(message.languages[i]);
                      if (error)
                        return "languages." + error;
                    }
                  }
                  return null;
                };
                SupportedLanguages.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.SupportedLanguages)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.SupportedLanguages();
                  if (object.languages) {
                    if (!Array.isArray(object.languages))
                      throw TypeError(".google.cloud.translation.v3beta1.SupportedLanguages.languages: array expected");
                    message.languages = [];
                    for (var i = 0; i < object.languages.length; ++i) {
                      if (typeof object.languages[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.SupportedLanguages.languages: object expected");
                      message.languages[i] = $root.google.cloud.translation.v3beta1.SupportedLanguage.fromObject(object.languages[i]);
                    }
                  }
                  return message;
                };
                SupportedLanguages.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.languages = [];
                  if (message.languages && message.languages.length) {
                    object.languages = [];
                    for (var j = 0; j < message.languages.length; ++j)
                      object.languages[j] = $root.google.cloud.translation.v3beta1.SupportedLanguage.toObject(message.languages[j], options);
                  }
                  return object;
                };
                SupportedLanguages.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SupportedLanguages.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.SupportedLanguages";
                };
                return SupportedLanguages;
              }();
              v3beta1.SupportedLanguage = function() {
                function SupportedLanguage(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SupportedLanguage.prototype.languageCode = "";
                SupportedLanguage.prototype.displayName = "";
                SupportedLanguage.prototype.supportSource = false;
                SupportedLanguage.prototype.supportTarget = false;
                SupportedLanguage.create = function create(properties) {
                  return new SupportedLanguage(properties);
                };
                SupportedLanguage.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.displayName);
                  if (message.supportSource != null && Object.hasOwnProperty.call(message, "supportSource"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).bool(message.supportSource);
                  if (message.supportTarget != null && Object.hasOwnProperty.call(message, "supportTarget"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).bool(message.supportTarget);
                  return writer;
                };
                SupportedLanguage.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SupportedLanguage.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.SupportedLanguage();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.displayName = reader.string();
                        break;
                      }
                      case 3: {
                        message.supportSource = reader.bool();
                        break;
                      }
                      case 4: {
                        message.supportTarget = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SupportedLanguage.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SupportedLanguage.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  if (message.displayName != null && message.hasOwnProperty("displayName")) {
                    if (!$util.isString(message.displayName))
                      return "displayName: string expected";
                  }
                  if (message.supportSource != null && message.hasOwnProperty("supportSource")) {
                    if (typeof message.supportSource !== "boolean")
                      return "supportSource: boolean expected";
                  }
                  if (message.supportTarget != null && message.hasOwnProperty("supportTarget")) {
                    if (typeof message.supportTarget !== "boolean")
                      return "supportTarget: boolean expected";
                  }
                  return null;
                };
                SupportedLanguage.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.SupportedLanguage)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.SupportedLanguage();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  if (object.displayName != null)
                    message.displayName = String(object.displayName);
                  if (object.supportSource != null)
                    message.supportSource = Boolean(object.supportSource);
                  if (object.supportTarget != null)
                    message.supportTarget = Boolean(object.supportTarget);
                  return message;
                };
                SupportedLanguage.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.languageCode = "";
                    object.displayName = "";
                    object.supportSource = false;
                    object.supportTarget = false;
                  }
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  if (message.displayName != null && message.hasOwnProperty("displayName"))
                    object.displayName = message.displayName;
                  if (message.supportSource != null && message.hasOwnProperty("supportSource"))
                    object.supportSource = message.supportSource;
                  if (message.supportTarget != null && message.hasOwnProperty("supportTarget"))
                    object.supportTarget = message.supportTarget;
                  return object;
                };
                SupportedLanguage.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SupportedLanguage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.SupportedLanguage";
                };
                return SupportedLanguage;
              }();
              v3beta1.GcsSource = function() {
                function GcsSource(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GcsSource.prototype.inputUri = "";
                GcsSource.create = function create(properties) {
                  return new GcsSource(properties);
                };
                GcsSource.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.inputUri);
                  return writer;
                };
                GcsSource.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GcsSource.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.GcsSource();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.inputUri = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GcsSource.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GcsSource.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.inputUri != null && message.hasOwnProperty("inputUri")) {
                    if (!$util.isString(message.inputUri))
                      return "inputUri: string expected";
                  }
                  return null;
                };
                GcsSource.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.GcsSource)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.GcsSource();
                  if (object.inputUri != null)
                    message.inputUri = String(object.inputUri);
                  return message;
                };
                GcsSource.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.inputUri = "";
                  if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                    object.inputUri = message.inputUri;
                  return object;
                };
                GcsSource.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GcsSource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.GcsSource";
                };
                return GcsSource;
              }();
              v3beta1.InputConfig = function() {
                function InputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                InputConfig.prototype.mimeType = "";
                InputConfig.prototype.gcsSource = null;
                var $oneOfFields;
                Object.defineProperty(InputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                InputConfig.create = function create(properties) {
                  return new InputConfig(properties);
                };
                InputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.mimeType);
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3beta1.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  return writer;
                };
                InputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                InputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.InputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 2: {
                        message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                InputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                InputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  return null;
                };
                InputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.InputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.InputConfig();
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.InputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.fromObject(object.gcsSource);
                  }
                  return message;
                };
                InputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.mimeType = "";
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  return object;
                };
                InputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                InputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.InputConfig";
                };
                return InputConfig;
              }();
              v3beta1.GcsDestination = function() {
                function GcsDestination(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GcsDestination.prototype.outputUriPrefix = "";
                GcsDestination.create = function create(properties) {
                  return new GcsDestination(properties);
                };
                GcsDestination.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.outputUriPrefix != null && Object.hasOwnProperty.call(message, "outputUriPrefix"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.outputUriPrefix);
                  return writer;
                };
                GcsDestination.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GcsDestination.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.GcsDestination();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.outputUriPrefix = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GcsDestination.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GcsDestination.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.outputUriPrefix != null && message.hasOwnProperty("outputUriPrefix")) {
                    if (!$util.isString(message.outputUriPrefix))
                      return "outputUriPrefix: string expected";
                  }
                  return null;
                };
                GcsDestination.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.GcsDestination)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.GcsDestination();
                  if (object.outputUriPrefix != null)
                    message.outputUriPrefix = String(object.outputUriPrefix);
                  return message;
                };
                GcsDestination.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.outputUriPrefix = "";
                  if (message.outputUriPrefix != null && message.hasOwnProperty("outputUriPrefix"))
                    object.outputUriPrefix = message.outputUriPrefix;
                  return object;
                };
                GcsDestination.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GcsDestination.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.GcsDestination";
                };
                return GcsDestination;
              }();
              v3beta1.OutputConfig = function() {
                function OutputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                OutputConfig.prototype.gcsDestination = null;
                var $oneOfFields;
                Object.defineProperty(OutputConfig.prototype, "destination", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsDestination"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                OutputConfig.create = function create(properties) {
                  return new OutputConfig(properties);
                };
                OutputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsDestination != null && Object.hasOwnProperty.call(message, "gcsDestination"))
                    $root.google.cloud.translation.v3beta1.GcsDestination.encode(message.gcsDestination, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                OutputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                OutputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.OutputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                OutputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                OutputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    properties.destination = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.GcsDestination.verify(message.gcsDestination);
                      if (error)
                        return "gcsDestination." + error;
                    }
                  }
                  return null;
                };
                OutputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.OutputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.OutputConfig();
                  if (object.gcsDestination != null) {
                    if (typeof object.gcsDestination !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.OutputConfig.gcsDestination: object expected");
                    message.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.fromObject(object.gcsDestination);
                  }
                  return message;
                };
                OutputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    object.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.toObject(message.gcsDestination, options);
                    if (options.oneofs)
                      object.destination = "gcsDestination";
                  }
                  return object;
                };
                OutputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                OutputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.OutputConfig";
                };
                return OutputConfig;
              }();
              v3beta1.DocumentInputConfig = function() {
                function DocumentInputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DocumentInputConfig.prototype.content = null;
                DocumentInputConfig.prototype.gcsSource = null;
                DocumentInputConfig.prototype.mimeType = "";
                var $oneOfFields;
                Object.defineProperty(DocumentInputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["content", "gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                DocumentInputConfig.create = function create(properties) {
                  return new DocumentInputConfig(properties);
                };
                DocumentInputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).bytes(message.content);
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3beta1.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.mimeType);
                  return writer;
                };
                DocumentInputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DocumentInputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DocumentInputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.content = reader.bytes();
                        break;
                      }
                      case 2: {
                        message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      case 4: {
                        message.mimeType = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DocumentInputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DocumentInputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.content != null && message.hasOwnProperty("content")) {
                    properties.source = 1;
                    if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                      return "content: buffer expected";
                  }
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    if (properties.source === 1)
                      return "source: multiple values";
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  return null;
                };
                DocumentInputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DocumentInputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DocumentInputConfig();
                  if (object.content != null) {
                    if (typeof object.content === "string")
                      $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                    else if (object.content.length >= 0)
                      message.content = object.content;
                  }
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.DocumentInputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.fromObject(object.gcsSource);
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  return message;
                };
                DocumentInputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.mimeType = "";
                  if (message.content != null && message.hasOwnProperty("content")) {
                    object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
                    if (options.oneofs)
                      object.source = "content";
                  }
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  return object;
                };
                DocumentInputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DocumentInputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DocumentInputConfig";
                };
                return DocumentInputConfig;
              }();
              v3beta1.DocumentOutputConfig = function() {
                function DocumentOutputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DocumentOutputConfig.prototype.gcsDestination = null;
                DocumentOutputConfig.prototype.mimeType = "";
                var $oneOfFields;
                Object.defineProperty(DocumentOutputConfig.prototype, "destination", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsDestination"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                DocumentOutputConfig.create = function create(properties) {
                  return new DocumentOutputConfig(properties);
                };
                DocumentOutputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsDestination != null && Object.hasOwnProperty.call(message, "gcsDestination"))
                    $root.google.cloud.translation.v3beta1.GcsDestination.encode(message.gcsDestination, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.mimeType);
                  return writer;
                };
                DocumentOutputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DocumentOutputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DocumentOutputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.mimeType = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DocumentOutputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DocumentOutputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    properties.destination = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.GcsDestination.verify(message.gcsDestination);
                      if (error)
                        return "gcsDestination." + error;
                    }
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  return null;
                };
                DocumentOutputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DocumentOutputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DocumentOutputConfig();
                  if (object.gcsDestination != null) {
                    if (typeof object.gcsDestination !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.DocumentOutputConfig.gcsDestination: object expected");
                    message.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.fromObject(object.gcsDestination);
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  return message;
                };
                DocumentOutputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.mimeType = "";
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    object.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.toObject(message.gcsDestination, options);
                    if (options.oneofs)
                      object.destination = "gcsDestination";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  return object;
                };
                DocumentOutputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DocumentOutputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DocumentOutputConfig";
                };
                return DocumentOutputConfig;
              }();
              v3beta1.TranslateDocumentRequest = function() {
                function TranslateDocumentRequest(properties) {
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateDocumentRequest.prototype.parent = "";
                TranslateDocumentRequest.prototype.sourceLanguageCode = "";
                TranslateDocumentRequest.prototype.targetLanguageCode = "";
                TranslateDocumentRequest.prototype.documentInputConfig = null;
                TranslateDocumentRequest.prototype.documentOutputConfig = null;
                TranslateDocumentRequest.prototype.model = "";
                TranslateDocumentRequest.prototype.glossaryConfig = null;
                TranslateDocumentRequest.prototype.labels = $util.emptyObject;
                TranslateDocumentRequest.prototype.customizedAttribution = "";
                TranslateDocumentRequest.prototype.isTranslateNativePdfOnly = false;
                TranslateDocumentRequest.prototype.enableShadowRemovalNativePdf = false;
                TranslateDocumentRequest.prototype.enableRotationCorrection = false;
                TranslateDocumentRequest.create = function create(properties) {
                  return new TranslateDocumentRequest(properties);
                };
                TranslateDocumentRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCode != null && Object.hasOwnProperty.call(message, "targetLanguageCode"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.targetLanguageCode);
                  if (message.documentInputConfig != null && Object.hasOwnProperty.call(message, "documentInputConfig"))
                    $root.google.cloud.translation.v3beta1.DocumentInputConfig.encode(message.documentInputConfig, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  if (message.documentOutputConfig != null && Object.hasOwnProperty.call(message, "documentOutputConfig"))
                    $root.google.cloud.translation.v3beta1.DocumentOutputConfig.encode(message.documentOutputConfig, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 7, wireType 2 =*/
                      58
                    ).fork()).ldelim();
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 8, wireType 2 =*/
                        66
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  if (message.customizedAttribution != null && Object.hasOwnProperty.call(message, "customizedAttribution"))
                    writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).string(message.customizedAttribution);
                  if (message.isTranslateNativePdfOnly != null && Object.hasOwnProperty.call(message, "isTranslateNativePdfOnly"))
                    writer.uint32(
                      /* id 11, wireType 0 =*/
                      88
                    ).bool(message.isTranslateNativePdfOnly);
                  if (message.enableShadowRemovalNativePdf != null && Object.hasOwnProperty.call(message, "enableShadowRemovalNativePdf"))
                    writer.uint32(
                      /* id 12, wireType 0 =*/
                      96
                    ).bool(message.enableShadowRemovalNativePdf);
                  if (message.enableRotationCorrection != null && Object.hasOwnProperty.call(message, "enableRotationCorrection"))
                    writer.uint32(
                      /* id 13, wireType 0 =*/
                      104
                    ).bool(message.enableRotationCorrection);
                  return writer;
                };
                TranslateDocumentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateDocumentRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.TranslateDocumentRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        message.targetLanguageCode = reader.string();
                        break;
                      }
                      case 4: {
                        message.documentInputConfig = $root.google.cloud.translation.v3beta1.DocumentInputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 5: {
                        message.documentOutputConfig = $root.google.cloud.translation.v3beta1.DocumentOutputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 6: {
                        message.model = reader.string();
                        break;
                      }
                      case 7: {
                        message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 8: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      case 10: {
                        message.customizedAttribution = reader.string();
                        break;
                      }
                      case 11: {
                        message.isTranslateNativePdfOnly = reader.bool();
                        break;
                      }
                      case 12: {
                        message.enableShadowRemovalNativePdf = reader.bool();
                        break;
                      }
                      case 13: {
                        message.enableRotationCorrection = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateDocumentRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateDocumentRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode")) {
                    if (!$util.isString(message.targetLanguageCode))
                      return "targetLanguageCode: string expected";
                  }
                  if (message.documentInputConfig != null && message.hasOwnProperty("documentInputConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.DocumentInputConfig.verify(message.documentInputConfig);
                    if (error)
                      return "documentInputConfig." + error;
                  }
                  if (message.documentOutputConfig != null && message.hasOwnProperty("documentOutputConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.DocumentOutputConfig.verify(message.documentOutputConfig);
                    if (error)
                      return "documentOutputConfig." + error;
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution")) {
                    if (!$util.isString(message.customizedAttribution))
                      return "customizedAttribution: string expected";
                  }
                  if (message.isTranslateNativePdfOnly != null && message.hasOwnProperty("isTranslateNativePdfOnly")) {
                    if (typeof message.isTranslateNativePdfOnly !== "boolean")
                      return "isTranslateNativePdfOnly: boolean expected";
                  }
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf")) {
                    if (typeof message.enableShadowRemovalNativePdf !== "boolean")
                      return "enableShadowRemovalNativePdf: boolean expected";
                  }
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection")) {
                    if (typeof message.enableRotationCorrection !== "boolean")
                      return "enableRotationCorrection: boolean expected";
                  }
                  return null;
                };
                TranslateDocumentRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.TranslateDocumentRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.TranslateDocumentRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCode != null)
                    message.targetLanguageCode = String(object.targetLanguageCode);
                  if (object.documentInputConfig != null) {
                    if (typeof object.documentInputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateDocumentRequest.documentInputConfig: object expected");
                    message.documentInputConfig = $root.google.cloud.translation.v3beta1.DocumentInputConfig.fromObject(object.documentInputConfig);
                  }
                  if (object.documentOutputConfig != null) {
                    if (typeof object.documentOutputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateDocumentRequest.documentOutputConfig: object expected");
                    message.documentOutputConfig = $root.google.cloud.translation.v3beta1.DocumentOutputConfig.fromObject(object.documentOutputConfig);
                  }
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateDocumentRequest.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateDocumentRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  if (object.customizedAttribution != null)
                    message.customizedAttribution = String(object.customizedAttribution);
                  if (object.isTranslateNativePdfOnly != null)
                    message.isTranslateNativePdfOnly = Boolean(object.isTranslateNativePdfOnly);
                  if (object.enableShadowRemovalNativePdf != null)
                    message.enableShadowRemovalNativePdf = Boolean(object.enableShadowRemovalNativePdf);
                  if (object.enableRotationCorrection != null)
                    message.enableRotationCorrection = Boolean(object.enableRotationCorrection);
                  return message;
                };
                TranslateDocumentRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.objects || options.defaults)
                    object.labels = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.sourceLanguageCode = "";
                    object.targetLanguageCode = "";
                    object.documentInputConfig = null;
                    object.documentOutputConfig = null;
                    object.model = "";
                    object.glossaryConfig = null;
                    object.customizedAttribution = "";
                    object.isTranslateNativePdfOnly = false;
                    object.enableShadowRemovalNativePdf = false;
                    object.enableRotationCorrection = false;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode"))
                    object.targetLanguageCode = message.targetLanguageCode;
                  if (message.documentInputConfig != null && message.hasOwnProperty("documentInputConfig"))
                    object.documentInputConfig = $root.google.cloud.translation.v3beta1.DocumentInputConfig.toObject(message.documentInputConfig, options);
                  if (message.documentOutputConfig != null && message.hasOwnProperty("documentOutputConfig"))
                    object.documentOutputConfig = $root.google.cloud.translation.v3beta1.DocumentOutputConfig.toObject(message.documentOutputConfig, options);
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  var keys2;
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution"))
                    object.customizedAttribution = message.customizedAttribution;
                  if (message.isTranslateNativePdfOnly != null && message.hasOwnProperty("isTranslateNativePdfOnly"))
                    object.isTranslateNativePdfOnly = message.isTranslateNativePdfOnly;
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf"))
                    object.enableShadowRemovalNativePdf = message.enableShadowRemovalNativePdf;
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection"))
                    object.enableRotationCorrection = message.enableRotationCorrection;
                  return object;
                };
                TranslateDocumentRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.TranslateDocumentRequest";
                };
                return TranslateDocumentRequest;
              }();
              v3beta1.DocumentTranslation = function() {
                function DocumentTranslation(properties) {
                  this.byteStreamOutputs = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DocumentTranslation.prototype.byteStreamOutputs = $util.emptyArray;
                DocumentTranslation.prototype.mimeType = "";
                DocumentTranslation.prototype.detectedLanguageCode = "";
                DocumentTranslation.create = function create(properties) {
                  return new DocumentTranslation(properties);
                };
                DocumentTranslation.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.byteStreamOutputs != null && message.byteStreamOutputs.length)
                    for (var i = 0; i < message.byteStreamOutputs.length; ++i)
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).bytes(message.byteStreamOutputs[i]);
                  if (message.mimeType != null && Object.hasOwnProperty.call(message, "mimeType"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.mimeType);
                  if (message.detectedLanguageCode != null && Object.hasOwnProperty.call(message, "detectedLanguageCode"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.detectedLanguageCode);
                  return writer;
                };
                DocumentTranslation.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DocumentTranslation.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DocumentTranslation();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.byteStreamOutputs && message.byteStreamOutputs.length))
                          message.byteStreamOutputs = [];
                        message.byteStreamOutputs.push(reader.bytes());
                        break;
                      }
                      case 2: {
                        message.mimeType = reader.string();
                        break;
                      }
                      case 3: {
                        message.detectedLanguageCode = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DocumentTranslation.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DocumentTranslation.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.byteStreamOutputs != null && message.hasOwnProperty("byteStreamOutputs")) {
                    if (!Array.isArray(message.byteStreamOutputs))
                      return "byteStreamOutputs: array expected";
                    for (var i = 0; i < message.byteStreamOutputs.length; ++i)
                      if (!(message.byteStreamOutputs[i] && typeof message.byteStreamOutputs[i].length === "number" || $util.isString(message.byteStreamOutputs[i])))
                        return "byteStreamOutputs: buffer[] expected";
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType")) {
                    if (!$util.isString(message.mimeType))
                      return "mimeType: string expected";
                  }
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode")) {
                    if (!$util.isString(message.detectedLanguageCode))
                      return "detectedLanguageCode: string expected";
                  }
                  return null;
                };
                DocumentTranslation.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DocumentTranslation)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DocumentTranslation();
                  if (object.byteStreamOutputs) {
                    if (!Array.isArray(object.byteStreamOutputs))
                      throw TypeError(".google.cloud.translation.v3beta1.DocumentTranslation.byteStreamOutputs: array expected");
                    message.byteStreamOutputs = [];
                    for (var i = 0; i < object.byteStreamOutputs.length; ++i)
                      if (typeof object.byteStreamOutputs[i] === "string")
                        $util.base64.decode(object.byteStreamOutputs[i], message.byteStreamOutputs[i] = $util.newBuffer($util.base64.length(object.byteStreamOutputs[i])), 0);
                      else if (object.byteStreamOutputs[i].length >= 0)
                        message.byteStreamOutputs[i] = object.byteStreamOutputs[i];
                  }
                  if (object.mimeType != null)
                    message.mimeType = String(object.mimeType);
                  if (object.detectedLanguageCode != null)
                    message.detectedLanguageCode = String(object.detectedLanguageCode);
                  return message;
                };
                DocumentTranslation.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.byteStreamOutputs = [];
                  if (options.defaults) {
                    object.mimeType = "";
                    object.detectedLanguageCode = "";
                  }
                  if (message.byteStreamOutputs && message.byteStreamOutputs.length) {
                    object.byteStreamOutputs = [];
                    for (var j = 0; j < message.byteStreamOutputs.length; ++j)
                      object.byteStreamOutputs[j] = options.bytes === String ? $util.base64.encode(message.byteStreamOutputs[j], 0, message.byteStreamOutputs[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.byteStreamOutputs[j]) : message.byteStreamOutputs[j];
                  }
                  if (message.mimeType != null && message.hasOwnProperty("mimeType"))
                    object.mimeType = message.mimeType;
                  if (message.detectedLanguageCode != null && message.hasOwnProperty("detectedLanguageCode"))
                    object.detectedLanguageCode = message.detectedLanguageCode;
                  return object;
                };
                DocumentTranslation.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DocumentTranslation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DocumentTranslation";
                };
                return DocumentTranslation;
              }();
              v3beta1.TranslateDocumentResponse = function() {
                function TranslateDocumentResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                TranslateDocumentResponse.prototype.documentTranslation = null;
                TranslateDocumentResponse.prototype.glossaryDocumentTranslation = null;
                TranslateDocumentResponse.prototype.model = "";
                TranslateDocumentResponse.prototype.glossaryConfig = null;
                TranslateDocumentResponse.create = function create(properties) {
                  return new TranslateDocumentResponse(properties);
                };
                TranslateDocumentResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.documentTranslation != null && Object.hasOwnProperty.call(message, "documentTranslation"))
                    $root.google.cloud.translation.v3beta1.DocumentTranslation.encode(message.documentTranslation, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.glossaryDocumentTranslation != null && Object.hasOwnProperty.call(message, "glossaryDocumentTranslation"))
                    $root.google.cloud.translation.v3beta1.DocumentTranslation.encode(message.glossaryDocumentTranslation, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.model);
                  if (message.glossaryConfig != null && Object.hasOwnProperty.call(message, "glossaryConfig"))
                    $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.encode(message.glossaryConfig, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  return writer;
                };
                TranslateDocumentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                TranslateDocumentResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.TranslateDocumentResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.documentTranslation = $root.google.cloud.translation.v3beta1.DocumentTranslation.decode(reader, reader.uint32());
                        break;
                      }
                      case 2: {
                        message.glossaryDocumentTranslation = $root.google.cloud.translation.v3beta1.DocumentTranslation.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.model = reader.string();
                        break;
                      }
                      case 4: {
                        message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                TranslateDocumentResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                TranslateDocumentResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.documentTranslation != null && message.hasOwnProperty("documentTranslation")) {
                    var error = $root.google.cloud.translation.v3beta1.DocumentTranslation.verify(message.documentTranslation);
                    if (error)
                      return "documentTranslation." + error;
                  }
                  if (message.glossaryDocumentTranslation != null && message.hasOwnProperty("glossaryDocumentTranslation")) {
                    var error = $root.google.cloud.translation.v3beta1.DocumentTranslation.verify(message.glossaryDocumentTranslation);
                    if (error)
                      return "glossaryDocumentTranslation." + error;
                  }
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.verify(message.glossaryConfig);
                    if (error)
                      return "glossaryConfig." + error;
                  }
                  return null;
                };
                TranslateDocumentResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.TranslateDocumentResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.TranslateDocumentResponse();
                  if (object.documentTranslation != null) {
                    if (typeof object.documentTranslation !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateDocumentResponse.documentTranslation: object expected");
                    message.documentTranslation = $root.google.cloud.translation.v3beta1.DocumentTranslation.fromObject(object.documentTranslation);
                  }
                  if (object.glossaryDocumentTranslation != null) {
                    if (typeof object.glossaryDocumentTranslation !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateDocumentResponse.glossaryDocumentTranslation: object expected");
                    message.glossaryDocumentTranslation = $root.google.cloud.translation.v3beta1.DocumentTranslation.fromObject(object.glossaryDocumentTranslation);
                  }
                  if (object.model != null)
                    message.model = String(object.model);
                  if (object.glossaryConfig != null) {
                    if (typeof object.glossaryConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.TranslateDocumentResponse.glossaryConfig: object expected");
                    message.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.fromObject(object.glossaryConfig);
                  }
                  return message;
                };
                TranslateDocumentResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.documentTranslation = null;
                    object.glossaryDocumentTranslation = null;
                    object.model = "";
                    object.glossaryConfig = null;
                  }
                  if (message.documentTranslation != null && message.hasOwnProperty("documentTranslation"))
                    object.documentTranslation = $root.google.cloud.translation.v3beta1.DocumentTranslation.toObject(message.documentTranslation, options);
                  if (message.glossaryDocumentTranslation != null && message.hasOwnProperty("glossaryDocumentTranslation"))
                    object.glossaryDocumentTranslation = $root.google.cloud.translation.v3beta1.DocumentTranslation.toObject(message.glossaryDocumentTranslation, options);
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.glossaryConfig != null && message.hasOwnProperty("glossaryConfig"))
                    object.glossaryConfig = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.toObject(message.glossaryConfig, options);
                  return object;
                };
                TranslateDocumentResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                TranslateDocumentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.TranslateDocumentResponse";
                };
                return TranslateDocumentResponse;
              }();
              v3beta1.BatchTranslateTextRequest = function() {
                function BatchTranslateTextRequest(properties) {
                  this.targetLanguageCodes = [];
                  this.models = {};
                  this.inputConfigs = [];
                  this.glossaries = {};
                  this.labels = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateTextRequest.prototype.parent = "";
                BatchTranslateTextRequest.prototype.sourceLanguageCode = "";
                BatchTranslateTextRequest.prototype.targetLanguageCodes = $util.emptyArray;
                BatchTranslateTextRequest.prototype.models = $util.emptyObject;
                BatchTranslateTextRequest.prototype.inputConfigs = $util.emptyArray;
                BatchTranslateTextRequest.prototype.outputConfig = null;
                BatchTranslateTextRequest.prototype.glossaries = $util.emptyObject;
                BatchTranslateTextRequest.prototype.labels = $util.emptyObject;
                BatchTranslateTextRequest.create = function create(properties) {
                  return new BatchTranslateTextRequest(properties);
                };
                BatchTranslateTextRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCodes != null && message.targetLanguageCodes.length)
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      writer.uint32(
                        /* id 3, wireType 2 =*/
                        26
                      ).string(message.targetLanguageCodes[i]);
                  if (message.models != null && Object.hasOwnProperty.call(message, "models"))
                    for (var keys = Object.keys(message.models), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 4, wireType 2 =*/
                        34
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.models[keys[i]]).ldelim();
                  if (message.inputConfigs != null && message.inputConfigs.length)
                    for (var i = 0; i < message.inputConfigs.length; ++i)
                      $root.google.cloud.translation.v3beta1.InputConfig.encode(message.inputConfigs[i], writer.uint32(
                        /* id 5, wireType 2 =*/
                        42
                      ).fork()).ldelim();
                  if (message.outputConfig != null && Object.hasOwnProperty.call(message, "outputConfig"))
                    $root.google.cloud.translation.v3beta1.OutputConfig.encode(message.outputConfig, writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).fork()).ldelim();
                  if (message.glossaries != null && Object.hasOwnProperty.call(message, "glossaries"))
                    for (var keys = Object.keys(message.glossaries), i = 0; i < keys.length; ++i) {
                      writer.uint32(
                        /* id 7, wireType 2 =*/
                        58
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]);
                      $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.encode(message.glossaries[keys[i]], writer.uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).fork()).ldelim().ldelim();
                    }
                  if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                    for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 9, wireType 2 =*/
                        74
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.labels[keys[i]]).ldelim();
                  return writer;
                };
                BatchTranslateTextRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateTextRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchTranslateTextRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        if (!(message.targetLanguageCodes && message.targetLanguageCodes.length))
                          message.targetLanguageCodes = [];
                        message.targetLanguageCodes.push(reader.string());
                        break;
                      }
                      case 4: {
                        if (message.models === $util.emptyObject)
                          message.models = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.models[key] = value;
                        break;
                      }
                      case 5: {
                        if (!(message.inputConfigs && message.inputConfigs.length))
                          message.inputConfigs = [];
                        message.inputConfigs.push($root.google.cloud.translation.v3beta1.InputConfig.decode(reader, reader.uint32()));
                        break;
                      }
                      case 6: {
                        message.outputConfig = $root.google.cloud.translation.v3beta1.OutputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 7: {
                        if (message.glossaries === $util.emptyObject)
                          message.glossaries = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = null;
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.glossaries[key] = value;
                        break;
                      }
                      case 9: {
                        if (message.labels === $util.emptyObject)
                          message.labels = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.labels[key] = value;
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateTextRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateTextRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCodes != null && message.hasOwnProperty("targetLanguageCodes")) {
                    if (!Array.isArray(message.targetLanguageCodes))
                      return "targetLanguageCodes: array expected";
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      if (!$util.isString(message.targetLanguageCodes[i]))
                        return "targetLanguageCodes: string[] expected";
                  }
                  if (message.models != null && message.hasOwnProperty("models")) {
                    if (!$util.isObject(message.models))
                      return "models: object expected";
                    var key = Object.keys(message.models);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.models[key[i]]))
                        return "models: string{k:string} expected";
                  }
                  if (message.inputConfigs != null && message.hasOwnProperty("inputConfigs")) {
                    if (!Array.isArray(message.inputConfigs))
                      return "inputConfigs: array expected";
                    for (var i = 0; i < message.inputConfigs.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.InputConfig.verify(message.inputConfigs[i]);
                      if (error)
                        return "inputConfigs." + error;
                    }
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.OutputConfig.verify(message.outputConfig);
                    if (error)
                      return "outputConfig." + error;
                  }
                  if (message.glossaries != null && message.hasOwnProperty("glossaries")) {
                    if (!$util.isObject(message.glossaries))
                      return "glossaries: object expected";
                    var key = Object.keys(message.glossaries);
                    for (var i = 0; i < key.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.verify(message.glossaries[key[i]]);
                      if (error)
                        return "glossaries." + error;
                    }
                  }
                  if (message.labels != null && message.hasOwnProperty("labels")) {
                    if (!$util.isObject(message.labels))
                      return "labels: object expected";
                    var key = Object.keys(message.labels);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.labels[key[i]]))
                        return "labels: string{k:string} expected";
                  }
                  return null;
                };
                BatchTranslateTextRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchTranslateTextRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchTranslateTextRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCodes) {
                    if (!Array.isArray(object.targetLanguageCodes))
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.targetLanguageCodes: array expected");
                    message.targetLanguageCodes = [];
                    for (var i = 0; i < object.targetLanguageCodes.length; ++i)
                      message.targetLanguageCodes[i] = String(object.targetLanguageCodes[i]);
                  }
                  if (object.models) {
                    if (typeof object.models !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.models: object expected");
                    message.models = {};
                    for (var keys = Object.keys(object.models), i = 0; i < keys.length; ++i)
                      message.models[keys[i]] = String(object.models[keys[i]]);
                  }
                  if (object.inputConfigs) {
                    if (!Array.isArray(object.inputConfigs))
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.inputConfigs: array expected");
                    message.inputConfigs = [];
                    for (var i = 0; i < object.inputConfigs.length; ++i) {
                      if (typeof object.inputConfigs[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.inputConfigs: object expected");
                      message.inputConfigs[i] = $root.google.cloud.translation.v3beta1.InputConfig.fromObject(object.inputConfigs[i]);
                    }
                  }
                  if (object.outputConfig != null) {
                    if (typeof object.outputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.outputConfig: object expected");
                    message.outputConfig = $root.google.cloud.translation.v3beta1.OutputConfig.fromObject(object.outputConfig);
                  }
                  if (object.glossaries) {
                    if (typeof object.glossaries !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.glossaries: object expected");
                    message.glossaries = {};
                    for (var keys = Object.keys(object.glossaries), i = 0; i < keys.length; ++i) {
                      if (typeof object.glossaries[keys[i]] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.glossaries: object expected");
                      message.glossaries[keys[i]] = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.fromObject(object.glossaries[keys[i]]);
                    }
                  }
                  if (object.labels) {
                    if (typeof object.labels !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateTextRequest.labels: object expected");
                    message.labels = {};
                    for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                      message.labels[keys[i]] = String(object.labels[keys[i]]);
                  }
                  return message;
                };
                BatchTranslateTextRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults) {
                    object.targetLanguageCodes = [];
                    object.inputConfigs = [];
                  }
                  if (options.objects || options.defaults) {
                    object.models = {};
                    object.glossaries = {};
                    object.labels = {};
                  }
                  if (options.defaults) {
                    object.parent = "";
                    object.sourceLanguageCode = "";
                    object.outputConfig = null;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCodes && message.targetLanguageCodes.length) {
                    object.targetLanguageCodes = [];
                    for (var j = 0; j < message.targetLanguageCodes.length; ++j)
                      object.targetLanguageCodes[j] = message.targetLanguageCodes[j];
                  }
                  var keys2;
                  if (message.models && (keys2 = Object.keys(message.models)).length) {
                    object.models = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.models[keys2[j]] = message.models[keys2[j]];
                  }
                  if (message.inputConfigs && message.inputConfigs.length) {
                    object.inputConfigs = [];
                    for (var j = 0; j < message.inputConfigs.length; ++j)
                      object.inputConfigs[j] = $root.google.cloud.translation.v3beta1.InputConfig.toObject(message.inputConfigs[j], options);
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig"))
                    object.outputConfig = $root.google.cloud.translation.v3beta1.OutputConfig.toObject(message.outputConfig, options);
                  if (message.glossaries && (keys2 = Object.keys(message.glossaries)).length) {
                    object.glossaries = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.glossaries[keys2[j]] = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.toObject(message.glossaries[keys2[j]], options);
                  }
                  if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                    object.labels = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.labels[keys2[j]] = message.labels[keys2[j]];
                  }
                  return object;
                };
                BatchTranslateTextRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateTextRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchTranslateTextRequest";
                };
                return BatchTranslateTextRequest;
              }();
              v3beta1.BatchTranslateMetadata = function() {
                function BatchTranslateMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateMetadata.prototype.state = 0;
                BatchTranslateMetadata.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateMetadata.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateMetadata.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateMetadata.prototype.submitTime = null;
                BatchTranslateMetadata.create = function create(properties) {
                  return new BatchTranslateMetadata(properties);
                };
                BatchTranslateMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int32(message.state);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.failedCharacters);
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int64(message.totalCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchTranslateMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.state = reader.int32();
                        break;
                      }
                      case 2: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 3: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 4: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 5: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                BatchTranslateMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchTranslateMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchTranslateMetadata();
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                BatchTranslateMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3beta1.BatchTranslateMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3beta1.BatchTranslateMetadata.State[message.state] : message.state;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                BatchTranslateMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchTranslateMetadata";
                };
                BatchTranslateMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return BatchTranslateMetadata;
              }();
              v3beta1.BatchTranslateResponse = function() {
                function BatchTranslateResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateResponse.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateResponse.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateResponse.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateResponse.prototype.submitTime = null;
                BatchTranslateResponse.prototype.endTime = null;
                BatchTranslateResponse.create = function create(properties) {
                  return new BatchTranslateResponse(properties);
                };
                BatchTranslateResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int64(message.totalCharacters);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.failedCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchTranslateResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 2: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 3: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 4: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 5: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  return null;
                };
                BatchTranslateResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchTranslateResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchTranslateResponse();
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateResponse.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateResponse.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  return message;
                };
                BatchTranslateResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                    object.endTime = null;
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  return object;
                };
                BatchTranslateResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchTranslateResponse";
                };
                return BatchTranslateResponse;
              }();
              v3beta1.GlossaryInputConfig = function() {
                function GlossaryInputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GlossaryInputConfig.prototype.gcsSource = null;
                var $oneOfFields;
                Object.defineProperty(GlossaryInputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                GlossaryInputConfig.create = function create(properties) {
                  return new GlossaryInputConfig(properties);
                };
                GlossaryInputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3beta1.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                GlossaryInputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GlossaryInputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.GlossaryInputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GlossaryInputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GlossaryInputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  return null;
                };
                GlossaryInputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.GlossaryInputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.GlossaryInputConfig();
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.GlossaryInputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.fromObject(object.gcsSource);
                  }
                  return message;
                };
                GlossaryInputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  return object;
                };
                GlossaryInputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GlossaryInputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.GlossaryInputConfig";
                };
                return GlossaryInputConfig;
              }();
              v3beta1.Glossary = function() {
                function Glossary(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Glossary.prototype.name = "";
                Glossary.prototype.languagePair = null;
                Glossary.prototype.languageCodesSet = null;
                Glossary.prototype.inputConfig = null;
                Glossary.prototype.entryCount = 0;
                Glossary.prototype.submitTime = null;
                Glossary.prototype.endTime = null;
                var $oneOfFields;
                Object.defineProperty(Glossary.prototype, "languages", {
                  get: $util.oneOfGetter($oneOfFields = ["languagePair", "languageCodesSet"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                Glossary.create = function create(properties) {
                  return new Glossary(properties);
                };
                Glossary.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.languagePair != null && Object.hasOwnProperty.call(message, "languagePair"))
                    $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair.encode(message.languagePair, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  if (message.languageCodesSet != null && Object.hasOwnProperty.call(message, "languageCodesSet"))
                    $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet.encode(message.languageCodesSet, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  if (message.inputConfig != null && Object.hasOwnProperty.call(message, "inputConfig"))
                    $root.google.cloud.translation.v3beta1.GlossaryInputConfig.encode(message.inputConfig, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  if (message.entryCount != null && Object.hasOwnProperty.call(message, "entryCount"))
                    writer.uint32(
                      /* id 6, wireType 0 =*/
                      48
                    ).int32(message.entryCount);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 7, wireType 2 =*/
                      58
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 8, wireType 2 =*/
                      66
                    ).fork()).ldelim();
                  return writer;
                };
                Glossary.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                Glossary.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.Glossary();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 3: {
                        message.languagePair = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair.decode(reader, reader.uint32());
                        break;
                      }
                      case 4: {
                        message.languageCodesSet = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet.decode(reader, reader.uint32());
                        break;
                      }
                      case 5: {
                        message.inputConfig = $root.google.cloud.translation.v3beta1.GlossaryInputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 6: {
                        message.entryCount = reader.int32();
                        break;
                      }
                      case 7: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 8: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                Glossary.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                Glossary.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.languagePair != null && message.hasOwnProperty("languagePair")) {
                    properties.languages = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair.verify(message.languagePair);
                      if (error)
                        return "languagePair." + error;
                    }
                  }
                  if (message.languageCodesSet != null && message.hasOwnProperty("languageCodesSet")) {
                    if (properties.languages === 1)
                      return "languages: multiple values";
                    properties.languages = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet.verify(message.languageCodesSet);
                      if (error)
                        return "languageCodesSet." + error;
                    }
                  }
                  if (message.inputConfig != null && message.hasOwnProperty("inputConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.GlossaryInputConfig.verify(message.inputConfig);
                    if (error)
                      return "inputConfig." + error;
                  }
                  if (message.entryCount != null && message.hasOwnProperty("entryCount")) {
                    if (!$util.isInteger(message.entryCount))
                      return "entryCount: integer expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  return null;
                };
                Glossary.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.Glossary)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.Glossary();
                  if (object.name != null)
                    message.name = String(object.name);
                  if (object.languagePair != null) {
                    if (typeof object.languagePair !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.Glossary.languagePair: object expected");
                    message.languagePair = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair.fromObject(object.languagePair);
                  }
                  if (object.languageCodesSet != null) {
                    if (typeof object.languageCodesSet !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.Glossary.languageCodesSet: object expected");
                    message.languageCodesSet = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet.fromObject(object.languageCodesSet);
                  }
                  if (object.inputConfig != null) {
                    if (typeof object.inputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.Glossary.inputConfig: object expected");
                    message.inputConfig = $root.google.cloud.translation.v3beta1.GlossaryInputConfig.fromObject(object.inputConfig);
                  }
                  if (object.entryCount != null)
                    message.entryCount = object.entryCount | 0;
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.Glossary.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.Glossary.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  return message;
                };
                Glossary.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.inputConfig = null;
                    object.entryCount = 0;
                    object.submitTime = null;
                    object.endTime = null;
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.languagePair != null && message.hasOwnProperty("languagePair")) {
                    object.languagePair = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair.toObject(message.languagePair, options);
                    if (options.oneofs)
                      object.languages = "languagePair";
                  }
                  if (message.languageCodesSet != null && message.hasOwnProperty("languageCodesSet")) {
                    object.languageCodesSet = $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet.toObject(message.languageCodesSet, options);
                    if (options.oneofs)
                      object.languages = "languageCodesSet";
                  }
                  if (message.inputConfig != null && message.hasOwnProperty("inputConfig"))
                    object.inputConfig = $root.google.cloud.translation.v3beta1.GlossaryInputConfig.toObject(message.inputConfig, options);
                  if (message.entryCount != null && message.hasOwnProperty("entryCount"))
                    object.entryCount = message.entryCount;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  return object;
                };
                Glossary.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Glossary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.Glossary";
                };
                Glossary.LanguageCodePair = function() {
                  function LanguageCodePair(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  LanguageCodePair.prototype.sourceLanguageCode = "";
                  LanguageCodePair.prototype.targetLanguageCode = "";
                  LanguageCodePair.create = function create(properties) {
                    return new LanguageCodePair(properties);
                  };
                  LanguageCodePair.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(message.sourceLanguageCode);
                    if (message.targetLanguageCode != null && Object.hasOwnProperty.call(message, "targetLanguageCode"))
                      writer.uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.targetLanguageCode);
                    return writer;
                  };
                  LanguageCodePair.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  LanguageCodePair.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.sourceLanguageCode = reader.string();
                          break;
                        }
                        case 2: {
                          message.targetLanguageCode = reader.string();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  LanguageCodePair.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  LanguageCodePair.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                      if (!$util.isString(message.sourceLanguageCode))
                        return "sourceLanguageCode: string expected";
                    }
                    if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode")) {
                      if (!$util.isString(message.targetLanguageCode))
                        return "targetLanguageCode: string expected";
                    }
                    return null;
                  };
                  LanguageCodePair.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair)
                      return object;
                    var message = new $root.google.cloud.translation.v3beta1.Glossary.LanguageCodePair();
                    if (object.sourceLanguageCode != null)
                      message.sourceLanguageCode = String(object.sourceLanguageCode);
                    if (object.targetLanguageCode != null)
                      message.targetLanguageCode = String(object.targetLanguageCode);
                    return message;
                  };
                  LanguageCodePair.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      object.sourceLanguageCode = "";
                      object.targetLanguageCode = "";
                    }
                    if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                      object.sourceLanguageCode = message.sourceLanguageCode;
                    if (message.targetLanguageCode != null && message.hasOwnProperty("targetLanguageCode"))
                      object.targetLanguageCode = message.targetLanguageCode;
                    return object;
                  };
                  LanguageCodePair.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  LanguageCodePair.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.cloud.translation.v3beta1.Glossary.LanguageCodePair";
                  };
                  return LanguageCodePair;
                }();
                Glossary.LanguageCodesSet = function() {
                  function LanguageCodesSet(properties) {
                    this.languageCodes = [];
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  LanguageCodesSet.prototype.languageCodes = $util.emptyArray;
                  LanguageCodesSet.create = function create(properties) {
                    return new LanguageCodesSet(properties);
                  };
                  LanguageCodesSet.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.languageCodes != null && message.languageCodes.length)
                      for (var i = 0; i < message.languageCodes.length; ++i)
                        writer.uint32(
                          /* id 1, wireType 2 =*/
                          10
                        ).string(message.languageCodes[i]);
                    return writer;
                  };
                  LanguageCodesSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  LanguageCodesSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          if (!(message.languageCodes && message.languageCodes.length))
                            message.languageCodes = [];
                          message.languageCodes.push(reader.string());
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  LanguageCodesSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  LanguageCodesSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.languageCodes != null && message.hasOwnProperty("languageCodes")) {
                      if (!Array.isArray(message.languageCodes))
                        return "languageCodes: array expected";
                      for (var i = 0; i < message.languageCodes.length; ++i)
                        if (!$util.isString(message.languageCodes[i]))
                          return "languageCodes: string[] expected";
                    }
                    return null;
                  };
                  LanguageCodesSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet)
                      return object;
                    var message = new $root.google.cloud.translation.v3beta1.Glossary.LanguageCodesSet();
                    if (object.languageCodes) {
                      if (!Array.isArray(object.languageCodes))
                        throw TypeError(".google.cloud.translation.v3beta1.Glossary.LanguageCodesSet.languageCodes: array expected");
                      message.languageCodes = [];
                      for (var i = 0; i < object.languageCodes.length; ++i)
                        message.languageCodes[i] = String(object.languageCodes[i]);
                    }
                    return message;
                  };
                  LanguageCodesSet.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                      object.languageCodes = [];
                    if (message.languageCodes && message.languageCodes.length) {
                      object.languageCodes = [];
                      for (var j = 0; j < message.languageCodes.length; ++j)
                        object.languageCodes[j] = message.languageCodes[j];
                    }
                    return object;
                  };
                  LanguageCodesSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  LanguageCodesSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.cloud.translation.v3beta1.Glossary.LanguageCodesSet";
                  };
                  return LanguageCodesSet;
                }();
                return Glossary;
              }();
              v3beta1.CreateGlossaryRequest = function() {
                function CreateGlossaryRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CreateGlossaryRequest.prototype.parent = "";
                CreateGlossaryRequest.prototype.glossary = null;
                CreateGlossaryRequest.create = function create(properties) {
                  return new CreateGlossaryRequest(properties);
                };
                CreateGlossaryRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.glossary != null && Object.hasOwnProperty.call(message, "glossary"))
                    $root.google.cloud.translation.v3beta1.Glossary.encode(message.glossary, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  return writer;
                };
                CreateGlossaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                CreateGlossaryRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.CreateGlossaryRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.glossary = $root.google.cloud.translation.v3beta1.Glossary.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                CreateGlossaryRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                CreateGlossaryRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.glossary != null && message.hasOwnProperty("glossary")) {
                    var error = $root.google.cloud.translation.v3beta1.Glossary.verify(message.glossary);
                    if (error)
                      return "glossary." + error;
                  }
                  return null;
                };
                CreateGlossaryRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.CreateGlossaryRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.CreateGlossaryRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.glossary != null) {
                    if (typeof object.glossary !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.CreateGlossaryRequest.glossary: object expected");
                    message.glossary = $root.google.cloud.translation.v3beta1.Glossary.fromObject(object.glossary);
                  }
                  return message;
                };
                CreateGlossaryRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.glossary = null;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.glossary != null && message.hasOwnProperty("glossary"))
                    object.glossary = $root.google.cloud.translation.v3beta1.Glossary.toObject(message.glossary, options);
                  return object;
                };
                CreateGlossaryRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CreateGlossaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.CreateGlossaryRequest";
                };
                return CreateGlossaryRequest;
              }();
              v3beta1.GetGlossaryRequest = function() {
                function GetGlossaryRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                GetGlossaryRequest.prototype.name = "";
                GetGlossaryRequest.create = function create(properties) {
                  return new GetGlossaryRequest(properties);
                };
                GetGlossaryRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  return writer;
                };
                GetGlossaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                GetGlossaryRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.GetGlossaryRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                GetGlossaryRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                GetGlossaryRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  return null;
                };
                GetGlossaryRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.GetGlossaryRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.GetGlossaryRequest();
                  if (object.name != null)
                    message.name = String(object.name);
                  return message;
                };
                GetGlossaryRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.name = "";
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  return object;
                };
                GetGlossaryRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                GetGlossaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.GetGlossaryRequest";
                };
                return GetGlossaryRequest;
              }();
              v3beta1.DeleteGlossaryRequest = function() {
                function DeleteGlossaryRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DeleteGlossaryRequest.prototype.name = "";
                DeleteGlossaryRequest.create = function create(properties) {
                  return new DeleteGlossaryRequest(properties);
                };
                DeleteGlossaryRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  return writer;
                };
                DeleteGlossaryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DeleteGlossaryRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DeleteGlossaryRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DeleteGlossaryRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DeleteGlossaryRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  return null;
                };
                DeleteGlossaryRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DeleteGlossaryRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DeleteGlossaryRequest();
                  if (object.name != null)
                    message.name = String(object.name);
                  return message;
                };
                DeleteGlossaryRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.name = "";
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  return object;
                };
                DeleteGlossaryRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DeleteGlossaryRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DeleteGlossaryRequest";
                };
                return DeleteGlossaryRequest;
              }();
              v3beta1.ListGlossariesRequest = function() {
                function ListGlossariesRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListGlossariesRequest.prototype.parent = "";
                ListGlossariesRequest.prototype.pageSize = 0;
                ListGlossariesRequest.prototype.pageToken = "";
                ListGlossariesRequest.prototype.filter = "";
                ListGlossariesRequest.create = function create(properties) {
                  return new ListGlossariesRequest(properties);
                };
                ListGlossariesRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int32(message.pageSize);
                  if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                    writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).string(message.pageToken);
                  if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.filter);
                  return writer;
                };
                ListGlossariesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListGlossariesRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.ListGlossariesRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.pageSize = reader.int32();
                        break;
                      }
                      case 3: {
                        message.pageToken = reader.string();
                        break;
                      }
                      case 4: {
                        message.filter = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListGlossariesRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListGlossariesRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.pageSize != null && message.hasOwnProperty("pageSize")) {
                    if (!$util.isInteger(message.pageSize))
                      return "pageSize: integer expected";
                  }
                  if (message.pageToken != null && message.hasOwnProperty("pageToken")) {
                    if (!$util.isString(message.pageToken))
                      return "pageToken: string expected";
                  }
                  if (message.filter != null && message.hasOwnProperty("filter")) {
                    if (!$util.isString(message.filter))
                      return "filter: string expected";
                  }
                  return null;
                };
                ListGlossariesRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.ListGlossariesRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.ListGlossariesRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.pageSize != null)
                    message.pageSize = object.pageSize | 0;
                  if (object.pageToken != null)
                    message.pageToken = String(object.pageToken);
                  if (object.filter != null)
                    message.filter = String(object.filter);
                  return message;
                };
                ListGlossariesRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.pageSize = 0;
                    object.pageToken = "";
                    object.filter = "";
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                    object.pageSize = message.pageSize;
                  if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                    object.pageToken = message.pageToken;
                  if (message.filter != null && message.hasOwnProperty("filter"))
                    object.filter = message.filter;
                  return object;
                };
                ListGlossariesRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListGlossariesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.ListGlossariesRequest";
                };
                return ListGlossariesRequest;
              }();
              v3beta1.ListGlossariesResponse = function() {
                function ListGlossariesResponse(properties) {
                  this.glossaries = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListGlossariesResponse.prototype.glossaries = $util.emptyArray;
                ListGlossariesResponse.prototype.nextPageToken = "";
                ListGlossariesResponse.create = function create(properties) {
                  return new ListGlossariesResponse(properties);
                };
                ListGlossariesResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.glossaries != null && message.glossaries.length)
                    for (var i = 0; i < message.glossaries.length; ++i)
                      $root.google.cloud.translation.v3beta1.Glossary.encode(message.glossaries[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.nextPageToken);
                  return writer;
                };
                ListGlossariesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListGlossariesResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.ListGlossariesResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.glossaries && message.glossaries.length))
                          message.glossaries = [];
                        message.glossaries.push($root.google.cloud.translation.v3beta1.Glossary.decode(reader, reader.uint32()));
                        break;
                      }
                      case 2: {
                        message.nextPageToken = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListGlossariesResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListGlossariesResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.glossaries != null && message.hasOwnProperty("glossaries")) {
                    if (!Array.isArray(message.glossaries))
                      return "glossaries: array expected";
                    for (var i = 0; i < message.glossaries.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.Glossary.verify(message.glossaries[i]);
                      if (error)
                        return "glossaries." + error;
                    }
                  }
                  if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken")) {
                    if (!$util.isString(message.nextPageToken))
                      return "nextPageToken: string expected";
                  }
                  return null;
                };
                ListGlossariesResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.ListGlossariesResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.ListGlossariesResponse();
                  if (object.glossaries) {
                    if (!Array.isArray(object.glossaries))
                      throw TypeError(".google.cloud.translation.v3beta1.ListGlossariesResponse.glossaries: array expected");
                    message.glossaries = [];
                    for (var i = 0; i < object.glossaries.length; ++i) {
                      if (typeof object.glossaries[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.ListGlossariesResponse.glossaries: object expected");
                      message.glossaries[i] = $root.google.cloud.translation.v3beta1.Glossary.fromObject(object.glossaries[i]);
                    }
                  }
                  if (object.nextPageToken != null)
                    message.nextPageToken = String(object.nextPageToken);
                  return message;
                };
                ListGlossariesResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.glossaries = [];
                  if (options.defaults)
                    object.nextPageToken = "";
                  if (message.glossaries && message.glossaries.length) {
                    object.glossaries = [];
                    for (var j = 0; j < message.glossaries.length; ++j)
                      object.glossaries[j] = $root.google.cloud.translation.v3beta1.Glossary.toObject(message.glossaries[j], options);
                  }
                  if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                    object.nextPageToken = message.nextPageToken;
                  return object;
                };
                ListGlossariesResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListGlossariesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.ListGlossariesResponse";
                };
                return ListGlossariesResponse;
              }();
              v3beta1.CreateGlossaryMetadata = function() {
                function CreateGlossaryMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CreateGlossaryMetadata.prototype.name = "";
                CreateGlossaryMetadata.prototype.state = 0;
                CreateGlossaryMetadata.prototype.submitTime = null;
                CreateGlossaryMetadata.create = function create(properties) {
                  return new CreateGlossaryMetadata(properties);
                };
                CreateGlossaryMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int32(message.state);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  return writer;
                };
                CreateGlossaryMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                CreateGlossaryMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.CreateGlossaryMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 2: {
                        message.state = reader.int32();
                        break;
                      }
                      case 3: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                CreateGlossaryMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                CreateGlossaryMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                CreateGlossaryMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.CreateGlossaryMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.CreateGlossaryMetadata();
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.CreateGlossaryMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                CreateGlossaryMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    object.submitTime = null;
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3beta1.CreateGlossaryMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3beta1.CreateGlossaryMetadata.State[message.state] : message.state;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                CreateGlossaryMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CreateGlossaryMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.CreateGlossaryMetadata";
                };
                CreateGlossaryMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return CreateGlossaryMetadata;
              }();
              v3beta1.DeleteGlossaryMetadata = function() {
                function DeleteGlossaryMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DeleteGlossaryMetadata.prototype.name = "";
                DeleteGlossaryMetadata.prototype.state = 0;
                DeleteGlossaryMetadata.prototype.submitTime = null;
                DeleteGlossaryMetadata.create = function create(properties) {
                  return new DeleteGlossaryMetadata(properties);
                };
                DeleteGlossaryMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int32(message.state);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  return writer;
                };
                DeleteGlossaryMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DeleteGlossaryMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DeleteGlossaryMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 2: {
                        message.state = reader.int32();
                        break;
                      }
                      case 3: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DeleteGlossaryMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DeleteGlossaryMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                DeleteGlossaryMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DeleteGlossaryMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DeleteGlossaryMetadata();
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.DeleteGlossaryMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                DeleteGlossaryMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    object.submitTime = null;
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3beta1.DeleteGlossaryMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3beta1.DeleteGlossaryMetadata.State[message.state] : message.state;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                DeleteGlossaryMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DeleteGlossaryMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DeleteGlossaryMetadata";
                };
                DeleteGlossaryMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return DeleteGlossaryMetadata;
              }();
              v3beta1.DeleteGlossaryResponse = function() {
                function DeleteGlossaryResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                DeleteGlossaryResponse.prototype.name = "";
                DeleteGlossaryResponse.prototype.submitTime = null;
                DeleteGlossaryResponse.prototype.endTime = null;
                DeleteGlossaryResponse.create = function create(properties) {
                  return new DeleteGlossaryResponse(properties);
                };
                DeleteGlossaryResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.name);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  return writer;
                };
                DeleteGlossaryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                DeleteGlossaryResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.DeleteGlossaryResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.name = reader.string();
                        break;
                      }
                      case 2: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                DeleteGlossaryResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                DeleteGlossaryResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  return null;
                };
                DeleteGlossaryResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.DeleteGlossaryResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.DeleteGlossaryResponse();
                  if (object.name != null)
                    message.name = String(object.name);
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.DeleteGlossaryResponse.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.DeleteGlossaryResponse.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  return message;
                };
                DeleteGlossaryResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.name = "";
                    object.submitTime = null;
                    object.endTime = null;
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  return object;
                };
                DeleteGlossaryResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                DeleteGlossaryResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.DeleteGlossaryResponse";
                };
                return DeleteGlossaryResponse;
              }();
              v3beta1.BatchTranslateDocumentRequest = function() {
                function BatchTranslateDocumentRequest(properties) {
                  this.targetLanguageCodes = [];
                  this.inputConfigs = [];
                  this.models = {};
                  this.glossaries = {};
                  this.formatConversions = {};
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateDocumentRequest.prototype.parent = "";
                BatchTranslateDocumentRequest.prototype.sourceLanguageCode = "";
                BatchTranslateDocumentRequest.prototype.targetLanguageCodes = $util.emptyArray;
                BatchTranslateDocumentRequest.prototype.inputConfigs = $util.emptyArray;
                BatchTranslateDocumentRequest.prototype.outputConfig = null;
                BatchTranslateDocumentRequest.prototype.models = $util.emptyObject;
                BatchTranslateDocumentRequest.prototype.glossaries = $util.emptyObject;
                BatchTranslateDocumentRequest.prototype.formatConversions = $util.emptyObject;
                BatchTranslateDocumentRequest.prototype.customizedAttribution = "";
                BatchTranslateDocumentRequest.prototype.enableShadowRemovalNativePdf = false;
                BatchTranslateDocumentRequest.prototype.enableRotationCorrection = false;
                BatchTranslateDocumentRequest.create = function create(properties) {
                  return new BatchTranslateDocumentRequest(properties);
                };
                BatchTranslateDocumentRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.sourceLanguageCode != null && Object.hasOwnProperty.call(message, "sourceLanguageCode"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.sourceLanguageCode);
                  if (message.targetLanguageCodes != null && message.targetLanguageCodes.length)
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      writer.uint32(
                        /* id 3, wireType 2 =*/
                        26
                      ).string(message.targetLanguageCodes[i]);
                  if (message.inputConfigs != null && message.inputConfigs.length)
                    for (var i = 0; i < message.inputConfigs.length; ++i)
                      $root.google.cloud.translation.v3beta1.BatchDocumentInputConfig.encode(message.inputConfigs[i], writer.uint32(
                        /* id 4, wireType 2 =*/
                        34
                      ).fork()).ldelim();
                  if (message.outputConfig != null && Object.hasOwnProperty.call(message, "outputConfig"))
                    $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig.encode(message.outputConfig, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  if (message.models != null && Object.hasOwnProperty.call(message, "models"))
                    for (var keys = Object.keys(message.models), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 6, wireType 2 =*/
                        50
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.models[keys[i]]).ldelim();
                  if (message.glossaries != null && Object.hasOwnProperty.call(message, "glossaries"))
                    for (var keys = Object.keys(message.glossaries), i = 0; i < keys.length; ++i) {
                      writer.uint32(
                        /* id 7, wireType 2 =*/
                        58
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]);
                      $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.encode(message.glossaries[keys[i]], writer.uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).fork()).ldelim().ldelim();
                    }
                  if (message.formatConversions != null && Object.hasOwnProperty.call(message, "formatConversions"))
                    for (var keys = Object.keys(message.formatConversions), i = 0; i < keys.length; ++i)
                      writer.uint32(
                        /* id 8, wireType 2 =*/
                        66
                      ).fork().uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(keys[i]).uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).string(message.formatConversions[keys[i]]).ldelim();
                  if (message.customizedAttribution != null && Object.hasOwnProperty.call(message, "customizedAttribution"))
                    writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).string(message.customizedAttribution);
                  if (message.enableShadowRemovalNativePdf != null && Object.hasOwnProperty.call(message, "enableShadowRemovalNativePdf"))
                    writer.uint32(
                      /* id 11, wireType 0 =*/
                      88
                    ).bool(message.enableShadowRemovalNativePdf);
                  if (message.enableRotationCorrection != null && Object.hasOwnProperty.call(message, "enableRotationCorrection"))
                    writer.uint32(
                      /* id 12, wireType 0 =*/
                      96
                    ).bool(message.enableRotationCorrection);
                  return writer;
                };
                BatchTranslateDocumentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateDocumentRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchTranslateDocumentRequest(), key, value;
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.sourceLanguageCode = reader.string();
                        break;
                      }
                      case 3: {
                        if (!(message.targetLanguageCodes && message.targetLanguageCodes.length))
                          message.targetLanguageCodes = [];
                        message.targetLanguageCodes.push(reader.string());
                        break;
                      }
                      case 4: {
                        if (!(message.inputConfigs && message.inputConfigs.length))
                          message.inputConfigs = [];
                        message.inputConfigs.push($root.google.cloud.translation.v3beta1.BatchDocumentInputConfig.decode(reader, reader.uint32()));
                        break;
                      }
                      case 5: {
                        message.outputConfig = $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 6: {
                        if (message.models === $util.emptyObject)
                          message.models = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.models[key] = value;
                        break;
                      }
                      case 7: {
                        if (message.glossaries === $util.emptyObject)
                          message.glossaries = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = null;
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.decode(reader, reader.uint32());
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.glossaries[key] = value;
                        break;
                      }
                      case 8: {
                        if (message.formatConversions === $util.emptyObject)
                          message.formatConversions = {};
                        var end2 = reader.uint32() + reader.pos;
                        key = "";
                        value = "";
                        while (reader.pos < end2) {
                          var tag2 = reader.uint32();
                          switch (tag2 >>> 3) {
                            case 1:
                              key = reader.string();
                              break;
                            case 2:
                              value = reader.string();
                              break;
                            default:
                              reader.skipType(tag2 & 7);
                              break;
                          }
                        }
                        message.formatConversions[key] = value;
                        break;
                      }
                      case 10: {
                        message.customizedAttribution = reader.string();
                        break;
                      }
                      case 11: {
                        message.enableShadowRemovalNativePdf = reader.bool();
                        break;
                      }
                      case 12: {
                        message.enableRotationCorrection = reader.bool();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateDocumentRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateDocumentRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode")) {
                    if (!$util.isString(message.sourceLanguageCode))
                      return "sourceLanguageCode: string expected";
                  }
                  if (message.targetLanguageCodes != null && message.hasOwnProperty("targetLanguageCodes")) {
                    if (!Array.isArray(message.targetLanguageCodes))
                      return "targetLanguageCodes: array expected";
                    for (var i = 0; i < message.targetLanguageCodes.length; ++i)
                      if (!$util.isString(message.targetLanguageCodes[i]))
                        return "targetLanguageCodes: string[] expected";
                  }
                  if (message.inputConfigs != null && message.hasOwnProperty("inputConfigs")) {
                    if (!Array.isArray(message.inputConfigs))
                      return "inputConfigs: array expected";
                    for (var i = 0; i < message.inputConfigs.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.BatchDocumentInputConfig.verify(message.inputConfigs[i]);
                      if (error)
                        return "inputConfigs." + error;
                    }
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig")) {
                    var error = $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig.verify(message.outputConfig);
                    if (error)
                      return "outputConfig." + error;
                  }
                  if (message.models != null && message.hasOwnProperty("models")) {
                    if (!$util.isObject(message.models))
                      return "models: object expected";
                    var key = Object.keys(message.models);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.models[key[i]]))
                        return "models: string{k:string} expected";
                  }
                  if (message.glossaries != null && message.hasOwnProperty("glossaries")) {
                    if (!$util.isObject(message.glossaries))
                      return "glossaries: object expected";
                    var key = Object.keys(message.glossaries);
                    for (var i = 0; i < key.length; ++i) {
                      var error = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.verify(message.glossaries[key[i]]);
                      if (error)
                        return "glossaries." + error;
                    }
                  }
                  if (message.formatConversions != null && message.hasOwnProperty("formatConversions")) {
                    if (!$util.isObject(message.formatConversions))
                      return "formatConversions: object expected";
                    var key = Object.keys(message.formatConversions);
                    for (var i = 0; i < key.length; ++i)
                      if (!$util.isString(message.formatConversions[key[i]]))
                        return "formatConversions: string{k:string} expected";
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution")) {
                    if (!$util.isString(message.customizedAttribution))
                      return "customizedAttribution: string expected";
                  }
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf")) {
                    if (typeof message.enableShadowRemovalNativePdf !== "boolean")
                      return "enableShadowRemovalNativePdf: boolean expected";
                  }
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection")) {
                    if (typeof message.enableRotationCorrection !== "boolean")
                      return "enableRotationCorrection: boolean expected";
                  }
                  return null;
                };
                BatchTranslateDocumentRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchTranslateDocumentRequest)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchTranslateDocumentRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.sourceLanguageCode != null)
                    message.sourceLanguageCode = String(object.sourceLanguageCode);
                  if (object.targetLanguageCodes) {
                    if (!Array.isArray(object.targetLanguageCodes))
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.targetLanguageCodes: array expected");
                    message.targetLanguageCodes = [];
                    for (var i = 0; i < object.targetLanguageCodes.length; ++i)
                      message.targetLanguageCodes[i] = String(object.targetLanguageCodes[i]);
                  }
                  if (object.inputConfigs) {
                    if (!Array.isArray(object.inputConfigs))
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.inputConfigs: array expected");
                    message.inputConfigs = [];
                    for (var i = 0; i < object.inputConfigs.length; ++i) {
                      if (typeof object.inputConfigs[i] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.inputConfigs: object expected");
                      message.inputConfigs[i] = $root.google.cloud.translation.v3beta1.BatchDocumentInputConfig.fromObject(object.inputConfigs[i]);
                    }
                  }
                  if (object.outputConfig != null) {
                    if (typeof object.outputConfig !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.outputConfig: object expected");
                    message.outputConfig = $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig.fromObject(object.outputConfig);
                  }
                  if (object.models) {
                    if (typeof object.models !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.models: object expected");
                    message.models = {};
                    for (var keys = Object.keys(object.models), i = 0; i < keys.length; ++i)
                      message.models[keys[i]] = String(object.models[keys[i]]);
                  }
                  if (object.glossaries) {
                    if (typeof object.glossaries !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.glossaries: object expected");
                    message.glossaries = {};
                    for (var keys = Object.keys(object.glossaries), i = 0; i < keys.length; ++i) {
                      if (typeof object.glossaries[keys[i]] !== "object")
                        throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.glossaries: object expected");
                      message.glossaries[keys[i]] = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.fromObject(object.glossaries[keys[i]]);
                    }
                  }
                  if (object.formatConversions) {
                    if (typeof object.formatConversions !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentRequest.formatConversions: object expected");
                    message.formatConversions = {};
                    for (var keys = Object.keys(object.formatConversions), i = 0; i < keys.length; ++i)
                      message.formatConversions[keys[i]] = String(object.formatConversions[keys[i]]);
                  }
                  if (object.customizedAttribution != null)
                    message.customizedAttribution = String(object.customizedAttribution);
                  if (object.enableShadowRemovalNativePdf != null)
                    message.enableShadowRemovalNativePdf = Boolean(object.enableShadowRemovalNativePdf);
                  if (object.enableRotationCorrection != null)
                    message.enableRotationCorrection = Boolean(object.enableRotationCorrection);
                  return message;
                };
                BatchTranslateDocumentRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults) {
                    object.targetLanguageCodes = [];
                    object.inputConfigs = [];
                  }
                  if (options.objects || options.defaults) {
                    object.models = {};
                    object.glossaries = {};
                    object.formatConversions = {};
                  }
                  if (options.defaults) {
                    object.parent = "";
                    object.sourceLanguageCode = "";
                    object.outputConfig = null;
                    object.customizedAttribution = "";
                    object.enableShadowRemovalNativePdf = false;
                    object.enableRotationCorrection = false;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.sourceLanguageCode != null && message.hasOwnProperty("sourceLanguageCode"))
                    object.sourceLanguageCode = message.sourceLanguageCode;
                  if (message.targetLanguageCodes && message.targetLanguageCodes.length) {
                    object.targetLanguageCodes = [];
                    for (var j = 0; j < message.targetLanguageCodes.length; ++j)
                      object.targetLanguageCodes[j] = message.targetLanguageCodes[j];
                  }
                  if (message.inputConfigs && message.inputConfigs.length) {
                    object.inputConfigs = [];
                    for (var j = 0; j < message.inputConfigs.length; ++j)
                      object.inputConfigs[j] = $root.google.cloud.translation.v3beta1.BatchDocumentInputConfig.toObject(message.inputConfigs[j], options);
                  }
                  if (message.outputConfig != null && message.hasOwnProperty("outputConfig"))
                    object.outputConfig = $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig.toObject(message.outputConfig, options);
                  var keys2;
                  if (message.models && (keys2 = Object.keys(message.models)).length) {
                    object.models = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.models[keys2[j]] = message.models[keys2[j]];
                  }
                  if (message.glossaries && (keys2 = Object.keys(message.glossaries)).length) {
                    object.glossaries = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.glossaries[keys2[j]] = $root.google.cloud.translation.v3beta1.TranslateTextGlossaryConfig.toObject(message.glossaries[keys2[j]], options);
                  }
                  if (message.formatConversions && (keys2 = Object.keys(message.formatConversions)).length) {
                    object.formatConversions = {};
                    for (var j = 0; j < keys2.length; ++j)
                      object.formatConversions[keys2[j]] = message.formatConversions[keys2[j]];
                  }
                  if (message.customizedAttribution != null && message.hasOwnProperty("customizedAttribution"))
                    object.customizedAttribution = message.customizedAttribution;
                  if (message.enableShadowRemovalNativePdf != null && message.hasOwnProperty("enableShadowRemovalNativePdf"))
                    object.enableShadowRemovalNativePdf = message.enableShadowRemovalNativePdf;
                  if (message.enableRotationCorrection != null && message.hasOwnProperty("enableRotationCorrection"))
                    object.enableRotationCorrection = message.enableRotationCorrection;
                  return object;
                };
                BatchTranslateDocumentRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateDocumentRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchTranslateDocumentRequest";
                };
                return BatchTranslateDocumentRequest;
              }();
              v3beta1.BatchDocumentInputConfig = function() {
                function BatchDocumentInputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchDocumentInputConfig.prototype.gcsSource = null;
                var $oneOfFields;
                Object.defineProperty(BatchDocumentInputConfig.prototype, "source", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsSource"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                BatchDocumentInputConfig.create = function create(properties) {
                  return new BatchDocumentInputConfig(properties);
                };
                BatchDocumentInputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsSource != null && Object.hasOwnProperty.call(message, "gcsSource"))
                    $root.google.cloud.translation.v3beta1.GcsSource.encode(message.gcsSource, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                BatchDocumentInputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchDocumentInputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchDocumentInputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchDocumentInputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchDocumentInputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    properties.source = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.GcsSource.verify(message.gcsSource);
                      if (error)
                        return "gcsSource." + error;
                    }
                  }
                  return null;
                };
                BatchDocumentInputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchDocumentInputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchDocumentInputConfig();
                  if (object.gcsSource != null) {
                    if (typeof object.gcsSource !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchDocumentInputConfig.gcsSource: object expected");
                    message.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.fromObject(object.gcsSource);
                  }
                  return message;
                };
                BatchDocumentInputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsSource != null && message.hasOwnProperty("gcsSource")) {
                    object.gcsSource = $root.google.cloud.translation.v3beta1.GcsSource.toObject(message.gcsSource, options);
                    if (options.oneofs)
                      object.source = "gcsSource";
                  }
                  return object;
                };
                BatchDocumentInputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchDocumentInputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchDocumentInputConfig";
                };
                return BatchDocumentInputConfig;
              }();
              v3beta1.BatchDocumentOutputConfig = function() {
                function BatchDocumentOutputConfig(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchDocumentOutputConfig.prototype.gcsDestination = null;
                var $oneOfFields;
                Object.defineProperty(BatchDocumentOutputConfig.prototype, "destination", {
                  get: $util.oneOfGetter($oneOfFields = ["gcsDestination"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                BatchDocumentOutputConfig.create = function create(properties) {
                  return new BatchDocumentOutputConfig(properties);
                };
                BatchDocumentOutputConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.gcsDestination != null && Object.hasOwnProperty.call(message, "gcsDestination"))
                    $root.google.cloud.translation.v3beta1.GcsDestination.encode(message.gcsDestination, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  return writer;
                };
                BatchDocumentOutputConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchDocumentOutputConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchDocumentOutputConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchDocumentOutputConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    properties.destination = 1;
                    {
                      var error = $root.google.cloud.translation.v3beta1.GcsDestination.verify(message.gcsDestination);
                      if (error)
                        return "gcsDestination." + error;
                    }
                  }
                  return null;
                };
                BatchDocumentOutputConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchDocumentOutputConfig();
                  if (object.gcsDestination != null) {
                    if (typeof object.gcsDestination !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchDocumentOutputConfig.gcsDestination: object expected");
                    message.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.fromObject(object.gcsDestination);
                  }
                  return message;
                };
                BatchDocumentOutputConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.gcsDestination != null && message.hasOwnProperty("gcsDestination")) {
                    object.gcsDestination = $root.google.cloud.translation.v3beta1.GcsDestination.toObject(message.gcsDestination, options);
                    if (options.oneofs)
                      object.destination = "gcsDestination";
                  }
                  return object;
                };
                BatchDocumentOutputConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchDocumentOutputConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchDocumentOutputConfig";
                };
                return BatchDocumentOutputConfig;
              }();
              v3beta1.BatchTranslateDocumentResponse = function() {
                function BatchTranslateDocumentResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateDocumentResponse.prototype.totalPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.translatedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.failedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.totalBillablePages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.totalBillableCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentResponse.prototype.submitTime = null;
                BatchTranslateDocumentResponse.prototype.endTime = null;
                BatchTranslateDocumentResponse.create = function create(properties) {
                  return new BatchTranslateDocumentResponse(properties);
                };
                BatchTranslateDocumentResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.totalPages != null && Object.hasOwnProperty.call(message, "totalPages"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int64(message.totalPages);
                  if (message.translatedPages != null && Object.hasOwnProperty.call(message, "translatedPages"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.translatedPages);
                  if (message.failedPages != null && Object.hasOwnProperty.call(message, "failedPages"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.failedPages);
                  if (message.totalBillablePages != null && Object.hasOwnProperty.call(message, "totalBillablePages"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int64(message.totalBillablePages);
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 5, wireType 0 =*/
                      40
                    ).int64(message.totalCharacters);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 6, wireType 0 =*/
                      48
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 7, wireType 0 =*/
                      56
                    ).int64(message.failedCharacters);
                  if (message.totalBillableCharacters != null && Object.hasOwnProperty.call(message, "totalBillableCharacters"))
                    writer.uint32(
                      /* id 8, wireType 0 =*/
                      64
                    ).int64(message.totalBillableCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 9, wireType 2 =*/
                      74
                    ).fork()).ldelim();
                  if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateDocumentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateDocumentResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchTranslateDocumentResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.totalPages = reader.int64();
                        break;
                      }
                      case 2: {
                        message.translatedPages = reader.int64();
                        break;
                      }
                      case 3: {
                        message.failedPages = reader.int64();
                        break;
                      }
                      case 4: {
                        message.totalBillablePages = reader.int64();
                        break;
                      }
                      case 5: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 6: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 7: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 8: {
                        message.totalBillableCharacters = reader.int64();
                        break;
                      }
                      case 9: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 10: {
                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateDocumentResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateDocumentResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.totalPages != null && message.hasOwnProperty("totalPages")) {
                    if (!$util.isInteger(message.totalPages) && !(message.totalPages && $util.isInteger(message.totalPages.low) && $util.isInteger(message.totalPages.high)))
                      return "totalPages: integer|Long expected";
                  }
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages")) {
                    if (!$util.isInteger(message.translatedPages) && !(message.translatedPages && $util.isInteger(message.translatedPages.low) && $util.isInteger(message.translatedPages.high)))
                      return "translatedPages: integer|Long expected";
                  }
                  if (message.failedPages != null && message.hasOwnProperty("failedPages")) {
                    if (!$util.isInteger(message.failedPages) && !(message.failedPages && $util.isInteger(message.failedPages.low) && $util.isInteger(message.failedPages.high)))
                      return "failedPages: integer|Long expected";
                  }
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages")) {
                    if (!$util.isInteger(message.totalBillablePages) && !(message.totalBillablePages && $util.isInteger(message.totalBillablePages.low) && $util.isInteger(message.totalBillablePages.high)))
                      return "totalBillablePages: integer|Long expected";
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters")) {
                    if (!$util.isInteger(message.totalBillableCharacters) && !(message.totalBillableCharacters && $util.isInteger(message.totalBillableCharacters.low) && $util.isInteger(message.totalBillableCharacters.high)))
                      return "totalBillableCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  if (message.endTime != null && message.hasOwnProperty("endTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                    if (error)
                      return "endTime." + error;
                  }
                  return null;
                };
                BatchTranslateDocumentResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchTranslateDocumentResponse)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchTranslateDocumentResponse();
                  if (object.totalPages != null) {
                    if ($util.Long)
                      (message.totalPages = $util.Long.fromValue(object.totalPages)).unsigned = false;
                    else if (typeof object.totalPages === "string")
                      message.totalPages = parseInt(object.totalPages, 10);
                    else if (typeof object.totalPages === "number")
                      message.totalPages = object.totalPages;
                    else if (typeof object.totalPages === "object")
                      message.totalPages = new $util.LongBits(object.totalPages.low >>> 0, object.totalPages.high >>> 0).toNumber();
                  }
                  if (object.translatedPages != null) {
                    if ($util.Long)
                      (message.translatedPages = $util.Long.fromValue(object.translatedPages)).unsigned = false;
                    else if (typeof object.translatedPages === "string")
                      message.translatedPages = parseInt(object.translatedPages, 10);
                    else if (typeof object.translatedPages === "number")
                      message.translatedPages = object.translatedPages;
                    else if (typeof object.translatedPages === "object")
                      message.translatedPages = new $util.LongBits(object.translatedPages.low >>> 0, object.translatedPages.high >>> 0).toNumber();
                  }
                  if (object.failedPages != null) {
                    if ($util.Long)
                      (message.failedPages = $util.Long.fromValue(object.failedPages)).unsigned = false;
                    else if (typeof object.failedPages === "string")
                      message.failedPages = parseInt(object.failedPages, 10);
                    else if (typeof object.failedPages === "number")
                      message.failedPages = object.failedPages;
                    else if (typeof object.failedPages === "object")
                      message.failedPages = new $util.LongBits(object.failedPages.low >>> 0, object.failedPages.high >>> 0).toNumber();
                  }
                  if (object.totalBillablePages != null) {
                    if ($util.Long)
                      (message.totalBillablePages = $util.Long.fromValue(object.totalBillablePages)).unsigned = false;
                    else if (typeof object.totalBillablePages === "string")
                      message.totalBillablePages = parseInt(object.totalBillablePages, 10);
                    else if (typeof object.totalBillablePages === "number")
                      message.totalBillablePages = object.totalBillablePages;
                    else if (typeof object.totalBillablePages === "object")
                      message.totalBillablePages = new $util.LongBits(object.totalBillablePages.low >>> 0, object.totalBillablePages.high >>> 0).toNumber();
                  }
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.totalBillableCharacters != null) {
                    if ($util.Long)
                      (message.totalBillableCharacters = $util.Long.fromValue(object.totalBillableCharacters)).unsigned = false;
                    else if (typeof object.totalBillableCharacters === "string")
                      message.totalBillableCharacters = parseInt(object.totalBillableCharacters, 10);
                    else if (typeof object.totalBillableCharacters === "number")
                      message.totalBillableCharacters = object.totalBillableCharacters;
                    else if (typeof object.totalBillableCharacters === "object")
                      message.totalBillableCharacters = new $util.LongBits(object.totalBillableCharacters.low >>> 0, object.totalBillableCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentResponse.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  if (object.endTime != null) {
                    if (typeof object.endTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentResponse.endTime: object expected");
                    message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                  }
                  return message;
                };
                BatchTranslateDocumentResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillablePages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillablePages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillableCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillableCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                    object.endTime = null;
                  }
                  if (message.totalPages != null && message.hasOwnProperty("totalPages"))
                    if (typeof message.totalPages === "number")
                      object.totalPages = options.longs === String ? String(message.totalPages) : message.totalPages;
                    else
                      object.totalPages = options.longs === String ? $util.Long.prototype.toString.call(message.totalPages) : options.longs === Number ? new $util.LongBits(message.totalPages.low >>> 0, message.totalPages.high >>> 0).toNumber() : message.totalPages;
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages"))
                    if (typeof message.translatedPages === "number")
                      object.translatedPages = options.longs === String ? String(message.translatedPages) : message.translatedPages;
                    else
                      object.translatedPages = options.longs === String ? $util.Long.prototype.toString.call(message.translatedPages) : options.longs === Number ? new $util.LongBits(message.translatedPages.low >>> 0, message.translatedPages.high >>> 0).toNumber() : message.translatedPages;
                  if (message.failedPages != null && message.hasOwnProperty("failedPages"))
                    if (typeof message.failedPages === "number")
                      object.failedPages = options.longs === String ? String(message.failedPages) : message.failedPages;
                    else
                      object.failedPages = options.longs === String ? $util.Long.prototype.toString.call(message.failedPages) : options.longs === Number ? new $util.LongBits(message.failedPages.low >>> 0, message.failedPages.high >>> 0).toNumber() : message.failedPages;
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages"))
                    if (typeof message.totalBillablePages === "number")
                      object.totalBillablePages = options.longs === String ? String(message.totalBillablePages) : message.totalBillablePages;
                    else
                      object.totalBillablePages = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillablePages) : options.longs === Number ? new $util.LongBits(message.totalBillablePages.low >>> 0, message.totalBillablePages.high >>> 0).toNumber() : message.totalBillablePages;
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters"))
                    if (typeof message.totalBillableCharacters === "number")
                      object.totalBillableCharacters = options.longs === String ? String(message.totalBillableCharacters) : message.totalBillableCharacters;
                    else
                      object.totalBillableCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillableCharacters) : options.longs === Number ? new $util.LongBits(message.totalBillableCharacters.low >>> 0, message.totalBillableCharacters.high >>> 0).toNumber() : message.totalBillableCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  if (message.endTime != null && message.hasOwnProperty("endTime"))
                    object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                  return object;
                };
                BatchTranslateDocumentResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateDocumentResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchTranslateDocumentResponse";
                };
                return BatchTranslateDocumentResponse;
              }();
              v3beta1.BatchTranslateDocumentMetadata = function() {
                function BatchTranslateDocumentMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                BatchTranslateDocumentMetadata.prototype.state = 0;
                BatchTranslateDocumentMetadata.prototype.totalPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.translatedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.failedPages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.totalBillablePages = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.totalCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.translatedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.failedCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.totalBillableCharacters = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                BatchTranslateDocumentMetadata.prototype.submitTime = null;
                BatchTranslateDocumentMetadata.create = function create(properties) {
                  return new BatchTranslateDocumentMetadata(properties);
                };
                BatchTranslateDocumentMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int32(message.state);
                  if (message.totalPages != null && Object.hasOwnProperty.call(message, "totalPages"))
                    writer.uint32(
                      /* id 2, wireType 0 =*/
                      16
                    ).int64(message.totalPages);
                  if (message.translatedPages != null && Object.hasOwnProperty.call(message, "translatedPages"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int64(message.translatedPages);
                  if (message.failedPages != null && Object.hasOwnProperty.call(message, "failedPages"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int64(message.failedPages);
                  if (message.totalBillablePages != null && Object.hasOwnProperty.call(message, "totalBillablePages"))
                    writer.uint32(
                      /* id 5, wireType 0 =*/
                      40
                    ).int64(message.totalBillablePages);
                  if (message.totalCharacters != null && Object.hasOwnProperty.call(message, "totalCharacters"))
                    writer.uint32(
                      /* id 6, wireType 0 =*/
                      48
                    ).int64(message.totalCharacters);
                  if (message.translatedCharacters != null && Object.hasOwnProperty.call(message, "translatedCharacters"))
                    writer.uint32(
                      /* id 7, wireType 0 =*/
                      56
                    ).int64(message.translatedCharacters);
                  if (message.failedCharacters != null && Object.hasOwnProperty.call(message, "failedCharacters"))
                    writer.uint32(
                      /* id 8, wireType 0 =*/
                      64
                    ).int64(message.failedCharacters);
                  if (message.totalBillableCharacters != null && Object.hasOwnProperty.call(message, "totalBillableCharacters"))
                    writer.uint32(
                      /* id 9, wireType 0 =*/
                      72
                    ).int64(message.totalBillableCharacters);
                  if (message.submitTime != null && Object.hasOwnProperty.call(message, "submitTime"))
                    $root.google.protobuf.Timestamp.encode(message.submitTime, writer.uint32(
                      /* id 10, wireType 2 =*/
                      82
                    ).fork()).ldelim();
                  return writer;
                };
                BatchTranslateDocumentMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                BatchTranslateDocumentMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.state = reader.int32();
                        break;
                      }
                      case 2: {
                        message.totalPages = reader.int64();
                        break;
                      }
                      case 3: {
                        message.translatedPages = reader.int64();
                        break;
                      }
                      case 4: {
                        message.failedPages = reader.int64();
                        break;
                      }
                      case 5: {
                        message.totalBillablePages = reader.int64();
                        break;
                      }
                      case 6: {
                        message.totalCharacters = reader.int64();
                        break;
                      }
                      case 7: {
                        message.translatedCharacters = reader.int64();
                        break;
                      }
                      case 8: {
                        message.failedCharacters = reader.int64();
                        break;
                      }
                      case 9: {
                        message.totalBillableCharacters = reader.int64();
                        break;
                      }
                      case 10: {
                        message.submitTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                BatchTranslateDocumentMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                BatchTranslateDocumentMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                      default:
                        return "state: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                        break;
                    }
                  if (message.totalPages != null && message.hasOwnProperty("totalPages")) {
                    if (!$util.isInteger(message.totalPages) && !(message.totalPages && $util.isInteger(message.totalPages.low) && $util.isInteger(message.totalPages.high)))
                      return "totalPages: integer|Long expected";
                  }
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages")) {
                    if (!$util.isInteger(message.translatedPages) && !(message.translatedPages && $util.isInteger(message.translatedPages.low) && $util.isInteger(message.translatedPages.high)))
                      return "translatedPages: integer|Long expected";
                  }
                  if (message.failedPages != null && message.hasOwnProperty("failedPages")) {
                    if (!$util.isInteger(message.failedPages) && !(message.failedPages && $util.isInteger(message.failedPages.low) && $util.isInteger(message.failedPages.high)))
                      return "failedPages: integer|Long expected";
                  }
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages")) {
                    if (!$util.isInteger(message.totalBillablePages) && !(message.totalBillablePages && $util.isInteger(message.totalBillablePages.low) && $util.isInteger(message.totalBillablePages.high)))
                      return "totalBillablePages: integer|Long expected";
                  }
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters")) {
                    if (!$util.isInteger(message.totalCharacters) && !(message.totalCharacters && $util.isInteger(message.totalCharacters.low) && $util.isInteger(message.totalCharacters.high)))
                      return "totalCharacters: integer|Long expected";
                  }
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters")) {
                    if (!$util.isInteger(message.translatedCharacters) && !(message.translatedCharacters && $util.isInteger(message.translatedCharacters.low) && $util.isInteger(message.translatedCharacters.high)))
                      return "translatedCharacters: integer|Long expected";
                  }
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters")) {
                    if (!$util.isInteger(message.failedCharacters) && !(message.failedCharacters && $util.isInteger(message.failedCharacters.low) && $util.isInteger(message.failedCharacters.high)))
                      return "failedCharacters: integer|Long expected";
                  }
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters")) {
                    if (!$util.isInteger(message.totalBillableCharacters) && !(message.totalBillableCharacters && $util.isInteger(message.totalBillableCharacters.low) && $util.isInteger(message.totalBillableCharacters.high)))
                      return "totalBillableCharacters: integer|Long expected";
                  }
                  if (message.submitTime != null && message.hasOwnProperty("submitTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.submitTime);
                    if (error)
                      return "submitTime." + error;
                  }
                  return null;
                };
                BatchTranslateDocumentMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata)
                    return object;
                  var message = new $root.google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata();
                  switch (object.state) {
                    default:
                      if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                      }
                      break;
                    case "STATE_UNSPECIFIED":
                    case 0:
                      message.state = 0;
                      break;
                    case "RUNNING":
                    case 1:
                      message.state = 1;
                      break;
                    case "SUCCEEDED":
                    case 2:
                      message.state = 2;
                      break;
                    case "FAILED":
                    case 3:
                      message.state = 3;
                      break;
                    case "CANCELLING":
                    case 4:
                      message.state = 4;
                      break;
                    case "CANCELLED":
                    case 5:
                      message.state = 5;
                      break;
                  }
                  if (object.totalPages != null) {
                    if ($util.Long)
                      (message.totalPages = $util.Long.fromValue(object.totalPages)).unsigned = false;
                    else if (typeof object.totalPages === "string")
                      message.totalPages = parseInt(object.totalPages, 10);
                    else if (typeof object.totalPages === "number")
                      message.totalPages = object.totalPages;
                    else if (typeof object.totalPages === "object")
                      message.totalPages = new $util.LongBits(object.totalPages.low >>> 0, object.totalPages.high >>> 0).toNumber();
                  }
                  if (object.translatedPages != null) {
                    if ($util.Long)
                      (message.translatedPages = $util.Long.fromValue(object.translatedPages)).unsigned = false;
                    else if (typeof object.translatedPages === "string")
                      message.translatedPages = parseInt(object.translatedPages, 10);
                    else if (typeof object.translatedPages === "number")
                      message.translatedPages = object.translatedPages;
                    else if (typeof object.translatedPages === "object")
                      message.translatedPages = new $util.LongBits(object.translatedPages.low >>> 0, object.translatedPages.high >>> 0).toNumber();
                  }
                  if (object.failedPages != null) {
                    if ($util.Long)
                      (message.failedPages = $util.Long.fromValue(object.failedPages)).unsigned = false;
                    else if (typeof object.failedPages === "string")
                      message.failedPages = parseInt(object.failedPages, 10);
                    else if (typeof object.failedPages === "number")
                      message.failedPages = object.failedPages;
                    else if (typeof object.failedPages === "object")
                      message.failedPages = new $util.LongBits(object.failedPages.low >>> 0, object.failedPages.high >>> 0).toNumber();
                  }
                  if (object.totalBillablePages != null) {
                    if ($util.Long)
                      (message.totalBillablePages = $util.Long.fromValue(object.totalBillablePages)).unsigned = false;
                    else if (typeof object.totalBillablePages === "string")
                      message.totalBillablePages = parseInt(object.totalBillablePages, 10);
                    else if (typeof object.totalBillablePages === "number")
                      message.totalBillablePages = object.totalBillablePages;
                    else if (typeof object.totalBillablePages === "object")
                      message.totalBillablePages = new $util.LongBits(object.totalBillablePages.low >>> 0, object.totalBillablePages.high >>> 0).toNumber();
                  }
                  if (object.totalCharacters != null) {
                    if ($util.Long)
                      (message.totalCharacters = $util.Long.fromValue(object.totalCharacters)).unsigned = false;
                    else if (typeof object.totalCharacters === "string")
                      message.totalCharacters = parseInt(object.totalCharacters, 10);
                    else if (typeof object.totalCharacters === "number")
                      message.totalCharacters = object.totalCharacters;
                    else if (typeof object.totalCharacters === "object")
                      message.totalCharacters = new $util.LongBits(object.totalCharacters.low >>> 0, object.totalCharacters.high >>> 0).toNumber();
                  }
                  if (object.translatedCharacters != null) {
                    if ($util.Long)
                      (message.translatedCharacters = $util.Long.fromValue(object.translatedCharacters)).unsigned = false;
                    else if (typeof object.translatedCharacters === "string")
                      message.translatedCharacters = parseInt(object.translatedCharacters, 10);
                    else if (typeof object.translatedCharacters === "number")
                      message.translatedCharacters = object.translatedCharacters;
                    else if (typeof object.translatedCharacters === "object")
                      message.translatedCharacters = new $util.LongBits(object.translatedCharacters.low >>> 0, object.translatedCharacters.high >>> 0).toNumber();
                  }
                  if (object.failedCharacters != null) {
                    if ($util.Long)
                      (message.failedCharacters = $util.Long.fromValue(object.failedCharacters)).unsigned = false;
                    else if (typeof object.failedCharacters === "string")
                      message.failedCharacters = parseInt(object.failedCharacters, 10);
                    else if (typeof object.failedCharacters === "number")
                      message.failedCharacters = object.failedCharacters;
                    else if (typeof object.failedCharacters === "object")
                      message.failedCharacters = new $util.LongBits(object.failedCharacters.low >>> 0, object.failedCharacters.high >>> 0).toNumber();
                  }
                  if (object.totalBillableCharacters != null) {
                    if ($util.Long)
                      (message.totalBillableCharacters = $util.Long.fromValue(object.totalBillableCharacters)).unsigned = false;
                    else if (typeof object.totalBillableCharacters === "string")
                      message.totalBillableCharacters = parseInt(object.totalBillableCharacters, 10);
                    else if (typeof object.totalBillableCharacters === "number")
                      message.totalBillableCharacters = object.totalBillableCharacters;
                    else if (typeof object.totalBillableCharacters === "object")
                      message.totalBillableCharacters = new $util.LongBits(object.totalBillableCharacters.low >>> 0, object.totalBillableCharacters.high >>> 0).toNumber();
                  }
                  if (object.submitTime != null) {
                    if (typeof object.submitTime !== "object")
                      throw TypeError(".google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata.submitTime: object expected");
                    message.submitTime = $root.google.protobuf.Timestamp.fromObject(object.submitTime);
                  }
                  return message;
                };
                BatchTranslateDocumentMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedPages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedPages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillablePages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillablePages = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.translatedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.translatedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.failedCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.failedCharacters = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                      var long = new $util.Long(0, 0, false);
                      object.totalBillableCharacters = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                      object.totalBillableCharacters = options.longs === String ? "0" : 0;
                    object.submitTime = null;
                  }
                  if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata.State[message.state] === void 0 ? message.state : $root.google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata.State[message.state] : message.state;
                  if (message.totalPages != null && message.hasOwnProperty("totalPages"))
                    if (typeof message.totalPages === "number")
                      object.totalPages = options.longs === String ? String(message.totalPages) : message.totalPages;
                    else
                      object.totalPages = options.longs === String ? $util.Long.prototype.toString.call(message.totalPages) : options.longs === Number ? new $util.LongBits(message.totalPages.low >>> 0, message.totalPages.high >>> 0).toNumber() : message.totalPages;
                  if (message.translatedPages != null && message.hasOwnProperty("translatedPages"))
                    if (typeof message.translatedPages === "number")
                      object.translatedPages = options.longs === String ? String(message.translatedPages) : message.translatedPages;
                    else
                      object.translatedPages = options.longs === String ? $util.Long.prototype.toString.call(message.translatedPages) : options.longs === Number ? new $util.LongBits(message.translatedPages.low >>> 0, message.translatedPages.high >>> 0).toNumber() : message.translatedPages;
                  if (message.failedPages != null && message.hasOwnProperty("failedPages"))
                    if (typeof message.failedPages === "number")
                      object.failedPages = options.longs === String ? String(message.failedPages) : message.failedPages;
                    else
                      object.failedPages = options.longs === String ? $util.Long.prototype.toString.call(message.failedPages) : options.longs === Number ? new $util.LongBits(message.failedPages.low >>> 0, message.failedPages.high >>> 0).toNumber() : message.failedPages;
                  if (message.totalBillablePages != null && message.hasOwnProperty("totalBillablePages"))
                    if (typeof message.totalBillablePages === "number")
                      object.totalBillablePages = options.longs === String ? String(message.totalBillablePages) : message.totalBillablePages;
                    else
                      object.totalBillablePages = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillablePages) : options.longs === Number ? new $util.LongBits(message.totalBillablePages.low >>> 0, message.totalBillablePages.high >>> 0).toNumber() : message.totalBillablePages;
                  if (message.totalCharacters != null && message.hasOwnProperty("totalCharacters"))
                    if (typeof message.totalCharacters === "number")
                      object.totalCharacters = options.longs === String ? String(message.totalCharacters) : message.totalCharacters;
                    else
                      object.totalCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalCharacters) : options.longs === Number ? new $util.LongBits(message.totalCharacters.low >>> 0, message.totalCharacters.high >>> 0).toNumber() : message.totalCharacters;
                  if (message.translatedCharacters != null && message.hasOwnProperty("translatedCharacters"))
                    if (typeof message.translatedCharacters === "number")
                      object.translatedCharacters = options.longs === String ? String(message.translatedCharacters) : message.translatedCharacters;
                    else
                      object.translatedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.translatedCharacters) : options.longs === Number ? new $util.LongBits(message.translatedCharacters.low >>> 0, message.translatedCharacters.high >>> 0).toNumber() : message.translatedCharacters;
                  if (message.failedCharacters != null && message.hasOwnProperty("failedCharacters"))
                    if (typeof message.failedCharacters === "number")
                      object.failedCharacters = options.longs === String ? String(message.failedCharacters) : message.failedCharacters;
                    else
                      object.failedCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.failedCharacters) : options.longs === Number ? new $util.LongBits(message.failedCharacters.low >>> 0, message.failedCharacters.high >>> 0).toNumber() : message.failedCharacters;
                  if (message.totalBillableCharacters != null && message.hasOwnProperty("totalBillableCharacters"))
                    if (typeof message.totalBillableCharacters === "number")
                      object.totalBillableCharacters = options.longs === String ? String(message.totalBillableCharacters) : message.totalBillableCharacters;
                    else
                      object.totalBillableCharacters = options.longs === String ? $util.Long.prototype.toString.call(message.totalBillableCharacters) : options.longs === Number ? new $util.LongBits(message.totalBillableCharacters.low >>> 0, message.totalBillableCharacters.high >>> 0).toNumber() : message.totalBillableCharacters;
                  if (message.submitTime != null && message.hasOwnProperty("submitTime"))
                    object.submitTime = $root.google.protobuf.Timestamp.toObject(message.submitTime, options);
                  return object;
                };
                BatchTranslateDocumentMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                BatchTranslateDocumentMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.translation.v3beta1.BatchTranslateDocumentMetadata";
                };
                BatchTranslateDocumentMetadata.State = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "RUNNING"] = 1;
                  values[valuesById[2] = "SUCCEEDED"] = 2;
                  values[valuesById[3] = "FAILED"] = 3;
                  values[valuesById[4] = "CANCELLING"] = 4;
                  values[valuesById[5] = "CANCELLED"] = 5;
                  return values;
                }();
                return BatchTranslateDocumentMetadata;
              }();
              return v3beta1;
            }();
            return translation;
          }();
          return cloud;
        }();
        google.api = function() {
          var api = {};
          api.Http = function() {
            function Http(properties) {
              this.rules = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Http.prototype.rules = $util.emptyArray;
            Http.prototype.fullyDecodeReservedExpansion = false;
            Http.create = function create(properties) {
              return new Http(properties);
            };
            Http.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.rules != null && message.rules.length)
                for (var i = 0; i < message.rules.length; ++i)
                  $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.fullyDecodeReservedExpansion);
              return writer;
            };
            Http.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Http.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.Http();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.rules && message.rules.length))
                      message.rules = [];
                    message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  }
                  case 2: {
                    message.fullyDecodeReservedExpansion = reader.bool();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Http.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Http.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.rules != null && message.hasOwnProperty("rules")) {
                if (!Array.isArray(message.rules))
                  return "rules: array expected";
                for (var i = 0; i < message.rules.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.rules[i]);
                  if (error)
                    return "rules." + error;
                }
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion")) {
                if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                  return "fullyDecodeReservedExpansion: boolean expected";
              }
              return null;
            };
            Http.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Http)
                return object;
              var message = new $root.google.api.Http();
              if (object.rules) {
                if (!Array.isArray(object.rules))
                  throw TypeError(".google.api.Http.rules: array expected");
                message.rules = [];
                for (var i = 0; i < object.rules.length; ++i) {
                  if (typeof object.rules[i] !== "object")
                    throw TypeError(".google.api.Http.rules: object expected");
                  message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                }
              }
              if (object.fullyDecodeReservedExpansion != null)
                message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
              return message;
            };
            Http.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.rules = [];
              if (options.defaults)
                object.fullyDecodeReservedExpansion = false;
              if (message.rules && message.rules.length) {
                object.rules = [];
                for (var j = 0; j < message.rules.length; ++j)
                  object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
              return object;
            };
            Http.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.Http";
            };
            return Http;
          }();
          api.HttpRule = function() {
            function HttpRule(properties) {
              this.additionalBindings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            HttpRule.prototype.selector = "";
            HttpRule.prototype.get = null;
            HttpRule.prototype.put = null;
            HttpRule.prototype.post = null;
            HttpRule.prototype["delete"] = null;
            HttpRule.prototype.patch = null;
            HttpRule.prototype.custom = null;
            HttpRule.prototype.body = "";
            HttpRule.prototype.responseBody = "";
            HttpRule.prototype.additionalBindings = $util.emptyArray;
            var $oneOfFields;
            Object.defineProperty(HttpRule.prototype, "pattern", {
              get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            HttpRule.create = function create(properties) {
              return new HttpRule(properties);
            };
            HttpRule.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.selector);
              if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.get);
              if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.put);
              if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).string(message.post);
              if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                writer.uint32(
                  /* id 5, wireType 2 =*/
                  42
                ).string(message["delete"]);
              if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                writer.uint32(
                  /* id 6, wireType 2 =*/
                  50
                ).string(message.patch);
              if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).string(message.body);
              if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).fork()).ldelim();
              if (message.additionalBindings != null && message.additionalBindings.length)
                for (var i = 0; i < message.additionalBindings.length; ++i)
                  $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(
                    /* id 11, wireType 2 =*/
                    90
                  ).fork()).ldelim();
              if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                writer.uint32(
                  /* id 12, wireType 2 =*/
                  98
                ).string(message.responseBody);
              return writer;
            };
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            HttpRule.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.selector = reader.string();
                    break;
                  }
                  case 2: {
                    message.get = reader.string();
                    break;
                  }
                  case 3: {
                    message.put = reader.string();
                    break;
                  }
                  case 4: {
                    message.post = reader.string();
                    break;
                  }
                  case 5: {
                    message["delete"] = reader.string();
                    break;
                  }
                  case 6: {
                    message.patch = reader.string();
                    break;
                  }
                  case 8: {
                    message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                    break;
                  }
                  case 7: {
                    message.body = reader.string();
                    break;
                  }
                  case 12: {
                    message.responseBody = reader.string();
                    break;
                  }
                  case 11: {
                    if (!(message.additionalBindings && message.additionalBindings.length))
                      message.additionalBindings = [];
                    message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            HttpRule.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.selector != null && message.hasOwnProperty("selector")) {
                if (!$util.isString(message.selector))
                  return "selector: string expected";
              }
              if (message.get != null && message.hasOwnProperty("get")) {
                properties.pattern = 1;
                if (!$util.isString(message.get))
                  return "get: string expected";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.put))
                  return "put: string expected";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.post))
                  return "post: string expected";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message["delete"]))
                  return "delete: string expected";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.patch))
                  return "patch: string expected";
              }
              if (message.custom != null && message.hasOwnProperty("custom")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                {
                  var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                  if (error)
                    return "custom." + error;
                }
              }
              if (message.body != null && message.hasOwnProperty("body")) {
                if (!$util.isString(message.body))
                  return "body: string expected";
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody")) {
                if (!$util.isString(message.responseBody))
                  return "responseBody: string expected";
              }
              if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                if (!Array.isArray(message.additionalBindings))
                  return "additionalBindings: array expected";
                for (var i = 0; i < message.additionalBindings.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                  if (error)
                    return "additionalBindings." + error;
                }
              }
              return null;
            };
            HttpRule.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.HttpRule)
                return object;
              var message = new $root.google.api.HttpRule();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.get != null)
                message.get = String(object.get);
              if (object.put != null)
                message.put = String(object.put);
              if (object.post != null)
                message.post = String(object.post);
              if (object["delete"] != null)
                message["delete"] = String(object["delete"]);
              if (object.patch != null)
                message.patch = String(object.patch);
              if (object.custom != null) {
                if (typeof object.custom !== "object")
                  throw TypeError(".google.api.HttpRule.custom: object expected");
                message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
              }
              if (object.body != null)
                message.body = String(object.body);
              if (object.responseBody != null)
                message.responseBody = String(object.responseBody);
              if (object.additionalBindings) {
                if (!Array.isArray(object.additionalBindings))
                  throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                message.additionalBindings = [];
                for (var i = 0; i < object.additionalBindings.length; ++i) {
                  if (typeof object.additionalBindings[i] !== "object")
                    throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                  message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                }
              }
              return message;
            };
            HttpRule.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.additionalBindings = [];
              if (options.defaults) {
                object.selector = "";
                object.body = "";
                object.responseBody = "";
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.get != null && message.hasOwnProperty("get")) {
                object.get = message.get;
                if (options.oneofs)
                  object.pattern = "get";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                object.put = message.put;
                if (options.oneofs)
                  object.pattern = "put";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                object.post = message.post;
                if (options.oneofs)
                  object.pattern = "post";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                object["delete"] = message["delete"];
                if (options.oneofs)
                  object.pattern = "delete";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                object.patch = message.patch;
                if (options.oneofs)
                  object.pattern = "patch";
              }
              if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
              if (message.custom != null && message.hasOwnProperty("custom")) {
                object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                if (options.oneofs)
                  object.pattern = "custom";
              }
              if (message.additionalBindings && message.additionalBindings.length) {
                object.additionalBindings = [];
                for (var j = 0; j < message.additionalBindings.length; ++j)
                  object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                object.responseBody = message.responseBody;
              return object;
            };
            HttpRule.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.HttpRule";
            };
            return HttpRule;
          }();
          api.CustomHttpPattern = function() {
            function CustomHttpPattern(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CustomHttpPattern.prototype.kind = "";
            CustomHttpPattern.prototype.path = "";
            CustomHttpPattern.create = function create(properties) {
              return new CustomHttpPattern(properties);
            };
            CustomHttpPattern.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.kind);
              if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.path);
              return writer;
            };
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CustomHttpPattern.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.kind = reader.string();
                    break;
                  }
                  case 2: {
                    message.path = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CustomHttpPattern.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.kind != null && message.hasOwnProperty("kind")) {
                if (!$util.isString(message.kind))
                  return "kind: string expected";
              }
              if (message.path != null && message.hasOwnProperty("path")) {
                if (!$util.isString(message.path))
                  return "path: string expected";
              }
              return null;
            };
            CustomHttpPattern.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CustomHttpPattern)
                return object;
              var message = new $root.google.api.CustomHttpPattern();
              if (object.kind != null)
                message.kind = String(object.kind);
              if (object.path != null)
                message.path = String(object.path);
              return message;
            };
            CustomHttpPattern.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.kind = "";
                object.path = "";
              }
              if (message.kind != null && message.hasOwnProperty("kind"))
                object.kind = message.kind;
              if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
              return object;
            };
            CustomHttpPattern.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.CustomHttpPattern";
            };
            return CustomHttpPattern;
          }();
          api.CommonLanguageSettings = function() {
            function CommonLanguageSettings(properties) {
              this.destinations = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CommonLanguageSettings.prototype.referenceDocsUri = "";
            CommonLanguageSettings.prototype.destinations = $util.emptyArray;
            CommonLanguageSettings.create = function create(properties) {
              return new CommonLanguageSettings(properties);
            };
            CommonLanguageSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.referenceDocsUri);
              if (message.destinations != null && message.destinations.length) {
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork();
                for (var i = 0; i < message.destinations.length; ++i)
                  writer.int32(message.destinations[i]);
                writer.ldelim();
              }
              return writer;
            };
            CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CommonLanguageSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.referenceDocsUri = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.destinations && message.destinations.length))
                      message.destinations = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.destinations.push(reader.int32());
                    } else
                      message.destinations.push(reader.int32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CommonLanguageSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri")) {
                if (!$util.isString(message.referenceDocsUri))
                  return "referenceDocsUri: string expected";
              }
              if (message.destinations != null && message.hasOwnProperty("destinations")) {
                if (!Array.isArray(message.destinations))
                  return "destinations: array expected";
                for (var i = 0; i < message.destinations.length; ++i)
                  switch (message.destinations[i]) {
                    default:
                      return "destinations: enum value[] expected";
                    case 0:
                    case 10:
                    case 20:
                      break;
                  }
              }
              return null;
            };
            CommonLanguageSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CommonLanguageSettings)
                return object;
              var message = new $root.google.api.CommonLanguageSettings();
              if (object.referenceDocsUri != null)
                message.referenceDocsUri = String(object.referenceDocsUri);
              if (object.destinations) {
                if (!Array.isArray(object.destinations))
                  throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                message.destinations = [];
                for (var i = 0; i < object.destinations.length; ++i)
                  switch (object.destinations[i]) {
                    default:
                      if (typeof object.destinations[i] === "number") {
                        message.destinations[i] = object.destinations[i];
                        break;
                      }
                    case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                    case 0:
                      message.destinations[i] = 0;
                      break;
                    case "GITHUB":
                    case 10:
                      message.destinations[i] = 10;
                      break;
                    case "PACKAGE_MANAGER":
                    case 20:
                      message.destinations[i] = 20;
                      break;
                  }
              }
              return message;
            };
            CommonLanguageSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.destinations = [];
              if (options.defaults)
                object.referenceDocsUri = "";
              if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                object.referenceDocsUri = message.referenceDocsUri;
              if (message.destinations && message.destinations.length) {
                object.destinations = [];
                for (var j = 0; j < message.destinations.length; ++j)
                  object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === void 0 ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
              }
              return object;
            };
            CommonLanguageSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.CommonLanguageSettings";
            };
            return CommonLanguageSettings;
          }();
          api.ClientLibrarySettings = function() {
            function ClientLibrarySettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ClientLibrarySettings.prototype.version = "";
            ClientLibrarySettings.prototype.launchStage = 0;
            ClientLibrarySettings.prototype.restNumericEnums = false;
            ClientLibrarySettings.prototype.javaSettings = null;
            ClientLibrarySettings.prototype.cppSettings = null;
            ClientLibrarySettings.prototype.phpSettings = null;
            ClientLibrarySettings.prototype.pythonSettings = null;
            ClientLibrarySettings.prototype.nodeSettings = null;
            ClientLibrarySettings.prototype.dotnetSettings = null;
            ClientLibrarySettings.prototype.rubySettings = null;
            ClientLibrarySettings.prototype.goSettings = null;
            ClientLibrarySettings.create = function create(properties) {
              return new ClientLibrarySettings(properties);
            };
            ClientLibrarySettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.version);
              if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.launchStage);
              if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.restNumericEnums);
              if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(
                  /* id 21, wireType 2 =*/
                  170
                ).fork()).ldelim();
              if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(
                  /* id 22, wireType 2 =*/
                  178
                ).fork()).ldelim();
              if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(
                  /* id 23, wireType 2 =*/
                  186
                ).fork()).ldelim();
              if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(
                  /* id 24, wireType 2 =*/
                  194
                ).fork()).ldelim();
              if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(
                  /* id 25, wireType 2 =*/
                  202
                ).fork()).ldelim();
              if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(
                  /* id 26, wireType 2 =*/
                  210
                ).fork()).ldelim();
              if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(
                  /* id 27, wireType 2 =*/
                  218
                ).fork()).ldelim();
              if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(
                  /* id 28, wireType 2 =*/
                  226
                ).fork()).ldelim();
              return writer;
            };
            ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ClientLibrarySettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.version = reader.string();
                    break;
                  }
                  case 2: {
                    message.launchStage = reader.int32();
                    break;
                  }
                  case 3: {
                    message.restNumericEnums = reader.bool();
                    break;
                  }
                  case 21: {
                    message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 22: {
                    message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 23: {
                    message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 24: {
                    message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 25: {
                    message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 26: {
                    message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 27: {
                    message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 28: {
                    message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ClientLibrarySettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.version != null && message.hasOwnProperty("version")) {
                if (!$util.isString(message.version))
                  return "version: string expected";
              }
              if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                switch (message.launchStage) {
                  default:
                    return "launchStage: enum value expected";
                  case 0:
                  case 6:
                  case 7:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                    break;
                }
              if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums")) {
                if (typeof message.restNumericEnums !== "boolean")
                  return "restNumericEnums: boolean expected";
              }
              if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                if (error)
                  return "javaSettings." + error;
              }
              if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                var error = $root.google.api.CppSettings.verify(message.cppSettings);
                if (error)
                  return "cppSettings." + error;
              }
              if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                if (error)
                  return "phpSettings." + error;
              }
              if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                if (error)
                  return "pythonSettings." + error;
              }
              if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                if (error)
                  return "nodeSettings." + error;
              }
              if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                if (error)
                  return "dotnetSettings." + error;
              }
              if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                var error = $root.google.api.RubySettings.verify(message.rubySettings);
                if (error)
                  return "rubySettings." + error;
              }
              if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                var error = $root.google.api.GoSettings.verify(message.goSettings);
                if (error)
                  return "goSettings." + error;
              }
              return null;
            };
            ClientLibrarySettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ClientLibrarySettings)
                return object;
              var message = new $root.google.api.ClientLibrarySettings();
              if (object.version != null)
                message.version = String(object.version);
              switch (object.launchStage) {
                default:
                  if (typeof object.launchStage === "number") {
                    message.launchStage = object.launchStage;
                    break;
                  }
                  break;
                case "LAUNCH_STAGE_UNSPECIFIED":
                case 0:
                  message.launchStage = 0;
                  break;
                case "UNIMPLEMENTED":
                case 6:
                  message.launchStage = 6;
                  break;
                case "PRELAUNCH":
                case 7:
                  message.launchStage = 7;
                  break;
                case "EARLY_ACCESS":
                case 1:
                  message.launchStage = 1;
                  break;
                case "ALPHA":
                case 2:
                  message.launchStage = 2;
                  break;
                case "BETA":
                case 3:
                  message.launchStage = 3;
                  break;
                case "GA":
                case 4:
                  message.launchStage = 4;
                  break;
                case "DEPRECATED":
                case 5:
                  message.launchStage = 5;
                  break;
              }
              if (object.restNumericEnums != null)
                message.restNumericEnums = Boolean(object.restNumericEnums);
              if (object.javaSettings != null) {
                if (typeof object.javaSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
              }
              if (object.cppSettings != null) {
                if (typeof object.cppSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
              }
              if (object.phpSettings != null) {
                if (typeof object.phpSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
              }
              if (object.pythonSettings != null) {
                if (typeof object.pythonSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
              }
              if (object.nodeSettings != null) {
                if (typeof object.nodeSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
              }
              if (object.dotnetSettings != null) {
                if (typeof object.dotnetSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
              }
              if (object.rubySettings != null) {
                if (typeof object.rubySettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
              }
              if (object.goSettings != null) {
                if (typeof object.goSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
              }
              return message;
            };
            ClientLibrarySettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.version = "";
                object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                object.restNumericEnums = false;
                object.javaSettings = null;
                object.cppSettings = null;
                object.phpSettings = null;
                object.pythonSettings = null;
                object.nodeSettings = null;
                object.dotnetSettings = null;
                object.rubySettings = null;
                object.goSettings = null;
              }
              if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
              if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === void 0 ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
              if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                object.restNumericEnums = message.restNumericEnums;
              if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
              if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
              if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
              if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
              if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
              if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
              if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
              if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
              return object;
            };
            ClientLibrarySettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ClientLibrarySettings";
            };
            return ClientLibrarySettings;
          }();
          api.Publishing = function() {
            function Publishing(properties) {
              this.methodSettings = [];
              this.codeownerGithubTeams = [];
              this.librarySettings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Publishing.prototype.methodSettings = $util.emptyArray;
            Publishing.prototype.newIssueUri = "";
            Publishing.prototype.documentationUri = "";
            Publishing.prototype.apiShortName = "";
            Publishing.prototype.githubLabel = "";
            Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
            Publishing.prototype.docTagPrefix = "";
            Publishing.prototype.organization = 0;
            Publishing.prototype.librarySettings = $util.emptyArray;
            Publishing.create = function create(properties) {
              return new Publishing(properties);
            };
            Publishing.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.methodSettings != null && message.methodSettings.length)
                for (var i = 0; i < message.methodSettings.length; ++i)
                  $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                writer.uint32(
                  /* id 101, wireType 2 =*/
                  810
                ).string(message.newIssueUri);
              if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                writer.uint32(
                  /* id 102, wireType 2 =*/
                  818
                ).string(message.documentationUri);
              if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                writer.uint32(
                  /* id 103, wireType 2 =*/
                  826
                ).string(message.apiShortName);
              if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                writer.uint32(
                  /* id 104, wireType 2 =*/
                  834
                ).string(message.githubLabel);
              if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                  writer.uint32(
                    /* id 105, wireType 2 =*/
                    842
                  ).string(message.codeownerGithubTeams[i]);
              if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                writer.uint32(
                  /* id 106, wireType 2 =*/
                  850
                ).string(message.docTagPrefix);
              if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                writer.uint32(
                  /* id 107, wireType 0 =*/
                  856
                ).int32(message.organization);
              if (message.librarySettings != null && message.librarySettings.length)
                for (var i = 0; i < message.librarySettings.length; ++i)
                  $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(
                    /* id 109, wireType 2 =*/
                    874
                  ).fork()).ldelim();
              return writer;
            };
            Publishing.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Publishing.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2: {
                    if (!(message.methodSettings && message.methodSettings.length))
                      message.methodSettings = [];
                    message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                    break;
                  }
                  case 101: {
                    message.newIssueUri = reader.string();
                    break;
                  }
                  case 102: {
                    message.documentationUri = reader.string();
                    break;
                  }
                  case 103: {
                    message.apiShortName = reader.string();
                    break;
                  }
                  case 104: {
                    message.githubLabel = reader.string();
                    break;
                  }
                  case 105: {
                    if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                      message.codeownerGithubTeams = [];
                    message.codeownerGithubTeams.push(reader.string());
                    break;
                  }
                  case 106: {
                    message.docTagPrefix = reader.string();
                    break;
                  }
                  case 107: {
                    message.organization = reader.int32();
                    break;
                  }
                  case 109: {
                    if (!(message.librarySettings && message.librarySettings.length))
                      message.librarySettings = [];
                    message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Publishing.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Publishing.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                if (!Array.isArray(message.methodSettings))
                  return "methodSettings: array expected";
                for (var i = 0; i < message.methodSettings.length; ++i) {
                  var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                  if (error)
                    return "methodSettings." + error;
                }
              }
              if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri")) {
                if (!$util.isString(message.newIssueUri))
                  return "newIssueUri: string expected";
              }
              if (message.documentationUri != null && message.hasOwnProperty("documentationUri")) {
                if (!$util.isString(message.documentationUri))
                  return "documentationUri: string expected";
              }
              if (message.apiShortName != null && message.hasOwnProperty("apiShortName")) {
                if (!$util.isString(message.apiShortName))
                  return "apiShortName: string expected";
              }
              if (message.githubLabel != null && message.hasOwnProperty("githubLabel")) {
                if (!$util.isString(message.githubLabel))
                  return "githubLabel: string expected";
              }
              if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                if (!Array.isArray(message.codeownerGithubTeams))
                  return "codeownerGithubTeams: array expected";
                for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                  if (!$util.isString(message.codeownerGithubTeams[i]))
                    return "codeownerGithubTeams: string[] expected";
              }
              if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix")) {
                if (!$util.isString(message.docTagPrefix))
                  return "docTagPrefix: string expected";
              }
              if (message.organization != null && message.hasOwnProperty("organization"))
                switch (message.organization) {
                  default:
                    return "organization: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                    break;
                }
              if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                if (!Array.isArray(message.librarySettings))
                  return "librarySettings: array expected";
                for (var i = 0; i < message.librarySettings.length; ++i) {
                  var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                  if (error)
                    return "librarySettings." + error;
                }
              }
              return null;
            };
            Publishing.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Publishing)
                return object;
              var message = new $root.google.api.Publishing();
              if (object.methodSettings) {
                if (!Array.isArray(object.methodSettings))
                  throw TypeError(".google.api.Publishing.methodSettings: array expected");
                message.methodSettings = [];
                for (var i = 0; i < object.methodSettings.length; ++i) {
                  if (typeof object.methodSettings[i] !== "object")
                    throw TypeError(".google.api.Publishing.methodSettings: object expected");
                  message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                }
              }
              if (object.newIssueUri != null)
                message.newIssueUri = String(object.newIssueUri);
              if (object.documentationUri != null)
                message.documentationUri = String(object.documentationUri);
              if (object.apiShortName != null)
                message.apiShortName = String(object.apiShortName);
              if (object.githubLabel != null)
                message.githubLabel = String(object.githubLabel);
              if (object.codeownerGithubTeams) {
                if (!Array.isArray(object.codeownerGithubTeams))
                  throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                message.codeownerGithubTeams = [];
                for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                  message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
              }
              if (object.docTagPrefix != null)
                message.docTagPrefix = String(object.docTagPrefix);
              switch (object.organization) {
                default:
                  if (typeof object.organization === "number") {
                    message.organization = object.organization;
                    break;
                  }
                  break;
                case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                case 0:
                  message.organization = 0;
                  break;
                case "CLOUD":
                case 1:
                  message.organization = 1;
                  break;
                case "ADS":
                case 2:
                  message.organization = 2;
                  break;
                case "PHOTOS":
                case 3:
                  message.organization = 3;
                  break;
                case "STREET_VIEW":
                case 4:
                  message.organization = 4;
                  break;
              }
              if (object.librarySettings) {
                if (!Array.isArray(object.librarySettings))
                  throw TypeError(".google.api.Publishing.librarySettings: array expected");
                message.librarySettings = [];
                for (var i = 0; i < object.librarySettings.length; ++i) {
                  if (typeof object.librarySettings[i] !== "object")
                    throw TypeError(".google.api.Publishing.librarySettings: object expected");
                  message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                }
              }
              return message;
            };
            Publishing.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.methodSettings = [];
                object.codeownerGithubTeams = [];
                object.librarySettings = [];
              }
              if (options.defaults) {
                object.newIssueUri = "";
                object.documentationUri = "";
                object.apiShortName = "";
                object.githubLabel = "";
                object.docTagPrefix = "";
                object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
              }
              if (message.methodSettings && message.methodSettings.length) {
                object.methodSettings = [];
                for (var j = 0; j < message.methodSettings.length; ++j)
                  object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
              }
              if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                object.newIssueUri = message.newIssueUri;
              if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                object.documentationUri = message.documentationUri;
              if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                object.apiShortName = message.apiShortName;
              if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                object.githubLabel = message.githubLabel;
              if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                object.codeownerGithubTeams = [];
                for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                  object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
              }
              if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                object.docTagPrefix = message.docTagPrefix;
              if (message.organization != null && message.hasOwnProperty("organization"))
                object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === void 0 ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
              if (message.librarySettings && message.librarySettings.length) {
                object.librarySettings = [];
                for (var j = 0; j < message.librarySettings.length; ++j)
                  object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
              }
              return object;
            };
            Publishing.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.Publishing";
            };
            return Publishing;
          }();
          api.JavaSettings = function() {
            function JavaSettings(properties) {
              this.serviceClassNames = {};
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            JavaSettings.prototype.libraryPackage = "";
            JavaSettings.prototype.serviceClassNames = $util.emptyObject;
            JavaSettings.prototype.common = null;
            JavaSettings.create = function create(properties) {
              return new JavaSettings(properties);
            };
            JavaSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.libraryPackage);
              if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork().uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).string(keys[i]).uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).string(message.serviceClassNames[keys[i]]).ldelim();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              return writer;
            };
            JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            JavaSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.libraryPackage = reader.string();
                    break;
                  }
                  case 2: {
                    if (message.serviceClassNames === $util.emptyObject)
                      message.serviceClassNames = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                      var tag2 = reader.uint32();
                      switch (tag2 >>> 3) {
                        case 1:
                          key = reader.string();
                          break;
                        case 2:
                          value = reader.string();
                          break;
                        default:
                          reader.skipType(tag2 & 7);
                          break;
                      }
                    }
                    message.serviceClassNames[key] = value;
                    break;
                  }
                  case 3: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            JavaSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            JavaSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage")) {
                if (!$util.isString(message.libraryPackage))
                  return "libraryPackage: string expected";
              }
              if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                if (!$util.isObject(message.serviceClassNames))
                  return "serviceClassNames: object expected";
                var key = Object.keys(message.serviceClassNames);
                for (var i = 0; i < key.length; ++i)
                  if (!$util.isString(message.serviceClassNames[key[i]]))
                    return "serviceClassNames: string{k:string} expected";
              }
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            JavaSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.JavaSettings)
                return object;
              var message = new $root.google.api.JavaSettings();
              if (object.libraryPackage != null)
                message.libraryPackage = String(object.libraryPackage);
              if (object.serviceClassNames) {
                if (typeof object.serviceClassNames !== "object")
                  throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                message.serviceClassNames = {};
                for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                  message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
              }
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.JavaSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            JavaSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.objects || options.defaults)
                object.serviceClassNames = {};
              if (options.defaults) {
                object.libraryPackage = "";
                object.common = null;
              }
              if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                object.libraryPackage = message.libraryPackage;
              var keys2;
              if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                object.serviceClassNames = {};
                for (var j = 0; j < keys2.length; ++j)
                  object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
              }
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            JavaSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.JavaSettings";
            };
            return JavaSettings;
          }();
          api.CppSettings = function() {
            function CppSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CppSettings.prototype.common = null;
            CppSettings.create = function create(properties) {
              return new CppSettings(properties);
            };
            CppSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CppSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CppSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CppSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            CppSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CppSettings)
                return object;
              var message = new $root.google.api.CppSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.CppSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            CppSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            CppSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.CppSettings";
            };
            return CppSettings;
          }();
          api.PhpSettings = function() {
            function PhpSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            PhpSettings.prototype.common = null;
            PhpSettings.create = function create(properties) {
              return new PhpSettings(properties);
            };
            PhpSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            PhpSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            PhpSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            PhpSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            PhpSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.PhpSettings)
                return object;
              var message = new $root.google.api.PhpSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.PhpSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            PhpSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            PhpSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.PhpSettings";
            };
            return PhpSettings;
          }();
          api.PythonSettings = function() {
            function PythonSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            PythonSettings.prototype.common = null;
            PythonSettings.create = function create(properties) {
              return new PythonSettings(properties);
            };
            PythonSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            PythonSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            PythonSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            PythonSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            PythonSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.PythonSettings)
                return object;
              var message = new $root.google.api.PythonSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.PythonSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            PythonSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            PythonSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.PythonSettings";
            };
            return PythonSettings;
          }();
          api.NodeSettings = function() {
            function NodeSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            NodeSettings.prototype.common = null;
            NodeSettings.create = function create(properties) {
              return new NodeSettings(properties);
            };
            NodeSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            NodeSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            NodeSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            NodeSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            NodeSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.NodeSettings)
                return object;
              var message = new $root.google.api.NodeSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.NodeSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            NodeSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            NodeSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.NodeSettings";
            };
            return NodeSettings;
          }();
          api.DotnetSettings = function() {
            function DotnetSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DotnetSettings.prototype.common = null;
            DotnetSettings.create = function create(properties) {
              return new DotnetSettings(properties);
            };
            DotnetSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DotnetSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DotnetSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            DotnetSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.DotnetSettings)
                return object;
              var message = new $root.google.api.DotnetSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.DotnetSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            DotnetSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            DotnetSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.DotnetSettings";
            };
            return DotnetSettings;
          }();
          api.RubySettings = function() {
            function RubySettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            RubySettings.prototype.common = null;
            RubySettings.create = function create(properties) {
              return new RubySettings(properties);
            };
            RubySettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            RubySettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            RubySettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            RubySettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            RubySettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.RubySettings)
                return object;
              var message = new $root.google.api.RubySettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.RubySettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            RubySettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            RubySettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.RubySettings";
            };
            return RubySettings;
          }();
          api.GoSettings = function() {
            function GoSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GoSettings.prototype.common = null;
            GoSettings.create = function create(properties) {
              return new GoSettings(properties);
            };
            GoSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GoSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GoSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GoSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            GoSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.GoSettings)
                return object;
              var message = new $root.google.api.GoSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.GoSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            GoSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            GoSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.GoSettings";
            };
            return GoSettings;
          }();
          api.MethodSettings = function() {
            function MethodSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodSettings.prototype.selector = "";
            MethodSettings.prototype.longRunning = null;
            MethodSettings.create = function create(properties) {
              return new MethodSettings(properties);
            };
            MethodSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.selector);
              if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              return writer;
            };
            MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.selector = reader.string();
                    break;
                  }
                  case 2: {
                    message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.selector != null && message.hasOwnProperty("selector")) {
                if (!$util.isString(message.selector))
                  return "selector: string expected";
              }
              if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                if (error)
                  return "longRunning." + error;
              }
              return null;
            };
            MethodSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.MethodSettings)
                return object;
              var message = new $root.google.api.MethodSettings();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.longRunning != null) {
                if (typeof object.longRunning !== "object")
                  throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
              }
              return message;
            };
            MethodSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.selector = "";
                object.longRunning = null;
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
              return object;
            };
            MethodSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.MethodSettings";
            };
            MethodSettings.LongRunning = function() {
              function LongRunning(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              LongRunning.prototype.initialPollDelay = null;
              LongRunning.prototype.pollDelayMultiplier = 0;
              LongRunning.prototype.maxPollDelay = null;
              LongRunning.prototype.totalPollTimeout = null;
              LongRunning.create = function create(properties) {
                return new LongRunning(properties);
              };
              LongRunning.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                  $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
                if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                  writer.uint32(
                    /* id 2, wireType 5 =*/
                    21
                  ).float(message.pollDelayMultiplier);
                if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                  $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
                if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                  $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
                return writer;
              };
              LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              LongRunning.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                      break;
                    }
                    case 2: {
                      message.pollDelayMultiplier = reader.float();
                      break;
                    }
                    case 3: {
                      message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                      break;
                    }
                    case 4: {
                      message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              LongRunning.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              LongRunning.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                  var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                  if (error)
                    return "initialPollDelay." + error;
                }
                if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier")) {
                  if (typeof message.pollDelayMultiplier !== "number")
                    return "pollDelayMultiplier: number expected";
                }
                if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                  var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                  if (error)
                    return "maxPollDelay." + error;
                }
                if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                  var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                  if (error)
                    return "totalPollTimeout." + error;
                }
                return null;
              };
              LongRunning.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.MethodSettings.LongRunning)
                  return object;
                var message = new $root.google.api.MethodSettings.LongRunning();
                if (object.initialPollDelay != null) {
                  if (typeof object.initialPollDelay !== "object")
                    throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                  message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                }
                if (object.pollDelayMultiplier != null)
                  message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                if (object.maxPollDelay != null) {
                  if (typeof object.maxPollDelay !== "object")
                    throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                  message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                }
                if (object.totalPollTimeout != null) {
                  if (typeof object.totalPollTimeout !== "object")
                    throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                  message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                }
                return message;
              };
              LongRunning.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.initialPollDelay = null;
                  object.pollDelayMultiplier = 0;
                  object.maxPollDelay = null;
                  object.totalPollTimeout = null;
                }
                if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                  object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                  object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                  object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                  object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                return object;
              };
              LongRunning.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
              };
              return LongRunning;
            }();
            return MethodSettings;
          }();
          api.ClientLibraryOrganization = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
            values[valuesById[1] = "CLOUD"] = 1;
            values[valuesById[2] = "ADS"] = 2;
            values[valuesById[3] = "PHOTOS"] = 3;
            values[valuesById[4] = "STREET_VIEW"] = 4;
            return values;
          }();
          api.ClientLibraryDestination = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
            values[valuesById[10] = "GITHUB"] = 10;
            values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
            return values;
          }();
          api.LaunchStage = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
            values[valuesById[6] = "UNIMPLEMENTED"] = 6;
            values[valuesById[7] = "PRELAUNCH"] = 7;
            values[valuesById[1] = "EARLY_ACCESS"] = 1;
            values[valuesById[2] = "ALPHA"] = 2;
            values[valuesById[3] = "BETA"] = 3;
            values[valuesById[4] = "GA"] = 4;
            values[valuesById[5] = "DEPRECATED"] = 5;
            return values;
          }();
          api.FieldBehavior = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
            values[valuesById[1] = "OPTIONAL"] = 1;
            values[valuesById[2] = "REQUIRED"] = 2;
            values[valuesById[3] = "OUTPUT_ONLY"] = 3;
            values[valuesById[4] = "INPUT_ONLY"] = 4;
            values[valuesById[5] = "IMMUTABLE"] = 5;
            values[valuesById[6] = "UNORDERED_LIST"] = 6;
            values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
            return values;
          }();
          api.ResourceDescriptor = function() {
            function ResourceDescriptor(properties) {
              this.pattern = [];
              this.style = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceDescriptor.prototype.type = "";
            ResourceDescriptor.prototype.pattern = $util.emptyArray;
            ResourceDescriptor.prototype.nameField = "";
            ResourceDescriptor.prototype.history = 0;
            ResourceDescriptor.prototype.plural = "";
            ResourceDescriptor.prototype.singular = "";
            ResourceDescriptor.prototype.style = $util.emptyArray;
            ResourceDescriptor.create = function create(properties) {
              return new ResourceDescriptor(properties);
            };
            ResourceDescriptor.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.type);
              if (message.pattern != null && message.pattern.length)
                for (var i = 0; i < message.pattern.length; ++i)
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).string(message.pattern[i]);
              if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.nameField);
              if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                writer.uint32(
                  /* id 4, wireType 0 =*/
                  32
                ).int32(message.history);
              if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                writer.uint32(
                  /* id 5, wireType 2 =*/
                  42
                ).string(message.plural);
              if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                writer.uint32(
                  /* id 6, wireType 2 =*/
                  50
                ).string(message.singular);
              if (message.style != null && message.style.length) {
                writer.uint32(
                  /* id 10, wireType 2 =*/
                  82
                ).fork();
                for (var i = 0; i < message.style.length; ++i)
                  writer.int32(message.style[i]);
                writer.ldelim();
              }
              return writer;
            };
            ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ResourceDescriptor.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.type = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.pattern && message.pattern.length))
                      message.pattern = [];
                    message.pattern.push(reader.string());
                    break;
                  }
                  case 3: {
                    message.nameField = reader.string();
                    break;
                  }
                  case 4: {
                    message.history = reader.int32();
                    break;
                  }
                  case 5: {
                    message.plural = reader.string();
                    break;
                  }
                  case 6: {
                    message.singular = reader.string();
                    break;
                  }
                  case 10: {
                    if (!(message.style && message.style.length))
                      message.style = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.style.push(reader.int32());
                    } else
                      message.style.push(reader.int32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ResourceDescriptor.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type != null && message.hasOwnProperty("type")) {
                if (!$util.isString(message.type))
                  return "type: string expected";
              }
              if (message.pattern != null && message.hasOwnProperty("pattern")) {
                if (!Array.isArray(message.pattern))
                  return "pattern: array expected";
                for (var i = 0; i < message.pattern.length; ++i)
                  if (!$util.isString(message.pattern[i]))
                    return "pattern: string[] expected";
              }
              if (message.nameField != null && message.hasOwnProperty("nameField")) {
                if (!$util.isString(message.nameField))
                  return "nameField: string expected";
              }
              if (message.history != null && message.hasOwnProperty("history"))
                switch (message.history) {
                  default:
                    return "history: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.plural != null && message.hasOwnProperty("plural")) {
                if (!$util.isString(message.plural))
                  return "plural: string expected";
              }
              if (message.singular != null && message.hasOwnProperty("singular")) {
                if (!$util.isString(message.singular))
                  return "singular: string expected";
              }
              if (message.style != null && message.hasOwnProperty("style")) {
                if (!Array.isArray(message.style))
                  return "style: array expected";
                for (var i = 0; i < message.style.length; ++i)
                  switch (message.style[i]) {
                    default:
                      return "style: enum value[] expected";
                    case 0:
                    case 1:
                      break;
                  }
              }
              return null;
            };
            ResourceDescriptor.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceDescriptor)
                return object;
              var message = new $root.google.api.ResourceDescriptor();
              if (object.type != null)
                message.type = String(object.type);
              if (object.pattern) {
                if (!Array.isArray(object.pattern))
                  throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                message.pattern = [];
                for (var i = 0; i < object.pattern.length; ++i)
                  message.pattern[i] = String(object.pattern[i]);
              }
              if (object.nameField != null)
                message.nameField = String(object.nameField);
              switch (object.history) {
                default:
                  if (typeof object.history === "number") {
                    message.history = object.history;
                    break;
                  }
                  break;
                case "HISTORY_UNSPECIFIED":
                case 0:
                  message.history = 0;
                  break;
                case "ORIGINALLY_SINGLE_PATTERN":
                case 1:
                  message.history = 1;
                  break;
                case "FUTURE_MULTI_PATTERN":
                case 2:
                  message.history = 2;
                  break;
              }
              if (object.plural != null)
                message.plural = String(object.plural);
              if (object.singular != null)
                message.singular = String(object.singular);
              if (object.style) {
                if (!Array.isArray(object.style))
                  throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                message.style = [];
                for (var i = 0; i < object.style.length; ++i)
                  switch (object.style[i]) {
                    default:
                      if (typeof object.style[i] === "number") {
                        message.style[i] = object.style[i];
                        break;
                      }
                    case "STYLE_UNSPECIFIED":
                    case 0:
                      message.style[i] = 0;
                      break;
                    case "DECLARATIVE_FRIENDLY":
                    case 1:
                      message.style[i] = 1;
                      break;
                  }
              }
              return message;
            };
            ResourceDescriptor.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.pattern = [];
                object.style = [];
              }
              if (options.defaults) {
                object.type = "";
                object.nameField = "";
                object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                object.plural = "";
                object.singular = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.pattern && message.pattern.length) {
                object.pattern = [];
                for (var j = 0; j < message.pattern.length; ++j)
                  object.pattern[j] = message.pattern[j];
              }
              if (message.nameField != null && message.hasOwnProperty("nameField"))
                object.nameField = message.nameField;
              if (message.history != null && message.hasOwnProperty("history"))
                object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === void 0 ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
              if (message.plural != null && message.hasOwnProperty("plural"))
                object.plural = message.plural;
              if (message.singular != null && message.hasOwnProperty("singular"))
                object.singular = message.singular;
              if (message.style && message.style.length) {
                object.style = [];
                for (var j = 0; j < message.style.length; ++j)
                  object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === void 0 ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
              }
              return object;
            };
            ResourceDescriptor.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ResourceDescriptor";
            };
            ResourceDescriptor.History = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
              values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
              values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
              return values;
            }();
            ResourceDescriptor.Style = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
              values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
              return values;
            }();
            return ResourceDescriptor;
          }();
          api.ResourceReference = function() {
            function ResourceReference(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceReference.prototype.type = "";
            ResourceReference.prototype.childType = "";
            ResourceReference.create = function create(properties) {
              return new ResourceReference(properties);
            };
            ResourceReference.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.type);
              if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.childType);
              return writer;
            };
            ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ResourceReference.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.type = reader.string();
                    break;
                  }
                  case 2: {
                    message.childType = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ResourceReference.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ResourceReference.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type != null && message.hasOwnProperty("type")) {
                if (!$util.isString(message.type))
                  return "type: string expected";
              }
              if (message.childType != null && message.hasOwnProperty("childType")) {
                if (!$util.isString(message.childType))
                  return "childType: string expected";
              }
              return null;
            };
            ResourceReference.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceReference)
                return object;
              var message = new $root.google.api.ResourceReference();
              if (object.type != null)
                message.type = String(object.type);
              if (object.childType != null)
                message.childType = String(object.childType);
              return message;
            };
            ResourceReference.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type = "";
                object.childType = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.childType != null && message.hasOwnProperty("childType"))
                object.childType = message.childType;
              return object;
            };
            ResourceReference.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ResourceReference";
            };
            return ResourceReference;
          }();
          return api;
        }();
        google.protobuf = function() {
          var protobuf = {};
          protobuf.FileDescriptorSet = function() {
            function FileDescriptorSet(properties) {
              this.file = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorSet.prototype.file = $util.emptyArray;
            FileDescriptorSet.create = function create(properties) {
              return new FileDescriptorSet(properties);
            };
            FileDescriptorSet.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.file != null && message.file.length)
                for (var i = 0; i < message.file.length; ++i)
                  $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              return writer;
            };
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorSet.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.file && message.file.length))
                      message.file = [];
                    message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorSet.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.file != null && message.hasOwnProperty("file")) {
                if (!Array.isArray(message.file))
                  return "file: array expected";
                for (var i = 0; i < message.file.length; ++i) {
                  var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                  if (error)
                    return "file." + error;
                }
              }
              return null;
            };
            FileDescriptorSet.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorSet)
                return object;
              var message = new $root.google.protobuf.FileDescriptorSet();
              if (object.file) {
                if (!Array.isArray(object.file))
                  throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                message.file = [];
                for (var i = 0; i < object.file.length; ++i) {
                  if (typeof object.file[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                  message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                }
              }
              return message;
            };
            FileDescriptorSet.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.file = [];
              if (message.file && message.file.length) {
                object.file = [];
                for (var j = 0; j < message.file.length; ++j)
                  object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
              }
              return object;
            };
            FileDescriptorSet.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
            };
            return FileDescriptorSet;
          }();
          protobuf.FileDescriptorProto = function() {
            function FileDescriptorProto(properties) {
              this.dependency = [];
              this.publicDependency = [];
              this.weakDependency = [];
              this.messageType = [];
              this.enumType = [];
              this.service = [];
              this.extension = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorProto.prototype.name = "";
            FileDescriptorProto.prototype["package"] = "";
            FileDescriptorProto.prototype.dependency = $util.emptyArray;
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
            FileDescriptorProto.prototype.messageType = $util.emptyArray;
            FileDescriptorProto.prototype.enumType = $util.emptyArray;
            FileDescriptorProto.prototype.service = $util.emptyArray;
            FileDescriptorProto.prototype.extension = $util.emptyArray;
            FileDescriptorProto.prototype.options = null;
            FileDescriptorProto.prototype.sourceCodeInfo = null;
            FileDescriptorProto.prototype.syntax = "";
            FileDescriptorProto.prototype.edition = "";
            FileDescriptorProto.create = function create(properties) {
              return new FileDescriptorProto(properties);
            };
            FileDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message["package"]);
              if (message.dependency != null && message.dependency.length)
                for (var i = 0; i < message.dependency.length; ++i)
                  writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).string(message.dependency[i]);
              if (message.messageType != null && message.messageType.length)
                for (var i = 0; i < message.messageType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(
                    /* id 5, wireType 2 =*/
                    42
                  ).fork()).ldelim();
              if (message.service != null && message.service.length)
                for (var i = 0; i < message.service.length; ++i)
                  $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(
                    /* id 6, wireType 2 =*/
                    50
                  ).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(
                    /* id 7, wireType 2 =*/
                    58
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).fork()).ldelim();
              if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(
                  /* id 9, wireType 2 =*/
                  74
                ).fork()).ldelim();
              if (message.publicDependency != null && message.publicDependency.length)
                for (var i = 0; i < message.publicDependency.length; ++i)
                  writer.uint32(
                    /* id 10, wireType 0 =*/
                    80
                  ).int32(message.publicDependency[i]);
              if (message.weakDependency != null && message.weakDependency.length)
                for (var i = 0; i < message.weakDependency.length; ++i)
                  writer.uint32(
                    /* id 11, wireType 0 =*/
                    88
                  ).int32(message.weakDependency[i]);
              if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                writer.uint32(
                  /* id 12, wireType 2 =*/
                  98
                ).string(message.syntax);
              if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                writer.uint32(
                  /* id 13, wireType 2 =*/
                  106
                ).string(message.edition);
              return writer;
            };
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message["package"] = reader.string();
                    break;
                  }
                  case 3: {
                    if (!(message.dependency && message.dependency.length))
                      message.dependency = [];
                    message.dependency.push(reader.string());
                    break;
                  }
                  case 10: {
                    if (!(message.publicDependency && message.publicDependency.length))
                      message.publicDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.publicDependency.push(reader.int32());
                    } else
                      message.publicDependency.push(reader.int32());
                    break;
                  }
                  case 11: {
                    if (!(message.weakDependency && message.weakDependency.length))
                      message.weakDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.weakDependency.push(reader.int32());
                    } else
                      message.weakDependency.push(reader.int32());
                    break;
                  }
                  case 4: {
                    if (!(message.messageType && message.messageType.length))
                      message.messageType = [];
                    message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 5: {
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 6: {
                    if (!(message.service && message.service.length))
                      message.service = [];
                    message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 7: {
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 8: {
                    message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 9: {
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                    break;
                  }
                  case 12: {
                    message.syntax = reader.string();
                    break;
                  }
                  case 13: {
                    message.edition = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message["package"] != null && message.hasOwnProperty("package")) {
                if (!$util.isString(message["package"]))
                  return "package: string expected";
              }
              if (message.dependency != null && message.hasOwnProperty("dependency")) {
                if (!Array.isArray(message.dependency))
                  return "dependency: array expected";
                for (var i = 0; i < message.dependency.length; ++i)
                  if (!$util.isString(message.dependency[i]))
                    return "dependency: string[] expected";
              }
              if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                if (!Array.isArray(message.publicDependency))
                  return "publicDependency: array expected";
                for (var i = 0; i < message.publicDependency.length; ++i)
                  if (!$util.isInteger(message.publicDependency[i]))
                    return "publicDependency: integer[] expected";
              }
              if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                if (!Array.isArray(message.weakDependency))
                  return "weakDependency: array expected";
                for (var i = 0; i < message.weakDependency.length; ++i)
                  if (!$util.isInteger(message.weakDependency[i]))
                    return "weakDependency: integer[] expected";
              }
              if (message.messageType != null && message.hasOwnProperty("messageType")) {
                if (!Array.isArray(message.messageType))
                  return "messageType: array expected";
                for (var i = 0; i < message.messageType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                  if (error)
                    return "messageType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.service != null && message.hasOwnProperty("service")) {
                if (!Array.isArray(message.service))
                  return "service: array expected";
                for (var i = 0; i < message.service.length; ++i) {
                  var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                  if (error)
                    return "service." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FileOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                if (error)
                  return "sourceCodeInfo." + error;
              }
              if (message.syntax != null && message.hasOwnProperty("syntax")) {
                if (!$util.isString(message.syntax))
                  return "syntax: string expected";
              }
              if (message.edition != null && message.hasOwnProperty("edition")) {
                if (!$util.isString(message.edition))
                  return "edition: string expected";
              }
              return null;
            };
            FileDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FileDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object["package"] != null)
                message["package"] = String(object["package"]);
              if (object.dependency) {
                if (!Array.isArray(object.dependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                message.dependency = [];
                for (var i = 0; i < object.dependency.length; ++i)
                  message.dependency[i] = String(object.dependency[i]);
              }
              if (object.publicDependency) {
                if (!Array.isArray(object.publicDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                message.publicDependency = [];
                for (var i = 0; i < object.publicDependency.length; ++i)
                  message.publicDependency[i] = object.publicDependency[i] | 0;
              }
              if (object.weakDependency) {
                if (!Array.isArray(object.weakDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                message.weakDependency = [];
                for (var i = 0; i < object.weakDependency.length; ++i)
                  message.weakDependency[i] = object.weakDependency[i] | 0;
              }
              if (object.messageType) {
                if (!Array.isArray(object.messageType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                message.messageType = [];
                for (var i = 0; i < object.messageType.length; ++i) {
                  if (typeof object.messageType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                  message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.service) {
                if (!Array.isArray(object.service))
                  throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                message.service = [];
                for (var i = 0; i < object.service.length; ++i) {
                  if (typeof object.service[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                  message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
              }
              if (object.sourceCodeInfo != null) {
                if (typeof object.sourceCodeInfo !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
              }
              if (object.syntax != null)
                message.syntax = String(object.syntax);
              if (object.edition != null)
                message.edition = String(object.edition);
              return message;
            };
            FileDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.dependency = [];
                object.messageType = [];
                object.enumType = [];
                object.service = [];
                object.extension = [];
                object.publicDependency = [];
                object.weakDependency = [];
              }
              if (options.defaults) {
                object.name = "";
                object["package"] = "";
                object.options = null;
                object.sourceCodeInfo = null;
                object.syntax = "";
                object.edition = "";
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message["package"] != null && message.hasOwnProperty("package"))
                object["package"] = message["package"];
              if (message.dependency && message.dependency.length) {
                object.dependency = [];
                for (var j = 0; j < message.dependency.length; ++j)
                  object.dependency[j] = message.dependency[j];
              }
              if (message.messageType && message.messageType.length) {
                object.messageType = [];
                for (var j = 0; j < message.messageType.length; ++j)
                  object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.service && message.service.length) {
                object.service = [];
                for (var j = 0; j < message.service.length; ++j)
                  object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
              if (message.publicDependency && message.publicDependency.length) {
                object.publicDependency = [];
                for (var j = 0; j < message.publicDependency.length; ++j)
                  object.publicDependency[j] = message.publicDependency[j];
              }
              if (message.weakDependency && message.weakDependency.length) {
                object.weakDependency = [];
                for (var j = 0; j < message.weakDependency.length; ++j)
                  object.weakDependency[j] = message.weakDependency[j];
              }
              if (message.syntax != null && message.hasOwnProperty("syntax"))
                object.syntax = message.syntax;
              if (message.edition != null && message.hasOwnProperty("edition"))
                object.edition = message.edition;
              return object;
            };
            FileDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
            };
            return FileDescriptorProto;
          }();
          protobuf.DescriptorProto = function() {
            function DescriptorProto(properties) {
              this.field = [];
              this.extension = [];
              this.nestedType = [];
              this.enumType = [];
              this.extensionRange = [];
              this.oneofDecl = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DescriptorProto.prototype.name = "";
            DescriptorProto.prototype.field = $util.emptyArray;
            DescriptorProto.prototype.extension = $util.emptyArray;
            DescriptorProto.prototype.nestedType = $util.emptyArray;
            DescriptorProto.prototype.enumType = $util.emptyArray;
            DescriptorProto.prototype.extensionRange = $util.emptyArray;
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;
            DescriptorProto.prototype.options = null;
            DescriptorProto.prototype.reservedRange = $util.emptyArray;
            DescriptorProto.prototype.reservedName = $util.emptyArray;
            DescriptorProto.create = function create(properties) {
              return new DescriptorProto(properties);
            };
            DescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.field != null && message.field.length)
                for (var i = 0; i < message.field.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.nestedType != null && message.nestedType.length)
                for (var i = 0; i < message.nestedType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
              if (message.extensionRange != null && message.extensionRange.length)
                for (var i = 0; i < message.extensionRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(
                    /* id 5, wireType 2 =*/
                    42
                  ).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(
                    /* id 6, wireType 2 =*/
                    50
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).fork()).ldelim();
              if (message.oneofDecl != null && message.oneofDecl.length)
                for (var i = 0; i < message.oneofDecl.length; ++i)
                  $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(
                    /* id 8, wireType 2 =*/
                    66
                  ).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(
                    /* id 9, wireType 2 =*/
                    74
                  ).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(
                    /* id 10, wireType 2 =*/
                    82
                  ).string(message.reservedName[i]);
              return writer;
            };
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.field && message.field.length))
                      message.field = [];
                    message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 6: {
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    if (!(message.nestedType && message.nestedType.length))
                      message.nestedType = [];
                    message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 4: {
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 5: {
                    if (!(message.extensionRange && message.extensionRange.length))
                      message.extensionRange = [];
                    message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                    break;
                  }
                  case 8: {
                    if (!(message.oneofDecl && message.oneofDecl.length))
                      message.oneofDecl = [];
                    message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 7: {
                    message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 9: {
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                    break;
                  }
                  case 10: {
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.field != null && message.hasOwnProperty("field")) {
                if (!Array.isArray(message.field))
                  return "field: array expected";
                for (var i = 0; i < message.field.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                  if (error)
                    return "field." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                if (!Array.isArray(message.nestedType))
                  return "nestedType: array expected";
                for (var i = 0; i < message.nestedType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                  if (error)
                    return "nestedType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                if (!Array.isArray(message.extensionRange))
                  return "extensionRange: array expected";
                for (var i = 0; i < message.extensionRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                  if (error)
                    return "extensionRange." + error;
                }
              }
              if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                if (!Array.isArray(message.oneofDecl))
                  return "oneofDecl: array expected";
                for (var i = 0; i < message.oneofDecl.length; ++i) {
                  var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                  if (error)
                    return "oneofDecl." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MessageOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            DescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.DescriptorProto)
                return object;
              var message = new $root.google.protobuf.DescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.field) {
                if (!Array.isArray(object.field))
                  throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                message.field = [];
                for (var i = 0; i < object.field.length; ++i) {
                  if (typeof object.field[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                  message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.nestedType) {
                if (!Array.isArray(object.nestedType))
                  throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                message.nestedType = [];
                for (var i = 0; i < object.nestedType.length; ++i) {
                  if (typeof object.nestedType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                  message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.extensionRange) {
                if (!Array.isArray(object.extensionRange))
                  throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                message.extensionRange = [];
                for (var i = 0; i < object.extensionRange.length; ++i) {
                  if (typeof object.extensionRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                  message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                }
              }
              if (object.oneofDecl) {
                if (!Array.isArray(object.oneofDecl))
                  throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                message.oneofDecl = [];
                for (var i = 0; i < object.oneofDecl.length; ++i) {
                  if (typeof object.oneofDecl[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                  message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            DescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.field = [];
                object.nestedType = [];
                object.enumType = [];
                object.extensionRange = [];
                object.extension = [];
                object.oneofDecl = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.field && message.field.length) {
                object.field = [];
                for (var j = 0; j < message.field.length; ++j)
                  object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
              }
              if (message.nestedType && message.nestedType.length) {
                object.nestedType = [];
                for (var j = 0; j < message.nestedType.length; ++j)
                  object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.extensionRange && message.extensionRange.length) {
                object.extensionRange = [];
                for (var j = 0; j < message.extensionRange.length; ++j)
                  object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
              if (message.oneofDecl && message.oneofDecl.length) {
                object.oneofDecl = [];
                for (var j = 0; j < message.oneofDecl.length; ++j)
                  object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
              }
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            DescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.DescriptorProto";
            };
            DescriptorProto.ExtensionRange = function() {
              function ExtensionRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ExtensionRange.prototype.start = 0;
              ExtensionRange.prototype.end = 0;
              ExtensionRange.prototype.options = null;
              ExtensionRange.create = function create(properties) {
                return new ExtensionRange(properties);
              };
              ExtensionRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(
                    /* id 1, wireType 0 =*/
                    8
                  ).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 2, wireType 0 =*/
                    16
                  ).int32(message.end);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                  $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
                return writer;
              };
              ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ExtensionRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.start = reader.int32();
                      break;
                    }
                    case 2: {
                      message.end = reader.int32();
                      break;
                    }
                    case 3: {
                      message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ExtensionRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                  var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                  if (error)
                    return "options." + error;
                }
                return null;
              };
              ExtensionRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                  message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                }
                return message;
              };
              ExtensionRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                  object.options = null;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                return object;
              };
              ExtensionRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
              };
              return ExtensionRange;
            }();
            DescriptorProto.ReservedRange = function() {
              function ReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ReservedRange.prototype.start = 0;
              ReservedRange.prototype.end = 0;
              ReservedRange.create = function create(properties) {
                return new ReservedRange(properties);
              };
              ReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(
                    /* id 1, wireType 0 =*/
                    8
                  ).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 2, wireType 0 =*/
                    16
                  ).int32(message.end);
                return writer;
              };
              ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.start = reader.int32();
                      break;
                    }
                    case 2: {
                      message.end = reader.int32();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              ReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              ReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              ReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
              };
              return ReservedRange;
            }();
            return DescriptorProto;
          }();
          protobuf.ExtensionRangeOptions = function() {
            function ExtensionRangeOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
            ExtensionRangeOptions.create = function create(properties) {
              return new ExtensionRangeOptions(properties);
            };
            ExtensionRangeOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ExtensionRangeOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ExtensionRangeOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            ExtensionRangeOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                return object;
              var message = new $root.google.protobuf.ExtensionRangeOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            ExtensionRangeOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
            };
            return ExtensionRangeOptions;
          }();
          protobuf.FieldDescriptorProto = function() {
            function FieldDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldDescriptorProto.prototype.name = "";
            FieldDescriptorProto.prototype.number = 0;
            FieldDescriptorProto.prototype.label = 1;
            FieldDescriptorProto.prototype.type = 1;
            FieldDescriptorProto.prototype.typeName = "";
            FieldDescriptorProto.prototype.extendee = "";
            FieldDescriptorProto.prototype.defaultValue = "";
            FieldDescriptorProto.prototype.oneofIndex = 0;
            FieldDescriptorProto.prototype.jsonName = "";
            FieldDescriptorProto.prototype.options = null;
            FieldDescriptorProto.prototype.proto3Optional = false;
            FieldDescriptorProto.create = function create(properties) {
              return new FieldDescriptorProto(properties);
            };
            FieldDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.extendee);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).int32(message.number);
              if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                writer.uint32(
                  /* id 4, wireType 0 =*/
                  32
                ).int32(message.label);
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).int32(message.type);
              if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                writer.uint32(
                  /* id 6, wireType 2 =*/
                  50
                ).string(message.typeName);
              if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).string(message.defaultValue);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).fork()).ldelim();
              if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                writer.uint32(
                  /* id 9, wireType 0 =*/
                  72
                ).int32(message.oneofIndex);
              if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                writer.uint32(
                  /* id 10, wireType 2 =*/
                  82
                ).string(message.jsonName);
              if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                writer.uint32(
                  /* id 17, wireType 0 =*/
                  136
                ).bool(message.proto3Optional);
              return writer;
            };
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 3: {
                    message.number = reader.int32();
                    break;
                  }
                  case 4: {
                    message.label = reader.int32();
                    break;
                  }
                  case 5: {
                    message.type = reader.int32();
                    break;
                  }
                  case 6: {
                    message.typeName = reader.string();
                    break;
                  }
                  case 2: {
                    message.extendee = reader.string();
                    break;
                  }
                  case 7: {
                    message.defaultValue = reader.string();
                    break;
                  }
                  case 9: {
                    message.oneofIndex = reader.int32();
                    break;
                  }
                  case 10: {
                    message.jsonName = reader.string();
                    break;
                  }
                  case 8: {
                    message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 17: {
                    message.proto3Optional = reader.bool();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.label != null && message.hasOwnProperty("label"))
                switch (message.label) {
                  default:
                    return "label: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                  default:
                    return "type: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                    break;
                }
              if (message.typeName != null && message.hasOwnProperty("typeName")) {
                if (!$util.isString(message.typeName))
                  return "typeName: string expected";
              }
              if (message.extendee != null && message.hasOwnProperty("extendee")) {
                if (!$util.isString(message.extendee))
                  return "extendee: string expected";
              }
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue")) {
                if (!$util.isString(message.defaultValue))
                  return "defaultValue: string expected";
              }
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex")) {
                if (!$util.isInteger(message.oneofIndex))
                  return "oneofIndex: integer expected";
              }
              if (message.jsonName != null && message.hasOwnProperty("jsonName")) {
                if (!$util.isString(message.jsonName))
                  return "jsonName: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FieldOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional")) {
                if (typeof message.proto3Optional !== "boolean")
                  return "proto3Optional: boolean expected";
              }
              return null;
            };
            FieldDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FieldDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              switch (object.label) {
                default:
                  if (typeof object.label === "number") {
                    message.label = object.label;
                    break;
                  }
                  break;
                case "LABEL_OPTIONAL":
                case 1:
                  message.label = 1;
                  break;
                case "LABEL_REQUIRED":
                case 2:
                  message.label = 2;
                  break;
                case "LABEL_REPEATED":
                case 3:
                  message.label = 3;
                  break;
              }
              switch (object.type) {
                default:
                  if (typeof object.type === "number") {
                    message.type = object.type;
                    break;
                  }
                  break;
                case "TYPE_DOUBLE":
                case 1:
                  message.type = 1;
                  break;
                case "TYPE_FLOAT":
                case 2:
                  message.type = 2;
                  break;
                case "TYPE_INT64":
                case 3:
                  message.type = 3;
                  break;
                case "TYPE_UINT64":
                case 4:
                  message.type = 4;
                  break;
                case "TYPE_INT32":
                case 5:
                  message.type = 5;
                  break;
                case "TYPE_FIXED64":
                case 6:
                  message.type = 6;
                  break;
                case "TYPE_FIXED32":
                case 7:
                  message.type = 7;
                  break;
                case "TYPE_BOOL":
                case 8:
                  message.type = 8;
                  break;
                case "TYPE_STRING":
                case 9:
                  message.type = 9;
                  break;
                case "TYPE_GROUP":
                case 10:
                  message.type = 10;
                  break;
                case "TYPE_MESSAGE":
                case 11:
                  message.type = 11;
                  break;
                case "TYPE_BYTES":
                case 12:
                  message.type = 12;
                  break;
                case "TYPE_UINT32":
                case 13:
                  message.type = 13;
                  break;
                case "TYPE_ENUM":
                case 14:
                  message.type = 14;
                  break;
                case "TYPE_SFIXED32":
                case 15:
                  message.type = 15;
                  break;
                case "TYPE_SFIXED64":
                case 16:
                  message.type = 16;
                  break;
                case "TYPE_SINT32":
                case 17:
                  message.type = 17;
                  break;
                case "TYPE_SINT64":
                case 18:
                  message.type = 18;
                  break;
              }
              if (object.typeName != null)
                message.typeName = String(object.typeName);
              if (object.extendee != null)
                message.extendee = String(object.extendee);
              if (object.defaultValue != null)
                message.defaultValue = String(object.defaultValue);
              if (object.oneofIndex != null)
                message.oneofIndex = object.oneofIndex | 0;
              if (object.jsonName != null)
                message.jsonName = String(object.jsonName);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
              }
              if (object.proto3Optional != null)
                message.proto3Optional = Boolean(object.proto3Optional);
              return message;
            };
            FieldDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.extendee = "";
                object.number = 0;
                object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                object.typeName = "";
                object.defaultValue = "";
                object.options = null;
                object.oneofIndex = 0;
                object.jsonName = "";
                object.proto3Optional = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.extendee != null && message.hasOwnProperty("extendee"))
                object.extendee = message.extendee;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.label != null && message.hasOwnProperty("label"))
                object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === void 0 ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === void 0 ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
              if (message.typeName != null && message.hasOwnProperty("typeName"))
                object.typeName = message.typeName;
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                object.defaultValue = message.defaultValue;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                object.oneofIndex = message.oneofIndex;
              if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                object.jsonName = message.jsonName;
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                object.proto3Optional = message.proto3Optional;
              return object;
            };
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
            };
            FieldDescriptorProto.Type = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "TYPE_DOUBLE"] = 1;
              values[valuesById[2] = "TYPE_FLOAT"] = 2;
              values[valuesById[3] = "TYPE_INT64"] = 3;
              values[valuesById[4] = "TYPE_UINT64"] = 4;
              values[valuesById[5] = "TYPE_INT32"] = 5;
              values[valuesById[6] = "TYPE_FIXED64"] = 6;
              values[valuesById[7] = "TYPE_FIXED32"] = 7;
              values[valuesById[8] = "TYPE_BOOL"] = 8;
              values[valuesById[9] = "TYPE_STRING"] = 9;
              values[valuesById[10] = "TYPE_GROUP"] = 10;
              values[valuesById[11] = "TYPE_MESSAGE"] = 11;
              values[valuesById[12] = "TYPE_BYTES"] = 12;
              values[valuesById[13] = "TYPE_UINT32"] = 13;
              values[valuesById[14] = "TYPE_ENUM"] = 14;
              values[valuesById[15] = "TYPE_SFIXED32"] = 15;
              values[valuesById[16] = "TYPE_SFIXED64"] = 16;
              values[valuesById[17] = "TYPE_SINT32"] = 17;
              values[valuesById[18] = "TYPE_SINT64"] = 18;
              return values;
            }();
            FieldDescriptorProto.Label = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
              values[valuesById[2] = "LABEL_REQUIRED"] = 2;
              values[valuesById[3] = "LABEL_REPEATED"] = 3;
              return values;
            }();
            return FieldDescriptorProto;
          }();
          protobuf.OneofDescriptorProto = function() {
            function OneofDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofDescriptorProto.prototype.name = "";
            OneofDescriptorProto.prototype.options = null;
            OneofDescriptorProto.create = function create(properties) {
              return new OneofDescriptorProto(properties);
            };
            OneofDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              return writer;
            };
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.OneofOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            OneofDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                return object;
              var message = new $root.google.protobuf.OneofDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
              }
              return message;
            };
            OneofDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
              return object;
            };
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
            };
            return OneofDescriptorProto;
          }();
          protobuf.EnumDescriptorProto = function() {
            function EnumDescriptorProto(properties) {
              this.value = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumDescriptorProto.prototype.name = "";
            EnumDescriptorProto.prototype.value = $util.emptyArray;
            EnumDescriptorProto.prototype.options = null;
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
            EnumDescriptorProto.create = function create(properties) {
              return new EnumDescriptorProto(properties);
            };
            EnumDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.value != null && message.value.length)
                for (var i = 0; i < message.value.length; ++i)
                  $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(
                    /* id 5, wireType 2 =*/
                    42
                  ).string(message.reservedName[i]);
              return writer;
            };
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.value && message.value.length))
                      message.value = [];
                    message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 4: {
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                    break;
                  }
                  case 5: {
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!Array.isArray(message.value))
                  return "value: array expected";
                for (var i = 0; i < message.value.length; ++i) {
                  var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                  if (error)
                    return "value." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            EnumDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.value) {
                if (!Array.isArray(object.value))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                message.value = [];
                for (var i = 0; i < object.value.length; ++i) {
                  if (typeof object.value[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                  message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            EnumDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.value = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.value && message.value.length) {
                object.value = [];
                for (var j = 0; j < message.value.length; ++j)
                  object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
            };
            EnumDescriptorProto.EnumReservedRange = function() {
              function EnumReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              EnumReservedRange.prototype.start = 0;
              EnumReservedRange.prototype.end = 0;
              EnumReservedRange.create = function create(properties) {
                return new EnumReservedRange(properties);
              };
              EnumReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(
                    /* id 1, wireType 0 =*/
                    8
                  ).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 2, wireType 0 =*/
                    16
                  ).int32(message.end);
                return writer;
              };
              EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              EnumReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.start = reader.int32();
                      break;
                    }
                    case 2: {
                      message.end = reader.int32();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              EnumReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              EnumReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                  return object;
                var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              EnumReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              EnumReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
              };
              return EnumReservedRange;
            }();
            return EnumDescriptorProto;
          }();
          protobuf.EnumValueDescriptorProto = function() {
            function EnumValueDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueDescriptorProto.prototype.name = "";
            EnumValueDescriptorProto.prototype.number = 0;
            EnumValueDescriptorProto.prototype.options = null;
            EnumValueDescriptorProto.create = function create(properties) {
              return new EnumValueDescriptorProto(properties);
            };
            EnumValueDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.number);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              return writer;
            };
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.number = reader.int32();
                    break;
                  }
                  case 3: {
                    message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumValueDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
              }
              return message;
            };
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.number = 0;
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
              return object;
            };
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
            };
            return EnumValueDescriptorProto;
          }();
          protobuf.ServiceDescriptorProto = function() {
            function ServiceDescriptorProto(properties) {
              this.method = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceDescriptorProto.prototype.name = "";
            ServiceDescriptorProto.prototype.method = $util.emptyArray;
            ServiceDescriptorProto.prototype.options = null;
            ServiceDescriptorProto.create = function create(properties) {
              return new ServiceDescriptorProto(properties);
            };
            ServiceDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.method != null && message.method.length)
                for (var i = 0; i < message.method.length; ++i)
                  $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              return writer;
            };
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.method && message.method.length))
                      message.method = [];
                    message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.method != null && message.hasOwnProperty("method")) {
                if (!Array.isArray(message.method))
                  return "method: array expected";
                for (var i = 0; i < message.method.length; ++i) {
                  var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                  if (error)
                    return "method." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            ServiceDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                return object;
              var message = new $root.google.protobuf.ServiceDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.method) {
                if (!Array.isArray(object.method))
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                message.method = [];
                for (var i = 0; i < object.method.length; ++i) {
                  if (typeof object.method[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                  message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
              }
              return message;
            };
            ServiceDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.method = [];
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.method && message.method.length) {
                object.method = [];
                for (var j = 0; j < message.method.length; ++j)
                  object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
              return object;
            };
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
            };
            return ServiceDescriptorProto;
          }();
          protobuf.MethodDescriptorProto = function() {
            function MethodDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodDescriptorProto.prototype.name = "";
            MethodDescriptorProto.prototype.inputType = "";
            MethodDescriptorProto.prototype.outputType = "";
            MethodDescriptorProto.prototype.options = null;
            MethodDescriptorProto.prototype.clientStreaming = false;
            MethodDescriptorProto.prototype.serverStreaming = false;
            MethodDescriptorProto.create = function create(properties) {
              return new MethodDescriptorProto(properties);
            };
            MethodDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.inputType);
              if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.outputType);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).fork()).ldelim();
              if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).bool(message.clientStreaming);
              if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                writer.uint32(
                  /* id 6, wireType 0 =*/
                  48
                ).bool(message.serverStreaming);
              return writer;
            };
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.inputType = reader.string();
                    break;
                  }
                  case 3: {
                    message.outputType = reader.string();
                    break;
                  }
                  case 4: {
                    message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 5: {
                    message.clientStreaming = reader.bool();
                    break;
                  }
                  case 6: {
                    message.serverStreaming = reader.bool();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.inputType != null && message.hasOwnProperty("inputType")) {
                if (!$util.isString(message.inputType))
                  return "inputType: string expected";
              }
              if (message.outputType != null && message.hasOwnProperty("outputType")) {
                if (!$util.isString(message.outputType))
                  return "outputType: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MethodOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming")) {
                if (typeof message.clientStreaming !== "boolean")
                  return "clientStreaming: boolean expected";
              }
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming")) {
                if (typeof message.serverStreaming !== "boolean")
                  return "serverStreaming: boolean expected";
              }
              return null;
            };
            MethodDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                return object;
              var message = new $root.google.protobuf.MethodDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.inputType != null)
                message.inputType = String(object.inputType);
              if (object.outputType != null)
                message.outputType = String(object.outputType);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
              }
              if (object.clientStreaming != null)
                message.clientStreaming = Boolean(object.clientStreaming);
              if (object.serverStreaming != null)
                message.serverStreaming = Boolean(object.serverStreaming);
              return message;
            };
            MethodDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.inputType = "";
                object.outputType = "";
                object.options = null;
                object.clientStreaming = false;
                object.serverStreaming = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.inputType != null && message.hasOwnProperty("inputType"))
                object.inputType = message.inputType;
              if (message.outputType != null && message.hasOwnProperty("outputType"))
                object.outputType = message.outputType;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                object.clientStreaming = message.clientStreaming;
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                object.serverStreaming = message.serverStreaming;
              return object;
            };
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
            };
            return MethodDescriptorProto;
          }();
          protobuf.FileOptions = function() {
            function FileOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.resourceDefinition"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileOptions.prototype.javaPackage = "";
            FileOptions.prototype.javaOuterClassname = "";
            FileOptions.prototype.javaMultipleFiles = false;
            FileOptions.prototype.javaGenerateEqualsAndHash = false;
            FileOptions.prototype.javaStringCheckUtf8 = false;
            FileOptions.prototype.optimizeFor = 1;
            FileOptions.prototype.goPackage = "";
            FileOptions.prototype.ccGenericServices = false;
            FileOptions.prototype.javaGenericServices = false;
            FileOptions.prototype.pyGenericServices = false;
            FileOptions.prototype.phpGenericServices = false;
            FileOptions.prototype.deprecated = false;
            FileOptions.prototype.ccEnableArenas = true;
            FileOptions.prototype.objcClassPrefix = "";
            FileOptions.prototype.csharpNamespace = "";
            FileOptions.prototype.swiftPrefix = "";
            FileOptions.prototype.phpClassPrefix = "";
            FileOptions.prototype.phpNamespace = "";
            FileOptions.prototype.phpMetadataNamespace = "";
            FileOptions.prototype.rubyPackage = "";
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;
            FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
            FileOptions.create = function create(properties) {
              return new FileOptions(properties);
            };
            FileOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.javaPackage);
              if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).string(message.javaOuterClassname);
              if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                writer.uint32(
                  /* id 9, wireType 0 =*/
                  72
                ).int32(message.optimizeFor);
              if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                writer.uint32(
                  /* id 10, wireType 0 =*/
                  80
                ).bool(message.javaMultipleFiles);
              if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                writer.uint32(
                  /* id 11, wireType 2 =*/
                  90
                ).string(message.goPackage);
              if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                writer.uint32(
                  /* id 16, wireType 0 =*/
                  128
                ).bool(message.ccGenericServices);
              if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                writer.uint32(
                  /* id 17, wireType 0 =*/
                  136
                ).bool(message.javaGenericServices);
              if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                writer.uint32(
                  /* id 18, wireType 0 =*/
                  144
                ).bool(message.pyGenericServices);
              if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                writer.uint32(
                  /* id 20, wireType 0 =*/
                  160
                ).bool(message.javaGenerateEqualsAndHash);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 23, wireType 0 =*/
                  184
                ).bool(message.deprecated);
              if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                writer.uint32(
                  /* id 27, wireType 0 =*/
                  216
                ).bool(message.javaStringCheckUtf8);
              if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                writer.uint32(
                  /* id 31, wireType 0 =*/
                  248
                ).bool(message.ccEnableArenas);
              if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                writer.uint32(
                  /* id 36, wireType 2 =*/
                  290
                ).string(message.objcClassPrefix);
              if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                writer.uint32(
                  /* id 37, wireType 2 =*/
                  298
                ).string(message.csharpNamespace);
              if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                writer.uint32(
                  /* id 39, wireType 2 =*/
                  314
                ).string(message.swiftPrefix);
              if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                writer.uint32(
                  /* id 40, wireType 2 =*/
                  322
                ).string(message.phpClassPrefix);
              if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                writer.uint32(
                  /* id 41, wireType 2 =*/
                  330
                ).string(message.phpNamespace);
              if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                writer.uint32(
                  /* id 42, wireType 0 =*/
                  336
                ).bool(message.phpGenericServices);
              if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                writer.uint32(
                  /* id 44, wireType 2 =*/
                  354
                ).string(message.phpMetadataNamespace);
              if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                writer.uint32(
                  /* id 45, wireType 2 =*/
                  362
                ).string(message.rubyPackage);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                  $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(
                    /* id 1053, wireType 2 =*/
                    8426
                  ).fork()).ldelim();
              return writer;
            };
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.javaPackage = reader.string();
                    break;
                  }
                  case 8: {
                    message.javaOuterClassname = reader.string();
                    break;
                  }
                  case 10: {
                    message.javaMultipleFiles = reader.bool();
                    break;
                  }
                  case 20: {
                    message.javaGenerateEqualsAndHash = reader.bool();
                    break;
                  }
                  case 27: {
                    message.javaStringCheckUtf8 = reader.bool();
                    break;
                  }
                  case 9: {
                    message.optimizeFor = reader.int32();
                    break;
                  }
                  case 11: {
                    message.goPackage = reader.string();
                    break;
                  }
                  case 16: {
                    message.ccGenericServices = reader.bool();
                    break;
                  }
                  case 17: {
                    message.javaGenericServices = reader.bool();
                    break;
                  }
                  case 18: {
                    message.pyGenericServices = reader.bool();
                    break;
                  }
                  case 42: {
                    message.phpGenericServices = reader.bool();
                    break;
                  }
                  case 23: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 31: {
                    message.ccEnableArenas = reader.bool();
                    break;
                  }
                  case 36: {
                    message.objcClassPrefix = reader.string();
                    break;
                  }
                  case 37: {
                    message.csharpNamespace = reader.string();
                    break;
                  }
                  case 39: {
                    message.swiftPrefix = reader.string();
                    break;
                  }
                  case 40: {
                    message.phpClassPrefix = reader.string();
                    break;
                  }
                  case 41: {
                    message.phpNamespace = reader.string();
                    break;
                  }
                  case 44: {
                    message.phpMetadataNamespace = reader.string();
                    break;
                  }
                  case 45: {
                    message.rubyPackage = reader.string();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1053: {
                    if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                      message[".google.api.resourceDefinition"] = [];
                    message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage")) {
                if (!$util.isString(message.javaPackage))
                  return "javaPackage: string expected";
              }
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname")) {
                if (!$util.isString(message.javaOuterClassname))
                  return "javaOuterClassname: string expected";
              }
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles")) {
                if (typeof message.javaMultipleFiles !== "boolean")
                  return "javaMultipleFiles: boolean expected";
              }
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash")) {
                if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                  return "javaGenerateEqualsAndHash: boolean expected";
              }
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8")) {
                if (typeof message.javaStringCheckUtf8 !== "boolean")
                  return "javaStringCheckUtf8: boolean expected";
              }
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                switch (message.optimizeFor) {
                  default:
                    return "optimizeFor: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.goPackage != null && message.hasOwnProperty("goPackage")) {
                if (!$util.isString(message.goPackage))
                  return "goPackage: string expected";
              }
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices")) {
                if (typeof message.ccGenericServices !== "boolean")
                  return "ccGenericServices: boolean expected";
              }
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices")) {
                if (typeof message.javaGenericServices !== "boolean")
                  return "javaGenericServices: boolean expected";
              }
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices")) {
                if (typeof message.pyGenericServices !== "boolean")
                  return "pyGenericServices: boolean expected";
              }
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices")) {
                if (typeof message.phpGenericServices !== "boolean")
                  return "phpGenericServices: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas")) {
                if (typeof message.ccEnableArenas !== "boolean")
                  return "ccEnableArenas: boolean expected";
              }
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix")) {
                if (!$util.isString(message.objcClassPrefix))
                  return "objcClassPrefix: string expected";
              }
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace")) {
                if (!$util.isString(message.csharpNamespace))
                  return "csharpNamespace: string expected";
              }
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix")) {
                if (!$util.isString(message.swiftPrefix))
                  return "swiftPrefix: string expected";
              }
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix")) {
                if (!$util.isString(message.phpClassPrefix))
                  return "phpClassPrefix: string expected";
              }
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace")) {
                if (!$util.isString(message.phpNamespace))
                  return "phpNamespace: string expected";
              }
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace")) {
                if (!$util.isString(message.phpMetadataNamespace))
                  return "phpMetadataNamespace: string expected";
              }
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage")) {
                if (!$util.isString(message.rubyPackage))
                  return "rubyPackage: string expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                if (!Array.isArray(message[".google.api.resourceDefinition"]))
                  return ".google.api.resourceDefinition: array expected";
                for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                  var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                  if (error)
                    return ".google.api.resourceDefinition." + error;
                }
              }
              return null;
            };
            FileOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileOptions)
                return object;
              var message = new $root.google.protobuf.FileOptions();
              if (object.javaPackage != null)
                message.javaPackage = String(object.javaPackage);
              if (object.javaOuterClassname != null)
                message.javaOuterClassname = String(object.javaOuterClassname);
              if (object.javaMultipleFiles != null)
                message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
              if (object.javaGenerateEqualsAndHash != null)
                message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
              if (object.javaStringCheckUtf8 != null)
                message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
              switch (object.optimizeFor) {
                default:
                  if (typeof object.optimizeFor === "number") {
                    message.optimizeFor = object.optimizeFor;
                    break;
                  }
                  break;
                case "SPEED":
                case 1:
                  message.optimizeFor = 1;
                  break;
                case "CODE_SIZE":
                case 2:
                  message.optimizeFor = 2;
                  break;
                case "LITE_RUNTIME":
                case 3:
                  message.optimizeFor = 3;
                  break;
              }
              if (object.goPackage != null)
                message.goPackage = String(object.goPackage);
              if (object.ccGenericServices != null)
                message.ccGenericServices = Boolean(object.ccGenericServices);
              if (object.javaGenericServices != null)
                message.javaGenericServices = Boolean(object.javaGenericServices);
              if (object.pyGenericServices != null)
                message.pyGenericServices = Boolean(object.pyGenericServices);
              if (object.phpGenericServices != null)
                message.phpGenericServices = Boolean(object.phpGenericServices);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.ccEnableArenas != null)
                message.ccEnableArenas = Boolean(object.ccEnableArenas);
              if (object.objcClassPrefix != null)
                message.objcClassPrefix = String(object.objcClassPrefix);
              if (object.csharpNamespace != null)
                message.csharpNamespace = String(object.csharpNamespace);
              if (object.swiftPrefix != null)
                message.swiftPrefix = String(object.swiftPrefix);
              if (object.phpClassPrefix != null)
                message.phpClassPrefix = String(object.phpClassPrefix);
              if (object.phpNamespace != null)
                message.phpNamespace = String(object.phpNamespace);
              if (object.phpMetadataNamespace != null)
                message.phpMetadataNamespace = String(object.phpMetadataNamespace);
              if (object.rubyPackage != null)
                message.rubyPackage = String(object.rubyPackage);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resourceDefinition"]) {
                if (!Array.isArray(object[".google.api.resourceDefinition"]))
                  throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                message[".google.api.resourceDefinition"] = [];
                for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                  if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                  message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                }
              }
              return message;
            };
            FileOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.resourceDefinition"] = [];
              }
              if (options.defaults) {
                object.javaPackage = "";
                object.javaOuterClassname = "";
                object.optimizeFor = options.enums === String ? "SPEED" : 1;
                object.javaMultipleFiles = false;
                object.goPackage = "";
                object.ccGenericServices = false;
                object.javaGenericServices = false;
                object.pyGenericServices = false;
                object.javaGenerateEqualsAndHash = false;
                object.deprecated = false;
                object.javaStringCheckUtf8 = false;
                object.ccEnableArenas = true;
                object.objcClassPrefix = "";
                object.csharpNamespace = "";
                object.swiftPrefix = "";
                object.phpClassPrefix = "";
                object.phpNamespace = "";
                object.phpGenericServices = false;
                object.phpMetadataNamespace = "";
                object.rubyPackage = "";
              }
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                object.javaPackage = message.javaPackage;
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                object.javaOuterClassname = message.javaOuterClassname;
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === void 0 ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                object.javaMultipleFiles = message.javaMultipleFiles;
              if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                object.goPackage = message.goPackage;
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                object.ccGenericServices = message.ccGenericServices;
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                object.javaGenericServices = message.javaGenericServices;
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                object.pyGenericServices = message.pyGenericServices;
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                object.ccEnableArenas = message.ccEnableArenas;
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                object.objcClassPrefix = message.objcClassPrefix;
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                object.csharpNamespace = message.csharpNamespace;
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                object.swiftPrefix = message.swiftPrefix;
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                object.phpClassPrefix = message.phpClassPrefix;
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                object.phpNamespace = message.phpNamespace;
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                object.phpGenericServices = message.phpGenericServices;
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                object.phpMetadataNamespace = message.phpMetadataNamespace;
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                object.rubyPackage = message.rubyPackage;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                object[".google.api.resourceDefinition"] = [];
                for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                  object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
              }
              return object;
            };
            FileOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileOptions";
            };
            FileOptions.OptimizeMode = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "SPEED"] = 1;
              values[valuesById[2] = "CODE_SIZE"] = 2;
              values[valuesById[3] = "LITE_RUNTIME"] = 3;
              return values;
            }();
            return FileOptions;
          }();
          protobuf.MessageOptions = function() {
            function MessageOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MessageOptions.prototype.messageSetWireFormat = false;
            MessageOptions.prototype.noStandardDescriptorAccessor = false;
            MessageOptions.prototype.deprecated = false;
            MessageOptions.prototype.mapEntry = false;
            MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
            MessageOptions.prototype[".google.api.resource"] = null;
            MessageOptions.create = function create(properties) {
              return new MessageOptions(properties);
            };
            MessageOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).bool(message.messageSetWireFormat);
              if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.noStandardDescriptorAccessor);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.deprecated);
              if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                writer.uint32(
                  /* id 7, wireType 0 =*/
                  56
                ).bool(message.mapEntry);
              if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                writer.uint32(
                  /* id 11, wireType 0 =*/
                  88
                ).bool(message.deprecatedLegacyJsonFieldConflicts);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(
                  /* id 1053, wireType 2 =*/
                  8426
                ).fork()).ldelim();
              return writer;
            };
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MessageOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.messageSetWireFormat = reader.bool();
                    break;
                  }
                  case 2: {
                    message.noStandardDescriptorAccessor = reader.bool();
                    break;
                  }
                  case 3: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 7: {
                    message.mapEntry = reader.bool();
                    break;
                  }
                  case 11: {
                    message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1053: {
                    message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MessageOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat")) {
                if (typeof message.messageSetWireFormat !== "boolean")
                  return "messageSetWireFormat: boolean expected";
              }
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor")) {
                if (typeof message.noStandardDescriptorAccessor !== "boolean")
                  return "noStandardDescriptorAccessor: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry")) {
                if (typeof message.mapEntry !== "boolean")
                  return "mapEntry: boolean expected";
              }
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts")) {
                if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                  return "deprecatedLegacyJsonFieldConflicts: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                if (error)
                  return ".google.api.resource." + error;
              }
              return null;
            };
            MessageOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MessageOptions)
                return object;
              var message = new $root.google.protobuf.MessageOptions();
              if (object.messageSetWireFormat != null)
                message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
              if (object.noStandardDescriptorAccessor != null)
                message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.mapEntry != null)
                message.mapEntry = Boolean(object.mapEntry);
              if (object.deprecatedLegacyJsonFieldConflicts != null)
                message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resource"] != null) {
                if (typeof object[".google.api.resource"] !== "object")
                  throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
              }
              return message;
            };
            MessageOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.messageSetWireFormat = false;
                object.noStandardDescriptorAccessor = false;
                object.deprecated = false;
                object.mapEntry = false;
                object.deprecatedLegacyJsonFieldConflicts = false;
                object[".google.api.resource"] = null;
              }
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                object.messageSetWireFormat = message.messageSetWireFormat;
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                object.mapEntry = message.mapEntry;
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
              return object;
            };
            MessageOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MessageOptions";
            };
            return MessageOptions;
          }();
          protobuf.FieldOptions = function() {
            function FieldOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.fieldBehavior"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldOptions.prototype.ctype = 0;
            FieldOptions.prototype.packed = false;
            FieldOptions.prototype.jstype = 0;
            FieldOptions.prototype.lazy = false;
            FieldOptions.prototype.unverifiedLazy = false;
            FieldOptions.prototype.deprecated = false;
            FieldOptions.prototype.weak = false;
            FieldOptions.prototype.debugRedact = false;
            FieldOptions.prototype.retention = 0;
            FieldOptions.prototype.target = 0;
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
            FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
            FieldOptions.prototype[".google.api.resourceReference"] = null;
            FieldOptions.create = function create(properties) {
              return new FieldOptions(properties);
            };
            FieldOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int32(message.ctype);
              if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.packed);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.deprecated);
              if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).bool(message.lazy);
              if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                writer.uint32(
                  /* id 6, wireType 0 =*/
                  48
                ).int32(message.jstype);
              if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                writer.uint32(
                  /* id 10, wireType 0 =*/
                  80
                ).bool(message.weak);
              if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                writer.uint32(
                  /* id 15, wireType 0 =*/
                  120
                ).bool(message.unverifiedLazy);
              if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                writer.uint32(
                  /* id 16, wireType 0 =*/
                  128
                ).bool(message.debugRedact);
              if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                writer.uint32(
                  /* id 17, wireType 0 =*/
                  136
                ).int32(message.retention);
              if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                writer.uint32(
                  /* id 18, wireType 0 =*/
                  144
                ).int32(message.target);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                writer.uint32(
                  /* id 1052, wireType 2 =*/
                  8418
                ).fork();
                for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                  writer.int32(message[".google.api.fieldBehavior"][i]);
                writer.ldelim();
              }
              if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(
                  /* id 1055, wireType 2 =*/
                  8442
                ).fork()).ldelim();
              return writer;
            };
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.ctype = reader.int32();
                    break;
                  }
                  case 2: {
                    message.packed = reader.bool();
                    break;
                  }
                  case 6: {
                    message.jstype = reader.int32();
                    break;
                  }
                  case 5: {
                    message.lazy = reader.bool();
                    break;
                  }
                  case 15: {
                    message.unverifiedLazy = reader.bool();
                    break;
                  }
                  case 3: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 10: {
                    message.weak = reader.bool();
                    break;
                  }
                  case 16: {
                    message.debugRedact = reader.bool();
                    break;
                  }
                  case 17: {
                    message.retention = reader.int32();
                    break;
                  }
                  case 18: {
                    message.target = reader.int32();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1052: {
                    if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                      message[".google.api.fieldBehavior"] = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message[".google.api.fieldBehavior"].push(reader.int32());
                    } else
                      message[".google.api.fieldBehavior"].push(reader.int32());
                    break;
                  }
                  case 1055: {
                    message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                switch (message.ctype) {
                  default:
                    return "ctype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.packed != null && message.hasOwnProperty("packed")) {
                if (typeof message.packed !== "boolean")
                  return "packed: boolean expected";
              }
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                switch (message.jstype) {
                  default:
                    return "jstype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.lazy != null && message.hasOwnProperty("lazy")) {
                if (typeof message.lazy !== "boolean")
                  return "lazy: boolean expected";
              }
              if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy")) {
                if (typeof message.unverifiedLazy !== "boolean")
                  return "unverifiedLazy: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.weak != null && message.hasOwnProperty("weak")) {
                if (typeof message.weak !== "boolean")
                  return "weak: boolean expected";
              }
              if (message.debugRedact != null && message.hasOwnProperty("debugRedact")) {
                if (typeof message.debugRedact !== "boolean")
                  return "debugRedact: boolean expected";
              }
              if (message.retention != null && message.hasOwnProperty("retention"))
                switch (message.retention) {
                  default:
                    return "retention: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.target != null && message.hasOwnProperty("target"))
                switch (message.target) {
                  default:
                    return "target: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                    break;
                }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                if (!Array.isArray(message[".google.api.fieldBehavior"]))
                  return ".google.api.fieldBehavior: array expected";
                for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                  switch (message[".google.api.fieldBehavior"][i]) {
                    default:
                      return ".google.api.fieldBehavior: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                      break;
                  }
              }
              if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                if (error)
                  return ".google.api.resourceReference." + error;
              }
              return null;
            };
            FieldOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldOptions)
                return object;
              var message = new $root.google.protobuf.FieldOptions();
              switch (object.ctype) {
                default:
                  if (typeof object.ctype === "number") {
                    message.ctype = object.ctype;
                    break;
                  }
                  break;
                case "STRING":
                case 0:
                  message.ctype = 0;
                  break;
                case "CORD":
                case 1:
                  message.ctype = 1;
                  break;
                case "STRING_PIECE":
                case 2:
                  message.ctype = 2;
                  break;
              }
              if (object.packed != null)
                message.packed = Boolean(object.packed);
              switch (object.jstype) {
                default:
                  if (typeof object.jstype === "number") {
                    message.jstype = object.jstype;
                    break;
                  }
                  break;
                case "JS_NORMAL":
                case 0:
                  message.jstype = 0;
                  break;
                case "JS_STRING":
                case 1:
                  message.jstype = 1;
                  break;
                case "JS_NUMBER":
                case 2:
                  message.jstype = 2;
                  break;
              }
              if (object.lazy != null)
                message.lazy = Boolean(object.lazy);
              if (object.unverifiedLazy != null)
                message.unverifiedLazy = Boolean(object.unverifiedLazy);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.weak != null)
                message.weak = Boolean(object.weak);
              if (object.debugRedact != null)
                message.debugRedact = Boolean(object.debugRedact);
              switch (object.retention) {
                default:
                  if (typeof object.retention === "number") {
                    message.retention = object.retention;
                    break;
                  }
                  break;
                case "RETENTION_UNKNOWN":
                case 0:
                  message.retention = 0;
                  break;
                case "RETENTION_RUNTIME":
                case 1:
                  message.retention = 1;
                  break;
                case "RETENTION_SOURCE":
                case 2:
                  message.retention = 2;
                  break;
              }
              switch (object.target) {
                default:
                  if (typeof object.target === "number") {
                    message.target = object.target;
                    break;
                  }
                  break;
                case "TARGET_TYPE_UNKNOWN":
                case 0:
                  message.target = 0;
                  break;
                case "TARGET_TYPE_FILE":
                case 1:
                  message.target = 1;
                  break;
                case "TARGET_TYPE_EXTENSION_RANGE":
                case 2:
                  message.target = 2;
                  break;
                case "TARGET_TYPE_MESSAGE":
                case 3:
                  message.target = 3;
                  break;
                case "TARGET_TYPE_FIELD":
                case 4:
                  message.target = 4;
                  break;
                case "TARGET_TYPE_ONEOF":
                case 5:
                  message.target = 5;
                  break;
                case "TARGET_TYPE_ENUM":
                case 6:
                  message.target = 6;
                  break;
                case "TARGET_TYPE_ENUM_ENTRY":
                case 7:
                  message.target = 7;
                  break;
                case "TARGET_TYPE_SERVICE":
                case 8:
                  message.target = 8;
                  break;
                case "TARGET_TYPE_METHOD":
                case 9:
                  message.target = 9;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.fieldBehavior"]) {
                if (!Array.isArray(object[".google.api.fieldBehavior"]))
                  throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                message[".google.api.fieldBehavior"] = [];
                for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                  switch (object[".google.api.fieldBehavior"][i]) {
                    default:
                      if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                        message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                        break;
                      }
                    case "FIELD_BEHAVIOR_UNSPECIFIED":
                    case 0:
                      message[".google.api.fieldBehavior"][i] = 0;
                      break;
                    case "OPTIONAL":
                    case 1:
                      message[".google.api.fieldBehavior"][i] = 1;
                      break;
                    case "REQUIRED":
                    case 2:
                      message[".google.api.fieldBehavior"][i] = 2;
                      break;
                    case "OUTPUT_ONLY":
                    case 3:
                      message[".google.api.fieldBehavior"][i] = 3;
                      break;
                    case "INPUT_ONLY":
                    case 4:
                      message[".google.api.fieldBehavior"][i] = 4;
                      break;
                    case "IMMUTABLE":
                    case 5:
                      message[".google.api.fieldBehavior"][i] = 5;
                      break;
                    case "UNORDERED_LIST":
                    case 6:
                      message[".google.api.fieldBehavior"][i] = 6;
                      break;
                    case "NON_EMPTY_DEFAULT":
                    case 7:
                      message[".google.api.fieldBehavior"][i] = 7;
                      break;
                  }
              }
              if (object[".google.api.resourceReference"] != null) {
                if (typeof object[".google.api.resourceReference"] !== "object")
                  throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
              }
              return message;
            };
            FieldOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.fieldBehavior"] = [];
              }
              if (options.defaults) {
                object.ctype = options.enums === String ? "STRING" : 0;
                object.packed = false;
                object.deprecated = false;
                object.lazy = false;
                object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                object.weak = false;
                object.unverifiedLazy = false;
                object.debugRedact = false;
                object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                object.target = options.enums === String ? "TARGET_TYPE_UNKNOWN" : 0;
                object[".google.api.resourceReference"] = null;
              }
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === void 0 ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
              if (message.packed != null && message.hasOwnProperty("packed"))
                object.packed = message.packed;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.lazy != null && message.hasOwnProperty("lazy"))
                object.lazy = message.lazy;
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === void 0 ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
              if (message.weak != null && message.hasOwnProperty("weak"))
                object.weak = message.weak;
              if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                object.unverifiedLazy = message.unverifiedLazy;
              if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                object.debugRedact = message.debugRedact;
              if (message.retention != null && message.hasOwnProperty("retention"))
                object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === void 0 ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
              if (message.target != null && message.hasOwnProperty("target"))
                object.target = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.target] === void 0 ? message.target : $root.google.protobuf.FieldOptions.OptionTargetType[message.target] : message.target;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                object[".google.api.fieldBehavior"] = [];
                for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                  object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === void 0 ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
              }
              if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
              return object;
            };
            FieldOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FieldOptions";
            };
            FieldOptions.CType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STRING"] = 0;
              values[valuesById[1] = "CORD"] = 1;
              values[valuesById[2] = "STRING_PIECE"] = 2;
              return values;
            }();
            FieldOptions.JSType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "JS_NORMAL"] = 0;
              values[valuesById[1] = "JS_STRING"] = 1;
              values[valuesById[2] = "JS_NUMBER"] = 2;
              return values;
            }();
            FieldOptions.OptionRetention = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
              values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
              values[valuesById[2] = "RETENTION_SOURCE"] = 2;
              return values;
            }();
            FieldOptions.OptionTargetType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
              values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
              values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
              values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
              values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
              values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
              values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
              values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
              values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
              values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
              return values;
            }();
            return FieldOptions;
          }();
          protobuf.OneofOptions = function() {
            function OneofOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
            OneofOptions.create = function create(properties) {
              return new OneofOptions(properties);
            };
            OneofOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            OneofOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofOptions)
                return object;
              var message = new $root.google.protobuf.OneofOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            OneofOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            OneofOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.OneofOptions";
            };
            return OneofOptions;
          }();
          protobuf.EnumOptions = function() {
            function EnumOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumOptions.prototype.allowAlias = false;
            EnumOptions.prototype.deprecated = false;
            EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumOptions.create = function create(properties) {
              return new EnumOptions(properties);
            };
            EnumOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.allowAlias);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.deprecated);
              if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                writer.uint32(
                  /* id 6, wireType 0 =*/
                  48
                ).bool(message.deprecatedLegacyJsonFieldConflicts);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2: {
                    message.allowAlias = reader.bool();
                    break;
                  }
                  case 3: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 6: {
                    message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias")) {
                if (typeof message.allowAlias !== "boolean")
                  return "allowAlias: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts")) {
                if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                  return "deprecatedLegacyJsonFieldConflicts: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumOptions)
                return object;
              var message = new $root.google.protobuf.EnumOptions();
              if (object.allowAlias != null)
                message.allowAlias = Boolean(object.allowAlias);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.deprecatedLegacyJsonFieldConflicts != null)
                message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.allowAlias = false;
                object.deprecated = false;
                object.deprecatedLegacyJsonFieldConflicts = false;
              }
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                object.allowAlias = message.allowAlias;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumOptions";
            };
            return EnumOptions;
          }();
          protobuf.EnumValueOptions = function() {
            function EnumValueOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueOptions.prototype.deprecated = false;
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumValueOptions.create = function create(properties) {
              return new EnumValueOptions(properties);
            };
            EnumValueOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumValueOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueOptions)
                return object;
              var message = new $root.google.protobuf.EnumValueOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumValueOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults)
                object.deprecated = false;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumValueOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
            };
            return EnumValueOptions;
          }();
          protobuf.ServiceOptions = function() {
            function ServiceOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceOptions.prototype.deprecated = false;
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
            ServiceOptions.prototype[".google.api.defaultHost"] = "";
            ServiceOptions.prototype[".google.api.oauthScopes"] = "";
            ServiceOptions.create = function create(properties) {
              return new ServiceOptions(properties);
            };
            ServiceOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 33, wireType 0 =*/
                  264
                ).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                writer.uint32(
                  /* id 1049, wireType 2 =*/
                  8394
                ).string(message[".google.api.defaultHost"]);
              if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                writer.uint32(
                  /* id 1050, wireType 2 =*/
                  8402
                ).string(message[".google.api.oauthScopes"]);
              return writer;
            };
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1049: {
                    message[".google.api.defaultHost"] = reader.string();
                    break;
                  }
                  case 1050: {
                    message[".google.api.oauthScopes"] = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost")) {
                if (!$util.isString(message[".google.api.defaultHost"]))
                  return ".google.api.defaultHost: string expected";
              }
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes")) {
                if (!$util.isString(message[".google.api.oauthScopes"]))
                  return ".google.api.oauthScopes: string expected";
              }
              return null;
            };
            ServiceOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceOptions)
                return object;
              var message = new $root.google.protobuf.ServiceOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.defaultHost"] != null)
                message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
              if (object[".google.api.oauthScopes"] != null)
                message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
              return message;
            };
            ServiceOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.deprecated = false;
                object[".google.api.defaultHost"] = "";
                object[".google.api.oauthScopes"] = "";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
              return object;
            };
            ServiceOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ServiceOptions";
            };
            return ServiceOptions;
          }();
          protobuf.MethodOptions = function() {
            function MethodOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.methodSignature"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodOptions.prototype.deprecated = false;
            MethodOptions.prototype.idempotencyLevel = 0;
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
            MethodOptions.prototype[".google.api.http"] = null;
            MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
            MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
            MethodOptions.create = function create(properties) {
              return new MethodOptions(properties);
            };
            MethodOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 33, wireType 0 =*/
                  264
                ).bool(message.deprecated);
              if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                writer.uint32(
                  /* id 34, wireType 0 =*/
                  272
                ).int32(message.idempotencyLevel);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(
                  /* id 1049, wireType 2 =*/
                  8394
                ).fork()).ldelim();
              if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  writer.uint32(
                    /* id 1051, wireType 2 =*/
                    8410
                  ).string(message[".google.api.methodSignature"][i]);
              if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(
                  /* id 72295728, wireType 2 =*/
                  578365826
                ).fork()).ldelim();
              return writer;
            };
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 34: {
                    message.idempotencyLevel = reader.int32();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 72295728: {
                    message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                    break;
                  }
                  case 1051: {
                    if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                      message[".google.api.methodSignature"] = [];
                    message[".google.api.methodSignature"].push(reader.string());
                    break;
                  }
                  case 1049: {
                    message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                switch (message.idempotencyLevel) {
                  default:
                    return "idempotencyLevel: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                if (error)
                  return ".google.api.http." + error;
              }
              if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                if (!Array.isArray(message[".google.api.methodSignature"]))
                  return ".google.api.methodSignature: array expected";
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  if (!$util.isString(message[".google.api.methodSignature"][i]))
                    return ".google.api.methodSignature: string[] expected";
              }
              if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                if (error)
                  return ".google.longrunning.operationInfo." + error;
              }
              return null;
            };
            MethodOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodOptions)
                return object;
              var message = new $root.google.protobuf.MethodOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              switch (object.idempotencyLevel) {
                default:
                  if (typeof object.idempotencyLevel === "number") {
                    message.idempotencyLevel = object.idempotencyLevel;
                    break;
                  }
                  break;
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                  message.idempotencyLevel = 0;
                  break;
                case "NO_SIDE_EFFECTS":
                case 1:
                  message.idempotencyLevel = 1;
                  break;
                case "IDEMPOTENT":
                case 2:
                  message.idempotencyLevel = 2;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.http"] != null) {
                if (typeof object[".google.api.http"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
              }
              if (object[".google.api.methodSignature"]) {
                if (!Array.isArray(object[".google.api.methodSignature"]))
                  throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                message[".google.api.methodSignature"] = [];
                for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                  message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
              }
              if (object[".google.longrunning.operationInfo"] != null) {
                if (typeof object[".google.longrunning.operationInfo"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
              }
              return message;
            };
            MethodOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.methodSignature"] = [];
              }
              if (options.defaults) {
                object.deprecated = false;
                object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                object[".google.longrunning.operationInfo"] = null;
                object[".google.api.http"] = null;
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === void 0 ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
              if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                object[".google.api.methodSignature"] = [];
                for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                  object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
              return object;
            };
            MethodOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MethodOptions";
            };
            MethodOptions.IdempotencyLevel = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
              values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
              values[valuesById[2] = "IDEMPOTENT"] = 2;
              return values;
            }();
            return MethodOptions;
          }();
          protobuf.UninterpretedOption = function() {
            function UninterpretedOption(properties) {
              this.name = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UninterpretedOption.prototype.name = $util.emptyArray;
            UninterpretedOption.prototype.identifierValue = "";
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            UninterpretedOption.prototype.doubleValue = 0;
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
            UninterpretedOption.prototype.aggregateValue = "";
            UninterpretedOption.create = function create(properties) {
              return new UninterpretedOption(properties);
            };
            UninterpretedOption.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && message.name.length)
                for (var i = 0; i < message.name.length; ++i)
                  $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.identifierValue);
              if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                writer.uint32(
                  /* id 4, wireType 0 =*/
                  32
                ).uint64(message.positiveIntValue);
              if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).int64(message.negativeIntValue);
              if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                writer.uint32(
                  /* id 6, wireType 1 =*/
                  49
                ).double(message.doubleValue);
              if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).bytes(message.stringValue);
              if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).string(message.aggregateValue);
              return writer;
            };
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            UninterpretedOption.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2: {
                    if (!(message.name && message.name.length))
                      message.name = [];
                    message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    message.identifierValue = reader.string();
                    break;
                  }
                  case 4: {
                    message.positiveIntValue = reader.uint64();
                    break;
                  }
                  case 5: {
                    message.negativeIntValue = reader.int64();
                    break;
                  }
                  case 6: {
                    message.doubleValue = reader.double();
                    break;
                  }
                  case 7: {
                    message.stringValue = reader.bytes();
                    break;
                  }
                  case 8: {
                    message.aggregateValue = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            UninterpretedOption.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!Array.isArray(message.name))
                  return "name: array expected";
                for (var i = 0; i < message.name.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                  if (error)
                    return "name." + error;
                }
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue")) {
                if (!$util.isString(message.identifierValue))
                  return "identifierValue: string expected";
              }
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue")) {
                if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                  return "positiveIntValue: integer|Long expected";
              }
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue")) {
                if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                  return "negativeIntValue: integer|Long expected";
              }
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                if (typeof message.doubleValue !== "number")
                  return "doubleValue: number expected";
              }
              if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                  return "stringValue: buffer expected";
              }
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue")) {
                if (!$util.isString(message.aggregateValue))
                  return "aggregateValue: string expected";
              }
              return null;
            };
            UninterpretedOption.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UninterpretedOption)
                return object;
              var message = new $root.google.protobuf.UninterpretedOption();
              if (object.name) {
                if (!Array.isArray(object.name))
                  throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                message.name = [];
                for (var i = 0; i < object.name.length; ++i) {
                  if (typeof object.name[i] !== "object")
                    throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                  message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                }
              }
              if (object.identifierValue != null)
                message.identifierValue = String(object.identifierValue);
              if (object.positiveIntValue != null) {
                if ($util.Long)
                  (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                else if (typeof object.positiveIntValue === "string")
                  message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                else if (typeof object.positiveIntValue === "number")
                  message.positiveIntValue = object.positiveIntValue;
                else if (typeof object.positiveIntValue === "object")
                  message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
              }
              if (object.negativeIntValue != null) {
                if ($util.Long)
                  (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                else if (typeof object.negativeIntValue === "string")
                  message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                else if (typeof object.negativeIntValue === "number")
                  message.negativeIntValue = object.negativeIntValue;
                else if (typeof object.negativeIntValue === "object")
                  message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
              }
              if (object.doubleValue != null)
                message.doubleValue = Number(object.doubleValue);
              if (object.stringValue != null) {
                if (typeof object.stringValue === "string")
                  $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                else if (object.stringValue.length >= 0)
                  message.stringValue = object.stringValue;
              }
              if (object.aggregateValue != null)
                message.aggregateValue = String(object.aggregateValue);
              return message;
            };
            UninterpretedOption.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.name = [];
              if (options.defaults) {
                object.identifierValue = "";
                if ($util.Long) {
                  var long = new $util.Long(0, 0, true);
                  object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.positiveIntValue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.negativeIntValue = options.longs === String ? "0" : 0;
                object.doubleValue = 0;
                if (options.bytes === String)
                  object.stringValue = "";
                else {
                  object.stringValue = [];
                  if (options.bytes !== Array)
                    object.stringValue = $util.newBuffer(object.stringValue);
                }
                object.aggregateValue = "";
              }
              if (message.name && message.name.length) {
                object.name = [];
                for (var j = 0; j < message.name.length; ++j)
                  object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                object.identifierValue = message.identifierValue;
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                if (typeof message.positiveIntValue === "number")
                  object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                else
                  object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                if (typeof message.negativeIntValue === "number")
                  object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                else
                  object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
              if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                object.aggregateValue = message.aggregateValue;
              return object;
            };
            UninterpretedOption.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
            };
            UninterpretedOption.NamePart = function() {
              function NamePart(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              NamePart.prototype.namePart = "";
              NamePart.prototype.isExtension = false;
              NamePart.create = function create(properties) {
                return new NamePart(properties);
              };
              NamePart.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.namePart);
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.isExtension);
                return writer;
              };
              NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              NamePart.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.namePart = reader.string();
                      break;
                    }
                    case 2: {
                      message.isExtension = reader.bool();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                if (!message.hasOwnProperty("namePart"))
                  throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                if (!message.hasOwnProperty("isExtension"))
                  throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                return message;
              };
              NamePart.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              NamePart.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (!$util.isString(message.namePart))
                  return "namePart: string expected";
                if (typeof message.isExtension !== "boolean")
                  return "isExtension: boolean expected";
                return null;
              };
              NamePart.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                  return object;
                var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                if (object.namePart != null)
                  message.namePart = String(object.namePart);
                if (object.isExtension != null)
                  message.isExtension = Boolean(object.isExtension);
                return message;
              };
              NamePart.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.namePart = "";
                  object.isExtension = false;
                }
                if (message.namePart != null && message.hasOwnProperty("namePart"))
                  object.namePart = message.namePart;
                if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                  object.isExtension = message.isExtension;
                return object;
              };
              NamePart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
              };
              return NamePart;
            }();
            return UninterpretedOption;
          }();
          protobuf.SourceCodeInfo = function() {
            function SourceCodeInfo(properties) {
              this.location = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            SourceCodeInfo.prototype.location = $util.emptyArray;
            SourceCodeInfo.create = function create(properties) {
              return new SourceCodeInfo(properties);
            };
            SourceCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.location != null && message.location.length)
                for (var i = 0; i < message.location.length; ++i)
                  $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              return writer;
            };
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            SourceCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.location && message.location.length))
                      message.location = [];
                    message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            SourceCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                if (!Array.isArray(message.location))
                  return "location: array expected";
                for (var i = 0; i < message.location.length; ++i) {
                  var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                  if (error)
                    return "location." + error;
                }
              }
              return null;
            };
            SourceCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.SourceCodeInfo)
                return object;
              var message = new $root.google.protobuf.SourceCodeInfo();
              if (object.location) {
                if (!Array.isArray(object.location))
                  throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                message.location = [];
                for (var i = 0; i < object.location.length; ++i) {
                  if (typeof object.location[i] !== "object")
                    throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                  message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                }
              }
              return message;
            };
            SourceCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.location = [];
              if (message.location && message.location.length) {
                object.location = [];
                for (var j = 0; j < message.location.length; ++j)
                  object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
              }
              return object;
            };
            SourceCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
            };
            SourceCodeInfo.Location = function() {
              function Location(properties) {
                this.path = [];
                this.span = [];
                this.leadingDetachedComments = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Location.prototype.path = $util.emptyArray;
              Location.prototype.span = $util.emptyArray;
              Location.prototype.leadingComments = "";
              Location.prototype.trailingComments = "";
              Location.prototype.leadingDetachedComments = $util.emptyArray;
              Location.create = function create(properties) {
                return new Location(properties);
              };
              Location.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.span != null && message.span.length) {
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork();
                  for (var i = 0; i < message.span.length; ++i)
                    writer.int32(message.span[i]);
                  writer.ldelim();
                }
                if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                  writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).string(message.leadingComments);
                if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                  writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).string(message.trailingComments);
                if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).string(message.leadingDetachedComments[i]);
                return writer;
              };
              Location.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Location.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    }
                    case 2: {
                      if (!(message.span && message.span.length))
                        message.span = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.span.push(reader.int32());
                      } else
                        message.span.push(reader.int32());
                      break;
                    }
                    case 3: {
                      message.leadingComments = reader.string();
                      break;
                    }
                    case 4: {
                      message.trailingComments = reader.string();
                      break;
                    }
                    case 6: {
                      if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                        message.leadingDetachedComments = [];
                      message.leadingDetachedComments.push(reader.string());
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Location.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Location.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.span != null && message.hasOwnProperty("span")) {
                  if (!Array.isArray(message.span))
                    return "span: array expected";
                  for (var i = 0; i < message.span.length; ++i)
                    if (!$util.isInteger(message.span[i]))
                      return "span: integer[] expected";
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments")) {
                  if (!$util.isString(message.leadingComments))
                    return "leadingComments: string expected";
                }
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments")) {
                  if (!$util.isString(message.trailingComments))
                    return "trailingComments: string expected";
                }
                if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                  if (!Array.isArray(message.leadingDetachedComments))
                    return "leadingDetachedComments: array expected";
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    if (!$util.isString(message.leadingDetachedComments[i]))
                      return "leadingDetachedComments: string[] expected";
                }
                return null;
              };
              Location.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                  return object;
                var message = new $root.google.protobuf.SourceCodeInfo.Location();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.span) {
                  if (!Array.isArray(object.span))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                  message.span = [];
                  for (var i = 0; i < object.span.length; ++i)
                    message.span[i] = object.span[i] | 0;
                }
                if (object.leadingComments != null)
                  message.leadingComments = String(object.leadingComments);
                if (object.trailingComments != null)
                  message.trailingComments = String(object.trailingComments);
                if (object.leadingDetachedComments) {
                  if (!Array.isArray(object.leadingDetachedComments))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                  message.leadingDetachedComments = [];
                  for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                    message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                }
                return message;
              };
              Location.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.path = [];
                  object.span = [];
                  object.leadingDetachedComments = [];
                }
                if (options.defaults) {
                  object.leadingComments = "";
                  object.trailingComments = "";
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.span && message.span.length) {
                  object.span = [];
                  for (var j = 0; j < message.span.length; ++j)
                    object.span[j] = message.span[j];
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                  object.leadingComments = message.leadingComments;
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                  object.trailingComments = message.trailingComments;
                if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                  object.leadingDetachedComments = [];
                  for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                    object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                }
                return object;
              };
              Location.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
              };
              return Location;
            }();
            return SourceCodeInfo;
          }();
          protobuf.GeneratedCodeInfo = function() {
            function GeneratedCodeInfo(properties) {
              this.annotation = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
            GeneratedCodeInfo.create = function create(properties) {
              return new GeneratedCodeInfo(properties);
            };
            GeneratedCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.annotation != null && message.annotation.length)
                for (var i = 0; i < message.annotation.length; ++i)
                  $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              return writer;
            };
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GeneratedCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.annotation && message.annotation.length))
                      message.annotation = [];
                    message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GeneratedCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.annotation != null && message.hasOwnProperty("annotation")) {
                if (!Array.isArray(message.annotation))
                  return "annotation: array expected";
                for (var i = 0; i < message.annotation.length; ++i) {
                  var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                  if (error)
                    return "annotation." + error;
                }
              }
              return null;
            };
            GeneratedCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                return object;
              var message = new $root.google.protobuf.GeneratedCodeInfo();
              if (object.annotation) {
                if (!Array.isArray(object.annotation))
                  throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                message.annotation = [];
                for (var i = 0; i < object.annotation.length; ++i) {
                  if (typeof object.annotation[i] !== "object")
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                  message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                }
              }
              return message;
            };
            GeneratedCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.annotation = [];
              if (message.annotation && message.annotation.length) {
                object.annotation = [];
                for (var j = 0; j < message.annotation.length; ++j)
                  object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
              }
              return object;
            };
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
            };
            GeneratedCodeInfo.Annotation = function() {
              function Annotation(properties) {
                this.path = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Annotation.prototype.path = $util.emptyArray;
              Annotation.prototype.sourceFile = "";
              Annotation.prototype.begin = 0;
              Annotation.prototype.end = 0;
              Annotation.prototype.semantic = 0;
              Annotation.create = function create(properties) {
                return new Annotation(properties);
              };
              Annotation.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).string(message.sourceFile);
                if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                  writer.uint32(
                    /* id 3, wireType 0 =*/
                    24
                  ).int32(message.begin);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 4, wireType 0 =*/
                    32
                  ).int32(message.end);
                if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                  writer.uint32(
                    /* id 5, wireType 0 =*/
                    40
                  ).int32(message.semantic);
                return writer;
              };
              Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Annotation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    }
                    case 2: {
                      message.sourceFile = reader.string();
                      break;
                    }
                    case 3: {
                      message.begin = reader.int32();
                      break;
                    }
                    case 4: {
                      message.end = reader.int32();
                      break;
                    }
                    case 5: {
                      message.semantic = reader.int32();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Annotation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Annotation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile")) {
                  if (!$util.isString(message.sourceFile))
                    return "sourceFile: string expected";
                }
                if (message.begin != null && message.hasOwnProperty("begin")) {
                  if (!$util.isInteger(message.begin))
                    return "begin: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                if (message.semantic != null && message.hasOwnProperty("semantic"))
                  switch (message.semantic) {
                    default:
                      return "semantic: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                      break;
                  }
                return null;
              };
              Annotation.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                  return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.sourceFile != null)
                  message.sourceFile = String(object.sourceFile);
                if (object.begin != null)
                  message.begin = object.begin | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                switch (object.semantic) {
                  default:
                    if (typeof object.semantic === "number") {
                      message.semantic = object.semantic;
                      break;
                    }
                    break;
                  case "NONE":
                  case 0:
                    message.semantic = 0;
                    break;
                  case "SET":
                  case 1:
                    message.semantic = 1;
                    break;
                  case "ALIAS":
                  case 2:
                    message.semantic = 2;
                    break;
                }
                return message;
              };
              Annotation.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.path = [];
                if (options.defaults) {
                  object.sourceFile = "";
                  object.begin = 0;
                  object.end = 0;
                  object.semantic = options.enums === String ? "NONE" : 0;
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                  object.sourceFile = message.sourceFile;
                if (message.begin != null && message.hasOwnProperty("begin"))
                  object.begin = message.begin;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.semantic != null && message.hasOwnProperty("semantic"))
                  object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === void 0 ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                return object;
              };
              Annotation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
              };
              Annotation.Semantic = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[1] = "SET"] = 1;
                values[valuesById[2] = "ALIAS"] = 2;
                return values;
              }();
              return Annotation;
            }();
            return GeneratedCodeInfo;
          }();
          protobuf.Duration = function() {
            function Duration(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Duration.prototype.nanos = 0;
            Duration.create = function create(properties) {
              return new Duration(properties);
            };
            Duration.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int64(message.seconds);
              if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.nanos);
              return writer;
            };
            Duration.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Duration.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.seconds = reader.int64();
                    break;
                  }
                  case 2: {
                    message.nanos = reader.int32();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Duration.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Duration.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.seconds != null && message.hasOwnProperty("seconds")) {
                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                  return "seconds: integer|Long expected";
              }
              if (message.nanos != null && message.hasOwnProperty("nanos")) {
                if (!$util.isInteger(message.nanos))
                  return "nanos: integer expected";
              }
              return null;
            };
            Duration.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Duration)
                return object;
              var message = new $root.google.protobuf.Duration();
              if (object.seconds != null) {
                if ($util.Long)
                  (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                else if (typeof object.seconds === "string")
                  message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                  message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                  message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
              }
              if (object.nanos != null)
                message.nanos = object.nanos | 0;
              return message;
            };
            Duration.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.seconds = options.longs === String ? "0" : 0;
                object.nanos = 0;
              }
              if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                  object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                  object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
              if (message.nanos != null && message.hasOwnProperty("nanos"))
                object.nanos = message.nanos;
              return object;
            };
            Duration.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Duration";
            };
            return Duration;
          }();
          protobuf.Any = function() {
            function Any(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Any.prototype.type_url = "";
            Any.prototype.value = $util.newBuffer([]);
            Any.create = function create(properties) {
              return new Any(properties);
            };
            Any.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.type_url);
              if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).bytes(message.value);
              return writer;
            };
            Any.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Any.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.type_url = reader.string();
                    break;
                  }
                  case 2: {
                    message.value = reader.bytes();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Any.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Any.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type_url != null && message.hasOwnProperty("type_url")) {
                if (!$util.isString(message.type_url))
                  return "type_url: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                  return "value: buffer expected";
              }
              return null;
            };
            Any.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Any)
                return object;
              var message = new $root.google.protobuf.Any();
              if (object.type_url != null)
                message.type_url = String(object.type_url);
              if (object.value != null) {
                if (typeof object.value === "string")
                  $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length >= 0)
                  message.value = object.value;
              }
              return message;
            };
            Any.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type_url = "";
                if (options.bytes === String)
                  object.value = "";
                else {
                  object.value = [];
                  if (options.bytes !== Array)
                    object.value = $util.newBuffer(object.value);
                }
              }
              if (message.type_url != null && message.hasOwnProperty("type_url"))
                object.type_url = message.type_url;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
              return object;
            };
            Any.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Any";
            };
            return Any;
          }();
          protobuf.Empty = function() {
            function Empty(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Empty.create = function create(properties) {
              return new Empty(properties);
            };
            Empty.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              return writer;
            };
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Empty.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Empty.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Empty.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              return null;
            };
            Empty.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Empty)
                return object;
              return new $root.google.protobuf.Empty();
            };
            Empty.toObject = function toObject() {
              return {};
            };
            Empty.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Empty";
            };
            return Empty;
          }();
          protobuf.Timestamp = function() {
            function Timestamp(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Timestamp.prototype.nanos = 0;
            Timestamp.create = function create(properties) {
              return new Timestamp(properties);
            };
            Timestamp.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int64(message.seconds);
              if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.nanos);
              return writer;
            };
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Timestamp.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.seconds = reader.int64();
                    break;
                  }
                  case 2: {
                    message.nanos = reader.int32();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Timestamp.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.seconds != null && message.hasOwnProperty("seconds")) {
                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                  return "seconds: integer|Long expected";
              }
              if (message.nanos != null && message.hasOwnProperty("nanos")) {
                if (!$util.isInteger(message.nanos))
                  return "nanos: integer expected";
              }
              return null;
            };
            Timestamp.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Timestamp)
                return object;
              var message = new $root.google.protobuf.Timestamp();
              if (object.seconds != null) {
                if ($util.Long)
                  (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                else if (typeof object.seconds === "string")
                  message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                  message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                  message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
              }
              if (object.nanos != null)
                message.nanos = object.nanos | 0;
              return message;
            };
            Timestamp.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.seconds = options.longs === String ? "0" : 0;
                object.nanos = 0;
              }
              if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                  object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                  object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
              if (message.nanos != null && message.hasOwnProperty("nanos"))
                object.nanos = message.nanos;
              return object;
            };
            Timestamp.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Timestamp";
            };
            return Timestamp;
          }();
          return protobuf;
        }();
        google.longrunning = function() {
          var longrunning = {};
          longrunning.Operations = function() {
            function Operations(rpcImpl, requestDelimited, responseDelimited) {
              $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }
            (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
            Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
              return new this(rpcImpl, requestDelimited, responseDelimited);
            };
            Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
              return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
            }, "name", { value: "ListOperations" });
            Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
              return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "GetOperation" });
            Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
              return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "DeleteOperation" });
            Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
              return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "CancelOperation" });
            Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
              return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "WaitOperation" });
            return Operations;
          }();
          longrunning.Operation = function() {
            function Operation(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Operation.prototype.name = "";
            Operation.prototype.metadata = null;
            Operation.prototype.done = false;
            Operation.prototype.error = null;
            Operation.prototype.response = null;
            var $oneOfFields;
            Object.defineProperty(Operation.prototype, "result", {
              get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            Operation.create = function create(properties) {
              return new Operation(properties);
            };
            Operation.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                $root.google.protobuf.Any.encode(message.metadata, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.done);
              if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                $root.google.rpc.Status.encode(message.error, writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).fork()).ldelim();
              if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                $root.google.protobuf.Any.encode(message.response, writer.uint32(
                  /* id 5, wireType 2 =*/
                  42
                ).fork()).ldelim();
              return writer;
            };
            Operation.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Operation.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                  }
                  case 3: {
                    message.done = reader.bool();
                    break;
                  }
                  case 4: {
                    message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                    break;
                  }
                  case 5: {
                    message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Operation.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Operation.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.metadata != null && message.hasOwnProperty("metadata")) {
                var error = $root.google.protobuf.Any.verify(message.metadata);
                if (error)
                  return "metadata." + error;
              }
              if (message.done != null && message.hasOwnProperty("done")) {
                if (typeof message.done !== "boolean")
                  return "done: boolean expected";
              }
              if (message.error != null && message.hasOwnProperty("error")) {
                properties.result = 1;
                {
                  var error = $root.google.rpc.Status.verify(message.error);
                  if (error)
                    return "error." + error;
                }
              }
              if (message.response != null && message.hasOwnProperty("response")) {
                if (properties.result === 1)
                  return "result: multiple values";
                properties.result = 1;
                {
                  var error = $root.google.protobuf.Any.verify(message.response);
                  if (error)
                    return "response." + error;
                }
              }
              return null;
            };
            Operation.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.Operation)
                return object;
              var message = new $root.google.longrunning.Operation();
              if (object.name != null)
                message.name = String(object.name);
              if (object.metadata != null) {
                if (typeof object.metadata !== "object")
                  throw TypeError(".google.longrunning.Operation.metadata: object expected");
                message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
              }
              if (object.done != null)
                message.done = Boolean(object.done);
              if (object.error != null) {
                if (typeof object.error !== "object")
                  throw TypeError(".google.longrunning.Operation.error: object expected");
                message.error = $root.google.rpc.Status.fromObject(object.error);
              }
              if (object.response != null) {
                if (typeof object.response !== "object")
                  throw TypeError(".google.longrunning.Operation.response: object expected");
                message.response = $root.google.protobuf.Any.fromObject(object.response);
              }
              return message;
            };
            Operation.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.metadata = null;
                object.done = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.metadata != null && message.hasOwnProperty("metadata"))
                object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
              if (message.done != null && message.hasOwnProperty("done"))
                object.done = message.done;
              if (message.error != null && message.hasOwnProperty("error")) {
                object.error = $root.google.rpc.Status.toObject(message.error, options);
                if (options.oneofs)
                  object.result = "error";
              }
              if (message.response != null && message.hasOwnProperty("response")) {
                object.response = $root.google.protobuf.Any.toObject(message.response, options);
                if (options.oneofs)
                  object.result = "response";
              }
              return object;
            };
            Operation.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.Operation";
            };
            return Operation;
          }();
          longrunning.GetOperationRequest = function() {
            function GetOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GetOperationRequest.prototype.name = "";
            GetOperationRequest.create = function create(properties) {
              return new GetOperationRequest(properties);
            };
            GetOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              return writer;
            };
            GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GetOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GetOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            GetOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.GetOperationRequest)
                return object;
              var message = new $root.google.longrunning.GetOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            GetOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            GetOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GetOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.GetOperationRequest";
            };
            return GetOperationRequest;
          }();
          longrunning.ListOperationsRequest = function() {
            function ListOperationsRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsRequest.prototype.name = "";
            ListOperationsRequest.prototype.filter = "";
            ListOperationsRequest.prototype.pageSize = 0;
            ListOperationsRequest.prototype.pageToken = "";
            ListOperationsRequest.create = function create(properties) {
              return new ListOperationsRequest(properties);
            };
            ListOperationsRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.filter);
              if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.pageSize);
              if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.pageToken);
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).string(message.name);
              return writer;
            };
            ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ListOperationsRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 4: {
                    message.name = reader.string();
                    break;
                  }
                  case 1: {
                    message.filter = reader.string();
                    break;
                  }
                  case 2: {
                    message.pageSize = reader.int32();
                    break;
                  }
                  case 3: {
                    message.pageToken = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ListOperationsRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.filter != null && message.hasOwnProperty("filter")) {
                if (!$util.isString(message.filter))
                  return "filter: string expected";
              }
              if (message.pageSize != null && message.hasOwnProperty("pageSize")) {
                if (!$util.isInteger(message.pageSize))
                  return "pageSize: integer expected";
              }
              if (message.pageToken != null && message.hasOwnProperty("pageToken")) {
                if (!$util.isString(message.pageToken))
                  return "pageToken: string expected";
              }
              return null;
            };
            ListOperationsRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsRequest)
                return object;
              var message = new $root.google.longrunning.ListOperationsRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.filter != null)
                message.filter = String(object.filter);
              if (object.pageSize != null)
                message.pageSize = object.pageSize | 0;
              if (object.pageToken != null)
                message.pageToken = String(object.pageToken);
              return message;
            };
            ListOperationsRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.filter = "";
                object.pageSize = 0;
                object.pageToken = "";
                object.name = "";
              }
              if (message.filter != null && message.hasOwnProperty("filter"))
                object.filter = message.filter;
              if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                object.pageSize = message.pageSize;
              if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                object.pageToken = message.pageToken;
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            ListOperationsRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ListOperationsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.ListOperationsRequest";
            };
            return ListOperationsRequest;
          }();
          longrunning.ListOperationsResponse = function() {
            function ListOperationsResponse(properties) {
              this.operations = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsResponse.prototype.operations = $util.emptyArray;
            ListOperationsResponse.prototype.nextPageToken = "";
            ListOperationsResponse.create = function create(properties) {
              return new ListOperationsResponse(properties);
            };
            ListOperationsResponse.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.operations != null && message.operations.length)
                for (var i = 0; i < message.operations.length; ++i)
                  $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.nextPageToken);
              return writer;
            };
            ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ListOperationsResponse.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.operations && message.operations.length))
                      message.operations = [];
                    message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                    break;
                  }
                  case 2: {
                    message.nextPageToken = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ListOperationsResponse.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.operations != null && message.hasOwnProperty("operations")) {
                if (!Array.isArray(message.operations))
                  return "operations: array expected";
                for (var i = 0; i < message.operations.length; ++i) {
                  var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                  if (error)
                    return "operations." + error;
                }
              }
              if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken")) {
                if (!$util.isString(message.nextPageToken))
                  return "nextPageToken: string expected";
              }
              return null;
            };
            ListOperationsResponse.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsResponse)
                return object;
              var message = new $root.google.longrunning.ListOperationsResponse();
              if (object.operations) {
                if (!Array.isArray(object.operations))
                  throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                message.operations = [];
                for (var i = 0; i < object.operations.length; ++i) {
                  if (typeof object.operations[i] !== "object")
                    throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                  message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                }
              }
              if (object.nextPageToken != null)
                message.nextPageToken = String(object.nextPageToken);
              return message;
            };
            ListOperationsResponse.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.operations = [];
              if (options.defaults)
                object.nextPageToken = "";
              if (message.operations && message.operations.length) {
                object.operations = [];
                for (var j = 0; j < message.operations.length; ++j)
                  object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
              }
              if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                object.nextPageToken = message.nextPageToken;
              return object;
            };
            ListOperationsResponse.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ListOperationsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.ListOperationsResponse";
            };
            return ListOperationsResponse;
          }();
          longrunning.CancelOperationRequest = function() {
            function CancelOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CancelOperationRequest.prototype.name = "";
            CancelOperationRequest.create = function create(properties) {
              return new CancelOperationRequest(properties);
            };
            CancelOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              return writer;
            };
            CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CancelOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CancelOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            CancelOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.CancelOperationRequest)
                return object;
              var message = new $root.google.longrunning.CancelOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            CancelOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            CancelOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CancelOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.CancelOperationRequest";
            };
            return CancelOperationRequest;
          }();
          longrunning.DeleteOperationRequest = function() {
            function DeleteOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DeleteOperationRequest.prototype.name = "";
            DeleteOperationRequest.create = function create(properties) {
              return new DeleteOperationRequest(properties);
            };
            DeleteOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              return writer;
            };
            DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DeleteOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DeleteOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            DeleteOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                return object;
              var message = new $root.google.longrunning.DeleteOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            DeleteOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            DeleteOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DeleteOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.DeleteOperationRequest";
            };
            return DeleteOperationRequest;
          }();
          longrunning.WaitOperationRequest = function() {
            function WaitOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            WaitOperationRequest.prototype.name = "";
            WaitOperationRequest.prototype.timeout = null;
            WaitOperationRequest.create = function create(properties) {
              return new WaitOperationRequest(properties);
            };
            WaitOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              return writer;
            };
            WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            WaitOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            WaitOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.timeout != null && message.hasOwnProperty("timeout")) {
                var error = $root.google.protobuf.Duration.verify(message.timeout);
                if (error)
                  return "timeout." + error;
              }
              return null;
            };
            WaitOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.WaitOperationRequest)
                return object;
              var message = new $root.google.longrunning.WaitOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.timeout != null) {
                if (typeof object.timeout !== "object")
                  throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
              }
              return message;
            };
            WaitOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.timeout = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.timeout != null && message.hasOwnProperty("timeout"))
                object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
              return object;
            };
            WaitOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            WaitOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.WaitOperationRequest";
            };
            return WaitOperationRequest;
          }();
          longrunning.OperationInfo = function() {
            function OperationInfo(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OperationInfo.prototype.responseType = "";
            OperationInfo.prototype.metadataType = "";
            OperationInfo.create = function create(properties) {
              return new OperationInfo(properties);
            };
            OperationInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.responseType);
              if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.metadataType);
              return writer;
            };
            OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OperationInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.responseType = reader.string();
                    break;
                  }
                  case 2: {
                    message.metadataType = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OperationInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OperationInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.responseType != null && message.hasOwnProperty("responseType")) {
                if (!$util.isString(message.responseType))
                  return "responseType: string expected";
              }
              if (message.metadataType != null && message.hasOwnProperty("metadataType")) {
                if (!$util.isString(message.metadataType))
                  return "metadataType: string expected";
              }
              return null;
            };
            OperationInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.OperationInfo)
                return object;
              var message = new $root.google.longrunning.OperationInfo();
              if (object.responseType != null)
                message.responseType = String(object.responseType);
              if (object.metadataType != null)
                message.metadataType = String(object.metadataType);
              return message;
            };
            OperationInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.responseType = "";
                object.metadataType = "";
              }
              if (message.responseType != null && message.hasOwnProperty("responseType"))
                object.responseType = message.responseType;
              if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                object.metadataType = message.metadataType;
              return object;
            };
            OperationInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OperationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.OperationInfo";
            };
            return OperationInfo;
          }();
          return longrunning;
        }();
        google.rpc = function() {
          var rpc = {};
          rpc.Status = function() {
            function Status(properties) {
              this.details = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Status.prototype.code = 0;
            Status.prototype.message = "";
            Status.prototype.details = $util.emptyArray;
            Status.create = function create(properties) {
              return new Status(properties);
            };
            Status.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int32(message.code);
              if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.message);
              if (message.details != null && message.details.length)
                for (var i = 0; i < message.details.length; ++i)
                  $root.google.protobuf.Any.encode(message.details[i], writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
              return writer;
            };
            Status.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Status.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.code = reader.int32();
                    break;
                  }
                  case 2: {
                    message.message = reader.string();
                    break;
                  }
                  case 3: {
                    if (!(message.details && message.details.length))
                      message.details = [];
                    message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Status.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Status.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.code != null && message.hasOwnProperty("code")) {
                if (!$util.isInteger(message.code))
                  return "code: integer expected";
              }
              if (message.message != null && message.hasOwnProperty("message")) {
                if (!$util.isString(message.message))
                  return "message: string expected";
              }
              if (message.details != null && message.hasOwnProperty("details")) {
                if (!Array.isArray(message.details))
                  return "details: array expected";
                for (var i = 0; i < message.details.length; ++i) {
                  var error = $root.google.protobuf.Any.verify(message.details[i]);
                  if (error)
                    return "details." + error;
                }
              }
              return null;
            };
            Status.fromObject = function fromObject(object) {
              if (object instanceof $root.google.rpc.Status)
                return object;
              var message = new $root.google.rpc.Status();
              if (object.code != null)
                message.code = object.code | 0;
              if (object.message != null)
                message.message = String(object.message);
              if (object.details) {
                if (!Array.isArray(object.details))
                  throw TypeError(".google.rpc.Status.details: array expected");
                message.details = [];
                for (var i = 0; i < object.details.length; ++i) {
                  if (typeof object.details[i] !== "object")
                    throw TypeError(".google.rpc.Status.details: object expected");
                  message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                }
              }
              return message;
            };
            Status.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.details = [];
              if (options.defaults) {
                object.code = 0;
                object.message = "";
              }
              if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
              if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
              if (message.details && message.details.length) {
                object.details = [];
                for (var j = 0; j < message.details.length; ++j)
                  object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
              }
              return object;
            };
            Status.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.rpc.Status";
            };
            return Status;
          }();
          return rpc;
        }();
        return google;
      }();
      return $root;
    });
  }
});

// node_modules/@google-cloud/translate/build/src/index.js
var require_src13 = __commonJS({
  "node_modules/@google-cloud/translate/build/src/index.js"(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.protos = exports2.TranslationServiceClient = exports2.v3beta1 = exports2.v3 = exports2.v2 = void 0;
    var v2 = require_v2();
    exports2.v2 = v2;
    var v3 = require_v32();
    exports2.v3 = v3;
    var v3beta1 = require_v3beta1();
    exports2.v3beta1 = v3beta1;
    var TranslationServiceClient = v3.TranslationServiceClient;
    exports2.TranslationServiceClient = TranslationServiceClient;
    exports2.default = { v2, v3, v3beta1, TranslationServiceClient };
    var protos = require_protos2();
    exports2.protos = protos;
  }
});
export default require_src13();
/*! Bundled license information:

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

teeny-request/build/src/agents.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

teeny-request/build/src/TeenyStatistics.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

teeny-request/build/src/index.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *      http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@google-cloud/common/build/src/service.js:
  (*!
   * @module common/service
   *)

@google-cloud/common/build/src/util.js:
  (*!
   * @module common/util
   *)

@google-cloud/common/build/src/service-object.js:
  (*!
   * @module common/service-object
   *)

@google-cloud/common/build/src/operation.js:
  (*!
   * @module common/operation
   *)

@google-cloud/translate/build/src/v2/index.js:
  (*! Developer Documentation
   *
   * All async methods (except for streams) will return a Promise in the event
   * that a callback is omitted.
   *)
*/
//# sourceMappingURL=@google-cloud_translate.js.map
