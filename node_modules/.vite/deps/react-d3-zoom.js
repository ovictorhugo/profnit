import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-TFWDKVI3.js";

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/commonProps.js
var require_commonProps = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/commonProps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {
      width: 960,
      height: 500,
      margins: { top: 80, right: 100, bottom: 80, left: 100 }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/ascending.js
function ascending_default(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}
var init_ascending = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/ascending.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/bisector.js
function bisector_default(compare) {
  if (compare.length === 1)
    compare = ascendingComparator(compare);
  return {
    left: function(a2, x2, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x2) < 0)
          lo = mid + 1;
        else
          hi = mid;
      }
      return lo;
    },
    right: function(a2, x2, lo, hi) {
      if (lo == null)
        lo = 0;
      if (hi == null)
        hi = a2.length;
      while (lo < hi) {
        var mid = lo + hi >>> 1;
        if (compare(a2[mid], x2) > 0)
          hi = mid;
        else
          lo = mid + 1;
      }
      return lo;
    }
  };
}
function ascendingComparator(f) {
  return function(d, x2) {
    return ascending_default(f(d), x2);
  };
}
var init_bisector = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/bisector.js"() {
    init_ascending();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/bisect.js
var ascendingBisect, bisectRight, bisectLeft, bisect_default;
var init_bisect = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/bisect.js"() {
    init_ascending();
    init_bisector();
    ascendingBisect = bisector_default(ascending_default);
    bisectRight = ascendingBisect.right;
    bisectLeft = ascendingBisect.left;
    bisect_default = bisectRight;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/descending.js
function descending_default(a2, b) {
  return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}
var init_descending = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/descending.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/number.js
function number_default(x2) {
  return x2 === null ? NaN : +x2;
}
var init_number = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/number.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/variance.js
function variance_default(array2, f) {
  var n = array2.length, m = 0, a2, d, s2 = 0, i = -1, j = 0;
  if (f == null) {
    while (++i < n) {
      if (!isNaN(a2 = number_default(array2[i]))) {
        d = a2 - m;
        m += d / ++j;
        s2 += d * (a2 - m);
      }
    }
  } else {
    while (++i < n) {
      if (!isNaN(a2 = number_default(f(array2[i], i, array2)))) {
        d = a2 - m;
        m += d / ++j;
        s2 += d * (a2 - m);
      }
    }
  }
  if (j > 1)
    return s2 / (j - 1);
}
var init_variance = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/variance.js"() {
    init_number();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/deviation.js
function deviation_default(array2, f) {
  var v = variance_default(array2, f);
  return v ? Math.sqrt(v) : v;
}
var init_deviation = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/deviation.js"() {
    init_variance();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/extent.js
function extent_default(array2, f) {
  var i = -1, n = array2.length, a2, b, c2;
  if (f == null) {
    while (++i < n)
      if ((b = array2[i]) != null && b >= b) {
        a2 = c2 = b;
        break;
      }
    while (++i < n)
      if ((b = array2[i]) != null) {
        if (a2 > b)
          a2 = b;
        if (c2 < b)
          c2 = b;
      }
  } else {
    while (++i < n)
      if ((b = f(array2[i], i, array2)) != null && b >= b) {
        a2 = c2 = b;
        break;
      }
    while (++i < n)
      if ((b = f(array2[i], i, array2)) != null) {
        if (a2 > b)
          a2 = b;
        if (c2 < b)
          c2 = b;
      }
  }
  return [a2, c2];
}
var init_extent = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/extent.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/constant.js
function constant_default(x2) {
  return function() {
    return x2;
  };
}
var init_constant = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/constant.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/identity.js
function identity_default(x2) {
  return x2;
}
var init_identity = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/identity.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/range.js
function range_default(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
  while (++i < n) {
    range[i] = start + i * step;
  }
  return range;
}
var init_range = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/range.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/ticks.js
function ticks_default(start, stop, count) {
  var step = tickStep(start, stop, count);
  return range_default(
    Math.ceil(start / step) * step,
    Math.floor(stop / step) * step + step / 2,
    // inclusive
    step
  );
}
function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start ? -step1 : step1;
}
var e10, e5, e2;
var init_ticks = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/ticks.js"() {
    init_range();
    e10 = Math.sqrt(50);
    e5 = Math.sqrt(10);
    e2 = Math.sqrt(2);
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/threshold/sturges.js
function sturges_default(values) {
  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
}
var init_sturges = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/threshold/sturges.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/histogram.js
function number(x2) {
  return +x2;
}
function histogram_default() {
  var value = identity_default, domain = extent_default, threshold2 = sturges_default;
  function histogram(data) {
    var i, n = data.length, x2, values = new Array(n);
    for (i = 0; i < n; ++i) {
      values[i] = +value(data[i], i, data);
    }
    var xz = domain(values), x0 = +xz[0], x1 = +xz[1], tz = threshold2(values, x0, x1);
    if (!Array.isArray(tz))
      tz = ticks_default(x0, x1, +tz);
    var m = tz.length;
    for (i = 0; i < m; ++i)
      tz[i] = +tz[i];
    while (tz[0] <= x0)
      tz.shift(), --m;
    while (tz[m - 1] >= x1)
      tz.pop(), --m;
    var bins = new Array(m + 1), bin;
    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    }
    for (i = 0; i < n; ++i) {
      x2 = values[i];
      if (x0 <= x2 && x2 <= x1) {
        bins[bisect_default(tz, x2, 0, m)].push(data[i]);
      }
    }
    return bins;
  }
  histogram.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default(+_), histogram) : value;
  };
  histogram.domain = function(_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : constant_default([+_[0], +_[1]]), histogram) : domain;
  };
  histogram.thresholds = function(_) {
    if (!arguments.length)
      return threshold2;
    threshold2 = typeof _ === "function" ? _ : Array.isArray(_) ? constant_default(Array.prototype.map.call(_, number)) : constant_default(+_);
    return histogram;
  };
  return histogram;
}
var init_histogram = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/histogram.js"() {
    init_bisect();
    init_constant();
    init_extent();
    init_identity();
    init_ticks();
    init_sturges();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/quantile.js
function quantile_default(array2, p, f) {
  if (f == null)
    f = number_default;
  if (!(n = array2.length))
    return;
  if ((p = +p) <= 0 || n < 2)
    return +f(array2[0], 0, array2);
  if (p >= 1)
    return +f(array2[n - 1], n - 1, array2);
  var n, h = (n - 1) * p, i = Math.floor(h), a2 = +f(array2[i], i, array2), b = +f(array2[i + 1], i + 1, array2);
  return a2 + (b - a2) * (h - i);
}
var init_quantile = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/quantile.js"() {
    init_number();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/threshold/freedmanDiaconis.js
function freedmanDiaconis_default(values, min, max) {
  values.sort(ascending_default);
  return Math.ceil((max - min) / (2 * (quantile_default(values, 0.75) - quantile_default(values, 0.25)) * Math.pow(values.length, -1 / 3)));
}
var init_freedmanDiaconis = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/threshold/freedmanDiaconis.js"() {
    init_ascending();
    init_quantile();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/threshold/scott.js
function scott_default(values, min, max) {
  return Math.ceil((max - min) / (3.5 * deviation_default(values) * Math.pow(values.length, -1 / 3)));
}
var init_scott = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/threshold/scott.js"() {
    init_deviation();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/max.js
function max_default(array2, f) {
  var i = -1, n = array2.length, a2, b;
  if (f == null) {
    while (++i < n)
      if ((b = array2[i]) != null && b >= b) {
        a2 = b;
        break;
      }
    while (++i < n)
      if ((b = array2[i]) != null && b > a2)
        a2 = b;
  } else {
    while (++i < n)
      if ((b = f(array2[i], i, array2)) != null && b >= b) {
        a2 = b;
        break;
      }
    while (++i < n)
      if ((b = f(array2[i], i, array2)) != null && b > a2)
        a2 = b;
  }
  return a2;
}
var init_max = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/max.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/mean.js
function mean_default(array2, f) {
  var s2 = 0, n = array2.length, a2, i = -1, j = n;
  if (f == null) {
    while (++i < n)
      if (!isNaN(a2 = number_default(array2[i])))
        s2 += a2;
      else
        --j;
  } else {
    while (++i < n)
      if (!isNaN(a2 = number_default(f(array2[i], i, array2))))
        s2 += a2;
      else
        --j;
  }
  if (j)
    return s2 / j;
}
var init_mean = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/mean.js"() {
    init_number();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/median.js
function median_default(array2, f) {
  var numbers = [], n = array2.length, a2, i = -1;
  if (f == null) {
    while (++i < n)
      if (!isNaN(a2 = number_default(array2[i])))
        numbers.push(a2);
  } else {
    while (++i < n)
      if (!isNaN(a2 = number_default(f(array2[i], i, array2))))
        numbers.push(a2);
  }
  return quantile_default(numbers.sort(ascending_default), 0.5);
}
var init_median = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/median.js"() {
    init_ascending();
    init_number();
    init_quantile();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/merge.js
function merge_default(arrays) {
  var n = arrays.length, m, i = -1, j = 0, merged, array2;
  while (++i < n)
    j += arrays[i].length;
  merged = new Array(j);
  while (--n >= 0) {
    array2 = arrays[n];
    m = array2.length;
    while (--m >= 0) {
      merged[--j] = array2[m];
    }
  }
  return merged;
}
var init_merge = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/merge.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/min.js
function min_default(array2, f) {
  var i = -1, n = array2.length, a2, b;
  if (f == null) {
    while (++i < n)
      if ((b = array2[i]) != null && b >= b) {
        a2 = b;
        break;
      }
    while (++i < n)
      if ((b = array2[i]) != null && a2 > b)
        a2 = b;
  } else {
    while (++i < n)
      if ((b = f(array2[i], i, array2)) != null && b >= b) {
        a2 = b;
        break;
      }
    while (++i < n)
      if ((b = f(array2[i], i, array2)) != null && a2 > b)
        a2 = b;
  }
  return a2;
}
var init_min = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/min.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/pairs.js
function pairs_default(array2) {
  var i = 0, n = array2.length - 1, p = array2[0], pairs = new Array(n < 0 ? 0 : n);
  while (i < n)
    pairs[i] = [p, p = array2[++i]];
  return pairs;
}
var init_pairs = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/pairs.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/permute.js
function permute_default(array2, indexes) {
  var i = indexes.length, permutes = new Array(i);
  while (i--)
    permutes[i] = array2[indexes[i]];
  return permutes;
}
var init_permute = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/permute.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/scan.js
function scan_default(array2, compare) {
  if (!(n = array2.length))
    return;
  var i = 0, n, j = 0, xi, xj = array2[j];
  if (!compare)
    compare = ascending_default;
  while (++i < n)
    if (compare(xi = array2[i], xj) < 0 || compare(xj, xj) !== 0)
      xj = xi, j = i;
  if (compare(xj, xj) === 0)
    return j;
}
var init_scan = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/scan.js"() {
    init_ascending();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/shuffle.js
function shuffle_default(array2, i0, i1) {
  var m = (i1 == null ? array2.length : i1) - (i0 = i0 == null ? 0 : +i0), t, i;
  while (m) {
    i = Math.random() * m-- | 0;
    t = array2[m + i0];
    array2[m + i0] = array2[i + i0];
    array2[i + i0] = t;
  }
  return array2;
}
var init_shuffle = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/shuffle.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/sum.js
function sum_default(array2, f) {
  var s2 = 0, n = array2.length, a2, i = -1;
  if (f == null) {
    while (++i < n)
      if (a2 = +array2[i])
        s2 += a2;
  } else {
    while (++i < n)
      if (a2 = +f(array2[i], i, array2))
        s2 += a2;
  }
  return s2;
}
var init_sum = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/sum.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/transpose.js
function transpose_default(matrix) {
  if (!(n = matrix.length))
    return [];
  for (var i = -1, m = min_default(matrix, length), transpose = new Array(m); ++i < m; ) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
      row[j] = matrix[j][i];
    }
  }
  return transpose;
}
function length(d) {
  return d.length;
}
var init_transpose = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/transpose.js"() {
    init_min();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/src/zip.js
function zip_default() {
  return transpose_default(arguments);
}
var init_zip = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/src/zip.js"() {
    init_transpose();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-array/index.js
var d3_array_exports = {};
__export(d3_array_exports, {
  ascending: () => ascending_default,
  bisect: () => bisect_default,
  bisectLeft: () => bisectLeft,
  bisectRight: () => bisectRight,
  bisector: () => bisector_default,
  descending: () => descending_default,
  deviation: () => deviation_default,
  extent: () => extent_default,
  histogram: () => histogram_default,
  max: () => max_default,
  mean: () => mean_default,
  median: () => median_default,
  merge: () => merge_default,
  min: () => min_default,
  pairs: () => pairs_default,
  permute: () => permute_default,
  quantile: () => quantile_default,
  range: () => range_default,
  scan: () => scan_default,
  shuffle: () => shuffle_default,
  sum: () => sum_default,
  thresholdFreedmanDiaconis: () => freedmanDiaconis_default,
  thresholdScott: () => scott_default,
  thresholdSturges: () => sturges_default,
  tickStep: () => tickStep,
  ticks: () => ticks_default,
  transpose: () => transpose_default,
  variance: () => variance_default,
  zip: () => zip_default
});
var init_d3_array = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-array/index.js"() {
    init_bisect();
    init_ascending();
    init_bisector();
    init_descending();
    init_deviation();
    init_extent();
    init_histogram();
    init_freedmanDiaconis();
    init_scott();
    init_sturges();
    init_max();
    init_mean();
    init_median();
    init_merge();
    init_min();
    init_pairs();
    init_permute();
    init_quantile();
    init_range();
    init_scan();
    init_shuffle();
    init_sum();
    init_ticks();
    init_transpose();
    init_variance();
    init_zip();
  }
});

// node_modules/d3-collection/src/map.js
function Map() {
}
function map(object, f) {
  var map3 = new Map();
  if (object instanceof Map)
    object.each(function(value, key2) {
      map3.set(key2, value);
    });
  else if (Array.isArray(object)) {
    var i = -1, n = object.length, o;
    if (f == null)
      while (++i < n)
        map3.set(i, object[i]);
    else
      while (++i < n)
        map3.set(f(o = object[i], i, object), o);
  } else if (object)
    for (var key in object)
      map3.set(key, object[key]);
  return map3;
}
var prefix, map_default;
var init_map = __esm({
  "node_modules/d3-collection/src/map.js"() {
    prefix = "$";
    Map.prototype = map.prototype = {
      constructor: Map,
      has: function(key) {
        return prefix + key in this;
      },
      get: function(key) {
        return this[prefix + key];
      },
      set: function(key, value) {
        this[prefix + key] = value;
        return this;
      },
      remove: function(key) {
        var property = prefix + key;
        return property in this && delete this[property];
      },
      clear: function() {
        for (var property in this)
          if (property[0] === prefix)
            delete this[property];
      },
      keys: function() {
        var keys = [];
        for (var property in this)
          if (property[0] === prefix)
            keys.push(property.slice(1));
        return keys;
      },
      values: function() {
        var values = [];
        for (var property in this)
          if (property[0] === prefix)
            values.push(this[property]);
        return values;
      },
      entries: function() {
        var entries = [];
        for (var property in this)
          if (property[0] === prefix)
            entries.push({ key: property.slice(1), value: this[property] });
        return entries;
      },
      size: function() {
        var size = 0;
        for (var property in this)
          if (property[0] === prefix)
            ++size;
        return size;
      },
      empty: function() {
        for (var property in this)
          if (property[0] === prefix)
            return false;
        return true;
      },
      each: function(f) {
        for (var property in this)
          if (property[0] === prefix)
            f(this[property], property.slice(1), this);
      }
    };
    map_default = map;
  }
});

// node_modules/d3-collection/src/nest.js
var init_nest = __esm({
  "node_modules/d3-collection/src/nest.js"() {
    init_map();
  }
});

// node_modules/d3-collection/src/set.js
function Set() {
}
function set(object, f) {
  var set2 = new Set();
  if (object instanceof Set)
    object.each(function(value) {
      set2.add(value);
    });
  else if (object) {
    var i = -1, n = object.length;
    if (f == null)
      while (++i < n)
        set2.add(object[i]);
    else
      while (++i < n)
        set2.add(f(object[i], i, object));
  }
  return set2;
}
var proto;
var init_set = __esm({
  "node_modules/d3-collection/src/set.js"() {
    init_map();
    proto = map_default.prototype;
    Set.prototype = set.prototype = {
      constructor: Set,
      has: proto.has,
      add: function(value) {
        value += "";
        this[prefix + value] = value;
        return this;
      },
      remove: proto.remove,
      clear: proto.clear,
      values: proto.keys,
      size: proto.size,
      empty: proto.empty,
      each: proto.each
    };
  }
});

// node_modules/d3-collection/src/keys.js
var init_keys = __esm({
  "node_modules/d3-collection/src/keys.js"() {
  }
});

// node_modules/d3-collection/src/values.js
var init_values = __esm({
  "node_modules/d3-collection/src/values.js"() {
  }
});

// node_modules/d3-collection/src/entries.js
var init_entries = __esm({
  "node_modules/d3-collection/src/entries.js"() {
  }
});

// node_modules/d3-collection/index.js
var init_d3_collection = __esm({
  "node_modules/d3-collection/index.js"() {
    init_nest();
    init_set();
    init_map();
    init_keys();
    init_values();
    init_entries();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/array.js
var array, map2, slice;
var init_array = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/array.js"() {
    array = Array.prototype;
    map2 = array.map;
    slice = array.slice;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/ordinal.js
function ordinal() {
  var index = map_default(), domain = [], range = [], unknown = implicit;
  function scale(d) {
    var key = d + "", i = index.get(key);
    if (!i) {
      if (unknown !== implicit)
        return unknown;
      index.set(key, i = domain.push(d));
    }
    return range[(i - 1) % range.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index = map_default();
    var i = -1, n = _.length, d, key;
    while (++i < n)
      if (!index.has(key = (d = _[i]) + ""))
        index.set(key, domain.push(d));
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), scale) : range.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal().domain(domain).range(range).unknown(unknown);
  };
  return scale;
}
var implicit;
var init_ordinal = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/ordinal.js"() {
    init_d3_collection();
    init_array();
    implicit = { name: "implicit" };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, range = [0, 1], step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n = domain().length, reverse = range[1] < range[0], start = range[reverse - 0], stop = range[1 - reverse];
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = range_default(n).map(function(i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
  };
  scale.rangeRound = function(_) {
    return range = [+_[0], +_[1]], round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band().domain(domain()).range(range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return rescale();
}
function pointish(scale) {
  var copy2 = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function() {
    return pointish(copy2());
  };
  return scale;
}
function point() {
  return pointish(band().paddingInner(1));
}
var init_band = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/band.js"() {
    init_d3_array();
    init_ordinal();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}
var init_define = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-color/src/define.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-color/src/color.js
function Color() {
}
function color(format2) {
  var m;
  format2 = (format2 + "").trim().toLowerCase();
  return (m = reHex3.exec(format2)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1)) : (m = reHex6.exec(format2)) ? rgbn(parseInt(m[1], 16)) : (m = reRgbInteger.exec(format2)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format2)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format2)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format2)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a2) {
  if (a2 <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a2);
}
function rgbConvert(o) {
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
function hsla(h, s2, l, a2) {
  if (a2 <= 0)
    h = s2 = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s2 = NaN;
  else if (s2 <= 0)
    h = NaN;
  return new Hsl(h, s2, l, a2);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s2 = max - min, l = (max + min) / 2;
  if (s2) {
    if (r === max)
      h = (g - b) / s2 + (g < b) * 6;
    else if (g === max)
      h = (b - r) / s2 + 2;
    else
      h = (r - g) / s2 + 4;
    s2 /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s2 = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s2, l, o.opacity);
}
function hsl(h, s2, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
var darker, brighter, reHex3, reHex6, reRgbInteger, reRgbPercent, reRgbaInteger, reRgbaPercent, reHslPercent, reHslaPercent, named;
var init_color = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-color/src/color.js"() {
    init_define();
    darker = 0.7;
    brighter = 1 / darker;
    reHex3 = /^#([0-9a-f]{3})$/;
    reHex6 = /^#([0-9a-f]{6})$/;
    reRgbInteger = /^rgb\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*\)$/;
    reRgbPercent = /^rgb\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
    reRgbaInteger = /^rgba\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    reRgbaPercent = /^rgba\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    reHslPercent = /^hsl\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/;
    reHslaPercent = /^hsla\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/;
    named = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074
    };
    define_default(Color, color, {
      displayable: function() {
        return this.rgb().displayable();
      },
      toString: function() {
        return this.rgb() + "";
      }
    });
    define_default(Rgb, rgb, extend(Color, {
      brighter: function(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      darker: function(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
      },
      rgb: function() {
        return this;
      },
      displayable: function() {
        return 0 <= this.r && this.r <= 255 && (0 <= this.g && this.g <= 255) && (0 <= this.b && this.b <= 255) && (0 <= this.opacity && this.opacity <= 1);
      },
      toString: function() {
        var a2 = this.opacity;
        a2 = isNaN(a2) ? 1 : Math.max(0, Math.min(1, a2));
        return (a2 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a2 === 1 ? ")" : ", " + a2 + ")");
      }
    }));
    define_default(Hsl, hsl, extend(Color, {
      brighter: function(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      darker: function(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Hsl(this.h, this.s, this.l * k2, this.opacity);
      },
      rgb: function() {
        var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        );
      },
      displayable: function() {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
      }
    }));
  }
});

// node_modules/react-d3-zoom/node_modules/d3-color/src/math.js
var deg2rad, rad2deg;
var init_math = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-color/src/math.js"() {
    deg2rad = Math.PI / 180;
    rad2deg = 180 / Math.PI;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-color/src/lab.js
function labConvert(o) {
  if (o instanceof Lab)
    return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) {
    var h = o.h * deg2rad;
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
  }
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var b = rgb2xyz(o.r), a2 = rgb2xyz(o.g), l = rgb2xyz(o.b), x2 = xyz2lab((0.4124564 * b + 0.3575761 * a2 + 0.1804375 * l) / Xn), y2 = xyz2lab((0.2126729 * b + 0.7151522 * a2 + 0.072175 * l) / Yn), z = xyz2lab((0.0193339 * b + 0.119192 * a2 + 0.9503041 * l) / Zn);
  return new Lab(116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z), o.opacity);
}
function lab(l, a2, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a2, b, opacity == null ? 1 : opacity);
}
function Lab(l, a2, b, opacity) {
  this.l = +l;
  this.a = +a2;
  this.b = +b;
  this.opacity = +opacity;
}
function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}
function xyz2rgb(x2) {
  return 255 * (x2 <= 31308e-7 ? 12.92 * x2 : 1.055 * Math.pow(x2, 1 / 2.4) - 0.055);
}
function rgb2xyz(x2) {
  return (x2 /= 255) <= 0.04045 ? x2 / 12.92 : Math.pow((x2 + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
  if (o instanceof Hcl)
    return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab))
    o = labConvert(o);
  var h = Math.atan2(o.b, o.a) * rad2deg;
  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function hcl(h, c2, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c2, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c2, l, opacity) {
  this.h = +h;
  this.c = +c2;
  this.l = +l;
  this.opacity = +opacity;
}
var Kn, Xn, Yn, Zn, t0, t1, t2, t3;
var init_lab = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-color/src/lab.js"() {
    init_define();
    init_color();
    init_math();
    Kn = 18;
    Xn = 0.95047;
    Yn = 1;
    Zn = 1.08883;
    t0 = 4 / 29;
    t1 = 6 / 29;
    t2 = 3 * t1 * t1;
    t3 = t1 * t1 * t1;
    define_default(Lab, lab, extend(Color, {
      brighter: function(k2) {
        return new Lab(this.l + Kn * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
      },
      darker: function(k2) {
        return new Lab(this.l - Kn * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
      },
      rgb: function() {
        var y2 = (this.l + 16) / 116, x2 = isNaN(this.a) ? y2 : y2 + this.a / 500, z = isNaN(this.b) ? y2 : y2 - this.b / 200;
        y2 = Yn * lab2xyz(y2);
        x2 = Xn * lab2xyz(x2);
        z = Zn * lab2xyz(z);
        return new Rgb(
          xyz2rgb(3.2404542 * x2 - 1.5371385 * y2 - 0.4985314 * z),
          // D65 -> sRGB
          xyz2rgb(-0.969266 * x2 + 1.8760108 * y2 + 0.041556 * z),
          xyz2rgb(0.0556434 * x2 - 0.2040259 * y2 + 1.0572252 * z),
          this.opacity
        );
      }
    }));
    define_default(Hcl, hcl, extend(Color, {
      brighter: function(k2) {
        return new Hcl(this.h, this.c, this.l + Kn * (k2 == null ? 1 : k2), this.opacity);
      },
      darker: function(k2) {
        return new Hcl(this.h, this.c, this.l - Kn * (k2 == null ? 1 : k2), this.opacity);
      },
      rgb: function() {
        return labConvert(this).rgb();
      }
    }));
  }
});

// node_modules/react-d3-zoom/node_modules/d3-color/src/cubehelix.js
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k2 = (E * (g - l) - C * bl) / D, s2 = Math.sqrt(k2 * k2 + bl * bl) / (E * l * (1 - l)), h = s2 ? Math.atan2(k2, bl) * rad2deg - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s2, l, o.opacity);
}
function cubehelix(h, s2, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s2, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s2, l, opacity) {
  this.h = +h;
  this.s = +s2;
  this.l = +l;
  this.opacity = +opacity;
}
var A, B, C, D, E, ED, EB, BC_DA;
var init_cubehelix = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-color/src/cubehelix.js"() {
    init_define();
    init_color();
    init_math();
    A = -0.14861;
    B = 1.78277;
    C = -0.29227;
    D = -0.90649;
    E = 1.97294;
    ED = E * D;
    EB = E * B;
    BC_DA = B * C - D * A;
    define_default(Cubehelix, cubehelix, extend(Color, {
      brighter: function(k2) {
        k2 = k2 == null ? brighter : Math.pow(brighter, k2);
        return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
      },
      darker: function(k2) {
        k2 = k2 == null ? darker : Math.pow(darker, k2);
        return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
      },
      rgb: function() {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new Rgb(
          255 * (l + a2 * (A * cosh + B * sinh)),
          255 * (l + a2 * (C * cosh + D * sinh)),
          255 * (l + a2 * (E * cosh)),
          this.opacity
        );
      }
    }));
  }
});

// node_modules/react-d3-zoom/node_modules/d3-color/index.js
var init_d3_color = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-color/index.js"() {
    init_color();
    init_lab();
    init_cubehelix();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/constant.js
function constant_default2(x2) {
  return function() {
    return x2;
  };
}
var init_constant2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/constant.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/color.js
function linear(a2, d) {
  return function(t) {
    return a2 + t * d;
  };
}
function exponential(a2, b, y2) {
  return a2 = Math.pow(a2, y2), b = Math.pow(b, y2) - a2, y2 = 1 / y2, function(t) {
    return Math.pow(a2 + t * b, y2);
  };
}
function hue(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant_default2(isNaN(a2) ? b : a2);
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y2) : constant_default2(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d = b - a2;
  return d ? linear(a2, d) : constant_default2(isNaN(a2) ? b : a2);
}
var init_color2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/color.js"() {
    init_constant2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/rgb.js
var rgb_default;
var init_rgb = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/rgb.js"() {
    init_d3_color();
    init_color2();
    rgb_default = function gamma2(y2) {
      var interpolateColor = gamma(y2);
      function interpolateRgb(start, end) {
        var r = interpolateColor((start = rgb(start)).r, (end = rgb(end)).r), g = interpolateColor(start.g, end.g), b = interpolateColor(start.b, end.b), opacity = interpolateColor(start.opacity, end.opacity);
        return function(t) {
          start.r = r(t);
          start.g = g(t);
          start.b = b(t);
          start.opacity = opacity(t);
          return start + "";
        };
      }
      interpolateRgb.gamma = gamma2;
      return interpolateRgb;
    }(1);
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/array.js
function array_default(a2, b) {
  var x2 = [], c2 = [], na = a2 ? a2.length : 0, nb = b ? b.length : 0, n0 = Math.min(na, nb), i;
  for (i = 0; i < n0; ++i)
    x2.push(value_default(a2[i], b[i]));
  for (; i < na; ++i)
    c2[i] = a2[i];
  for (; i < nb; ++i)
    c2[i] = b[i];
  return function(t) {
    for (i = 0; i < n0; ++i)
      c2[i] = x2[i](t);
    return c2;
  };
}
var init_array2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/array.js"() {
    init_value();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/number.js
function number_default2(a2, b) {
  return a2 = +a2, b -= a2, function(t) {
    return a2 + b * t;
  };
}
var init_number2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/number.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i = {}, c2 = {}, k2;
  if (a2 === null || typeof a2 !== "object")
    a2 = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k2 in a2) {
    if (k2 in b) {
      i[k2] = value_default(a2[k2], b[k2]);
    } else {
      c2[k2] = a2[k2];
    }
  }
  for (k2 in b) {
    if (!(k2 in a2)) {
      c2[k2] = b[k2];
    }
  }
  return function(t) {
    for (k2 in i)
      c2[k2] = i[k2](t);
    return c2;
  };
}
var init_object = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/object.js"() {
    init_value();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/string.js
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s2[i])
        s2[i] += bs;
      else
        s2[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i])
        s2[i] += bm;
      else
        s2[++i] = bm;
    } else {
      s2[++i] = null;
      q.push({ i, x: number_default2(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s2[i])
      s2[i] += bs;
    else
      s2[++i] = bs;
  }
  return s2.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s2[(o = q[i2]).i] = o.x(t);
    return s2.join("");
  });
}
var reA, reB;
var init_string = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/string.js"() {
    init_number2();
    reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
    reB = new RegExp(reA.source, "g");
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t = typeof b, c2;
  return b == null || t === "boolean" ? constant_default2(b) : (t === "number" ? number_default2 : t === "string" ? (c2 = color(b)) ? (b = c2, rgb_default) : string_default : b instanceof color ? rgb_default : Array.isArray(b) ? array_default : object_default)(a2, b);
}
var init_value = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/value.js"() {
    init_d3_color();
    init_rgb();
    init_array2();
    init_number2();
    init_object();
    init_string();
    init_constant2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b -= a2, function(t) {
    return Math.round(a2 + b * t);
  };
}
var init_round = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/round.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/transform/decompose.js
function decompose_default(a2, b, c2, d, e, f) {
  if (a2 * d === b * c2)
    return null;
  var scaleX = Math.sqrt(a2 * a2 + b * b);
  a2 /= scaleX, b /= scaleX;
  var skewX = a2 * c2 + b * d;
  c2 -= a2 * skewX, d -= b * skewX;
  var scaleY = Math.sqrt(c2 * c2 + d * d);
  c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a2 * d < b * c2)
    a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a2) * rad2deg2,
    skewX: Math.atan(skewX) * rad2deg2,
    scaleX,
    scaleY
  };
}
var rad2deg2, identity;
var init_decompose = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/transform/decompose.js"() {
    rad2deg2 = 180 / Math.PI;
    identity = {
      translateX: 0,
      translateY: 0,
      rotate: 0,
      skewX: 0,
      scaleX: 1,
      scaleY: 1
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/transform/parse.js
function parseCss(value) {
  if (value === "none")
    return identity;
  if (!cssNode)
    cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  var m = value.slice(7, -1).split(",");
  return decompose_default(+m[0], +m[1], +m[2], +m[3], +m[4], +m[5]);
}
function parseSvg(value) {
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value == null ? "" : value);
  var m = svgNode.transform.baseVal.consolidate().matrix;
  return decompose_default(m.a, m.b, m.c, m.d, m.e, m.f);
}
var cssNode, cssRoot, cssView, svgNode;
var init_parse = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/transform/parse.js"() {
    init_decompose();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a2, b, s2, q) {
    if (a2 !== b) {
      if (a2 - b > 180)
        b += 360;
      else if (b - a2 > 180)
        a2 += 360;
      q.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default2(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s2, q) {
    if (a2 !== b) {
      q.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default2(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s2, q) {
    if (xa !== xb || ya !== yb) {
      var i = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: number_default2(xa, xb) }, { i: i - 2, x: number_default2(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s2 = [], q = [];
    a2 = parse(a2), b = parse(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s2, q);
    rotate(a2.rotate, b.rotate, s2, q);
    skewX(a2.skewX, b.skewX, s2, q);
    scale(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s2, q);
    a2 = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s2[(o = q[i]).i] = o.x(t);
      return s2.join("");
    };
  };
}
var interpolateTransformCss, interpolateTransformSvg;
var init_transform = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/transform/index.js"() {
    init_number2();
    init_parse();
    interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/zoom.js
var init_zoom = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/zoom.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hsl.js
var init_hsl = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hsl.js"() {
    init_d3_color();
    init_color2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hslLong.js
var init_hslLong = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hslLong.js"() {
    init_d3_color();
    init_color2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/lab.js
var init_lab2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/lab.js"() {
    init_d3_color();
    init_color2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hcl.js
var init_hcl = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hcl.js"() {
    init_d3_color();
    init_color2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hclLong.js
var init_hclLong = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/hclLong.js"() {
    init_d3_color();
    init_color2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/cubehelix.js
var cubehelix_default;
var init_cubehelix2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/cubehelix.js"() {
    init_d3_color();
    init_color2();
    cubehelix_default = function gamma3(y2) {
      y2 = +y2;
      function interpolateCubehelix(start, end) {
        var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h), s2 = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s2(t);
          start.l = l(Math.pow(t, y2));
          start.opacity = opacity(t);
          return start + "";
        };
      }
      interpolateCubehelix.gamma = gamma3;
      return interpolateCubehelix;
    }(1);
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/src/cubehelixLong.js
var cubehelixLong_default;
var init_cubehelixLong = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/src/cubehelixLong.js"() {
    init_d3_color();
    init_color2();
    cubehelixLong_default = function gamma4(y2) {
      y2 = +y2;
      function interpolateCubehelixLong(start, end) {
        var h = nogamma((start = cubehelix(start)).h, (end = cubehelix(end)).h), s2 = nogamma(start.s, end.s), l = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
        return function(t) {
          start.h = h(t);
          start.s = s2(t);
          start.l = l(Math.pow(t, y2));
          start.opacity = opacity(t);
          return start + "";
        };
      }
      interpolateCubehelixLong.gamma = gamma4;
      return interpolateCubehelixLong;
    }(1);
  }
});

// node_modules/react-d3-zoom/node_modules/d3-interpolate/index.js
var init_d3_interpolate = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-interpolate/index.js"() {
    init_value();
    init_array2();
    init_number2();
    init_object();
    init_round();
    init_string();
    init_transform();
    init_zoom();
    init_rgb();
    init_hsl();
    init_hslLong();
    init_lab2();
    init_hcl();
    init_hclLong();
    init_cubehelix2();
    init_cubehelixLong();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/constant.js
function constant_default3(x2) {
  return function() {
    return x2;
  };
}
var init_constant3 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/constant.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/number.js
function number_default3(x2) {
  return +x2;
}
var init_number3 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/number.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/continuous.js
function deinterpolateLinear(a2, b) {
  return (b -= a2 = +a2) ? function(x2) {
    return (x2 - a2) / b;
  } : constant_default3(b);
}
function deinterpolateClamp(deinterpolate2) {
  return function(a2, b) {
    var d = deinterpolate2(a2 = +a2, b = +b);
    return function(x2) {
      return x2 <= a2 ? 0 : x2 >= b ? 1 : d(x2);
    };
  };
}
function reinterpolateClamp(reinterpolate2) {
  return function(a2, b) {
    var r = reinterpolate2(a2 = +a2, b = +b);
    return function(t) {
      return t <= 0 ? a2 : t >= 1 ? b : r(t);
    };
  };
}
function bimap(domain, range, deinterpolate2, reinterpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0)
    d0 = deinterpolate2(d1, d0), r0 = reinterpolate2(r1, r0);
  else
    d0 = deinterpolate2(d0, d1), r0 = reinterpolate2(r0, r1);
  return function(x2) {
    return r0(d0(x2));
  };
}
function polymap(domain, range, deinterpolate2, reinterpolate2) {
  var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i < j) {
    d[i] = deinterpolate2(domain[i], domain[i + 1]);
    r[i] = reinterpolate2(range[i], range[i + 1]);
  }
  return function(x2) {
    var i2 = bisect_default(domain, x2, 1, j) - 1;
    return r[i2](d[i2](x2));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp());
}
function continuous(deinterpolate2, reinterpolate2) {
  var domain = unit, range = unit, interpolate = value_default, clamp = false, output, input;
  function rescale() {
    var map3 = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
    output = map3(domain, range, clamp ? deinterpolateClamp(deinterpolate2) : deinterpolate2, interpolate);
    input = map3(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate2) : reinterpolate2);
    return scale;
  }
  function scale(x2) {
    return output(+x2);
  }
  scale.invert = function(y2) {
    return input(+y2);
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = map2.call(_, number_default3), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };
  scale.rangeRound = function(_) {
    return range = slice.call(_), interpolate = round_default, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, rescale()) : clamp;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };
  return rescale();
}
var unit;
var init_continuous = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/continuous.js"() {
    init_d3_array();
    init_d3_interpolate();
    init_array();
    init_constant3();
    init_number3();
    unit = [0, 1];
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x2, p) {
  if ((i = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x2.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x2.slice(i + 1)
  ];
}
var init_formatDecimal = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/formatDecimal.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/exponent.js
function exponent_default(x2) {
  return x2 = formatDecimal_default(Math.abs(x2)), x2 ? x2[1] : NaN;
}
var init_exponent = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/exponent.js"() {
    init_formatDecimal();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length2 = 0;
    while (i > 0 && g > 0) {
      if (length2 + g + 1 > width)
        g = Math.max(1, width - length2);
      t.push(value.substring(i -= g, i + g));
      if ((length2 += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
var init_formatGroup = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/formatGroup.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/formatDefault.js
function formatDefault_default(x2, p) {
  x2 = x2.toPrecision(p);
  out:
    for (var n = x2.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (x2[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        case "e":
          break out;
        default:
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? x2.slice(0, i0) + x2.slice(i1 + 1) : x2;
}
var init_formatDefault = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/formatDefault.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/formatPrefixAuto.js
function formatPrefixAuto_default(x2, p) {
  var d = formatDecimal_default(x2, p);
  if (!d)
    return x2 + "";
  var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimal_default(x2, Math.max(0, p + i - 1))[0];
}
var prefixExponent;
var init_formatPrefixAuto = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/formatPrefixAuto.js"() {
    init_formatDecimal();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x2, p) {
  var d = formatDecimal_default(x2, p);
  if (!d)
    return x2 + "";
  var coefficient = d[0], exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
var init_formatRounded = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/formatRounded.js"() {
    init_formatDecimal();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/formatTypes.js
var formatTypes_default;
var init_formatTypes = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/formatTypes.js"() {
    init_formatDefault();
    init_formatPrefixAuto();
    init_formatRounded();
    formatTypes_default = {
      "": formatDefault_default,
      "%": function(x2, p) {
        return (x2 * 100).toFixed(p);
      },
      "b": function(x2) {
        return Math.round(x2).toString(2);
      },
      "c": function(x2) {
        return x2 + "";
      },
      "d": function(x2) {
        return Math.round(x2).toString(10);
      },
      "e": function(x2, p) {
        return x2.toExponential(p);
      },
      "f": function(x2, p) {
        return x2.toFixed(p);
      },
      "g": function(x2, p) {
        return x2.toPrecision(p);
      },
      "o": function(x2) {
        return Math.round(x2).toString(8);
      },
      "p": function(x2, p) {
        return formatRounded_default(x2 * 100, p);
      },
      "r": formatRounded_default,
      "s": formatPrefixAuto_default,
      "X": function(x2) {
        return Math.round(x2).toString(16).toUpperCase();
      },
      "x": function(x2) {
        return Math.round(x2).toString(16);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/formatSpecifier.js
function formatSpecifier_default(specifier) {
  return new FormatSpecifier(specifier);
}
function FormatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match, fill = match[1] || " ", align = match[2] || ">", sign2 = match[3] || "-", symbol2 = match[4] || "", zero2 = !!match[5], width = match[6] && +match[6], comma = !!match[7], precision = match[8] && +match[8].slice(1), type = match[9] || "";
  if (type === "n")
    comma = true, type = "g";
  else if (!formatTypes_default[type])
    type = "";
  if (zero2 || fill === "0" && align === "=")
    zero2 = true, fill = "0", align = "=";
  this.fill = fill;
  this.align = align;
  this.sign = sign2;
  this.symbol = symbol2;
  this.zero = zero2;
  this.width = width;
  this.comma = comma;
  this.precision = precision;
  this.type = type;
}
var re;
var init_formatSpecifier = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/formatSpecifier.js"() {
    init_formatTypes();
    re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
    FormatSpecifier.prototype.toString = function() {
      return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width == null ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0)) + this.type;
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale.js
function identity2(x2) {
  return x2;
}
function locale_default(locale) {
  var group = locale.grouping && locale.thousands ? formatGroup_default(locale.grouping, locale.thousands) : identity2, currency = locale.currency, decimal = locale.decimal;
  function newFormat(specifier) {
    specifier = formatSpecifier_default(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol2 = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, type = specifier.type;
    var prefix2 = symbol2 === "$" ? currency[0] : symbol2 === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol2 === "$" ? currency[1] : /[%p]/.test(type) ? "%" : "";
    var formatType = formatTypes_default[type], maybeSuffix = !type || /[defgprs%]/.test(type);
    precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i, n, c2;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
        value = formatType(value, precision);
        if (valueNegative) {
          i = -1, n = value.length;
          valueNegative = false;
          while (++i < n) {
            if (c2 = value.charCodeAt(i), 48 < c2 && c2 < 58 || type === "x" && 96 < c2 && c2 < 103 || type === "X" && 64 < c2 && c2 < 71) {
              valueNegative = true;
              break;
            }
          }
        }
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : "-" : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group(value, Infinity);
      var length2 = valuePrefix.length + value.length + valueSuffix.length, padding = length2 < width ? new Array(width - length2 + 1).join(fill) : "";
      if (comma && zero2)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          return valuePrefix + value + valueSuffix + padding;
        case "=":
          return valuePrefix + padding + value + valueSuffix;
        case "^":
          return padding.slice(0, length2 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length2);
      }
      return padding + valuePrefix + value + valueSuffix;
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier_default(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix2 = prefixes[8 + e / 3];
    return function(value2) {
      return f(k2 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var prefixes;
var init_locale = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale.js"() {
    init_exponent();
    init_formatGroup();
    init_formatSpecifier();
    init_formatTypes();
    init_formatPrefixAuto();
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/en-US.js
var en_US_default;
var init_en_US = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/en-US.js"() {
    init_locale();
    en_US_default = locale_default({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ca-ES.js
var ca_ES_default;
var init_ca_ES = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ca-ES.js"() {
    init_locale();
    ca_ES_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["", " €"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/cs-CZ.js
var cs_CZ_default;
var init_cs_CZ = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/cs-CZ.js"() {
    init_locale();
    cs_CZ_default = locale_default({
      decimal: ",",
      thousands: " ",
      grouping: [3],
      currency: ["", " Kč"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/de-CH.js
var de_CH_default;
var init_de_CH = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/de-CH.js"() {
    init_locale();
    de_CH_default = locale_default({
      decimal: ",",
      thousands: "'",
      grouping: [3],
      currency: ["", " CHF"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/de-DE.js
var de_DE_default;
var init_de_DE = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/de-DE.js"() {
    init_locale();
    de_DE_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["", " €"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/en-CA.js
var en_CA_default;
var init_en_CA = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/en-CA.js"() {
    init_locale();
    en_CA_default = locale_default({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["$", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/en-GB.js
var en_GB_default;
var init_en_GB = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/en-GB.js"() {
    init_locale();
    en_GB_default = locale_default({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["£", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/es-ES.js
var es_ES_default;
var init_es_ES = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/es-ES.js"() {
    init_locale();
    es_ES_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["", " €"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/fi-FI.js
var fi_FI_default;
var init_fi_FI = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/fi-FI.js"() {
    init_locale();
    fi_FI_default = locale_default({
      decimal: ",",
      thousands: " ",
      grouping: [3],
      currency: ["", " €"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/fr-CA.js
var fr_CA_default;
var init_fr_CA = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/fr-CA.js"() {
    init_locale();
    fr_CA_default = locale_default({
      decimal: ",",
      thousands: " ",
      grouping: [3],
      currency: ["", "$"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/fr-FR.js
var fr_FR_default;
var init_fr_FR = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/fr-FR.js"() {
    init_locale();
    fr_FR_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["", " €"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/he-IL.js
var he_IL_default;
var init_he_IL = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/he-IL.js"() {
    init_locale();
    he_IL_default = locale_default({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["₪", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/hu-HU.js
var hu_HU_default;
var init_hu_HU = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/hu-HU.js"() {
    init_locale();
    hu_HU_default = locale_default({
      decimal: ",",
      thousands: " ",
      grouping: [3],
      currency: ["", " Ft"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/it-IT.js
var it_IT_default;
var init_it_IT = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/it-IT.js"() {
    init_locale();
    it_IT_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["€", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ja-JP.js
var ja_JP_default;
var init_ja_JP = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ja-JP.js"() {
    init_locale();
    ja_JP_default = locale_default({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["", "円"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ko-KR.js
var ko_KR_default;
var init_ko_KR = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ko-KR.js"() {
    init_locale();
    ko_KR_default = locale_default({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["₩", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/mk-MK.js
var mk_MK_default;
var init_mk_MK = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/mk-MK.js"() {
    init_locale();
    mk_MK_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["", " ден."]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/nl-NL.js
var nl_NL_default;
var init_nl_NL = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/nl-NL.js"() {
    init_locale();
    nl_NL_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["€ ", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/pl-PL.js
var pl_PL_default;
var init_pl_PL = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/pl-PL.js"() {
    init_locale();
    pl_PL_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["", "zł"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/pt-BR.js
var pt_BR_default;
var init_pt_BR = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/pt-BR.js"() {
    init_locale();
    pt_BR_default = locale_default({
      decimal: ",",
      thousands: ".",
      grouping: [3],
      currency: ["R$", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ru-RU.js
var ru_RU_default;
var init_ru_RU = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/ru-RU.js"() {
    init_locale();
    ru_RU_default = locale_default({
      decimal: ",",
      thousands: " ",
      grouping: [3],
      currency: ["", " руб."]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/sv-SE.js
var sv_SE_default;
var init_sv_SE = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/sv-SE.js"() {
    init_locale();
    sv_SE_default = locale_default({
      decimal: ",",
      thousands: " ",
      grouping: [3],
      currency: ["", "SEK"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/locale/zh-CN.js
var zh_CN_default;
var init_zh_CN = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/locale/zh-CN.js"() {
    init_locale();
    zh_CN_default = locale_default({
      decimal: ".",
      thousands: ",",
      grouping: [3],
      currency: ["¥", ""]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}
var init_precisionFixed = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/precisionFixed.js"() {
    init_exponent();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}
var init_precisionPrefix = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/precisionPrefix.js"() {
    init_exponent();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent_default(max) - exponent_default(step)) + 1;
}
var init_precisionRound = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/src/precisionRound.js"() {
    init_exponent();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-format/index.js
var format, formatPrefix;
var init_d3_format = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-format/index.js"() {
    init_en_US();
    init_locale();
    init_ca_ES();
    init_cs_CZ();
    init_de_CH();
    init_de_DE();
    init_en_CA();
    init_en_GB();
    init_en_US();
    init_es_ES();
    init_fi_FI();
    init_fr_CA();
    init_fr_FR();
    init_he_IL();
    init_hu_HU();
    init_it_IT();
    init_ja_JP();
    init_ko_KR();
    init_mk_MK();
    init_nl_NL();
    init_pl_PL();
    init_pt_BR();
    init_ru_RU();
    init_sv_SE();
    init_zh_CN();
    init_formatSpecifier();
    init_precisionFixed();
    init_precisionPrefix();
    init_precisionRound();
    format = en_US_default.format;
    formatPrefix = en_US_default.formatPrefix;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/tickFormat.js
function tickFormat_default(domain, count, specifier) {
  var start = domain[0], stop = domain[domain.length - 1], step = tickStep(start, stop, count == null ? 10 : count), precision;
  specifier = formatSpecifier_default(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
var init_tickFormat = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/tickFormat.js"() {
    init_d3_array();
    init_d3_format();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks_default(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    return tickFormat_default(domain(), count, specifier);
  };
  scale.nice = function(count) {
    var d = domain(), i = d.length - 1, n = count == null ? 10 : count, start = d[0], stop = d[i], step = tickStep(start, stop, n);
    if (step) {
      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
      d[0] = Math.floor(start / step) * step;
      d[i] = Math.ceil(stop / step) * step;
      domain(d);
    }
    return scale;
  };
  return scale;
}
function linear2() {
  var scale = continuous(deinterpolateLinear, number_default2);
  scale.copy = function() {
    return copy(scale, linear2());
  };
  return linearish(scale);
}
var init_linear = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/linear.js"() {
    init_d3_array();
    init_d3_interpolate();
    init_continuous();
    init_tickFormat();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/identity.js
function identity3() {
  var domain = [0, 1];
  function scale(x2) {
    return +x2;
  }
  scale.invert = scale;
  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = map2.call(_, number_default3), scale) : domain.slice();
  };
  scale.copy = function() {
    return identity3().domain(domain);
  };
  return linearish(scale);
}
var init_identity2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/identity.js"() {
    init_array();
    init_linear();
    init_number3();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/nice.js
function nice_default(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
var init_nice = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/nice.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/log.js
function deinterpolate(a2, b) {
  return (b = Math.log(b / a2)) ? function(x2) {
    return Math.log(x2 / a2) / b;
  } : constant_default3(b);
}
function reinterpolate(a2, b) {
  return a2 < 0 ? function(t) {
    return -Math.pow(-b, t) * Math.pow(-a2, 1 - t);
  } : function(t) {
    return Math.pow(b, t) * Math.pow(a2, 1 - t);
  };
}
function pow10(x2) {
  return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function(x2) {
    return Math.pow(base, x2);
  };
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function(x2) {
    return Math.log(x2) / base;
  });
}
function reflect(f) {
  return function(x2) {
    return -f(-x2);
  };
}
function log() {
  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]), domain = scale.domain, base = 10, logs = logp(10), pows = powp(10);
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0)
      logs = reflect(logs), pows = reflect(pows);
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = function(count) {
    var d = domain(), u = d[0], v = d[d.length - 1], r;
    if (r = v < u)
      i = u, u = v, v = i;
    var i = logs(u), j = logs(v), p, k2, t, n = count == null ? 10 : +count, z = [];
    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0)
        for (; i < j; ++i) {
          for (k2 = 1, p = pows(i); k2 < base; ++k2) {
            t = p * k2;
            if (t < u)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      else
        for (; i < j; ++i) {
          for (k2 = base - 1, p = pows(i); k2 >= 1; --k2) {
            t = p * k2;
            if (t < u)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      if (r)
        z.reverse();
    } else {
      z = ticks_default(i, j, Math.min(j - i, n)).map(pows);
    }
    return z;
  };
  scale.tickFormat = function(count, specifier) {
    if (specifier == null)
      specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function")
      specifier = format(specifier);
    if (count === Infinity)
      return specifier;
    if (count == null)
      count = 10;
    var k2 = Math.max(1, base * count / scale.ticks().length);
    return function(d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5)
        i *= base;
      return i <= k2 ? specifier(d) : "";
    };
  };
  scale.nice = function() {
    return domain(nice_default(domain(), {
      floor: function(x2) {
        return pows(Math.floor(logs(x2)));
      },
      ceil: function(x2) {
        return pows(Math.ceil(logs(x2)));
      }
    }));
  };
  scale.copy = function() {
    return copy(scale, log().base(base));
  };
  return scale;
}
var init_log = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/log.js"() {
    init_d3_array();
    init_d3_format();
    init_constant3();
    init_nice();
    init_continuous();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/pow.js
function raise(x2, exponent) {
  return x2 < 0 ? -Math.pow(-x2, exponent) : Math.pow(x2, exponent);
}
function pow() {
  var exponent = 1, scale = continuous(deinterpolate2, reinterpolate2), domain = scale.domain;
  function deinterpolate2(a2, b) {
    return (b = raise(b, exponent) - (a2 = raise(a2, exponent))) ? function(x2) {
      return (raise(x2, exponent) - a2) / b;
    } : constant_default3(b);
  }
  function reinterpolate2(a2, b) {
    b = raise(b, exponent) - (a2 = raise(a2, exponent));
    return function(t) {
      return raise(a2 + b * t, 1 / exponent);
    };
  }
  scale.exponent = function(_) {
    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
  };
  scale.copy = function() {
    return copy(scale, pow().exponent(exponent));
  };
  return linearish(scale);
}
function sqrt() {
  return pow().exponent(0.5);
}
var init_pow = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/pow.js"() {
    init_constant3();
    init_linear();
    init_continuous();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/quantile.js
function quantile() {
  var domain = [], range = [], thresholds = [];
  function rescale() {
    var i = 0, n = Math.max(1, range.length);
    thresholds = new Array(n - 1);
    while (++i < n)
      thresholds[i - 1] = quantile_default(domain, i / n);
    return scale;
  }
  function scale(x2) {
    if (!isNaN(x2 = +x2))
      return range[bisect_default(thresholds, x2)];
  }
  scale.invertExtent = function(y2) {
    var i = range.indexOf(y2);
    return i < 0 ? [NaN, NaN] : [
      i > 0 ? thresholds[i - 1] : domain[0],
      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
    ];
  };
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [];
    for (var i = 0, n = _.length, d; i < n; ++i)
      if (d = _[i], d != null && !isNaN(d = +d))
        domain.push(d);
    domain.sort(ascending_default);
    return rescale();
  };
  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();
  };
  scale.quantiles = function() {
    return thresholds.slice();
  };
  scale.copy = function() {
    return quantile().domain(domain).range(range);
  };
  return scale;
}
var init_quantile2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/quantile.js"() {
    init_d3_array();
    init_array();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/quantize.js
function quantize() {
  var x0 = 0, x1 = 1, n = 1, domain = [0.5], range = [0, 1];
  function scale(x2) {
    if (x2 <= x2)
      return range[bisect_default(domain, x2, 0, n)];
  }
  function rescale() {
    var i = -1;
    domain = new Array(n);
    while (++i < n)
      domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
    return scale;
  }
  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
  };
  scale.range = function(_) {
    return arguments.length ? (n = (range = slice.call(_)).length - 1, rescale()) : range.slice();
  };
  scale.invertExtent = function(y2) {
    var i = range.indexOf(y2);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };
  scale.copy = function() {
    return quantize().domain([x0, x1]).range(range);
  };
  return linearish(scale);
}
var init_quantize = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/quantize.js"() {
    init_d3_array();
    init_array();
    init_linear();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/threshold.js
function threshold() {
  var domain = [0.5], range = [0, 1], n = 1;
  function scale(x2) {
    if (x2 <= x2)
      return range[bisect_default(domain, x2, 0, n)];
  }
  scale.domain = function(_) {
    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range = slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };
  scale.invertExtent = function(y2) {
    var i = range.indexOf(y2);
    return [domain[i - 1], domain[i]];
  };
  scale.copy = function() {
    return threshold().domain(domain).range(range);
  };
  return scale;
}
var init_threshold = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/threshold.js"() {
    init_d3_array();
    init_array();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/build/package.js
var init_package = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/build/package.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/interval.js
function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = interval;
  interval.ceil = function(date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = function(date) {
    var d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = function(date, step) {
    return offseti(date = /* @__PURE__ */ new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };
  interval.range = function(start, stop, step) {
    var range = [];
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0))
      return range;
    do
      range.push(/* @__PURE__ */ new Date(+start));
    while (offseti(start, step), floori(start), start < stop);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date) {
      while (floori(date), !test(date))
        date.setTime(date - 1);
    }, function(date, step) {
      while (--step >= 0)
        while (offseti(date, 1), !test(date))
          ;
    });
  };
  if (count) {
    interval.count = function(start, end) {
      t02.setTime(+start), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count(t02, t12));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d) {
        return field(d) % step === 0;
      } : function(d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }
  return interval;
}
var t02, t12;
var init_interval = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/interval.js"() {
    t02 = /* @__PURE__ */ new Date();
    t12 = /* @__PURE__ */ new Date();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/millisecond.js
var millisecond, millisecond_default;
var init_millisecond = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/millisecond.js"() {
    init_interval();
    millisecond = newInterval(function() {
    }, function(date, step) {
      date.setTime(+date + step);
    }, function(start, end) {
      return end - start;
    });
    millisecond.every = function(k2) {
      k2 = Math.floor(k2);
      if (!isFinite(k2) || !(k2 > 0))
        return null;
      if (!(k2 > 1))
        return millisecond;
      return newInterval(function(date) {
        date.setTime(Math.floor(date / k2) * k2);
      }, function(date, step) {
        date.setTime(+date + step * k2);
      }, function(start, end) {
        return (end - start) / k2;
      });
    };
    millisecond_default = millisecond;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/duration.js
var second, minute, hour, day, week;
var init_duration = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/duration.js"() {
    second = 1e3;
    minute = 6e4;
    hour = 36e5;
    day = 864e5;
    week = 6048e5;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/second.js
var second_default;
var init_second = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/second.js"() {
    init_interval();
    init_duration();
    second_default = newInterval(function(date) {
      date.setTime(Math.floor(date / second) * second);
    }, function(date, step) {
      date.setTime(+date + step * second);
    }, function(start, end) {
      return (end - start) / second;
    }, function(date) {
      return date.getUTCSeconds();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/minute.js
var minute_default;
var init_minute = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/minute.js"() {
    init_interval();
    init_duration();
    minute_default = newInterval(function(date) {
      date.setTime(Math.floor(date / minute) * minute);
    }, function(date, step) {
      date.setTime(+date + step * minute);
    }, function(start, end) {
      return (end - start) / minute;
    }, function(date) {
      return date.getMinutes();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/hour.js
var hour_default;
var init_hour = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/hour.js"() {
    init_interval();
    init_duration();
    hour_default = newInterval(function(date) {
      var offset = date.getTimezoneOffset() * minute % hour;
      if (offset < 0)
        offset += hour;
      date.setTime(Math.floor((+date - offset) / hour) * hour + offset);
    }, function(date, step) {
      date.setTime(+date + step * hour);
    }, function(start, end) {
      return (end - start) / hour;
    }, function(date) {
      return date.getHours();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/day.js
var day_default;
var init_day = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/day.js"() {
    init_interval();
    init_duration();
    day_default = newInterval(function(date) {
      date.setHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setDate(date.getDate() + step);
    }, function(start, end) {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * minute) / day;
    }, function(date) {
      return date.getDate() - 1;
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/week.js
function weekday(i) {
  return newInterval(function(date) {
    date.setHours(0, 0, 0, 0);
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
  }, function(date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function(start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * minute) / week;
  });
}
var sunday, monday, tuesday, wednesday, thursday, friday, saturday, week_default;
var init_week = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/week.js"() {
    init_interval();
    init_duration();
    sunday = weekday(0);
    monday = weekday(1);
    tuesday = weekday(2);
    wednesday = weekday(3);
    thursday = weekday(4);
    friday = weekday(5);
    saturday = weekday(6);
    week_default = sunday;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/month.js
var month_default;
var init_month = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/month.js"() {
    init_interval();
    month_default = newInterval(function(date) {
      date.setHours(0, 0, 0, 0);
      date.setDate(1);
    }, function(date, step) {
      date.setMonth(date.getMonth() + step);
    }, function(start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function(date) {
      return date.getMonth();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/year.js
var year_default;
var init_year = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/year.js"() {
    init_interval();
    year_default = newInterval(function(date) {
      date.setHours(0, 0, 0, 0);
      date.setMonth(0, 1);
    }, function(date, step) {
      date.setFullYear(date.getFullYear() + step);
    }, function(start, end) {
      return end.getFullYear() - start.getFullYear();
    }, function(date) {
      return date.getFullYear();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/utcMinute.js
var utcMinute_default;
var init_utcMinute = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/utcMinute.js"() {
    init_interval();
    init_duration();
    utcMinute_default = newInterval(function(date) {
      date.setUTCSeconds(0, 0);
    }, function(date, step) {
      date.setTime(+date + step * minute);
    }, function(start, end) {
      return (end - start) / minute;
    }, function(date) {
      return date.getUTCMinutes();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/utcHour.js
var utcHour_default;
var init_utcHour = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/utcHour.js"() {
    init_interval();
    init_duration();
    utcHour_default = newInterval(function(date) {
      date.setUTCMinutes(0, 0, 0);
    }, function(date, step) {
      date.setTime(+date + step * hour);
    }, function(start, end) {
      return (end - start) / hour;
    }, function(date) {
      return date.getUTCHours();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/utcDay.js
var utcDay_default;
var init_utcDay = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/utcDay.js"() {
    init_interval();
    init_duration();
    utcDay_default = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
    }, function(date, step) {
      date.setUTCDate(date.getUTCDate() + step);
    }, function(start, end) {
      return (end - start) / day;
    }, function(date) {
      return date.getUTCDate() - 1;
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/utcWeek.js
function utcWeekday(i) {
  return newInterval(function(date) {
    date.setUTCHours(0, 0, 0, 0);
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
  }, function(date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function(start, end) {
    return (end - start) / week;
  });
}
var utcSunday, utcMonday, utcTuesday, utcWednesday, utcThursday, utcFriday, utcSaturday, utcWeek_default;
var init_utcWeek = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/utcWeek.js"() {
    init_interval();
    init_duration();
    utcSunday = utcWeekday(0);
    utcMonday = utcWeekday(1);
    utcTuesday = utcWeekday(2);
    utcWednesday = utcWeekday(3);
    utcThursday = utcWeekday(4);
    utcFriday = utcWeekday(5);
    utcSaturday = utcWeekday(6);
    utcWeek_default = utcSunday;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/utcMonth.js
var utcMonth_default;
var init_utcMonth = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/utcMonth.js"() {
    init_interval();
    utcMonth_default = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
      date.setUTCDate(1);
    }, function(date, step) {
      date.setUTCMonth(date.getUTCMonth() + step);
    }, function(start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function(date) {
      return date.getUTCMonth();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/src/utcYear.js
var utcYear_default;
var init_utcYear = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/src/utcYear.js"() {
    init_interval();
    utcYear_default = newInterval(function(date) {
      date.setUTCHours(0, 0, 0, 0);
      date.setUTCMonth(0, 1);
    }, function(date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function(start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear();
    }, function(date) {
      return date.getUTCFullYear();
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time/index.js
var timeMilliseconds, timeSeconds, timeMinutes, timeHours, timeDays, timeSundays, timeMondays, timeTuesdays, timeWednesdays, timeThursdays, timeFridays, timeSaturdays, timeWeeks, timeMonths, timeYears, utcMinutes, utcHours, utcDays, utcSundays, utcMondays, utcTuesdays, utcWednesdays, utcThursdays, utcFridays, utcSaturdays, utcWeeks, utcMonths, utcYears;
var init_d3_time = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time/index.js"() {
    init_package();
    init_interval();
    init_millisecond();
    init_second();
    init_minute();
    init_hour();
    init_day();
    init_week();
    init_month();
    init_year();
    init_utcMinute();
    init_utcHour();
    init_utcDay();
    init_utcWeek();
    init_utcMonth();
    init_utcYear();
    timeMilliseconds = millisecond_default.range;
    timeSeconds = second_default.range;
    timeMinutes = minute_default.range;
    timeHours = hour_default.range;
    timeDays = day_default.range;
    timeSundays = sunday.range;
    timeMondays = monday.range;
    timeTuesdays = tuesday.range;
    timeWednesdays = wednesday.range;
    timeThursdays = thursday.range;
    timeFridays = friday.range;
    timeSaturdays = saturday.range;
    timeWeeks = week_default.range;
    timeMonths = month_default.range;
    timeYears = year_default.range;
    utcMinutes = utcMinute_default.range;
    utcHours = utcHour_default.range;
    utcDays = utcDay_default.range;
    utcSundays = utcSunday.range;
    utcMondays = utcMonday.range;
    utcTuesdays = utcTuesday.range;
    utcWednesdays = utcWednesday.range;
    utcThursdays = utcThursday.range;
    utcFridays = utcFriday.range;
    utcSaturdays = utcSaturday.range;
    utcWeeks = utcWeek_default.range;
    utcMonths = utcMonth_default.range;
    utcYears = utcYear_default.range;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/build/package.js
var init_package2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/build/package.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale.js
function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }
  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }
  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newYear(y2) {
  return { y: y2, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0 };
}
function locale_default2(locale) {
  var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "S": formatSeconds,
    "U": formatWeekNumberSunday,
    "w": formatWeekdayNumber,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "S": formatUTCSeconds,
    "U": formatUTCWeekNumberSunday,
    "w": formatUTCWeekdayNumber,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "S": parseSeconds,
    "U": parseWeekNumberSunday,
    "w": parseWeekdayNumber,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i = -1, j = 0, n = specifier.length, c2, pad2, format2;
      if (!(date instanceof Date))
        date = /* @__PURE__ */ new Date(+date);
      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad2 = pads[c2 = specifier.charAt(++i)]) != null)
            c2 = specifier.charAt(++i);
          else
            pad2 = c2 === "e" ? " " : "0";
          if (format2 = formats2[c2])
            c2 = format2(date, pad2);
          string.push(c2);
          j = i + 1;
        }
      }
      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }
  function newParse(specifier, newDate2) {
    return function(string) {
      var d = newYear(1900), i = parseSpecifier(d, specifier, string += "", 0);
      if (i != string.length)
        return null;
      if ("p" in d)
        d.H = d.H % 12 + d.p * 12;
      if ("W" in d || "U" in d) {
        if (!("w" in d))
          d.w = "W" in d ? 1 : 0;
        var day2 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate2(newYear(d.y)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day2 + 5) % 7 : d.w + d.U * 7 - (day2 + 6) % 7;
      }
      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      }
      return newDate2(d);
    };
  }
  function parseSpecifier(d, specifier, string, j) {
    var i = 0, n = specifier.length, m = string.length, c2, parse;
    while (i < n) {
      if (j >= m)
        return -1;
      c2 = specifier.charCodeAt(i++);
      if (c2 === 37) {
        c2 = specifier.charAt(i++);
        parse = parses[c2 in pads ? specifier.charAt(i++) : c2];
        if (!parse || (j = parse(d, string, j)) < 0)
          return -1;
      } else if (c2 != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }
  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
  }
  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }
  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }
  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }
  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }
  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }
  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }
  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }
  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }
  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }
  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }
  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }
  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }
  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }
  return {
    format: function(specifier) {
      var f = newFormat(specifier += "", formats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    parse: function(specifier) {
      var p = newParse(specifier += "", localDate);
      p.toString = function() {
        return specifier;
      };
      return p;
    },
    utcFormat: function(specifier) {
      var f = newFormat(specifier += "", utcFormats);
      f.toString = function() {
        return specifier;
      };
      return f;
    },
    utcParse: function(specifier) {
      var p = newParse(specifier, utcDate);
      p.toString = function() {
        return specifier;
      };
      return p;
    }
  };
}
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length2 = string.length;
  return sign2 + (length2 < width ? new Array(width - length2 + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  var map3 = {}, i = -1, n = names.length;
  while (++i < n)
    map3[names[i].toLowerCase()] = i;
  return map3;
}
function parseWeekdayNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}
function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
  return pad(1 + day_default.count(year_default(d), d), p, 3);
}
function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}
function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}
function formatWeekNumberSunday(d, p) {
  return pad(sunday.count(year_default(d), d), p, 2);
}
function formatWeekdayNumber(d) {
  return d.getDay();
}
function formatWeekNumberMonday(d, p) {
  return pad(monday.count(year_default(d), d), p, 2);
}
function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
  return pad(d.getFullYear() % 1e4, p, 4);
}
function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
  return pad(1 + utcDay_default.count(utcYear_default(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekNumberSunday(d, p) {
  return pad(utcSunday.count(utcYear_default(d), d), p, 2);
}
function formatUTCWeekdayNumber(d) {
  return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
  return pad(utcMonday.count(utcYear_default(d), d), p, 2);
}
function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 1e4, p, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
var pads, numberRe, percentRe, requoteRe;
var init_locale2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale.js"() {
    init_d3_time();
    pads = { "-": "", "_": " ", "0": "0" };
    numberRe = /^\s*\d+/;
    percentRe = /^%/;
    requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/en-US.js
var en_US_default2;
var init_en_US2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/en-US.js"() {
    init_locale2();
    en_US_default2 = locale_default2({
      dateTime: "%a %b %e %X %Y",
      date: "%m/%d/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ca-ES.js
var ca_ES_default2;
var init_ca_ES2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ca-ES.js"() {
    init_locale2();
    ca_ES_default2 = locale_default2({
      dateTime: "%A, %e de %B de %Y, %X",
      date: "%d/%m/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"],
      shortDays: ["dg.", "dl.", "dt.", "dc.", "dj.", "dv.", "ds."],
      months: ["gener", "febrer", "març", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"],
      shortMonths: ["gen.", "febr.", "març", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des."]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/de-CH.js
var de_CH_default2;
var init_de_CH2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/de-CH.js"() {
    init_locale2();
    de_CH_default2 = locale_default2({
      dateTime: "%A, der %e. %B %Y, %X",
      date: "%d.%m.%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      // unused
      days: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
      shortDays: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
      months: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
      shortMonths: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/de-DE.js
var de_DE_default2;
var init_de_DE2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/de-DE.js"() {
    init_locale2();
    de_DE_default2 = locale_default2({
      dateTime: "%A, der %e. %B %Y, %X",
      date: "%d.%m.%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      // unused
      days: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"],
      shortDays: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
      months: ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"],
      shortMonths: ["Jan", "Feb", "Mrz", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/en-CA.js
var en_CA_default2;
var init_en_CA2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/en-CA.js"() {
    init_locale2();
    en_CA_default2 = locale_default2({
      dateTime: "%a %b %e %X %Y",
      date: "%Y-%m-%d",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/en-GB.js
var en_GB_default2;
var init_en_GB2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/en-GB.js"() {
    init_locale2();
    en_GB_default2 = locale_default2({
      dateTime: "%a %e %b %X %Y",
      date: "%d/%m/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
      shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
      months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/es-ES.js
var es_ES_default2;
var init_es_ES2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/es-ES.js"() {
    init_locale2();
    es_ES_default2 = locale_default2({
      dateTime: "%A, %e de %B de %Y, %X",
      date: "%d/%m/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["domingo", "lunes", "martes", "miércoles", "jueves", "viernes", "sábado"],
      shortDays: ["dom", "lun", "mar", "mié", "jue", "vie", "sáb"],
      months: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"],
      shortMonths: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/fi-FI.js
var fi_FI_default2;
var init_fi_FI2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/fi-FI.js"() {
    init_locale2();
    fi_FI_default2 = locale_default2({
      dateTime: "%A, %-d. %Bta %Y klo %X",
      date: "%-d.%-m.%Y",
      time: "%H:%M:%S",
      periods: ["a.m.", "p.m."],
      days: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"],
      shortDays: ["Su", "Ma", "Ti", "Ke", "To", "Pe", "La"],
      months: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kesäkuu", "heinäkuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu"],
      shortMonths: ["Tammi", "Helmi", "Maalis", "Huhti", "Touko", "Kesä", "Heinä", "Elo", "Syys", "Loka", "Marras", "Joulu"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/fr-CA.js
var fr_CA_default2;
var init_fr_CA2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/fr-CA.js"() {
    init_locale2();
    fr_CA_default2 = locale_default2({
      dateTime: "%a %e %b %Y %X",
      date: "%Y-%m-%d",
      time: "%H:%M:%S",
      periods: ["", ""],
      days: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
      shortDays: ["dim", "lun", "mar", "mer", "jeu", "ven", "sam"],
      months: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
      shortMonths: ["jan", "fév", "mar", "avr", "mai", "jui", "jul", "aoû", "sep", "oct", "nov", "déc"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/fr-FR.js
var fr_FR_default2;
var init_fr_FR2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/fr-FR.js"() {
    init_locale2();
    fr_FR_default2 = locale_default2({
      dateTime: "%A, le %e %B %Y, %X",
      date: "%d/%m/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      // unused
      days: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"],
      shortDays: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
      months: ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "août", "septembre", "octobre", "novembre", "décembre"],
      shortMonths: ["janv.", "févr.", "mars", "avr.", "mai", "juin", "juil.", "août", "sept.", "oct.", "nov.", "déc."]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/he-IL.js
var he_IL_default2;
var init_he_IL2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/he-IL.js"() {
    init_locale2();
    he_IL_default2 = locale_default2({
      dateTime: "%A, %e ב%B %Y %X",
      date: "%d.%m.%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["ראשון", "שני", "שלישי", "רביעי", "חמישי", "שישי", "שבת"],
      shortDays: ["א׳", "ב׳", "ג׳", "ד׳", "ה׳", "ו׳", "ש׳"],
      months: ["ינואר", "פברואר", "מרץ", "אפריל", "מאי", "יוני", "יולי", "אוגוסט", "ספטמבר", "אוקטובר", "נובמבר", "דצמבר"],
      shortMonths: ["ינו׳", "פבר׳", "מרץ", "אפר׳", "מאי", "יוני", "יולי", "אוג׳", "ספט׳", "אוק׳", "נוב׳", "דצמ׳"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/hu-HU.js
var hu_HU_default2;
var init_hu_HU2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/hu-HU.js"() {
    init_locale2();
    hu_HU_default2 = locale_default2({
      dateTime: "%Y. %B %-e., %A %X",
      date: "%Y. %m. %d.",
      time: "%H:%M:%S",
      periods: ["de.", "du."],
      // unused
      days: ["vasárnap", "hétfő", "kedd", "szerda", "csütörtök", "péntek", "szombat"],
      shortDays: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
      months: ["január", "február", "március", "április", "május", "június", "július", "augusztus", "szeptember", "október", "november", "december"],
      shortMonths: ["jan.", "feb.", "már.", "ápr.", "máj.", "jún.", "júl.", "aug.", "szept.", "okt.", "nov.", "dec."]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/it-IT.js
var it_IT_default2;
var init_it_IT2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/it-IT.js"() {
    init_locale2();
    it_IT_default2 = locale_default2({
      dateTime: "%A %e %B %Y, %X",
      date: "%d/%m/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      // unused
      days: ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"],
      shortDays: ["Dom", "Lun", "Mar", "Mer", "Gio", "Ven", "Sab"],
      months: ["Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"],
      shortMonths: ["Gen", "Feb", "Mar", "Apr", "Mag", "Giu", "Lug", "Ago", "Set", "Ott", "Nov", "Dic"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ja-JP.js
var ja_JP_default2;
var init_ja_JP2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ja-JP.js"() {
    init_locale2();
    ja_JP_default2 = locale_default2({
      dateTime: "%Y %b %e %a %X",
      date: "%Y/%m/%d",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["日曜日", "月曜日", "火曜日", "水曜日", "木曜日", "金曜日", "土曜日"],
      shortDays: ["日", "月", "火", "水", "木", "金", "土"],
      months: ["睦月", "如月", "弥生", "卯月", "皐月", "水無月", "文月", "葉月", "長月", "神無月", "霜月", "師走"],
      shortMonths: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ko-KR.js
var ko_KR_default2;
var init_ko_KR2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ko-KR.js"() {
    init_locale2();
    ko_KR_default2 = locale_default2({
      dateTime: "%Y/%m/%d %a %X",
      date: "%Y/%m/%d",
      time: "%H:%M:%S",
      periods: ["오전", "오후"],
      days: ["일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"],
      shortDays: ["일", "월", "화", "수", "목", "금", "토"],
      months: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"],
      shortMonths: ["1월", "2월", "3월", "4월", "5월", "6월", "7월", "8월", "9월", "10월", "11월", "12월"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/mk-MK.js
var mk_MK_default2;
var init_mk_MK2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/mk-MK.js"() {
    init_locale2();
    mk_MK_default2 = locale_default2({
      dateTime: "%A, %e %B %Y г. %X",
      date: "%d.%m.%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["недела", "понеделник", "вторник", "среда", "четврток", "петок", "сабота"],
      shortDays: ["нед", "пон", "вто", "сре", "чет", "пет", "саб"],
      months: ["јануари", "февруари", "март", "април", "мај", "јуни", "јули", "август", "септември", "октомври", "ноември", "декември"],
      shortMonths: ["јан", "фев", "мар", "апр", "мај", "јун", "јул", "авг", "сеп", "окт", "ное", "дек"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/nl-NL.js
var nl_NL_default2;
var init_nl_NL2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/nl-NL.js"() {
    init_locale2();
    nl_NL_default2 = locale_default2({
      dateTime: "%a %e %B %Y %T",
      date: "%d-%m-%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      // unused
      days: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"],
      shortDays: ["zo", "ma", "di", "wo", "do", "vr", "za"],
      months: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"],
      shortMonths: ["jan", "feb", "mrt", "apr", "mei", "jun", "jul", "aug", "sep", "okt", "nov", "dec"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/pl-PL.js
var pl_PL_default2;
var init_pl_PL2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/pl-PL.js"() {
    init_locale2();
    pl_PL_default2 = locale_default2({
      dateTime: "%A, %e %B %Y, %X",
      date: "%d/%m/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      // unused
      days: ["Niedziela", "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota"],
      shortDays: ["Niedz.", "Pon.", "Wt.", "Śr.", "Czw.", "Pt.", "Sob."],
      months: ["Styczeń", "Luty", "Marzec", "Kwiecień", "Maj", "Czerwiec", "Lipiec", "Sierpień", "Wrzesień", "Październik", "Listopad", "Grudzień"],
      shortMonths: ["Stycz.", "Luty", "Marz.", "Kwie.", "Maj", "Czerw.", "Lipc.", "Sierp.", "Wrz.", "Paźdz.", "Listop.", "Grudz."]
      /* In Polish language abbraviated months are not commonly used so there is a dispute about the proper abbraviations. */
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/pt-BR.js
var pt_BR_default2;
var init_pt_BR2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/pt-BR.js"() {
    init_locale2();
    pt_BR_default2 = locale_default2({
      dateTime: "%A, %e de %B de %Y. %X",
      date: "%d/%m/%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
      shortDays: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"],
      months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
      shortMonths: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ru-RU.js
var ru_RU_default2;
var init_ru_RU2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/ru-RU.js"() {
    init_locale2();
    ru_RU_default2 = locale_default2({
      dateTime: "%A, %e %B %Y г. %X",
      date: "%d.%m.%Y",
      time: "%H:%M:%S",
      periods: ["AM", "PM"],
      days: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
      shortDays: ["вс", "пн", "вт", "ср", "чт", "пт", "сб"],
      months: ["января", "февраля", "марта", "апреля", "мая", "июня", "июля", "августа", "сентября", "октября", "ноября", "декабря"],
      shortMonths: ["янв", "фев", "мар", "апр", "май", "июн", "июл", "авг", "сен", "окт", "ноя", "дек"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/sv-SE.js
var sv_SE_default2;
var init_sv_SE2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/sv-SE.js"() {
    init_locale2();
    sv_SE_default2 = locale_default2({
      dateTime: "%A den %d %B %Y %X",
      date: "%Y-%m-%d",
      time: "%H:%M:%S",
      periods: ["fm", "em"],
      days: ["Söndag", "Måndag", "Tisdag", "Onsdag", "Torsdag", "Fredag", "Lördag"],
      shortDays: ["Sön", "Mån", "Tis", "Ons", "Tor", "Fre", "Lör"],
      months: ["Januari", "Februari", "Mars", "April", "Maj", "Juni", "Juli", "Augusti", "September", "Oktober", "November", "December"],
      shortMonths: ["Jan", "Feb", "Mar", "Apr", "Maj", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dec"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/zh-CN.js
var zh_CN_default2;
var init_zh_CN2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/locale/zh-CN.js"() {
    init_locale2();
    zh_CN_default2 = locale_default2({
      dateTime: "%x %A %X",
      date: "%Y年%-m月%-d日",
      time: "%H:%M:%S",
      periods: ["上午", "下午"],
      days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
      shortDays: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
      months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
      shortMonths: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
    });
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/isoFormat.js
function formatIsoNative(date) {
  return date.toISOString();
}
var isoSpecifier, formatIso;
var init_isoFormat = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/isoFormat.js"() {
    init_en_US2();
    isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
    formatIso = Date.prototype.toISOString ? formatIsoNative : en_US_default2.utcFormat(isoSpecifier);
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso;
var init_isoParse = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/src/isoParse.js"() {
    init_en_US2();
    init_isoFormat();
    parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : en_US_default2.utcParse(isoSpecifier);
  }
});

// node_modules/react-d3-zoom/node_modules/d3-time-format/index.js
var timeFormat, timeParse, utcFormat, utcParse;
var init_d3_time_format = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-time-format/index.js"() {
    init_package2();
    init_en_US2();
    init_locale2();
    init_ca_ES2();
    init_de_CH2();
    init_de_DE2();
    init_en_CA2();
    init_en_GB2();
    init_en_US2();
    init_es_ES2();
    init_fi_FI2();
    init_fr_CA2();
    init_fr_FR2();
    init_he_IL2();
    init_hu_HU2();
    init_it_IT2();
    init_ja_JP2();
    init_ko_KR2();
    init_mk_MK2();
    init_nl_NL2();
    init_pl_PL2();
    init_pt_BR2();
    init_ru_RU2();
    init_sv_SE2();
    init_zh_CN2();
    init_isoFormat();
    init_isoParse();
    timeFormat = en_US_default2.format;
    timeParse = en_US_default2.parse;
    utcFormat = en_US_default2.utcFormat;
    utcParse = en_US_default2.utcParse;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/time.js
function newDate(t) {
  return new Date(t);
}
function calendar(year, month, week2, day2, hour2, minute2, second2, millisecond2, format2) {
  var scale = continuous(deinterpolateLinear, number_default2), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
  var tickIntervals = [
    [second2, 1, durationSecond],
    [second2, 5, 5 * durationSecond],
    [second2, 15, 15 * durationSecond],
    [second2, 30, 30 * durationSecond],
    [minute2, 1, durationMinute],
    [minute2, 5, 5 * durationMinute],
    [minute2, 15, 15 * durationMinute],
    [minute2, 30, 30 * durationMinute],
    [hour2, 1, durationHour],
    [hour2, 3, 3 * durationHour],
    [hour2, 6, 6 * durationHour],
    [hour2, 12, 12 * durationHour],
    [day2, 1, durationDay],
    [day2, 2, 2 * durationDay],
    [week2, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function tickFormat(date) {
    return (second2(date) < date ? formatMillisecond : minute2(date) < date ? formatSecond : hour2(date) < date ? formatMinute : day2(date) < date ? formatHour : month(date) < date ? week2(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear2)(date);
  }
  function tickInterval(interval, start, stop, step) {
    if (interval == null)
      interval = 10;
    if (typeof interval === "number") {
      var target = Math.abs(stop - start) / interval, i = bisector_default(function(i2) {
        return i2[2];
      }).right(tickIntervals, target);
      if (i === tickIntervals.length) {
        step = tickStep(start / durationYear, stop / durationYear, interval);
        interval = year;
      } else if (i) {
        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        step = i[1];
        interval = i[0];
      } else {
        step = tickStep(start, stop, interval);
        interval = millisecond2;
      }
    }
    return step == null ? interval : interval.every(step);
  }
  scale.invert = function(y2) {
    return new Date(invert(y2));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(_) : domain().map(newDate);
  };
  scale.ticks = function(interval, step) {
    var d = domain(), t03 = d[0], t13 = d[d.length - 1], r = t13 < t03, t;
    if (r)
      t = t03, t03 = t13, t13 = t;
    t = tickInterval(interval, t03, t13, step);
    t = t ? t.range(t03, t13 + 1) : [];
    return r ? t.reverse() : t;
  };
  scale.tickFormat = function(specifier) {
    return specifier == null ? tickFormat : format2(specifier);
  };
  scale.nice = function(interval, step) {
    var d = domain();
    return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice_default(d, interval)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(year, month, week2, day2, hour2, minute2, second2, millisecond2, format2));
  };
  return scale;
}
function time_default() {
  return calendar(year_default, month_default, week_default, day_default, hour_default, minute_default, second_default, millisecond_default, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]);
}
var durationSecond, durationMinute, durationHour, durationDay, durationWeek, durationMonth, durationYear;
var init_time = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/time.js"() {
    init_d3_array();
    init_d3_interpolate();
    init_d3_time();
    init_d3_time_format();
    init_nice();
    init_continuous();
    durationSecond = 1e3;
    durationMinute = durationSecond * 60;
    durationHour = durationMinute * 60;
    durationDay = durationHour * 24;
    durationWeek = durationDay * 7;
    durationMonth = durationDay * 30;
    durationYear = durationDay * 365;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/utcTime.js
function utcTime_default() {
  return calendar(utcYear_default, utcMonth_default, utcWeek_default, utcDay_default, utcHour_default, utcMinute_default, second_default, millisecond_default, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]);
}
var init_utcTime = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/utcTime.js"() {
    init_time();
    init_d3_time_format();
    init_d3_time();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/colors.js
function colors_default(s2) {
  return s2.match(/.{6}/g).map(function(x2) {
    return "#" + x2;
  });
}
var init_colors = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/colors.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/category10.js
function category10_default() {
  return ordinal().range(colors10);
}
var colors10;
var init_category10 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/category10.js"() {
    init_colors();
    init_ordinal();
    colors10 = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/category20b.js
function category20b_default() {
  return ordinal().range(colors20b);
}
var colors20b;
var init_category20b = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/category20b.js"() {
    init_colors();
    init_ordinal();
    colors20b = colors_default("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/category20c.js
function category20c_default() {
  return ordinal().range(colors20c);
}
var colors20c;
var init_category20c = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/category20c.js"() {
    init_colors();
    init_ordinal();
    colors20c = colors_default("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/category20.js
function category20_default() {
  return ordinal().range(colors20);
}
var colors20;
var init_category20 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/category20.js"() {
    init_colors();
    init_ordinal();
    colors20 = colors_default("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/cubehelix.js
function cubehelix_default2() {
  return linear2().interpolate(cubehelixLong_default).range([cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1)]);
}
var init_cubehelix3 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/cubehelix.js"() {
    init_linear();
    init_d3_color();
    init_d3_interpolate();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/sequential.js
function sequential(interpolate) {
  var x0 = 0, x1 = 1, clamp = false;
  function scale(x2) {
    var t = (x2 - x0) / (x1 - x0);
    return interpolate(clamp ? Math.max(0, Math.min(1, t)) : t);
  }
  scale.domain = function(_) {
    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };
  scale.copy = function() {
    return sequential(interpolate).domain([x0, x1]).clamp(clamp);
  };
  return linearish(scale);
}
var init_sequential = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/sequential.js"() {
    init_linear();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/rainbow.js
function warm() {
  return sequential(cubehelixLong_default(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8)));
}
function cool() {
  return sequential(cubehelixLong_default(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8)));
}
function rainbow_default() {
  var rainbow = cubehelix();
  return sequential(function(t) {
    if (t < 0 || t > 1)
      t -= Math.floor(t);
    var ts = Math.abs(t - 0.5);
    rainbow.h = 360 * t - 100;
    rainbow.s = 1.5 - 1.5 * ts;
    rainbow.l = 0.8 - 0.9 * ts;
    return rainbow + "";
  });
}
var init_rainbow = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/rainbow.js"() {
    init_d3_color();
    init_d3_interpolate();
    init_sequential();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/src/viridis.js
function ramp(range) {
  var s2 = sequential(function(t) {
    return range[Math.round(t * range.length - t)];
  }).clamp(true);
  delete s2.clamp;
  return s2;
}
function viridis_default() {
  return ramp(rangeViridis);
}
function magma() {
  return ramp(rangeMagma);
}
function inferno() {
  return ramp(rangeInferno);
}
function plasma() {
  return ramp(rangePlasma);
}
var rangeViridis, rangeMagma, rangeInferno, rangePlasma;
var init_viridis = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/src/viridis.js"() {
    init_colors();
    init_sequential();
    rangeViridis = colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725");
    rangeMagma = colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf");
    rangeInferno = colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4");
    rangePlasma = colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921");
  }
});

// node_modules/react-d3-zoom/node_modules/d3-scale/index.js
var d3_scale_exports = {};
__export(d3_scale_exports, {
  scaleBand: () => band,
  scaleCategory10: () => category10_default,
  scaleCategory20: () => category20_default,
  scaleCategory20b: () => category20b_default,
  scaleCategory20c: () => category20c_default,
  scaleCool: () => cool,
  scaleCubehelix: () => cubehelix_default2,
  scaleIdentity: () => identity3,
  scaleImplicit: () => implicit,
  scaleInferno: () => inferno,
  scaleLinear: () => linear2,
  scaleLog: () => log,
  scaleMagma: () => magma,
  scaleOrdinal: () => ordinal,
  scalePlasma: () => plasma,
  scalePoint: () => point,
  scalePow: () => pow,
  scaleQuantile: () => quantile,
  scaleQuantize: () => quantize,
  scaleRainbow: () => rainbow_default,
  scaleSqrt: () => sqrt,
  scaleThreshold: () => threshold,
  scaleTime: () => time_default,
  scaleUtc: () => utcTime_default,
  scaleViridis: () => viridis_default,
  scaleWarm: () => warm
});
var init_d3_scale = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-scale/index.js"() {
    init_band();
    init_identity2();
    init_linear();
    init_log();
    init_ordinal();
    init_pow();
    init_quantile2();
    init_quantize();
    init_threshold();
    init_time();
    init_utcTime();
    init_category10();
    init_category20b();
    init_category20c();
    init_category20();
    init_cubehelix3();
    init_rainbow();
    init_viridis();
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/utils/scale.js
var require_scale = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/utils/scale.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.scale = scale;
    var _d3Scale = (init_d3_scale(), __toCommonJS(d3_scale_exports));
    var _d3Scale2 = _interopRequireDefault(_d3Scale);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function scale(props) {
      var type = props.type;
      var scale2 = props.scale;
      var func;
      if (scale2 === "linear")
        func = _d3Scale2.default.scaleLinear();
      else if (scale2 === "identity")
        func = _d3Scale2.default.scaleIdentity();
      else if (scale2 === "sqrt")
        func = _d3Scale2.default.scaleSqrt();
      else if (scale2 === "pow")
        func = _d3Scale2.default.scalePow();
      else if (scale2 === "log")
        func = _d3Scale2.default.scaleLog();
      else if (scale2 === "quantize")
        func = _d3Scale2.default.scaleQuantize();
      else if (scale2 === "quantile")
        func = _d3Scale2.default.scaleQuantile();
      else if (scale2 === "ordinal")
        func = _d3Scale2.default.scaleOrdinal();
      else if (scale2 === "band")
        func = _d3Scale2.default.scaleBand();
      else if (scale2 === "time")
        func = _d3Scale2.default.scaleTime();
      else
        new Error('Please check your axis scale setting. "' + scale2 + '" scale is invalid. ');
      func = _mkScaleSettings(props, func);
      return func;
    }
    function _mkScaleSettings(props, func) {
      var type = props.type;
      var range = props.range;
      var domain = props.domain;
      var scale2 = props.scale;
      var bandPaddingInner = props.bandPaddingInner;
      var bandPaddingOuter = props.bandPaddingOuter;
      if (range)
        func.range(range);
      if (domain)
        func.domain(domain);
      if (scale2 === "band") {
        func.round(true);
        if (bandPaddingInner)
          func.paddingInner(bandPaddingInner);
        else
          func.paddingInner(0.1);
        if (bandPaddingOuter)
          func.paddingOuter(bandPaddingOuter);
        else
          func.paddingOuter(0.1);
      }
      return func;
    }
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/container/svg.js
var require_svg = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/container/svg.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var _scale = require_scale();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var ChartSvg = function(_Component) {
      _inherits(ChartSvg2, _Component);
      function ChartSvg2(props) {
        _classCallCheck(this, ChartSvg2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(ChartSvg2).call(this, props));
      }
      _createClass(ChartSvg2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var svgClassName = _props.svgClassName;
          var id = _props.id;
          var children = _props.children;
          var t = "translate(" + margins.left + ", " + margins.top + ")";
          return _react2.default.createElement(
            "svg",
            {
              height,
              width,
              className: svgClassName,
              id,
              ref: "svgContainer"
            },
            _react2.default.createElement(
              "g",
              {
                transform: t
              },
              children
            )
          );
        }
      }]);
      return ChartSvg2;
    }(_react.Component);
    ChartSvg.defaultProps = _extends({
      svgClassName: "react-d3-core__container_svg",
      onZoom: function onZoom() {
      },
      scaleExtent: [1, 10]
    }, _commonProps2.default);
    ChartSvg.propTypes = {
      id: _react.PropTypes.string,
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      svgClassName: _react.PropTypes.string.isRequired
    };
    exports.default = ChartSvg;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/container/title.js
var require_title = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/container/title.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var ChartTitle = function(_Component) {
      _inherits(ChartTitle2, _Component);
      function ChartTitle2(props) {
        _classCallCheck(this, ChartTitle2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(ChartTitle2).call(this, props));
      }
      _createClass(ChartTitle2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var titleClassName = _props.titleClassName;
          var title = _props.title;
          var width = _props.width;
          var titleStyle = {
            width,
            textAlign: "center",
            fontSize: "2em",
            paddingBottom: "1.3em"
          };
          return _react2.default.createElement(
            "div",
            {
              style: titleStyle,
              className: titleClassName
            },
            title
          );
        }
      }]);
      return ChartTitle2;
    }(_react.Component);
    ChartTitle.defaultProps = _extends({
      titleClassName: "react-d3-core__container_title",
      title: ""
    }, _commonProps2.default);
    ChartTitle.propTypes = {
      width: _react.PropTypes.number.isRequired,
      title: _react.PropTypes.string,
      titleClassName: _react.PropTypes.string
    };
    exports.default = ChartTitle;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/build/package.js
var version3;
var init_package3 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/build/package.js"() {
    version3 = "0.7.3";
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/namespaces.js
var xhtml, namespaces_default;
var init_namespaces = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/namespaces.js"() {
    xhtml = "http://www.w3.org/1999/xhtml";
    namespaces_default = {
      svg: "http://www.w3.org/2000/svg",
      xhtml,
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace",
      xmlns: "http://www.w3.org/2000/xmlns/"
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix2 = name += "", i = prefix2.indexOf(":");
  if (i >= 0 && (prefix2 = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces_default.hasOwnProperty(prefix2) ? { space: namespaces_default[prefix2], local: name } : name;
}
var init_namespace = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/namespace.js"() {
    init_namespaces();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
var init_creator = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/creator.js"() {
    init_namespace();
    init_namespaces();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/matcher.js
var matcher, element, vendorMatches, matcher_default;
var init_matcher = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/matcher.js"() {
    matcher = function(selector) {
      return function() {
        return this.matches(selector);
      };
    };
    if (typeof document !== "undefined") {
      element = document.documentElement;
      if (!element.matches) {
        vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
        matcher = function(selector) {
          return function() {
            return vendorMatches.call(this, selector);
          };
        };
      }
    }
    matcher_default = matcher;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/on.js
function filterContextListener(listener, index, group) {
  listener = contextListener(listener, index, group);
  return function(event2) {
    var related = event2.relatedTarget;
    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
      listener.call(this, event2);
    }
  };
}
function contextListener(listener, index, group) {
  return function(event1) {
    var event0 = event;
    event = event1;
    try {
      listener.call(this, this.__data__, index, group);
    } finally {
      event = event0;
    }
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.capture);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, capture) {
  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
  return function(d, i, group) {
    var on = this.__on, o, listener = wrap(value, i, group);
    if (on)
      for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.capture);
          this.addEventListener(o.type, o.listener = listener, o.capture = capture);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, capture);
    o = { type: typename.type, name: typename.name, value, listener, capture };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function on_default(typename, value, capture) {
  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  if (capture == null)
    capture = false;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, capture));
  return this;
}
function customEvent(event1, listener, that, args) {
  var event0 = event;
  event1.sourceEvent = event;
  event = event1;
  try {
    return listener.apply(that, args);
  } finally {
    event = event0;
  }
}
var filterEvents, event, element;
var init_on = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/on.js"() {
    filterEvents = {};
    event = null;
    if (typeof document !== "undefined") {
      element = document.documentElement;
      if (!("onmouseenter" in element)) {
        filterEvents = { mouseenter: "mouseover", mouseleave: "mouseout" };
      }
    }
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default() {
  var current = event, source;
  while (source = current.sourceEvent)
    current = source;
  return current;
}
var init_sourceEvent = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/sourceEvent.js"() {
    init_on();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/point.js
function point_default(node, event2) {
  var svg = node.ownerSVGElement || node;
  if (svg.createSVGPoint) {
    var point6 = svg.createSVGPoint();
    point6.x = event2.clientX, point6.y = event2.clientY;
    point6 = point6.matrixTransform(node.getScreenCTM().inverse());
    return [point6.x, point6.y];
  }
  var rect = node.getBoundingClientRect();
  return [event2.clientX - rect.left - node.clientLeft, event2.clientY - rect.top - node.clientTop];
}
var init_point = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/point.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/mouse.js
function mouse_default(node) {
  var event2 = sourceEvent_default();
  if (event2.changedTouches)
    event2 = event2.changedTouches[0];
  return point_default(node, event2);
}
var init_mouse = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/mouse.js"() {
    init_sourceEvent();
    init_point();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selector.js
function selector_default(selector) {
  return function() {
    return this.querySelector(selector);
  };
}
var init_selector = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selector.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/select.js
function select_default(select) {
  if (typeof select !== "function")
    select = selector_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_select = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/select.js"() {
    init_selection();
    init_selector();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selectorAll.js
function selectorAll_default(selector) {
  return function() {
    return this.querySelectorAll(selector);
  };
}
var init_selectorAll = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selectorAll.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/selectAll.js
function selectAll_default(select) {
  if (typeof select !== "function")
    select = selectorAll_default(select);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}
var init_selectAll = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/selectAll.js"() {
    init_selection();
    init_selectorAll();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function")
    match = matcher_default(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup[i] = node;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}
var init_filter = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/filter.js"() {
    init_selection();
    init_matcher();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/constant.js
function constant_default4(x2) {
  return function() {
    return x2;
  };
}
var init_constant4 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/constant.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/data.js
function bindIndex(parent, group, enter, update, exit, data) {
  var i = 0, node, groupLength = group.length, dataLength = data.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data, key) {
  var i, node, nodeByKeyValue = {}, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
      if (keyValue in nodeByKeyValue) {
        exit[i] = node;
      } else {
        nodeByKeyValue[keyValue] = node;
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = keyPrefix + key.call(parent, data[i], i, data);
    if (node = nodeByKeyValue[keyValue]) {
      update[i] = node;
      node.__data__ = data[i];
      nodeByKeyValue[keyValue] = null;
    } else {
      enter[i] = new EnterNode(parent, data[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
      exit[i] = node;
    }
  }
}
function data_default(value, key) {
  if (!value) {
    data = new Array(this.size()), j = -1;
    this.each(function(d) {
      data[++j] = d;
    });
    return data;
  }
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant_default4(value);
  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data = value.call(parent, parent && parent.__data__, j, parents), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function EnterNode(parent, datum) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum;
}
var keyPrefix;
var init_data = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/data.js"() {
    init_selection();
    init_constant4();
    keyPrefix = "$";
    EnterNode.prototype = {
      constructor: EnterNode,
      appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
      },
      insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
      },
      querySelector: function(selector) {
        return this._parent.querySelector(selector);
      },
      querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update) {
  return new Array(update.length);
}
var init_sparse = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/sparse.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
var init_enter = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/enter.js"() {
    init_sparse();
    init_selection();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}
var init_exit = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/exit.js"() {
    init_sparse();
    init_selection();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/merge.js
function merge_default2(selection2) {
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection(merges, this._parents);
}
var init_merge2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/merge.js"() {
    init_selection();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && next !== node.nextSibling)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}
var init_order = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/order.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare)
    compare = ascending;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}
var init_sort = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/sort.js"() {
    init_selection();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
var init_call = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/call.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  var nodes = new Array(this.size()), i = -1;
  this.each(function() {
    nodes[++i] = this;
  });
  return nodes;
}
var init_nodes = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/nodes.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}
var init_node = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/node.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/size.js
function size_default() {
  var size = 0;
  this.each(function() {
    ++size;
  });
  return size;
}
var init_size = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/size.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}
var init_empty = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/empty.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}
var init_each = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/each.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}
var init_attr = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/attr.js"() {
    init_namespace();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}
var init_window = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/window.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function style_default(name, value, priority) {
  var node;
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : window_default(node = this.node()).getComputedStyle(node, null).getPropertyValue(name);
}
var init_style = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/style.js"() {
    init_window();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
var init_property = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/property.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
function classedAdd(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.add(names[i]);
}
function classedRemove(node, names) {
  var list = classList(node), i = -1, n = names.length;
  while (++i < n)
    list.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function classed_default(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
var init_classed = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/classed.js"() {
    ClassList.prototype = {
      add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
          this._names.push(name);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
          this._names.splice(i, 1);
          this._node.setAttribute("class", this._names.join(" "));
        }
      },
      contains: function(name) {
        return this._names.indexOf(name) >= 0;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}
var init_text = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/text.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
var init_html = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/html.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/raise.js
function raise2() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise2);
}
var init_raise = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/raise.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}
var init_lower = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/lower.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/append.js
function append(create) {
  return function() {
    return this.appendChild(create.apply(this, arguments));
  };
}
function insert(create, select) {
  return function() {
    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
  };
}
function constantNull() {
  return null;
}
function append_default(name, before) {
  var create = typeof name === "function" ? name : creator_default(name);
  return this.select(arguments.length < 2 ? append(create) : insert(create, before == null ? constantNull : typeof before === "function" ? before : selector_default(before)));
}
var init_append = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/append.js"() {
    init_creator();
    init_selector();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/remove.js
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function remove_default() {
  return this.each(remove);
}
var init_remove = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/remove.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
var init_datum = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/datum.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type, params) {
  var window = window_default(node), event2 = window.CustomEvent;
  if (event2) {
    event2 = new event2(type, params);
  } else {
    event2 = window.document.createEvent("Event");
    if (params)
      event2.initEvent(type, params.bubbles, params.cancelable), event2.detail = params.detail;
    else
      event2.initEvent(type, false, false);
  }
  node.dispatchEvent(event2);
}
function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}
function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}
function dispatch_default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}
var init_dispatch = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/dispatch.js"() {
    init_window();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/index.js
function Selection(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root);
}
var root, selection_default;
var init_selection = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selection/index.js"() {
    init_select();
    init_selectAll();
    init_filter();
    init_data();
    init_enter();
    init_exit();
    init_merge2();
    init_order();
    init_sort();
    init_call();
    init_nodes();
    init_node();
    init_size();
    init_empty();
    init_each();
    init_attr();
    init_style();
    init_property();
    init_classed();
    init_text();
    init_html();
    init_raise();
    init_lower();
    init_append();
    init_remove();
    init_datum();
    init_on();
    init_dispatch();
    root = [null];
    Selection.prototype = selection.prototype = {
      constructor: Selection,
      select: select_default,
      selectAll: selectAll_default,
      filter: filter_default,
      data: data_default,
      enter: enter_default,
      exit: exit_default,
      merge: merge_default2,
      order: order_default,
      sort: sort_default,
      call: call_default,
      nodes: nodes_default,
      node: node_default,
      size: size_default,
      empty: empty_default,
      each: each_default,
      attr: attr_default,
      style: style_default,
      property: property_default,
      classed: classed_default,
      text: text_default,
      html: html_default,
      raise: raise_default,
      lower: lower_default,
      append: append_default,
      remove: remove_default,
      datum: datum_default,
      on: on_default,
      dispatch: dispatch_default
    };
    selection_default = selection;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
}
var init_select2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/select.js"() {
    init_selection();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/selectAll.js
function selectAll_default2(selector) {
  return typeof selector === "string" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector], root);
}
var init_selectAll2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/selectAll.js"() {
    init_selection();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/touch.js
function touch_default(node, touches, identifier) {
  if (arguments.length < 3)
    identifier = touches, touches = sourceEvent_default().changedTouches;
  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
    if ((touch = touches[i]).identifier === identifier) {
      return point_default(node, touch);
    }
  }
  return null;
}
var init_touch = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/touch.js"() {
    init_sourceEvent();
    init_point();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/src/touches.js
function touches_default(node, touches) {
  if (touches == null)
    touches = sourceEvent_default().touches;
  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
    points[i] = point_default(node, touches[i]);
  }
  return points;
}
var init_touches = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/src/touches.js"() {
    init_sourceEvent();
    init_point();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-selection/index.js
var d3_selection_exports = {};
__export(d3_selection_exports, {
  creator: () => creator_default,
  customEvent: () => customEvent,
  event: () => event,
  matcher: () => matcher_default,
  mouse: () => mouse_default,
  namespace: () => namespace_default,
  namespaces: () => namespaces_default,
  select: () => select_default2,
  selectAll: () => selectAll_default2,
  selection: () => selection_default,
  selector: () => selector_default,
  selectorAll: () => selectorAll_default,
  touch: () => touch_default,
  touches: () => touches_default,
  version: () => version3,
  window: () => window_default
});
var init_d3_selection = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-selection/index.js"() {
    init_package3();
    init_creator();
    init_matcher();
    init_mouse();
    init_namespace();
    init_namespaces();
    init_select2();
    init_selectAll2();
    init_selection();
    init_selector();
    init_selectorAll();
    init_touch();
    init_touches();
    init_window();
    init_on();
  }
});

// node_modules/style-attr/lib/index.js
var require_lib = __commonJS({
  "node_modules/style-attr/lib/index.js"(exports, module) {
    function parse(raw, opts) {
      opts = opts || {};
      var preserveNumbers = opts.preserveNumbers;
      var trim = function(s2) {
        return s2.trim();
      };
      var obj = {};
      getKeyValueChunks(raw).map(trim).filter(Boolean).forEach(function(item) {
        var pos = item.indexOf(":");
        var key = item.substr(0, pos).trim();
        var val = item.substr(pos + 1).trim();
        if (preserveNumbers && isNumeric(val)) {
          val = Number(val);
        }
        obj[key] = val;
      });
      return obj;
    }
    function isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    }
    function getKeyValueChunks(raw) {
      var chunks = [];
      var offset = 0;
      var sep = ";";
      var hasUnclosedUrl = /url\([^\)]+$/;
      var chunk = "";
      var nextSplit;
      while (offset < raw.length) {
        nextSplit = raw.indexOf(sep, offset);
        if (nextSplit === -1) {
          nextSplit = raw.length;
        }
        chunk += raw.substring(offset, nextSplit);
        if (hasUnclosedUrl.test(chunk)) {
          chunk += ";";
          offset = nextSplit + 1;
          continue;
        }
        chunks.push(chunk);
        chunk = "";
        offset = nextSplit + 1;
      }
      return chunks;
    }
    function stringify(obj) {
      return Object.keys(obj).map(function(key) {
        return key + ":" + obj[key];
      }).join(";");
    }
    function normalize(str, opts) {
      return stringify(parse(str, opts));
    }
    module.exports.parse = parse;
    module.exports.stringify = stringify;
    module.exports.normalize = normalize;
  }
});

// node_modules/query-selector/lib/query-selector/util.js
var require_util = __commonJS({
  "node_modules/query-selector/lib/query-selector/util.js"(exports, module) {
    var R_BOOLEAN = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
    var R_FOCUSABLE = /^(?:button|input|object|select|textarea)$/i;
    var R_CLICKABLE = /^a(?:rea)?$/i;
    var R_INVALID_CHAR = /:|^on/;
    var attrFix = {};
    var propFix;
    var attrHooks = {
      // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
      tabindex: {
        get: function(el) {
          var attributeNode = el.getAttributeNode("tabindex");
          return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : R_FOCUSABLE.test(el.nodeName) || R_CLICKABLE.test(el.nodeName) && el.href ? 0 : void 0;
        }
      }
    };
    var boolHook = {
      get: function(elem, name) {
        return elem[propFix[name] || name] ? (
          // 根据 w3c attribute , true 时返回属性名字符串
          name.toLowerCase()
        ) : void 0;
      }
    };
    var attrNodeHook = {};
    attrHooks.style = {
      get: function(el) {
        return el.style.cssText;
      }
    };
    propFix = {
      hidefocus: "hideFocus",
      tabindex: "tabIndex",
      readonly: "readOnly",
      "for": "htmlFor",
      "class": "className",
      maxlength: "maxLength",
      cellspacing: "cellSpacing",
      cellpadding: "cellPadding",
      rowspan: "rowSpan",
      colspan: "colSpan",
      usemap: "useMap",
      frameborder: "frameBorder",
      contenteditable: "contentEditable"
    };
    var ua = typeof navigator !== "undefined" ? navigator.userAgent : "";
    var doc = typeof document !== "undefined" ? document : {};
    function numberify(s2) {
      var c2 = 0;
      return parseFloat(s2.replace(/\./g, function() {
        return c2++ === 0 ? "." : "";
      }));
    }
    function ieVersion() {
      var m, v;
      if ((m = ua.match(/MSIE ([^;]*)|Trident.*; rv(?:\s|:)?([0-9.]+)/)) && (v = m[1] || m[2])) {
        return doc.documentMode || numberify(v);
      }
    }
    function mix(s2, t) {
      for (var p in t) {
        s2[p] = t[p];
      }
    }
    function each(arr, fn) {
      var i = 0, l = arr.length;
      for (; i < l; i++) {
        if (fn(arr[i], i) === false) {
          break;
        }
      }
    }
    var ie = ieVersion();
    if (ie && ie < 8) {
      attrHooks.style.set = function(el, val) {
        el.style.cssText = val;
      };
      mix(attrNodeHook, {
        get: function(elem, name) {
          var ret = elem.getAttributeNode(name);
          return ret && // fix #100
          (ret.specified || ret.nodeValue) ? ret.nodeValue : void 0;
        }
      });
      mix(attrFix, propFix);
      attrHooks.tabIndex = attrHooks.tabindex;
      each(["href", "src", "width", "height", "colSpan", "rowSpan"], function(name) {
        attrHooks[name] = {
          get: function(elem) {
            var ret = elem.getAttribute(name, 2);
            return ret === null ? void 0 : ret;
          }
        };
      });
      attrHooks.placeholder = {
        get: function(elem, name) {
          return elem[name] || attrNodeHook.get(elem, name);
        }
      };
    }
    if (ie) {
      hrefFix = attrHooks.href = attrHooks.href || {};
      hrefFix.set = function(el, val, name) {
        var childNodes = el.childNodes, b, len = childNodes.length, allText = len > 0;
        for (len = len - 1; len >= 0; len--) {
          if (childNodes[len].nodeType !== 3) {
            allText = 0;
          }
        }
        if (allText) {
          b = el.ownerDocument.createElement("b");
          b.style.display = "none";
          el.appendChild(b);
        }
        el.setAttribute(name, "" + val);
        if (b) {
          el.removeChild(b);
        }
      };
    }
    var hrefFix;
    var RE_TRIM = /^[\s\xa0]+|[\s\xa0]+$/g;
    var trim = String.prototype.trim;
    var SPACE = " ";
    var getElementsByTagName;
    getElementsByTagName = function(name, context) {
      return context.getElementsByTagName(name);
    };
    if (doc.createElement) {
      div = doc.createElement("div");
      div.appendChild(document.createComment(""));
      if (div.getElementsByTagName("*").length) {
        getElementsByTagName = function(name, context) {
          var nodes = context.getElementsByTagName(name), needsFilter = name === "*";
          if (needsFilter || typeof nodes.length !== "number") {
            var ret = [], i = 0, el;
            while (el = nodes[i++]) {
              if (!needsFilter || el.nodeType === 1) {
                ret.push(el);
              }
            }
            return ret;
          } else {
            return nodes;
          }
        };
      }
    }
    var div;
    var compareNodeOrder = "sourceIndex" in (doc && doc.documentElement || {}) ? function(a2, b) {
      return a2.sourceIndex - b.sourceIndex;
    } : function(a2, b) {
      if (!a2.compareDocumentPosition || !b.compareDocumentPosition) {
        return a2.compareDocumentPosition ? -1 : 1;
      }
      var bit = a2.compareDocumentPosition(b) & 4;
      return bit ? -1 : 1;
    };
    var util = module.exports = {
      ie,
      unique: function() {
        var hasDuplicate, baseHasDuplicate = true;
        [0, 0].sort(function() {
          baseHasDuplicate = false;
          return 0;
        });
        function sortOrder(a2, b) {
          if (a2 === b) {
            hasDuplicate = true;
            return 0;
          }
          return compareNodeOrder(a2, b);
        }
        return function(elements) {
          hasDuplicate = baseHasDuplicate;
          elements.sort(sortOrder);
          if (hasDuplicate) {
            var i = 1, len = elements.length;
            while (i < len) {
              if (elements[i] === elements[i - 1]) {
                elements.splice(i, 1);
                --len;
              } else {
                i++;
              }
            }
          }
          return elements;
        };
      }(),
      getElementsByTagName,
      getSimpleAttr: function(el, name) {
        var ret = el && el.getAttributeNode(name);
        if (ret && ret.specified) {
          return "value" in ret ? ret.value : ret.nodeValue;
        }
        return void 0;
      },
      contains: ie ? function(a2, b) {
        if (a2.nodeType === 9) {
          a2 = a2.documentElement;
        }
        b = b.parentNode;
        if (a2 === b) {
          return true;
        }
        if (b && b.nodeType === 1) {
          return a2.contains && a2.contains(b);
        } else {
          return false;
        }
      } : function(a2, b) {
        return !!(a2.compareDocumentPosition(b) & 16);
      },
      isTag: function(el, value) {
        return value === "*" || el.nodeName.toLowerCase() === value.toLowerCase();
      },
      hasSingleClass: function(el, cls) {
        var className = el && util.getSimpleAttr(el, "class");
        return className && (className = className.replace(/[\r\t\n]/g, SPACE)) && (SPACE + className + SPACE).indexOf(SPACE + cls + SPACE) > -1;
      },
      startsWith: function(str, prefix2) {
        return str.lastIndexOf(prefix2, 0) === 0;
      },
      endsWith: function(str, suffix) {
        var ind = str.length - suffix.length;
        return ind >= 0 && str.indexOf(suffix, ind) === ind;
      },
      trim: trim ? function(str) {
        return str == null ? "" : trim.call(str);
      } : function(str) {
        return str == null ? "" : (str + "").replace(RE_TRIM, "");
      },
      attr: function(el, name) {
        var attrNormalizer, ret;
        name = name.toLowerCase();
        name = attrFix[name] || name;
        if (R_BOOLEAN.test(name)) {
          attrNormalizer = boolHook;
        } else if (R_INVALID_CHAR.test(name)) {
          attrNormalizer = attrNodeHook;
        } else {
          attrNormalizer = attrHooks[name];
        }
        if (el && el.nodeType === 1) {
          if (el.nodeName.toLowerCase() === "form") {
            attrNormalizer = attrNodeHook;
          }
          if (attrNormalizer && attrNormalizer.get) {
            return attrNormalizer.get(el, name);
          }
          ret = el.getAttribute(name);
          if (ret === "") {
            var attrNode = el.getAttributeNode(name);
            if (!attrNode || !attrNode.specified) {
              return void 0;
            }
          }
          return ret === null ? void 0 : ret;
        }
      }
    };
  }
});

// node_modules/query-selector/lib/query-selector/parser.js
var require_parser = __commonJS({
  "node_modules/query-selector/lib/query-selector/parser.js"(exports, module) {
    var parser = function(undefined2) {
      var parser2 = {}, GrammarConst = {
        "SHIFT_TYPE": 1,
        "REDUCE_TYPE": 2,
        "ACCEPT_TYPE": 0,
        "TYPE_INDEX": 0,
        "PRODUCTION_INDEX": 1,
        "TO_INDEX": 2
      };
      function mix(to, from) {
        for (var f in from) {
          to[f] = from[f];
        }
      }
      function isArray(obj) {
        return "[object Array]" === Object.prototype.toString.call(obj);
      }
      function each(object, fn, context) {
        if (object) {
          var key, val, length2, i = 0;
          context = context || null;
          if (!isArray(object)) {
            for (key in object) {
              if (fn.call(context, object[key], key, object) === false) {
                break;
              }
            }
          } else {
            length2 = object.length;
            for (val = object[0]; i < length2; val = object[++i]) {
              if (fn.call(context, val, i, object) === false) {
                break;
              }
            }
          }
        }
      }
      function inArray(item, arr) {
        for (var i = 0, l = arr.length; i < l; i++) {
          if (arr[i] === item) {
            return true;
          }
        }
        return false;
      }
      var Lexer = function Lexer2(cfg) {
        var self = this;
        self.rules = [];
        mix(self, cfg);
        self.resetInput(self.input);
      };
      Lexer.prototype = {
        "resetInput": function(input) {
          mix(this, {
            input,
            matched: "",
            stateStack: [Lexer.STATIC.INITIAL],
            match: "",
            text: "",
            firstLine: 1,
            lineNumber: 1,
            lastLine: 1,
            firstColumn: 1,
            lastColumn: 1
          });
        },
        "getCurrentRules": function() {
          var self = this, currentState = self.stateStack[self.stateStack.length - 1], rules = [];
          if (self.mapState) {
            currentState = self.mapState(currentState);
          }
          each(self.rules, function(r) {
            var state = r.state || r[3];
            if (!state) {
              if (currentState === Lexer.STATIC.INITIAL) {
                rules.push(r);
              }
            } else if (inArray(currentState, state)) {
              rules.push(r);
            }
          });
          return rules;
        },
        "pushState": function(state) {
          this.stateStack.push(state);
        },
        "popState": function(num) {
          num = num || 1;
          var ret;
          while (num--) {
            ret = this.stateStack.pop();
          }
          return ret;
        },
        "showDebugInfo": function() {
          var self = this, DEBUG_CONTEXT_LIMIT = Lexer.STATIC.DEBUG_CONTEXT_LIMIT, matched = self.matched, match = self.match, input = self.input;
          matched = matched.slice(0, matched.length - match.length);
          var past = (matched.length > DEBUG_CONTEXT_LIMIT ? "..." : "") + matched.slice(0 - DEBUG_CONTEXT_LIMIT).replace(/\n/, " "), next = match + input;
          next = next.slice(0, DEBUG_CONTEXT_LIMIT) + (next.length > DEBUG_CONTEXT_LIMIT ? "..." : "");
          return past + next + "\n" + new Array(past.length + 1).join("-") + "^";
        },
        "mapSymbol": function mapSymbolForCodeGen(t) {
          return this.symbolMap[t];
        },
        "mapReverseSymbol": function(rs) {
          var self = this, symbolMap = self.symbolMap, i, reverseSymbolMap = self.reverseSymbolMap;
          if (!reverseSymbolMap && symbolMap) {
            reverseSymbolMap = self.reverseSymbolMap = {};
            for (i in symbolMap) {
              reverseSymbolMap[symbolMap[i]] = i;
            }
          }
          if (reverseSymbolMap) {
            return reverseSymbolMap[rs];
          } else {
            return rs;
          }
        },
        "lex": function() {
          var self = this, input = self.input, i, rule, m, ret, lines, rules = self.getCurrentRules();
          self.match = self.text = "";
          if (!input) {
            return self.mapSymbol(Lexer.STATIC.END_TAG);
          }
          for (i = 0; i < rules.length; i++) {
            rule = rules[i];
            var regexp = rule.regexp || rule[1], token = rule.token || rule[0], action = rule.action || rule[2] || undefined2;
            if (m = input.match(regexp)) {
              lines = m[0].match(/\n.*/g);
              if (lines) {
                self.lineNumber += lines.length;
              }
              mix(self, {
                firstLine: self.lastLine,
                lastLine: self.lineNumber + 1,
                firstColumn: self.lastColumn,
                lastColumn: lines ? lines[lines.length - 1].length - 1 : self.lastColumn + m[0].length
              });
              var match;
              match = self.match = m[0];
              self.matches = m;
              self.text = match;
              self.matched += match;
              ret = action && action.call(self);
              if (ret === undefined2) {
                ret = token;
              } else {
                ret = self.mapSymbol(ret);
              }
              input = input.slice(match.length);
              self.input = input;
              if (ret) {
                return ret;
              } else {
                return self.lex();
              }
            }
          }
        }
      };
      Lexer.STATIC = {
        "INITIAL": "I",
        "DEBUG_CONTEXT_LIMIT": 20,
        "END_TAG": "$EOF"
      };
      var lexer = new Lexer({
        "rules": [
          [
            "b",
            /^\[(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "c",
            /^(?:[\t\r\n\f\x20]*)\]/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "d",
            /^(?:[\t\r\n\f\x20]*)~=(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "e",
            /^(?:[\t\r\n\f\x20]*)\|=(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "f",
            /^(?:[\t\r\n\f\x20]*)\^=(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "g",
            /^(?:[\t\r\n\f\x20]*)\$=(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "h",
            /^(?:[\t\r\n\f\x20]*)\*=(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "i",
            /^(?:[\t\r\n\f\x20]*)\=(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "j",
            /^(?:(?:[\w]|[^\x00-\xa0]|(?:\\[^\n\r\f0-9a-f]))(?:[\w\d-]|[^\x00-\xa0]|(?:\\[^\n\r\f0-9a-f]))*)\(/,
            function() {
              this.text = this.yy.trim(this.text).slice(0, -1);
              this.pushState("fn");
            }
          ],
          [
            "k",
            /^[^\)]*/,
            function() {
              this.popState();
            },
            ["fn"]
          ],
          [
            "l",
            /^(?:[\t\r\n\f\x20]*)\)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "m",
            /^:not\((?:[\t\r\n\f\x20]*)/i,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "n",
            /^(?:(?:[\w]|[^\x00-\xa0]|(?:\\[^\n\r\f0-9a-f]))(?:[\w\d-]|[^\x00-\xa0]|(?:\\[^\n\r\f0-9a-f]))*)/,
            function() {
              this.text = this.yy.unEscape(this.text);
            }
          ],
          [
            "o",
            /^"(\\"|[^"])*"/,
            function() {
              this.text = this.yy.unEscapeStr(this.text);
            }
          ],
          [
            "o",
            /^'(\\'|[^'])*'/,
            function() {
              this.text = this.yy.unEscapeStr(this.text);
            }
          ],
          [
            "p",
            /^#(?:(?:[\w\d-]|[^\x00-\xa0]|(?:\\[^\n\r\f0-9a-f]))+)/,
            function() {
              this.text = this.yy.unEscape(this.text.slice(1));
            }
          ],
          [
            "q",
            /^\.(?:(?:[\w]|[^\x00-\xa0]|(?:\\[^\n\r\f0-9a-f]))(?:[\w\d-]|[^\x00-\xa0]|(?:\\[^\n\r\f0-9a-f]))*)/,
            function() {
              this.text = this.yy.unEscape(this.text.slice(1));
            }
          ],
          [
            "r",
            /^(?:[\t\r\n\f\x20]*),(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          ["s", /^::?/, 0],
          [
            "t",
            /^(?:[\t\r\n\f\x20]*)\+(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "u",
            /^(?:[\t\r\n\f\x20]*)>(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          [
            "v",
            /^(?:[\t\r\n\f\x20]*)~(?:[\t\r\n\f\x20]*)/,
            function() {
              this.text = this.yy.trim(this.text);
            }
          ],
          ["w", /^\*/, 0],
          ["x", /^(?:[\t\r\n\f\x20]+)/, 0],
          ["y", /^./, 0]
        ]
      });
      parser2.lexer = lexer;
      lexer.symbolMap = {
        "$EOF": "a",
        "LEFT_BRACKET": "b",
        "RIGHT_BRACKET": "c",
        "INCLUDES": "d",
        "DASH_MATCH": "e",
        "PREFIX_MATCH": "f",
        "SUFFIX_MATCH": "g",
        "SUBSTRING_MATCH": "h",
        "ALL_MATCH": "i",
        "FUNCTION": "j",
        "PARAMETER": "k",
        "RIGHT_PARENTHESES": "l",
        "NOT": "m",
        "IDENT": "n",
        "STRING": "o",
        "HASH": "p",
        "CLASS": "q",
        "COMMA": "r",
        "COLON": "s",
        "PLUS": "t",
        "GREATER": "u",
        "TILDE": "v",
        "UNIVERSAL": "w",
        "S": "x",
        "INVALID": "y",
        "$START": "z",
        "selectors_group": "aa",
        "selector": "ab",
        "simple_selector_sequence": "ac",
        "combinator": "ad",
        "type_selector": "ae",
        "id_selector": "af",
        "class_selector": "ag",
        "attrib_match": "ah",
        "attrib": "ai",
        "attrib_val": "aj",
        "pseudo": "ak",
        "negation": "al",
        "negation_arg": "am",
        "suffix_selector": "an",
        "suffix_selectors": "ao"
      };
      parser2.productions = [
        ["z", ["aa"]],
        [
          "aa",
          ["ab"],
          function() {
            return [this.$1];
          }
        ],
        [
          "aa",
          ["aa", "r", "ab"],
          function() {
            this.$1.push(this.$3);
          }
        ],
        ["ab", ["ac"]],
        [
          "ab",
          ["ab", "ad", "ac"],
          function() {
            this.$1.nextCombinator = this.$3.prevCombinator = this.$2;
            var order;
            order = this.$1.order = this.$1.order || 0;
            this.$3.order = order + 1;
            this.$3.prev = this.$1;
            this.$1.next = this.$3;
            return this.$3;
          }
        ],
        ["ad", ["t"]],
        ["ad", ["u"]],
        ["ad", ["v"]],
        [
          "ad",
          ["x"],
          function() {
            return " ";
          }
        ],
        [
          "ae",
          ["n"],
          function() {
            return {
              t: "tag",
              value: this.$1
            };
          }
        ],
        [
          "ae",
          ["w"],
          function() {
            return {
              t: "tag",
              value: this.$1
            };
          }
        ],
        [
          "af",
          ["p"],
          function() {
            return {
              t: "id",
              value: this.$1
            };
          }
        ],
        [
          "ag",
          ["q"],
          function() {
            return {
              t: "cls",
              value: this.$1
            };
          }
        ],
        ["ah", ["f"]],
        ["ah", ["g"]],
        ["ah", ["h"]],
        ["ah", ["i"]],
        ["ah", ["d"]],
        ["ah", ["e"]],
        [
          "ai",
          ["b", "n", "c"],
          function() {
            return {
              t: "attrib",
              value: {
                ident: this.$2
              }
            };
          }
        ],
        ["aj", ["n"]],
        ["aj", ["o"]],
        [
          "ai",
          ["b", "n", "ah", "aj", "c"],
          function() {
            return {
              t: "attrib",
              value: {
                ident: this.$2,
                match: this.$3,
                value: this.$4
              }
            };
          }
        ],
        [
          "ak",
          ["s", "j", "k", "l"],
          function() {
            return {
              t: "pseudo",
              value: {
                fn: this.$2.toLowerCase(),
                param: this.$3
              }
            };
          }
        ],
        [
          "ak",
          ["s", "n"],
          function() {
            return {
              t: "pseudo",
              value: {
                ident: this.$2.toLowerCase()
              }
            };
          }
        ],
        [
          "al",
          ["m", "am", "l"],
          function() {
            return {
              t: "pseudo",
              value: {
                fn: "not",
                param: this.$2
              }
            };
          }
        ],
        ["am", ["ae"]],
        ["am", ["af"]],
        ["am", ["ag"]],
        ["am", ["ai"]],
        ["am", ["ak"]],
        ["an", ["af"]],
        ["an", ["ag"]],
        ["an", ["ai"]],
        ["an", ["ak"]],
        ["an", ["al"]],
        [
          "ao",
          ["an"],
          function() {
            return [this.$1];
          }
        ],
        [
          "ao",
          ["ao", "an"],
          function() {
            this.$1.push(this.$2);
          }
        ],
        ["ac", ["ae"]],
        [
          "ac",
          ["ao"],
          function() {
            return {
              suffix: this.$1
            };
          }
        ],
        [
          "ac",
          ["ae", "ao"],
          function() {
            return {
              t: "tag",
              value: this.$1.value,
              suffix: this.$2
            };
          }
        ]
      ];
      parser2.table = {
        "gotos": {
          "0": {
            "aa": 8,
            "ab": 9,
            "ae": 10,
            "af": 11,
            "ag": 12,
            "ai": 13,
            "ak": 14,
            "al": 15,
            "an": 16,
            "ao": 17,
            "ac": 18
          },
          "2": {
            "ae": 20,
            "af": 21,
            "ag": 22,
            "ai": 23,
            "ak": 24,
            "am": 25
          },
          "9": {
            "ad": 33
          },
          "10": {
            "af": 11,
            "ag": 12,
            "ai": 13,
            "ak": 14,
            "al": 15,
            "an": 16,
            "ao": 34
          },
          "17": {
            "af": 11,
            "ag": 12,
            "ai": 13,
            "ak": 14,
            "al": 15,
            "an": 35
          },
          "19": {
            "ah": 43
          },
          "28": {
            "ab": 46,
            "ae": 10,
            "af": 11,
            "ag": 12,
            "ai": 13,
            "ak": 14,
            "al": 15,
            "an": 16,
            "ao": 17,
            "ac": 18
          },
          "33": {
            "ae": 10,
            "af": 11,
            "ag": 12,
            "ai": 13,
            "ak": 14,
            "al": 15,
            "an": 16,
            "ao": 17,
            "ac": 47
          },
          "34": {
            "af": 11,
            "ag": 12,
            "ai": 13,
            "ak": 14,
            "al": 15,
            "an": 35
          },
          "43": {
            "aj": 50
          },
          "46": {
            "ad": 33
          }
        },
        "action": {
          "0": {
            "b": [1, undefined2, 1],
            "m": [1, undefined2, 2],
            "n": [1, undefined2, 3],
            "p": [1, undefined2, 4],
            "q": [1, undefined2, 5],
            "s": [1, undefined2, 6],
            "w": [1, undefined2, 7]
          },
          "1": {
            "n": [1, undefined2, 19]
          },
          "2": {
            "b": [1, undefined2, 1],
            "n": [1, undefined2, 3],
            "p": [1, undefined2, 4],
            "q": [1, undefined2, 5],
            "s": [1, undefined2, 6],
            "w": [1, undefined2, 7]
          },
          "3": {
            "a": [2, 9],
            "r": [2, 9],
            "t": [2, 9],
            "u": [2, 9],
            "v": [2, 9],
            "x": [2, 9],
            "p": [2, 9],
            "q": [2, 9],
            "b": [2, 9],
            "s": [2, 9],
            "m": [2, 9],
            "l": [2, 9]
          },
          "4": {
            "a": [2, 11],
            "r": [2, 11],
            "t": [2, 11],
            "u": [2, 11],
            "v": [2, 11],
            "x": [2, 11],
            "p": [2, 11],
            "q": [2, 11],
            "b": [2, 11],
            "s": [2, 11],
            "m": [2, 11],
            "l": [2, 11]
          },
          "5": {
            "a": [2, 12],
            "r": [2, 12],
            "t": [2, 12],
            "u": [2, 12],
            "v": [2, 12],
            "x": [2, 12],
            "p": [2, 12],
            "q": [2, 12],
            "b": [2, 12],
            "s": [2, 12],
            "m": [2, 12],
            "l": [2, 12]
          },
          "6": {
            "j": [1, undefined2, 26],
            "n": [1, undefined2, 27]
          },
          "7": {
            "a": [2, 10],
            "r": [2, 10],
            "t": [2, 10],
            "u": [2, 10],
            "v": [2, 10],
            "x": [2, 10],
            "p": [2, 10],
            "q": [2, 10],
            "b": [2, 10],
            "s": [2, 10],
            "m": [2, 10],
            "l": [2, 10]
          },
          "8": {
            "a": [0],
            "r": [1, undefined2, 28]
          },
          "9": {
            "a": [2, 1],
            "r": [2, 1],
            "t": [1, undefined2, 29],
            "u": [1, undefined2, 30],
            "v": [1, undefined2, 31],
            "x": [1, undefined2, 32]
          },
          "10": {
            "a": [2, 38],
            "r": [2, 38],
            "t": [2, 38],
            "u": [2, 38],
            "v": [2, 38],
            "x": [2, 38],
            "b": [1, undefined2, 1],
            "m": [1, undefined2, 2],
            "p": [1, undefined2, 4],
            "q": [1, undefined2, 5],
            "s": [1, undefined2, 6]
          },
          "11": {
            "a": [2, 31],
            "r": [2, 31],
            "t": [2, 31],
            "u": [2, 31],
            "v": [2, 31],
            "x": [2, 31],
            "p": [2, 31],
            "q": [2, 31],
            "b": [2, 31],
            "s": [2, 31],
            "m": [2, 31]
          },
          "12": {
            "a": [2, 32],
            "r": [2, 32],
            "t": [2, 32],
            "u": [2, 32],
            "v": [2, 32],
            "x": [2, 32],
            "p": [2, 32],
            "q": [2, 32],
            "b": [2, 32],
            "s": [2, 32],
            "m": [2, 32]
          },
          "13": {
            "a": [2, 33],
            "r": [2, 33],
            "t": [2, 33],
            "u": [2, 33],
            "v": [2, 33],
            "x": [2, 33],
            "p": [2, 33],
            "q": [2, 33],
            "b": [2, 33],
            "s": [2, 33],
            "m": [2, 33]
          },
          "14": {
            "a": [2, 34],
            "r": [2, 34],
            "t": [2, 34],
            "u": [2, 34],
            "v": [2, 34],
            "x": [2, 34],
            "p": [2, 34],
            "q": [2, 34],
            "b": [2, 34],
            "s": [2, 34],
            "m": [2, 34]
          },
          "15": {
            "a": [2, 35],
            "r": [2, 35],
            "t": [2, 35],
            "u": [2, 35],
            "v": [2, 35],
            "x": [2, 35],
            "p": [2, 35],
            "q": [2, 35],
            "b": [2, 35],
            "s": [2, 35],
            "m": [2, 35]
          },
          "16": {
            "a": [2, 36],
            "r": [2, 36],
            "t": [2, 36],
            "u": [2, 36],
            "v": [2, 36],
            "x": [2, 36],
            "p": [2, 36],
            "q": [2, 36],
            "b": [2, 36],
            "s": [2, 36],
            "m": [2, 36]
          },
          "17": {
            "a": [2, 39],
            "r": [2, 39],
            "t": [2, 39],
            "u": [2, 39],
            "v": [2, 39],
            "x": [2, 39],
            "b": [1, undefined2, 1],
            "m": [1, undefined2, 2],
            "p": [1, undefined2, 4],
            "q": [1, undefined2, 5],
            "s": [1, undefined2, 6]
          },
          "18": {
            "a": [2, 3],
            "r": [2, 3],
            "t": [2, 3],
            "u": [2, 3],
            "v": [2, 3],
            "x": [2, 3]
          },
          "19": {
            "c": [1, undefined2, 36],
            "d": [1, undefined2, 37],
            "e": [1, undefined2, 38],
            "f": [1, undefined2, 39],
            "g": [1, undefined2, 40],
            "h": [1, undefined2, 41],
            "i": [1, undefined2, 42]
          },
          "20": {
            "l": [2, 26]
          },
          "21": {
            "l": [2, 27]
          },
          "22": {
            "l": [2, 28]
          },
          "23": {
            "l": [2, 29]
          },
          "24": {
            "l": [2, 30]
          },
          "25": {
            "l": [1, undefined2, 44]
          },
          "26": {
            "k": [1, undefined2, 45]
          },
          "27": {
            "a": [2, 24],
            "r": [2, 24],
            "t": [2, 24],
            "u": [2, 24],
            "v": [2, 24],
            "x": [2, 24],
            "p": [2, 24],
            "q": [2, 24],
            "b": [2, 24],
            "s": [2, 24],
            "m": [2, 24],
            "l": [2, 24]
          },
          "28": {
            "b": [1, undefined2, 1],
            "m": [1, undefined2, 2],
            "n": [1, undefined2, 3],
            "p": [1, undefined2, 4],
            "q": [1, undefined2, 5],
            "s": [1, undefined2, 6],
            "w": [1, undefined2, 7]
          },
          "29": {
            "n": [2, 5],
            "w": [2, 5],
            "p": [2, 5],
            "q": [2, 5],
            "b": [2, 5],
            "s": [2, 5],
            "m": [2, 5]
          },
          "30": {
            "n": [2, 6],
            "w": [2, 6],
            "p": [2, 6],
            "q": [2, 6],
            "b": [2, 6],
            "s": [2, 6],
            "m": [2, 6]
          },
          "31": {
            "n": [2, 7],
            "w": [2, 7],
            "p": [2, 7],
            "q": [2, 7],
            "b": [2, 7],
            "s": [2, 7],
            "m": [2, 7]
          },
          "32": {
            "n": [2, 8],
            "w": [2, 8],
            "p": [2, 8],
            "q": [2, 8],
            "b": [2, 8],
            "s": [2, 8],
            "m": [2, 8]
          },
          "33": {
            "b": [1, undefined2, 1],
            "m": [1, undefined2, 2],
            "n": [1, undefined2, 3],
            "p": [1, undefined2, 4],
            "q": [1, undefined2, 5],
            "s": [1, undefined2, 6],
            "w": [1, undefined2, 7]
          },
          "34": {
            "a": [2, 40],
            "r": [2, 40],
            "t": [2, 40],
            "u": [2, 40],
            "v": [2, 40],
            "x": [2, 40],
            "b": [1, undefined2, 1],
            "m": [1, undefined2, 2],
            "p": [1, undefined2, 4],
            "q": [1, undefined2, 5],
            "s": [1, undefined2, 6]
          },
          "35": {
            "a": [2, 37],
            "r": [2, 37],
            "t": [2, 37],
            "u": [2, 37],
            "v": [2, 37],
            "x": [2, 37],
            "p": [2, 37],
            "q": [2, 37],
            "b": [2, 37],
            "s": [2, 37],
            "m": [2, 37]
          },
          "36": {
            "a": [2, 19],
            "r": [2, 19],
            "t": [2, 19],
            "u": [2, 19],
            "v": [2, 19],
            "x": [2, 19],
            "p": [2, 19],
            "q": [2, 19],
            "b": [2, 19],
            "s": [2, 19],
            "m": [2, 19],
            "l": [2, 19]
          },
          "37": {
            "n": [2, 17],
            "o": [2, 17]
          },
          "38": {
            "n": [2, 18],
            "o": [2, 18]
          },
          "39": {
            "n": [2, 13],
            "o": [2, 13]
          },
          "40": {
            "n": [2, 14],
            "o": [2, 14]
          },
          "41": {
            "n": [2, 15],
            "o": [2, 15]
          },
          "42": {
            "n": [2, 16],
            "o": [2, 16]
          },
          "43": {
            "n": [1, undefined2, 48],
            "o": [1, undefined2, 49]
          },
          "44": {
            "a": [2, 25],
            "r": [2, 25],
            "t": [2, 25],
            "u": [2, 25],
            "v": [2, 25],
            "x": [2, 25],
            "p": [2, 25],
            "q": [2, 25],
            "b": [2, 25],
            "s": [2, 25],
            "m": [2, 25]
          },
          "45": {
            "l": [1, undefined2, 51]
          },
          "46": {
            "a": [2, 2],
            "r": [2, 2],
            "t": [1, undefined2, 29],
            "u": [1, undefined2, 30],
            "v": [1, undefined2, 31],
            "x": [1, undefined2, 32]
          },
          "47": {
            "a": [2, 4],
            "r": [2, 4],
            "t": [2, 4],
            "u": [2, 4],
            "v": [2, 4],
            "x": [2, 4]
          },
          "48": {
            "c": [2, 20]
          },
          "49": {
            "c": [2, 21]
          },
          "50": {
            "c": [1, undefined2, 52]
          },
          "51": {
            "a": [2, 23],
            "r": [2, 23],
            "t": [2, 23],
            "u": [2, 23],
            "v": [2, 23],
            "x": [2, 23],
            "p": [2, 23],
            "q": [2, 23],
            "b": [2, 23],
            "s": [2, 23],
            "m": [2, 23],
            "l": [2, 23]
          },
          "52": {
            "a": [2, 22],
            "r": [2, 22],
            "t": [2, 22],
            "u": [2, 22],
            "v": [2, 22],
            "x": [2, 22],
            "p": [2, 22],
            "q": [2, 22],
            "b": [2, 22],
            "s": [2, 22],
            "m": [2, 22],
            "l": [2, 22]
          }
        }
      };
      parser2.parse = function parse(input, filename) {
        var self = this, lexer2 = self.lexer, state, symbol2, action, table = self.table, gotos = table.gotos, tableAction = table.action, productions = self.productions, valueStack = [null], prefix2 = filename ? "in file: " + filename + " " : "", stack = [0];
        lexer2.resetInput(input);
        while (1) {
          state = stack[stack.length - 1];
          if (!symbol2) {
            symbol2 = lexer2.lex();
          }
          if (symbol2) {
            action = tableAction[state] && tableAction[state][symbol2];
          } else {
            action = null;
          }
          if (!action) {
            var expected = [], error;
            if (tableAction[state]) {
              for (var symbolForState in tableAction[state]) {
                expected.push(self.lexer.mapReverseSymbol(symbolForState));
              }
            }
            error = prefix2 + "syntax error at line " + lexer2.lineNumber + ":\n" + lexer2.showDebugInfo() + "\nexpect " + expected.join(", ");
            throw new Error(error);
          }
          switch (action[GrammarConst.TYPE_INDEX]) {
            case GrammarConst.SHIFT_TYPE:
              stack.push(symbol2);
              valueStack.push(lexer2.text);
              stack.push(action[GrammarConst.TO_INDEX]);
              symbol2 = null;
              break;
            case GrammarConst.REDUCE_TYPE:
              var production = productions[action[GrammarConst.PRODUCTION_INDEX]], reducedSymbol = production.symbol || production[0], reducedAction = production.action || production[2], reducedRhs = production.rhs || production[1], len = reducedRhs.length, i = 0, ret, $$ = valueStack[valueStack.length - len];
              ret = undefined2;
              self.$$ = $$;
              for (; i < len; i++) {
                self["$" + (len - i)] = valueStack[valueStack.length - 1 - i];
              }
              if (reducedAction) {
                ret = reducedAction.call(self);
              }
              if (ret !== undefined2) {
                $$ = ret;
              } else {
                $$ = self.$$;
              }
              stack = stack.slice(0, -1 * len * 2);
              valueStack = valueStack.slice(0, -1 * len);
              stack.push(reducedSymbol);
              valueStack.push($$);
              var newState = gotos[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;
            case GrammarConst.ACCEPT_TYPE:
              return $$;
          }
        }
      };
      return parser2;
    }();
    if (typeof module !== "undefined") {
      module.exports = parser;
    }
  }
});

// node_modules/query-selector/lib/query-selector.js
var require_query_selector = __commonJS({
  "node_modules/query-selector/lib/query-selector.js"(exports, module) {
    var util = require_util();
    var parser = require_parser();
    var EXPANDO_SELECTOR_KEY = "_ks_data_selector_id_";
    var caches = {};
    var isContextXML;
    var uuid = 0;
    var subMatchesCache = {};
    var getAttr = function(el, name) {
      if (isContextXML) {
        return util.getSimpleAttr(el, name);
      } else {
        return util.attr(el, name);
      }
    };
    var hasSingleClass = util.hasSingleClass;
    var isTag = util.isTag;
    var aNPlusB = /^(([+-]?(?:\d+)?)?n)?([+-]?\d+)?$/;
    var unescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g;
    var unescapeFn = function(_, escaped) {
      var high = "0x" + escaped - 65536;
      return isNaN(high) ? escaped : (
        // BMP codepoint
        high < 0 ? String.fromCharCode(high + 65536) : (
          // Supplemental Plane codepoint (surrogate pair)
          String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
        )
      );
    };
    var matchExpr;
    var pseudoFnExpr = {
      "nth-child": function(el, param) {
        var ab = getAb(param), a2 = ab.a, b = ab.b;
        if (a2 === 0 && b === 0) {
          return 0;
        }
        var index = 0, parent = el.parentNode;
        if (parent) {
          var childNodes = parent.childNodes, count = 0, child, ret, len = childNodes.length;
          for (; count < len; count++) {
            child = childNodes[count];
            if (child.nodeType === 1) {
              index++;
              ret = matchIndexByAb(index, a2, b, child === el);
              if (ret !== void 0) {
                return ret;
              }
            }
          }
        }
        return 0;
      },
      "nth-last-child": function(el, param) {
        var ab = getAb(param), a2 = ab.a, b = ab.b;
        if (a2 === 0 && b === 0) {
          return 0;
        }
        var index = 0, parent = el.parentNode;
        if (parent) {
          var childNodes = parent.childNodes, len = childNodes.length, count = len - 1, child, ret;
          for (; count >= 0; count--) {
            child = childNodes[count];
            if (child.nodeType === 1) {
              index++;
              ret = matchIndexByAb(index, a2, b, child === el);
              if (ret !== void 0) {
                return ret;
              }
            }
          }
        }
        return 0;
      },
      "nth-of-type": function(el, param) {
        var ab = getAb(param), a2 = ab.a, b = ab.b;
        if (a2 === 0 && b === 0) {
          return 0;
        }
        var index = 0, parent = el.parentNode;
        if (parent) {
          var childNodes = parent.childNodes, elType = el.tagName, count = 0, child, ret, len = childNodes.length;
          for (; count < len; count++) {
            child = childNodes[count];
            if (child.tagName === elType) {
              index++;
              ret = matchIndexByAb(index, a2, b, child === el);
              if (ret !== void 0) {
                return ret;
              }
            }
          }
        }
        return 0;
      },
      "nth-last-of-type": function(el, param) {
        var ab = getAb(param), a2 = ab.a, b = ab.b;
        if (a2 === 0 && b === 0) {
          return 0;
        }
        var index = 0, parent = el.parentNode;
        if (parent) {
          var childNodes = parent.childNodes, len = childNodes.length, elType = el.tagName, count = len - 1, child, ret;
          for (; count >= 0; count--) {
            child = childNodes[count];
            if (child.tagName === elType) {
              index++;
              ret = matchIndexByAb(index, a2, b, child === el);
              if (ret !== void 0) {
                return ret;
              }
            }
          }
        }
        return 0;
      },
      lang: function(el, lang) {
        var elLang;
        lang = unEscape(lang.toLowerCase());
        do {
          if (elLang = isContextXML ? el.getAttribute("xml:lang") || el.getAttribute("lang") : el.lang) {
            elLang = elLang.toLowerCase();
            return elLang === lang || elLang.indexOf(lang + "-") === 0;
          }
        } while ((el = el.parentNode) && el.nodeType === 1);
        return false;
      },
      not: function(el, negationArg) {
        return !matchExpr[negationArg.t](el, negationArg.value);
      }
    };
    var pseudoIdentExpr = {
      empty: function(el) {
        var childNodes = el.childNodes, index = 0, len = childNodes.length - 1, child, nodeType;
        for (; index < len; index++) {
          child = childNodes[index];
          nodeType = child.nodeType;
          if (nodeType === 1 || nodeType === 3 || nodeType === 4 || nodeType === 5) {
            return 0;
          }
        }
        return 1;
      },
      root: function(el) {
        if (el.nodeType === 9) {
          return true;
        }
        return el.ownerDocument && el === el.ownerDocument.documentElement;
      },
      "first-child": function(el) {
        return pseudoFnExpr["nth-child"](el, 1);
      },
      "last-child": function(el) {
        return pseudoFnExpr["nth-last-child"](el, 1);
      },
      "first-of-type": function(el) {
        return pseudoFnExpr["nth-of-type"](el, 1);
      },
      "last-of-type": function(el) {
        return pseudoFnExpr["nth-last-of-type"](el, 1);
      },
      "only-child": function(el) {
        return pseudoIdentExpr["first-child"](el) && pseudoIdentExpr["last-child"](el);
      },
      "only-of-type": function(el) {
        return pseudoIdentExpr["first-of-type"](el) && pseudoIdentExpr["last-of-type"](el);
      },
      focus: function(el) {
        var doc = el.ownerDocument;
        return doc && el === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(el.type || el.href || el.tabIndex >= 0);
      },
      target: function(el) {
        var hash = location.hash;
        return hash && hash.slice(1) === getAttr(el, "id");
      },
      enabled: function(el) {
        return !el.disabled;
      },
      disabled: function(el) {
        return el.disabled;
      },
      checked: function(el) {
        var nodeName = el.nodeName.toLowerCase();
        return nodeName === "input" && el.checked || nodeName === "option" && el.selected;
      }
    };
    var attributeExpr = {
      "~=": function(elValue, value) {
        if (!value || value.indexOf(" ") > -1) {
          return 0;
        }
        return (" " + elValue + " ").indexOf(" " + value + " ") !== -1;
      },
      "|=": function(elValue, value) {
        return (" " + elValue).indexOf(" " + value + "-") !== -1;
      },
      "^=": function(elValue, value) {
        return value && util.startsWith(elValue, value);
      },
      "$=": function(elValue, value) {
        return value && util.endsWith(elValue, value);
      },
      "*=": function(elValue, value) {
        return value && elValue.indexOf(value) !== -1;
      },
      "=": function(elValue, value) {
        return elValue === value;
      }
    };
    var relativeExpr = {
      ">": {
        dir: "parentNode",
        immediate: 1
      },
      " ": {
        dir: "parentNode"
      },
      "+": {
        dir: "previousSibling",
        immediate: 1
      },
      "~": {
        dir: "previousSibling"
      }
    };
    matchExpr = {
      tag: isTag,
      cls: hasSingleClass,
      id: function(el, value) {
        return getAttr(el, "id") === value;
      },
      attrib: function(el, value) {
        var name = value.ident;
        if (!isContextXML) {
          name = name.toLowerCase();
        }
        var elValue = getAttr(el, name);
        var match = value.match;
        if (!match && elValue !== void 0) {
          return 1;
        } else if (match) {
          if (elValue === void 0) {
            return 0;
          }
          var matchFn = attributeExpr[match];
          if (matchFn) {
            return matchFn(elValue + "", value.value + "");
          }
        }
        return 0;
      },
      pseudo: function(el, value) {
        var fn, fnStr, ident;
        if (fnStr = value.fn) {
          if (!(fn = pseudoFnExpr[fnStr])) {
            throw new SyntaxError("Syntax error: not support pseudo: " + fnStr);
          }
          return fn(el, value.param);
        }
        if (ident = value.ident) {
          if (!pseudoIdentExpr[ident]) {
            throw new SyntaxError("Syntax error: not support pseudo: " + ident);
          }
          return pseudoIdentExpr[ident](el);
        }
        return 0;
      }
    };
    function unEscape(str) {
      return str.replace(unescape, unescapeFn);
    }
    parser.lexer.yy = {
      trim: util.trim,
      unEscape,
      unEscapeStr: function(str) {
        return this.unEscape(str.slice(1, -1));
      }
    };
    function resetStatus() {
      subMatchesCache = {};
    }
    function dir(el, direction) {
      do {
        el = el[direction];
      } while (el && el.nodeType !== 1);
      return el;
    }
    function getAb(param) {
      var a2 = 0, match, b = 0;
      if (typeof param === "number") {
        b = param;
      } else if (param === "odd") {
        a2 = 2;
        b = 1;
      } else if (param === "even") {
        a2 = 2;
        b = 0;
      } else if (match = param.replace(/\s/g, "").match(aNPlusB)) {
        if (match[1]) {
          a2 = parseInt(match[2], 10);
          if (isNaN(a2)) {
            if (match[2] === "-") {
              a2 = -1;
            } else {
              a2 = 1;
            }
          }
        } else {
          a2 = 0;
        }
        b = parseInt(match[3], 10) || 0;
      }
      return {
        a: a2,
        b
      };
    }
    function matchIndexByAb(index, a2, b, eq) {
      if (a2 === 0) {
        if (index === b) {
          return eq;
        }
      } else {
        if ((index - b) / a2 >= 0 && (index - b) % a2 === 0 && eq) {
          return 1;
        }
      }
      return void 0;
    }
    function isXML(elem) {
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName.toLowerCase() !== "html" : false;
    }
    function matches(str, seeds) {
      return select(str, null, seeds);
    }
    function singleMatch(el, match) {
      if (!match) {
        return true;
      }
      if (!el) {
        return false;
      }
      if (el.nodeType === 9) {
        return false;
      }
      var matched = 1, matchSuffix = match.suffix, matchSuffixLen, matchSuffixIndex;
      if (match.t === "tag") {
        matched &= matchExpr.tag(el, match.value);
      }
      if (matched && matchSuffix) {
        matchSuffixLen = matchSuffix.length;
        matchSuffixIndex = 0;
        for (; matched && matchSuffixIndex < matchSuffixLen; matchSuffixIndex++) {
          var singleMatchSuffix = matchSuffix[matchSuffixIndex], singleMatchSuffixType = singleMatchSuffix.t;
          if (matchExpr[singleMatchSuffixType]) {
            matched &= matchExpr[singleMatchSuffixType](el, singleMatchSuffix.value);
          }
        }
      }
      return matched;
    }
    function matchImmediate(el, match) {
      var matched = 1, startEl = el, relativeOp, startMatch = match;
      do {
        matched &= singleMatch(el, match);
        if (matched) {
          match = match && match.prev;
          if (!match) {
            return true;
          }
          relativeOp = relativeExpr[match.nextCombinator];
          el = dir(el, relativeOp.dir);
          if (!relativeOp.immediate) {
            return {
              // advance for non-immediate
              el,
              match
            };
          }
        } else {
          relativeOp = relativeExpr[match.nextCombinator];
          if (relativeOp.immediate) {
            return {
              el: dir(startEl, relativeExpr[startMatch.nextCombinator].dir),
              match: startMatch
            };
          } else {
            return {
              el: el && dir(el, relativeOp.dir),
              match
            };
          }
        }
      } while (el);
      return {
        el: dir(startEl, relativeExpr[startMatch.nextCombinator].dir),
        match: startMatch
      };
    }
    function findFixedMatchFromHead(el, head) {
      var relativeOp, cur = head;
      do {
        if (!singleMatch(el, cur)) {
          return null;
        }
        cur = cur.prev;
        if (!cur) {
          return true;
        }
        relativeOp = relativeExpr[cur.nextCombinator];
        el = dir(el, relativeOp.dir);
      } while (el && relativeOp.immediate);
      if (!el) {
        return null;
      }
      return {
        el,
        match: cur
      };
    }
    function genId(el) {
      var selectorId;
      if (isContextXML) {
        if (!(selectorId = el.getAttribute(EXPANDO_SELECTOR_KEY))) {
          el.setAttribute(EXPANDO_SELECTOR_KEY, selectorId = +/* @__PURE__ */ new Date() + "_" + ++uuid);
        }
      } else {
        if (!(selectorId = el[EXPANDO_SELECTOR_KEY])) {
          selectorId = el[EXPANDO_SELECTOR_KEY] = +/* @__PURE__ */ new Date() + "_" + ++uuid;
        }
      }
      return selectorId;
    }
    function matchSub(el, match) {
      var selectorId = genId(el), matchKey;
      matchKey = selectorId + "_" + (match.order || 0);
      if (matchKey in subMatchesCache) {
        return subMatchesCache[matchKey];
      }
      subMatchesCache[matchKey] = matchSubInternal(el, match);
      return subMatchesCache[matchKey];
    }
    function matchSubInternal(el, match) {
      var matchImmediateRet = matchImmediate(el, match);
      if (matchImmediateRet === true) {
        return true;
      } else {
        el = matchImmediateRet.el;
        match = matchImmediateRet.match;
        while (el) {
          if (matchSub(el, match)) {
            return true;
          }
          el = dir(el, relativeExpr[match.nextCombinator].dir);
        }
        return false;
      }
    }
    function select(str, context, seeds) {
      if (!caches[str]) {
        caches[str] = parser.parse(str);
      }
      var selector = caches[str], groupIndex = 0, groupLen = selector.length, contextDocument, group, ret = [];
      if (seeds) {
        context = context || seeds[0].ownerDocument;
      }
      contextDocument = context && context.ownerDocument || typeof document !== "undefined" && document;
      if (context && context.nodeType === 9 && !contextDocument) {
        contextDocument = context;
      }
      context = context || contextDocument;
      isContextXML = isXML(context);
      for (; groupIndex < groupLen; groupIndex++) {
        resetStatus();
        group = selector[groupIndex];
        var suffix = group.suffix, suffixIndex, suffixLen, seedsIndex, mySeeds = seeds, seedsLen, id = null;
        if (!mySeeds) {
          if (suffix && !isContextXML) {
            suffixIndex = 0;
            suffixLen = suffix.length;
            for (; suffixIndex < suffixLen; suffixIndex++) {
              var singleSuffix = suffix[suffixIndex];
              if (singleSuffix.t === "id") {
                id = singleSuffix.value;
                break;
              }
            }
          }
          if (id) {
            var doesNotHasById = !context.getElementById, contextInDom = util.contains(contextDocument, context), tmp = doesNotHasById ? contextInDom ? contextDocument.getElementById(id) : null : context.getElementById(id);
            if (!tmp && doesNotHasById || tmp && getAttr(tmp, "id") !== id) {
              var tmps = util.getElementsByTagName("*", context), tmpLen = tmps.length, tmpI = 0;
              for (; tmpI < tmpLen; tmpI++) {
                tmp = tmps[tmpI];
                if (getAttr(tmp, "id") === id) {
                  mySeeds = [tmp];
                  break;
                }
              }
              if (tmpI === tmpLen) {
                mySeeds = [];
              }
            } else {
              if (contextInDom && tmp && context !== contextDocument) {
                tmp = util.contains(context, tmp) ? tmp : null;
              }
              mySeeds = tmp ? [tmp] : [];
            }
          } else {
            mySeeds = util.getElementsByTagName(group.value || "*", context);
          }
        }
        seedsIndex = 0;
        seedsLen = mySeeds.length;
        if (!seedsLen) {
          continue;
        }
        for (; seedsIndex < seedsLen; seedsIndex++) {
          var seed = mySeeds[seedsIndex];
          var matchHead = findFixedMatchFromHead(seed, group);
          if (matchHead === true) {
            ret.push(seed);
          } else if (matchHead) {
            if (matchSub(matchHead.el, matchHead.match)) {
              ret.push(seed);
            }
          }
        }
      }
      if (groupLen > 1) {
        ret = util.unique(ret);
      }
      return ret;
    }
    module.exports = select;
    select.parse = function(str) {
      return parser.parse(str);
    };
    select.matches = matches;
    select.util = util;
    select.version = "@VERSION@";
  }
});

// node_modules/query-selector/index.js
var require_query_selector2 = __commonJS({
  "node_modules/query-selector/index.js"(exports, module) {
    module.exports = require_query_selector();
  }
});

// node_modules/react-faux-dom/lib/utils/camelCase.js
var require_camelCase = __commonJS({
  "node_modules/react-faux-dom/lib/utils/camelCase.js"(exports, module) {
    var hyphenExpression = /\-+([a-z])/gi;
    function upperCaseFirstMatch(match, c2, offset) {
      if (offset !== 0) {
        return c2.toUpperCase();
      } else {
        return c2;
      }
    }
    function camelCase(str) {
      var camelCased = str.replace(hyphenExpression, upperCaseFirstMatch);
      hyphenExpression.lastIndex = 0;
      return camelCased;
    }
    module.exports = camelCase;
  }
});

// node_modules/react-faux-dom/lib/utils/isString.js
var require_isString = __commonJS({
  "node_modules/react-faux-dom/lib/utils/isString.js"(exports, module) {
    function isString(value) {
      return typeof value === "string";
    }
    module.exports = isString;
  }
});

// node_modules/react-faux-dom/lib/utils/isUndefined.js
var require_isUndefined = __commonJS({
  "node_modules/react-faux-dom/lib/utils/isUndefined.js"(exports, module) {
    function isUndefined(value) {
      return typeof value === "undefined";
    }
    module.exports = isUndefined;
  }
});

// node_modules/react-faux-dom/lib/utils/assign.js
var require_assign = __commonJS({
  "node_modules/react-faux-dom/lib/utils/assign.js"(exports, module) {
    function assign(dest) {
      var args = arguments;
      var source;
      for (var i = 1; i < args.length; i++) {
        source = args[i];
        for (var key in source) {
          dest[key] = source[key];
        }
      }
      return dest;
    }
    module.exports = assign;
  }
});

// node_modules/react-faux-dom/lib/utils/mapValues.js
var require_mapValues = __commonJS({
  "node_modules/react-faux-dom/lib/utils/mapValues.js"(exports, module) {
    function mapValues(source, fn) {
      var destination = {};
      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          destination[key] = fn(source[key]);
        }
      }
      return destination;
    }
    module.exports = mapValues;
  }
});

// node_modules/react-faux-dom/lib/utils/styleCamelCase.js
var require_styleCamelCase = __commonJS({
  "node_modules/react-faux-dom/lib/utils/styleCamelCase.js"(exports, module) {
    var camelCase = require_camelCase();
    function styleCamelCase(name) {
      var camel = camelCase(name);
      if (camel.charAt(0).toUpperCase() === name.charAt(0)) {
        return name.charAt(0) + camel.slice(1);
      }
      if (name.charAt(0) === "-") {
        return camel.indexOf("ms") === 0 ? camel : camel.charAt(0).toUpperCase() + camel.slice(1);
      } else {
        return camel;
      }
    }
    module.exports = styleCamelCase;
  }
});

// node_modules/react-faux-dom/lib/Element.js
var require_Element = __commonJS({
  "node_modules/react-faux-dom/lib/Element.js"(exports, module) {
    var React = require_react();
    var styleAttr = require_lib();
    var querySelectorAll = require_query_selector2();
    var camelCase = require_camelCase();
    var isString = require_isString();
    var isUndefined = require_isUndefined();
    var assign = require_assign();
    var mapValues = require_mapValues();
    var styleCamelCase = require_styleCamelCase();
    function Element(nodeName, parentNode) {
      this.nodeName = nodeName;
      this.parentNode = parentNode;
      this.childNodes = [];
      this.eventListeners = {};
      this.text = "";
      var self = this;
      var props = this.props = {
        ref: function(component) {
          self.component = component;
        },
        style: {
          setProperty: function(name, value) {
            props.style[styleCamelCase(name)] = value;
          },
          getProperty: function(name) {
            return props.style[styleCamelCase(name)];
          },
          removeProperty: function(name) {
            delete props.style[styleCamelCase(name)];
          }
        }
      };
      this.style = props.style;
    }
    Element.prototype.nodeType = 1;
    Element.prototype.eventNameMappings = {
      "blur": "onBlur",
      "change": "onChange",
      "click": "onClick",
      "contextmenu": "onContextMenu",
      "copy": "onCopy",
      "cut": "onCut",
      "doubleclick": "onDoubleClick",
      "drag": "onDrag",
      "dragend": "onDragEnd",
      "dragenter": "onDragEnter",
      "dragexit": "onDragExit",
      "dragleave": "onDragLeave",
      "dragover": "onDragOver",
      "dragstart": "onDragStart",
      "drop": "onDrop",
      "error": "onError",
      "focus": "onFocus",
      "input": "onInput",
      "keydown": "onKeyDown",
      "keypress": "onKeyPress",
      "keyup": "onKeyUp",
      "load": "onLoad",
      "mousedown": "onMouseDown",
      "mouseenter": "onMouseEnter",
      "mouseleave": "onMouseLeave",
      "mousemove": "onMouseMove",
      "mouseout": "onMouseOut",
      "mouseover": "onMouseOver",
      "mouseup": "onMouseUp",
      "paste": "onPaste",
      "scroll": "onScroll",
      "submit": "onSubmit",
      "touchcancel": "onTouchCancel",
      "touchend": "onTouchEnd",
      "touchmove": "onTouchMove",
      "touchstart": "onTouchStart",
      "wheel": "onWheel"
    };
    Element.prototype.skipNameTransformationExpressions = [
      /^data-/,
      /^aria-/
    ];
    Element.prototype.attributeNameMappings = {
      "class": "className"
    };
    Element.prototype.attributeToPropName = function(name) {
      var skipTransformMatches = this.skipNameTransformationExpressions.map(function(expr) {
        return expr.test(name);
      });
      if (skipTransformMatches.some(Boolean)) {
        return name;
      } else {
        return this.attributeNameMappings[name] || camelCase(name);
      }
    };
    Element.prototype.setAttribute = function(name, value) {
      if (name === "style" && isString(value)) {
        var styles = styleAttr.parse(value);
        for (var key in styles) {
          this.style.setProperty(key, styles[key]);
        }
      } else {
        this.props[this.attributeToPropName(name)] = value;
      }
    };
    Element.prototype.getAttribute = function(name) {
      return this.props[this.attributeToPropName(name)];
    };
    Element.prototype.getAttributeNode = function(name) {
      var value = this.getAttribute(name);
      if (!isUndefined(value)) {
        return {
          value,
          specified: true
        };
      }
    };
    Element.prototype.removeAttribute = function(name) {
      delete this.props[this.attributeToPropName(name)];
    };
    Element.prototype.eventToPropName = function(name) {
      return this.eventNameMappings[name] || name;
    };
    Element.prototype.addEventListener = function(name, fn) {
      var prop = this.eventToPropName(name);
      this.eventListeners[prop] = this.eventListeners[prop] || [];
      this.eventListeners[prop].push(fn);
    };
    Element.prototype.removeEventListener = function(name, fn) {
      var listeners = this.eventListeners[this.eventToPropName(name)];
      if (listeners) {
        var match = listeners.indexOf(fn);
        if (match !== -1) {
          listeners.splice(match, 1);
        }
      }
    };
    Element.prototype.appendChild = function(el) {
      el.parentNode = this;
      this.childNodes.push(el);
      return el;
    };
    Element.prototype.insertBefore = function(el, before) {
      var index = this.childNodes.indexOf(before);
      el.parentNode = this;
      if (index !== -1) {
        this.childNodes.splice(index, 0, el);
      } else {
        this.childNodes.push(el);
      }
      return el;
    };
    Element.prototype.removeChild = function(child) {
      var target = this.childNodes.indexOf(child);
      this.childNodes.splice(target, 1);
    };
    Element.prototype.querySelector = function() {
      return this.querySelectorAll.apply(this, arguments)[0] || null;
    };
    Element.prototype.querySelectorAll = function(selector) {
      if (!selector) {
        throw new Error("Not enough arguments");
      }
      return querySelectorAll(selector, this);
    };
    Element.prototype.getElementsByTagName = function(nodeName) {
      var children = this.children;
      if (children.length === 0) {
        return [];
      } else {
        var matches;
        if (nodeName !== "*") {
          matches = children.filter(function(el) {
            return el.nodeName === nodeName;
          });
        } else {
          matches = children;
        }
        var childMatches = children.map(function(el) {
          return el.getElementsByTagName(nodeName);
        });
        return matches.concat.apply(matches, childMatches);
      }
    };
    Element.prototype.getElementById = function(id) {
      var children = this.children;
      if (children.length === 0) {
        return null;
      } else {
        var match = children.filter(function(el) {
          return el.getAttribute("id") === id;
        })[0];
        if (match) {
          return match;
        } else {
          var childMatches = children.map(function(el) {
            return el.getElementById(id);
          });
          return childMatches.filter(function(match2) {
            return match2 !== null;
          })[0] || null;
        }
      }
    };
    Element.prototype.getBoundingClientRect = function() {
      if (!this.component) {
        return void 0;
      }
      return this.component.getBoundingClientRect();
    };
    Element.prototype.toReact = function(index) {
      index = index || 0;
      var props = assign({}, this.props);
      props.style = assign({}, props.style);
      var originalElement = this;
      function uniqueKey() {
        return "faux-dom-" + index;
      }
      if (isUndefined(props.key)) {
        props.key = uniqueKey();
      }
      delete props.style.setProperty;
      delete props.style.getProperty;
      delete props.style.removeProperty;
      assign(props, mapValues(this.eventListeners, function(listeners) {
        return function(syntheticEvent) {
          var event2;
          if (syntheticEvent) {
            event2 = syntheticEvent.nativeEvent;
            event2.syntheticEvent = syntheticEvent;
          }
          mapValues(listeners, function(listener) {
            listener.call(originalElement, event2);
          });
        };
      }));
      return React.createElement(this.nodeName, props, this.text || this.children.map(function(el, i) {
        if (el instanceof Element) {
          return el.toReact(i);
        } else {
          return el;
        }
      }));
    };
    Object.defineProperties(Element.prototype, {
      nextSibling: {
        get: function() {
          var siblings = this.parentNode.children;
          var me = siblings.indexOf(this);
          return siblings[me + 1];
        }
      },
      previousSibling: {
        get: function() {
          var siblings = this.parentNode.children;
          var me = siblings.indexOf(this);
          return siblings[me - 1];
        }
      },
      innerHTML: {
        get: function() {
          return this.text;
        },
        set: function(text) {
          this.text = text;
        }
      },
      textContent: {
        get: function() {
          return this.text;
        },
        set: function(text) {
          this.text = text;
        }
      },
      children: {
        get: function() {
          return this.childNodes.filter(function(el) {
            if (!el.nodeType) {
              return true;
            }
            return el.nodeType === 1;
          });
        }
      }
    });
    var namespaceMethods = [
      "setAttribute",
      "getAttribute",
      "getAttributeNode",
      "removeAttribute",
      "getElementsByTagName",
      "getElementById"
    ];
    namespaceMethods.forEach(function(name) {
      var fn = Element.prototype[name];
      Element.prototype[name + "NS"] = function() {
        return fn.apply(this, Array.prototype.slice.call(arguments, 1));
      };
    });
    module.exports = Element;
  }
});

// node_modules/react-faux-dom/lib/Window.js
var require_Window = __commonJS({
  "node_modules/react-faux-dom/lib/Window.js"(exports, module) {
    var Window = {
      getComputedStyle: function(node) {
        return {
          getPropertyValue: node.style.getProperty
        };
      }
    };
    module.exports = Window;
  }
});

// node_modules/react-faux-dom/lib/mixins/core.js
var require_core = __commonJS({
  "node_modules/react-faux-dom/lib/mixins/core.js"(exports, module) {
    var Element = require_Element();
    var mapValues = require_mapValues();
    var mixin = {
      componentWillMount: function() {
        this.connectedFauxDOM = {};
        this.animateFauxDOMUntil = 0;
      },
      connectFauxDOM: function(node, name) {
        this.connectedFauxDOM[name] = typeof node !== "string" ? node : new Element(node);
        setTimeout(this.drawFauxDOM);
        return this.connectedFauxDOM[name];
      },
      drawFauxDOM: function() {
        var virtualDOM = mapValues(this.connectedFauxDOM, function(n) {
          return n.toReact();
        });
        this.setState(virtualDOM);
      }
    };
    module.exports = mixin;
  }
});

// node_modules/react-faux-dom/lib/mixins/anim.js
var require_anim = __commonJS({
  "node_modules/react-faux-dom/lib/mixins/anim.js"(exports, module) {
    var anim = {
      animateFauxDOM: function(duration) {
        this.animateFauxDOMUntil = Math.max(Date.now() + duration, this.animateFauxDOMUntil);
        if (!this.fauxDOMAnimationInterval) {
          this.fauxDOMAnimationInterval = setInterval(function() {
            if (Date.now() < this.animateFauxDOMUntil) {
              this.drawFauxDOM();
            } else {
              this.stopAnimatingFauxDOM();
            }
          }.bind(this), 16);
        }
      },
      stopAnimatingFauxDOM: function() {
        this.fauxDOMAnimationInterval = clearInterval(this.fauxDOMAnimationInterval);
        this.animateFauxDOMUntil = 0;
      },
      isAnimatingFauxDOM: function() {
        return !!this.fauxDOMAnimationInterval;
      },
      componentWillUnmount: function() {
        this.stopAnimatingFauxDOM();
      }
    };
    module.exports = anim;
  }
});

// node_modules/react-faux-dom/lib/ReactFauxDOM.js
var require_ReactFauxDOM = __commonJS({
  "node_modules/react-faux-dom/lib/ReactFauxDOM.js"(exports, module) {
    var Element = require_Element();
    var Window = require_Window();
    var core = require_core();
    var anim = require_anim();
    var ReactFauxDOM = {
      Element,
      defaultView: Window,
      mixins: {
        core,
        anim
      },
      createElement: function(nodeName) {
        return new Element(nodeName);
      },
      createElementNS: function(namespace, nodeName) {
        return this.createElement(nodeName);
      },
      compareDocumentPosition: function() {
        return 8;
      }
    };
    Element.prototype.ownerDocument = ReactFauxDOM;
    module.exports = ReactFauxDOM;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/legend.js
var require_legend = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/legend.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Selection = (init_d3_selection(), __toCommonJS(d3_selection_exports));
    var _d3Selection2 = _interopRequireDefault(_d3Selection);
    var _d3Scale = (init_d3_scale(), __toCommonJS(d3_scale_exports));
    var _d3Scale2 = _interopRequireDefault(_d3Scale);
    var _reactFauxDom = require_ReactFauxDOM();
    var _reactFauxDom2 = _interopRequireDefault(_reactFauxDom);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Legend = function(_Component) {
      _inherits(Legend2, _Component);
      function Legend2(props) {
        _classCallCheck(this, Legend2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Legend2).call(this, props));
      }
      _createClass(Legend2, [{
        key: "_radius",
        value: function _radius(swatchShape) {
          return swatchShape === "circle" ? 18 : 0;
        }
      }, {
        key: "_series",
        value: function _series(props) {
          var chartSeries = props.chartSeries;
          var categoricalColors = props.categoricalColors;
          var colors = categoricalColors || _d3Scale2.default.scaleCategory10();
          return chartSeries.map(function(_ref, i) {
            var name = _ref.name;
            var color2 = _ref.color;
            var field = _ref.field;
            return {
              color: color2 || colors(i),
              name: name || field,
              field
            };
          });
        }
      }, {
        key: "_mkLegend",
        value: function _mkLegend(dom) {
          var _props = this.props;
          var legendClassName = _props.legendClassName;
          var backgroundColor = _props.backgroundColor;
          var legendPosition = _props.legendPosition;
          var legendOffset = _props.legendOffset;
          var swatchShape = _props.swatchShape;
          var chartSeries = _props.chartSeries;
          var margins = _props.margins;
          var width = _props.width;
          var legendArea = _d3Selection2.default.select(dom);
          var series = this._series(this.props);
          var radius = this._radius(swatchShape);
          var legend = legendArea.selectAll("div").data(series).enter().append("div").attr("class", legendClassName + " legend").style("height", 20).style("padding", 5).style("background-color", backgroundColor).style("display", "inline-block");
          var rect = legend.append("div").style("width", 18).style("height", 18).style("border-radius", radius).style("background-color", function(d) {
            return d.color;
          }).style("float", legendPosition);
          var text = legend.append("div").style("padding-left", 5).style("padding-right", 5).text(function(d) {
            return d.name;
          }).style("float", legendPosition);
          return legendArea;
        }
      }, {
        key: "render",
        value: function render() {
          var _props2 = this.props;
          var legendClassName = _props2.legendClassName;
          var width = _props2.width;
          var height = _props2.height;
          var legendGroup = _reactFauxDom2.default.createElement("div");
          var legendClasses = legendClassName + " legend";
          legendGroup.setAttribute("class", legendClasses);
          legendGroup.style.width = width;
          legendGroup.style.textAlign = "center";
          return this._mkLegend(legendGroup).node().toReact();
        }
      }]);
      return Legend2;
    }(_react.Component);
    Legend.defaultProps = _extends({
      backgroundColor: "#FFF",
      legendHeight: 50,
      legendPosition: "left",
      legendOffset: 90,
      legendClassName: "react-d3-core__legend",
      swatchShape: "square"
    }, _commonProps2.default);
    Legend.propTypes = {
      backgroundColor: _react.PropTypes.string,
      width: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      chartSeries: _react.PropTypes.array.isRequired,
      legendOffset: _react.PropTypes.number.isRequired,
      legendClassName: _react.PropTypes.string.isRequired,
      legendPosition: _react.PropTypes.oneOf(["left", "right"]).isRequired,
      swatchShape: _react.PropTypes.oneOf(["circle", "square"])
    };
    exports.default = Legend;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/chartContainer.js
var require_chartContainer = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/chartContainer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _svg = require_svg();
    var _svg2 = _interopRequireDefault(_svg);
    var _legend = require_legend();
    var _legend2 = _interopRequireDefault(_legend);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var ChartContainer = function(_Component) {
      _inherits(ChartContainer2, _Component);
      function ChartContainer2(props) {
        _classCallCheck(this, ChartContainer2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(ChartContainer2).call(this, props));
      }
      _createClass(ChartContainer2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var chartSeries = _props.chartSeries;
          var legend;
          var divStyle = {
            width
          };
          if (chartSeries) {
            legend = _react2.default.createElement(_legend2.default, _extends({}, this.props, {
              chartSeries
            }));
          }
          return _react2.default.createElement(
            "div",
            { style: divStyle },
            legend,
            _react2.default.createElement(_svg2.default, this.props)
          );
        }
      }]);
      return ChartContainer2;
    }(_react.Component);
    ChartContainer.defaultProps = _commonProps2.default;
    exports.default = ChartContainer;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-axis/build/package.js
var version4;
var init_package4 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-axis/build/package.js"() {
    version4 = "0.3.2";
  }
});

// node_modules/react-d3-zoom/node_modules/d3-axis/src/array.js
var slice2;
var init_array3 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-axis/src/array.js"() {
    slice2 = Array.prototype.slice;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-axis/src/identity.js
function identity_default2(x2) {
  return x2;
}
var init_identity3 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-axis/src/identity.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-axis/src/axis.js
function translateX(scale0, scale1, d) {
  var x2 = scale0(d);
  return "translate(" + (isFinite(x2) ? x2 : scale1(d)) + ",0)";
}
function translateY(scale0, scale1, d) {
  var y2 = scale0(d);
  return "translate(0," + (isFinite(y2) ? y2 : scale1(d)) + ")";
}
function center(scale) {
  var width = scale.bandwidth() / 2;
  return function(d) {
    return scale(d) + width;
  };
}
function axis(orient, scale) {
  var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3;
  function axis2(context) {
    var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format2 = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity_default2 : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, transform = orient === top || orient === bottom ? translateX : translateY, range = scale.range(), range0 = range[0] + 0.5, range1 = range[range.length - 1] + 0.5, position = (scale.bandwidth ? center : identity_default2)(scale.copy()), selection2 = context.selection ? context.selection() : context, path2 = selection2.selectAll(".domain").data([null]), tick = selection2.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g", ".domain").attr("class", "tick"), line = tick.select("line"), text = tick.select("text"), k2 = orient === top || orient === left ? -1 : 1, x2, y2 = orient === left || orient === right ? (x2 = "x", "y") : (x2 = "y", "x");
    path2 = path2.merge(path2.enter().append("path").attr("class", "domain").attr("stroke", "#000"));
    tick = tick.merge(tickEnter);
    line = line.merge(tickEnter.append("line").attr("stroke", "#000").attr(x2 + "2", k2 * tickSizeInner));
    text = text.merge(tickEnter.append("text").attr("fill", "#000").attr(x2, k2 * spacing));
    if (context !== selection2) {
      path2 = path2.transition(context);
      tick = tick.transition(context);
      line = line.transition(context);
      text = text.transition(context);
      tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d) {
        return transform(position, this.parentNode.__axis || position, d);
      });
      tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
        return transform(this.parentNode.__axis || position, position, d);
      });
    }
    tickExit.remove();
    path2.attr("d", orient === left || orient == right ? "M" + k2 * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k2 * tickSizeOuter : "M" + range0 + "," + k2 * tickSizeOuter + "V0.5H" + range1 + "V" + k2 * tickSizeOuter);
    tick.attr("opacity", 1).attr("transform", function(d) {
      return transform(position, position, d);
    });
    line.attr(x2 + "2", k2 * tickSizeInner).attr(y2 + "1", 0.5).attr(y2 + "2", 0.5);
    text.attr(x2, k2 * spacing).attr(y2, 0.5).attr("dy", orient === top ? "0em" : orient === bottom ? ".71em" : ".32em").text(format2);
    selection2.attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle").each(function() {
      this.__axis = position;
    });
  }
  axis2.scale = function(_) {
    return arguments.length ? (scale = _, axis2) : scale;
  };
  axis2.ticks = function() {
    return tickArguments = slice2.call(arguments), axis2;
  };
  axis2.tickArguments = function(_) {
    return arguments.length ? (tickArguments = _ == null ? [] : slice2.call(_), axis2) : tickArguments.slice();
  };
  axis2.tickValues = function(_) {
    return arguments.length ? (tickValues = _ == null ? null : slice2.call(_), axis2) : tickValues && tickValues.slice();
  };
  axis2.tickFormat = function(_) {
    return arguments.length ? (tickFormat = _, axis2) : tickFormat;
  };
  axis2.tickSize = function(_) {
    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis2) : tickSizeInner;
  };
  axis2.tickSizeInner = function(_) {
    return arguments.length ? (tickSizeInner = +_, axis2) : tickSizeInner;
  };
  axis2.tickSizeOuter = function(_) {
    return arguments.length ? (tickSizeOuter = +_, axis2) : tickSizeOuter;
  };
  axis2.tickPadding = function(_) {
    return arguments.length ? (tickPadding = +_, axis2) : tickPadding;
  };
  return axis2;
}
function axisTop(scale) {
  return axis(top, scale);
}
function axisRight(scale) {
  return axis(right, scale);
}
function axisBottom(scale) {
  return axis(bottom, scale);
}
function axisLeft(scale) {
  return axis(left, scale);
}
var top, right, bottom, left, epsilon;
var init_axis = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-axis/src/axis.js"() {
    init_array3();
    init_identity3();
    top = 1;
    right = 2;
    bottom = 3;
    left = 4;
    epsilon = 1e-6;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-axis/index.js
var d3_axis_exports = {};
__export(d3_axis_exports, {
  axisBottom: () => axisBottom,
  axisLeft: () => axisLeft,
  axisRight: () => axisRight,
  axisTop: () => axisTop,
  version: () => version4
});
var init_d3_axis = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-axis/index.js"() {
    init_package4();
    init_axis();
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/axis.js
var require_axis = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/axis.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Axis = (init_d3_axis(), __toCommonJS(d3_axis_exports));
    var _d3Axis2 = _interopRequireDefault(_d3Axis);
    var _d3Selection = (init_d3_selection(), __toCommonJS(d3_selection_exports));
    var _d3Selection2 = _interopRequireDefault(_d3Selection);
    var _reactFauxDom = require_ReactFauxDOM();
    var _reactFauxDom2 = _interopRequireDefault(_reactFauxDom);
    var _scale = require_scale();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Axis = function(_Component) {
      _inherits(Axis2, _Component);
      function Axis2(props) {
        _classCallCheck(this, Axis2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Axis2).call(this, props));
      }
      _createClass(Axis2, [{
        key: "_mkTickAxis",
        value: function _mkTickAxis() {
          var _props = this.props;
          var type = _props.type;
          var tickOrient = _props.tickOrient;
          var tickFormat = _props.tickFormat;
          var tickPadding = _props.tickPadding;
          var tickSizeInner = _props.tickSizeInner;
          var tickSizeOuter = _props.tickSizeOuter;
          var ticks = _props.ticks;
          var tickValues = _props.tickValues;
          var func = _d3Axis2.default;
          if (tickOrient === "left") {
            func = func.axisLeft(this._mkScale(this.props));
          } else if (tickOrient === "right") {
            func = func.axisRight(this._mkScale(this.props));
          } else if (tickOrient === "top") {
            func = func.axisTop(this._mkScale(this.props));
          } else if (tickOrient === "bottom") {
            func = func.axisBottom(this._mkScale(this.props));
          }
          if (tickFormat)
            func.tickFormat(tickFormat);
          if (tickPadding)
            func.tickPadding(tickPadding);
          if (tickSizeOuter)
            func.tickSizeOuter(tickSizeOuter);
          if (tickSizeInner)
            func.tickSizeInner(tickSizeInner);
          if (tickValues)
            func.tickValues(tickValues);
          if (ticks)
            func.ticks.apply(null, ticks);
          return func;
        }
      }, {
        key: "_mkScale",
        value: function _mkScale() {
          var newScale;
          if (this.props.scale === "ordinal")
            newScale = "band";
          else
            newScale = this.props.scale;
          var func = (0, _scale.scale)(Object.assign({}, this.props, { scale: newScale }));
          return func;
        }
      }, {
        key: "render",
        value: function render() {
          var _props2 = this.props;
          var showAxis = _props2.showAxis;
          var gridAxisClassName = _props2.gridAxisClassName;
          var axisClassName = _props2.axisClassName;
          var type = _props2.type;
          var style = _props2.style;
          var axisStyling = _props2.axisStyling;
          var gridStyleClassName = _props2.gridStyleClassName;
          var axisGroup = _reactFauxDom2.default.createElement("g");
          if (type === "x")
            var axisClasses = axisClassName + " axis x";
          else if (type === "y")
            var axisClasses = axisClassName + " axis y";
          else if (type === "gridx" || type === "gridy")
            var axisClasses = gridAxisClassName + " grid-axis";
          axisGroup.setAttribute("class", axisClasses);
          var axisDom = _d3Selection2.default.select(axisGroup);
          axisDom.call(this._mkTickAxis());
          if (!showAxis) {
            axisDom.selectAll(".grid-axis .tick text").style("opacity", "0");
            if (type === "gridx" || type === "gridy") {
              axisDom.selectAll(".grid-axis .domain").style("opacity", "0");
            }
          }
          if (axisStyling && axisStyling.pathClassName) {
            var axisPath = axisDom.selectAll(".axis path");
            axisPath.attr("class", axisStyling.pathClassName);
          } else
            axisDom.selectAll(".axis path").style("fill", "none").style("stroke", "#000").style("shape-rendering", "crispEdges").style("display", "none");
          if (axisStyling && axisStyling.ticksClassName) {
            var axisLine = axisDom.selectAll(".axis line");
            axisLine.attr("class", axisStyling.ticksClassName);
          } else
            axisDom.selectAll(".axis line").style("fill", "none").style("stroke", "#000").style("shape-rendering", "crispEdges");
          if (gridStyleClassName) {
            var grids = axisDom.selectAll(".grid-axis line");
            grids.attr("class", gridStyleClassName);
          } else
            axisDom.selectAll(".grid-axis line").style("opacity", 0.2).style("fill", "none").style("stroke", "#000").style("stroke-width", "1.5px");
          var axisText = axisDom.selectAll(".axis text");
          if (style) {
            for (var key in style) {
              axisText.style(key, style[key]);
            }
          } else if (axisStyling && axisStyling.textClassName) {
            axisText.attr("class", axisStyling.textClassName);
          }
          return axisDom.node().toReact();
        }
      }]);
      return Axis2;
    }(_react.Component);
    Axis.defaultProps = {
      range: null,
      rangeRoundBands: null,
      domain: null,
      tickFormat: null,
      tickOrient: null
    };
    Axis.PropTypes = {
      showAxis: _react.PropTypes.bool,
      type: _react.PropTypes.string,
      orient: _react.PropTypes.oneOf(["top", "bottom", "left", "right"]),
      tickOrient: _react.PropTypes.oneOf(["top", "bottom", "left", "right"])
    };
    exports.default = Axis;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/label.js
var require_label = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/label.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Selection = (init_d3_selection(), __toCommonJS(d3_selection_exports));
    var _d3Selection2 = _interopRequireDefault(_d3Selection);
    var _reactFauxDom = require_ReactFauxDOM();
    var _reactFauxDom2 = _interopRequireDefault(_reactFauxDom);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Label = function(_Component) {
      _inherits(Label2, _Component);
      function Label2(props) {
        _classCallCheck(this, Label2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Label2).call(this, props));
      }
      _createClass(Label2, [{
        key: "_mkLabel",
        value: function _mkLabel(dom) {
          var _props = this.props;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var labelOffset = _props.labelOffset;
          var labelTitle = _props.labelTitle;
          var labelPosition = _props.labelPosition;
          var vTransform = _props.vTransform;
          var hTransform = _props.hTransform;
          var textAnchor = _props.textAnchor;
          var labelDom = _d3Selection2.default.select(dom);
          var fixWidth = width - margins.left - margins.right;
          var fixHeight = height - margins.top - margins.bottom;
          if (labelPosition === "top") {
            labelDom.attr("transform", hTransform).attr("y", -labelOffset).attr("x", fixWidth / 2).style("text-anchor", textAnchor).text(labelTitle);
          } else if (labelPosition === "bottom") {
            labelDom.attr("transform", hTransform).attr("y", +labelOffset).attr("x", fixWidth / 2).style("text-anchor", textAnchor).text(labelTitle);
          } else if (labelPosition === "left") {
            labelDom.attr("transform", vTransform).attr("y", -labelOffset).attr("x", -fixHeight / 2).style("text-anchor", textAnchor).text(labelTitle);
          } else if (labelPosition === "right") {
            labelDom.attr("transform", vTransform).attr("y", +labelOffset).attr("x", -fixHeight / 2).style("text-anchor", textAnchor).text(labelTitle);
          }
          return labelDom;
        }
      }, {
        key: "render",
        value: function render() {
          var labelClassName = this.props.labelClassName;
          var labelText = _reactFauxDom2.default.createElement("text");
          var labelClasses = labelClassName + " label";
          labelText.setAttribute("class", labelClasses);
          var labelDom = this._mkLabel(labelText);
          return labelDom.node().toReact();
        }
      }]);
      return Label2;
    }(_react.Component);
    Label.defaultProps = _extends({
      hTransform: "rotate(0)",
      vTransform: "rotate(270)",
      labelTitle: "label title",
      labelPosition: "bottom",
      labelOffset: 40,
      textAnchor: "middle",
      labelClassName: "react-d3-core__label"
    }, _commonProps2.default);
    Label.propTypes = {
      height: _react.PropTypes.number.isRequired,
      width: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      hTransform: _react.PropTypes.string,
      vTransform: _react.PropTypes.string,
      labelTitle: _react.PropTypes.string,
      labelPosition: _react.PropTypes.oneOf(["top", "bottom", "left", "right"]),
      labelOffset: _react.PropTypes.number,
      textAnchor: _react.PropTypes.string,
      labelClassName: _react.PropTypes.string
    };
    exports.default = Label;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/xaxis.js
var require_xaxis = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/xaxis.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _axis = require_axis();
    var _axis2 = _interopRequireDefault(_axis);
    var _label = require_label();
    var _label2 = _interopRequireDefault(_label);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Xaxis = function(_Component) {
      _inherits(Xaxis2, _Component);
      function Xaxis2(props) {
        _classCallCheck(this, Xaxis2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Xaxis2).call(this, props));
      }
      _createClass(Xaxis2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var showXAxis = _props.showXAxis;
          var x2 = _props.x;
          var xAxisClassName = _props.xAxisClassName;
          var xDomain = _props.xDomain;
          var xRange = _props.xRange;
          var xBandPaddingInner = _props.xBandPaddingInner;
          var xBandPaddingOuter = _props.xBandPaddingOuter;
          var xScale = _props.xScale;
          var xOrient = _props.xOrient;
          var xTickOrient = _props.xTickOrient;
          var xTickPadding = _props.xTickPadding;
          var xTickSizeOuter = _props.xTickSizeOuter;
          var xTickSizeInner = _props.xTickSizeInner;
          var xTickFormat = _props.xTickFormat;
          var xTicks = _props.xTicks;
          var xLabel = _props.xLabel;
          var xLabelPosition = _props.xLabelPosition;
          var labelOffset = _props.labelOffset;
          var style = _props.style;
          var xAxisStyling = _props.xAxisStyling;
          var xTickValues = _props.xTickValues;
          var t;
          var axisLabel;
          if (!xRange) {
            xRange = [0, width - margins.left - margins.right];
          }
          if (xOrient === "bottom") {
            t = "translate(0, " + (height - margins.bottom - margins.top) + ")";
          } else if (xOrient === "top") {
            t = "translate(0, 0)";
          }
          if (xLabel) {
            axisLabel = _react2.default.createElement(_label2.default, {
              height,
              width,
              margins,
              labelTitle: xLabel,
              labelPosition: xLabelPosition,
              labelOffset,
              bandPaddingInner: xBandPaddingInner,
              bandPaddingOuter: xBandPaddingOuter
            });
          }
          return _react2.default.createElement(
            "g",
            { transform: t },
            _react2.default.createElement(_axis2.default, {
              height,
              width,
              margins,
              showAxis: showXAxis,
              axisClassName: xAxisClassName,
              bandPaddingInner: xBandPaddingInner,
              bandPaddingOuter: xBandPaddingOuter,
              type: "x",
              proxy: x2,
              domain: xDomain,
              range: xRange,
              scale: xScale,
              orient: xOrient,
              tickOrient: xTickOrient,
              tickFormat: xTickFormat,
              tickPadding: xTickPadding,
              tickSizeInner: xTickSizeInner,
              tickSizeOuter: xTickSizeOuter,
              style,
              ticks: xTicks,
              axisStyling: xAxisStyling,
              tickValues: xTickValues
            }),
            axisLabel
          );
        }
      }]);
      return Xaxis2;
    }(_react.Component);
    Xaxis.defaultProps = _extends({
      showXAxis: true,
      xAxisClassName: "react-d3-core__axis__xAxis",
      xScale: "linear",
      xOrient: "bottom",
      xTickOrient: "bottom",
      xLabelPosition: "bottom",
      xTickPadding: 3,
      xInnerTickSize: 6,
      xOuterTickSize: 6
    }, _commonProps2.default);
    Xaxis.propTypes = {
      height: _react.PropTypes.number.isRequired,
      width: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      showXAxis: _react.PropTypes.bool,
      x: _react.PropTypes.func,
      xDomain: _react.PropTypes.array,
      xRange: _react.PropTypes.array,
      xScale: _react.PropTypes.string.isRequired,
      xOrient: _react.PropTypes.oneOf(["top", "bottom"]),
      xTickOrient: _react.PropTypes.oneOf(["top", "bottom"]),
      xAxisClassName: _react.PropTypes.string,
      xTickSizeInner: _react.PropTypes.number,
      xTickSizeOuter: _react.PropTypes.number,
      xBandPaddingInner: _react.PropTypes.number,
      xBandPaddingOuter: _react.PropTypes.number,
      xTickPadding: _react.PropTypes.number,
      xTickFormat: _react.PropTypes.func,
      xTicks: _react.PropTypes.array,
      style: _react.PropTypes.object,
      /*
       xAxisStyling object holds css styling classes for axis elements
       pathClassName: "someCls"
       ticksClassName: "someCls"
       textClassName: "someCls"
       */
      xAxisStyling: _react.PropTypes.object,
      xTickValues: _react.PropTypes.array
    };
    exports.default = Xaxis;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/yaxis.js
var require_yaxis = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/axis/yaxis.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _axis = require_axis();
    var _axis2 = _interopRequireDefault(_axis);
    var _label = require_label();
    var _label2 = _interopRequireDefault(_label);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Yaxis = function(_Component) {
      _inherits(Yaxis2, _Component);
      function Yaxis2(props) {
        _classCallCheck(this, Yaxis2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Yaxis2).call(this, props));
      }
      _createClass(Yaxis2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var y2 = _props.y;
          var yAxisClassName = _props.yAxisClassName;
          var yDomain = _props.yDomain;
          var yRange = _props.yRange;
          var yBandPaddingInner = _props.yBandPaddingInner;
          var yBandPaddingOuter = _props.yBandPaddingOuter;
          var yScale = _props.yScale;
          var yOrient = _props.yOrient;
          var yTickOrient = _props.yTickOrient;
          var yTickFormat = _props.yTickFormat;
          var yTickPadding = _props.yTickPadding;
          var yTickSizeOuter = _props.yTickSizeOuter;
          var yTickSizeInner = _props.yTickSizeInner;
          var yTicks = _props.yTicks;
          var yLabel = _props.yLabel;
          var yLabelPosition = _props.yLabelPosition;
          var labelOffset = _props.labelOffset;
          var showYAxis = _props.showYAxis;
          var style = _props.style;
          var yAxisStyling = _props.yAxisStyling;
          var yTickValues = _props.yTickValues;
          var t;
          var axisLabel;
          if (!yRange) {
            yRange = [height - margins.top - margins.bottom, 0];
          }
          if (yOrient === "right") {
            t = "translate(" + (width - margins.right - margins.left) + ", 0)";
          } else if (yOrient === "left") {
            t = "translate(0, 0)";
          }
          if (yLabel) {
            axisLabel = _react2.default.createElement(_label2.default, {
              height,
              width,
              margins,
              labelTitle: yLabel,
              labelPosition: yLabelPosition,
              labelOffset,
              bandPaddingInner: yBandPaddingInner,
              bandPaddingOuter: yBandPaddingOuter
            });
          }
          return _react2.default.createElement(
            "g",
            { transform: t },
            _react2.default.createElement(_axis2.default, {
              height,
              width,
              margins,
              showAxis: showYAxis,
              axisClassName: yAxisClassName,
              bandPaddingInner: yBandPaddingInner,
              bandPaddingOuter: yBandPaddingOuter,
              type: "y",
              proxy: y2,
              domain: yDomain,
              range: yRange,
              scale: yScale,
              orient: yOrient,
              tickOrient: yTickOrient,
              tickFormat: yTickFormat,
              tickPadding: yTickPadding,
              tickSizeInner: yTickSizeInner,
              tickSizeOuter: yTickSizeOuter,
              ticks: yTicks,
              style,
              axisStyling: yAxisStyling,
              tickValues: yTickValues
            }),
            axisLabel
          );
        }
      }]);
      return Yaxis2;
    }(_react.Component);
    Yaxis.defaultProps = _extends({
      showYAxis: true,
      yAxisClassName: "react-d3-core__axis__yAxis",
      yScale: "linear",
      yOrient: "left",
      yTickOrient: "left",
      yLabelPosition: "left",
      yTickPadding: 3,
      yInnerTickSize: 6,
      yOuterTickSize: 6
    }, _commonProps2.default);
    Yaxis.propTypes = {
      height: _react.PropTypes.number.isRequired,
      width: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      showYAxis: _react.PropTypes.bool,
      y: _react.PropTypes.func,
      yDomain: _react.PropTypes.array,
      yRange: _react.PropTypes.array,
      yScale: _react.PropTypes.string.isRequired,
      yOrient: _react.PropTypes.oneOf(["left", "right"]),
      yTickOrient: _react.PropTypes.oneOf(["left", "right"]),
      yAxisClassName: _react.PropTypes.string,
      yTickSizeInner: _react.PropTypes.number,
      yTickSizeOuter: _react.PropTypes.number,
      yBandPaddingInner: _react.PropTypes.number,
      yBandPaddingOuter: _react.PropTypes.number,
      yTickPadding: _react.PropTypes.number,
      yTickFormat: _react.PropTypes.func,
      yTicks: _react.PropTypes.array,
      style: _react.PropTypes.object,
      /*
       yAxisStyling object holds css styling classes for axis elements
       pathClassName: "someCls"
       ticksClassName: "someCls"
       textClassName: "someCls"
       */
      yAxisStyling: _react.PropTypes.object,
      yTickValues: _react.PropTypes.array
    };
    exports.default = Yaxis;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/grid/grid.js
var require_grid = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/grid/grid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _axis = require_axis();
    var _axis2 = _interopRequireDefault(_axis);
    var _commonProps = require_commonProps();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Grid = function(_Component) {
      _inherits(Grid2, _Component);
      function Grid2(props) {
        _classCallCheck(this, Grid2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Grid2).call(this, props));
      }
      _createClass(Grid2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var type = _props.type;
          var gridAxisClassName = _props.gridAxisClassName;
          var xBandPaddingInner = _props.xBandPaddingInner;
          var xBandPaddingOuter = _props.xBandPaddingOuter;
          var x2 = _props.x;
          var xDomain = _props.xDomain;
          var xRange = _props.xRange;
          var xScale = _props.xScale;
          var xGridCount = _props.xGridCount;
          var xGridStyleClassName = _props.xGridStyleClassName;
          var yBandPaddingInner = _props.yBandPaddingInner;
          var yBandPaddingOuter = _props.yBandPaddingOuter;
          var y2 = _props.y;
          var yDomain = _props.yDomain;
          var yRange = _props.yRange;
          var yScale = _props.yScale;
          var yGridCount = _props.yGridCount;
          var yGridStyleClassName = _props.yGridStyleClassName;
          var xTickValues = _props.xTickValues;
          var yTickValues = _props.yTickValues;
          var gridAxis;
          var t;
          if (!yRange) {
            yRange = [height - margins.top - margins.bottom, 0];
          }
          if (!xRange) {
            xRange = [0, width - margins.left - margins.right];
          }
          if (type === "x") {
            t = "translate(0, " + (height - margins.bottom - margins.top) + ")";
            var tickSize = height - margins.top - margins.bottom;
            gridAxis = _react2.default.createElement(_axis2.default, {
              height,
              width,
              margins,
              type: "gridx",
              showAxis: false,
              gridAxisClassName,
              bandPaddingInner: xBandPaddingInner,
              bandPaddingOuter: xBandPaddingOuter,
              tickOrient: "bottom",
              orient: "bottom",
              tickSizeOuter: 0,
              tickPadding: 10,
              tickFormat: null,
              tickSizeInner: -tickSize,
              proxy: x2,
              domain: xDomain,
              range: xRange,
              scale: xScale,
              ticks: xGridCount,
              gridStyleClassName: xGridStyleClassName,
              tickValues: xTickValues
            });
          } else if (type === "y") {
            t = "translate(0, 0)";
            var tickSize = width - margins.left - margins.right;
            gridAxis = _react2.default.createElement(_axis2.default, {
              height,
              width,
              margins,
              type: "gridy",
              showAxis: false,
              gridAxisClassName,
              bandPaddingInner: yBandPaddingInner,
              bandPaddingOuter: yBandPaddingOuter,
              tickOrient: "left",
              orient: "left",
              tickSizeOuter: 0,
              tickPadding: 10,
              tickSizeInner: -tickSize,
              tickFormat: null,
              proxy: y2,
              scale: yScale,
              domain: yDomain,
              range: yRange,
              ticks: yGridCount,
              gridStyleClassName: yGridStyleClassName,
              tickValues: yTickValues
            });
          }
          return _react2.default.createElement(
            "g",
            { transform: t },
            gridAxis
          );
        }
      }]);
      return Grid2;
    }(_react.Component);
    Grid.defaultProps = _extends({
      type: "x",
      gridAxisClassName: "react-d3-core__grid_axis"
    }, _commonProps2.default);
    Grid.propTypes = {
      height: _react.PropTypes.number.isRequired,
      width: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      type: _react.PropTypes.oneOf(["x", "y"]).isRequired,
      gridAxisClassName: _react.PropTypes.string,
      x: _react.PropTypes.func,
      xDomain: _react.PropTypes.array,
      xRange: _react.PropTypes.array,
      xScale: _react.PropTypes.oneOf(["linear", "identity", "sqrt", "pow", "log", "quantize", "quantile", "ordinal", "time"]).isRequired,
      xBandPaddingInner: _react.PropTypes.number,
      xBandPaddingOuter: _react.PropTypes.number,
      y: _react.PropTypes.func,
      yDomain: _react.PropTypes.array,
      yRange: _react.PropTypes.array,
      yScale: _react.PropTypes.oneOf(["linear", "identity", "sqrt", "pow", "log", "quantize", "quantile", "ordinal", "time"]).isRequired,
      yBandPaddingInner: _react.PropTypes.number,
      yBandPaddingOuter: _react.PropTypes.number,
      xGridCount: _react.PropTypes.array,
      yGridCount: _react.PropTypes.array,
      xGridStyleClassName: _react.PropTypes.string,
      yGridStyleClassName: _react.PropTypes.string,
      xTickValues: _react.PropTypes.array
    };
    exports.default = Grid;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/grid/xgrid.js
var require_xgrid = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/grid/xgrid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _grid = require_grid();
    var _grid2 = _interopRequireDefault(_grid);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var XGrid = function(_Component) {
      _inherits(XGrid2, _Component);
      function XGrid2(props) {
        _classCallCheck(this, XGrid2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(XGrid2).call(this, props));
      }
      _createClass(XGrid2, [{
        key: "render",
        value: function render() {
          return _react2.default.createElement(_grid2.default, _extends({}, this.props, {
            type: "x"
          }));
        }
      }]);
      return XGrid2;
    }(_react.Component);
    exports.default = XGrid;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/grid/ygrid.js
var require_ygrid = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/grid/ygrid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _grid = require_grid();
    var _grid2 = _interopRequireDefault(_grid);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var YGrid = function(_Component) {
      _inherits(YGrid2, _Component);
      function YGrid2(props) {
        _classCallCheck(this, YGrid2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(YGrid2).call(this, props));
      }
      _createClass(YGrid2, [{
        key: "render",
        value: function render() {
          return _react2.default.createElement(_grid2.default, _extends({}, this.props, {
            type: "y"
          }));
        }
      }]);
      return YGrid2;
    }(_react.Component);
    exports.default = YGrid;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/utils/xDomain.js
var require_xDomain = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/utils/xDomain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.xDomain = xDomain;
    var _d3Array = (init_d3_array(), __toCommonJS(d3_array_exports));
    var _d3Array2 = _interopRequireDefault(_d3Array);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function xDomain(props, stack, horizonal) {
      var data = props.data;
      var chartSeries = props.chartSeries;
      var x2 = props.x;
      var xScale = props.xScale;
      var xDomain2 = props.xDomain;
      if (xDomain2)
        return xDomain2;
      if (!horizonal) {
        if (xScale === "ordinal") {
          return data.map(function(d) {
            return x2(d);
          });
        } else {
          return _d3Array2.default.extent(data, function(d) {
            return x2(d);
          });
        }
      } else {
        if (stack) {
          var max = 0;
          var min = 0;
          data.forEach(function(d) {
            var totalTop = 0;
            var totalBottom = 0;
            chartSeries.forEach(function(sd) {
              var field = sd.field;
              if (d[field] > 0) {
                totalTop += x2(d[field]);
              } else if (d[field] < 0) {
                totalBottom += x2(d[field]);
              }
            });
            if (totalTop > max)
              max = totalTop;
            if (totalBottom < min)
              min = totalBottom;
          });
          return [min, max];
        } else {
          var domainArr = chartSeries.map(function(d) {
            var field = d.field;
            var extent = _d3Array2.default.extent(data, function(dt) {
              return x2(dt[field]);
            });
            return extent;
          });
          return _d3Array2.default.extent([].concat.apply([], domainArr));
        }
      }
    }
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/utils/yDomain.js
var require_yDomain = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/utils/yDomain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.yDomain = yDomain;
    var _d3Array = (init_d3_array(), __toCommonJS(d3_array_exports));
    var _d3Array2 = _interopRequireDefault(_d3Array);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function yDomain(props, stack, horizonal) {
      var data = props.data;
      var chartSeries = props.chartSeries;
      var y2 = props.y;
      var yDomain2 = props.yDomain;
      var yScale = props.yScale;
      if (yDomain2)
        return yDomain2;
      if (!horizonal) {
        if (stack) {
          var max = 0;
          var min = 0;
          data.forEach(function(d) {
            var totalTop = 0;
            var totalBottom = 0;
            chartSeries.forEach(function(sd) {
              var field = sd.field;
              if (d[field] > 0) {
                totalTop += y2(d[field]);
              } else if (d[field] < 0) {
                totalBottom += y2(d[field]);
              }
            });
            if (totalTop > max)
              max = totalTop;
            if (totalBottom < min)
              min = totalBottom;
          });
          return [min, max];
        } else {
          var domainArr = chartSeries.map(function(d) {
            var field = d.field;
            var extent = _d3Array2.default.extent(data, function(dt) {
              return y2(dt[field]);
            });
            return extent;
          });
          var extentArr = _d3Array2.default.extent([].concat.apply([], domainArr));
          if (extentArr[0] * extentArr[1] >= 0) {
            return [0, extentArr[1]];
          } else {
            return extentArr;
          }
        }
      } else {
        if (yScale === "ordinal") {
          return data.map(function(d) {
            return y2(d);
          });
        } else {
          return _d3Array2.default.extent(data, function(d) {
            return y2(d);
          });
        }
      }
    }
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-core/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-core/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _svg = require_svg();
    Object.defineProperty(exports, "Svg", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_svg).default;
      }
    });
    var _title = require_title();
    Object.defineProperty(exports, "Title", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_title).default;
      }
    });
    var _chartContainer = require_chartContainer();
    Object.defineProperty(exports, "Chart", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_chartContainer).default;
      }
    });
    var _axis = require_axis();
    Object.defineProperty(exports, "Axis", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_axis).default;
      }
    });
    var _xaxis = require_xaxis();
    Object.defineProperty(exports, "Xaxis", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_xaxis).default;
      }
    });
    var _yaxis = require_yaxis();
    Object.defineProperty(exports, "Yaxis", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_yaxis).default;
      }
    });
    var _label = require_label();
    Object.defineProperty(exports, "Label", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_label).default;
      }
    });
    var _legend = require_legend();
    Object.defineProperty(exports, "Legend", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_legend).default;
      }
    });
    var _grid = require_grid();
    Object.defineProperty(exports, "Grid", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_grid).default;
      }
    });
    var _xgrid = require_xgrid();
    Object.defineProperty(exports, "Xgrid", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_xgrid).default;
      }
    });
    var _ygrid = require_ygrid();
    Object.defineProperty(exports, "Ygrid", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_ygrid).default;
      }
    });
    var _scale = require_scale();
    Object.defineProperty(exports, "scale", {
      enumerable: true,
      get: function get() {
        return _scale.scale;
      }
    });
    var _xDomain = require_xDomain();
    Object.defineProperty(exports, "xDomainCount", {
      enumerable: true,
      get: function get() {
        return _xDomain.xDomain;
      }
    });
    var _yDomain = require_yDomain();
    Object.defineProperty(exports, "yDomainCount", {
      enumerable: true,
      get: function get() {
        return _yDomain.yDomain;
      }
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/react-d3-zoom/node_modules/d3/d3.js
var require_d3 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/d3/d3.js"(exports, module) {
    !function() {
      var d32 = {
        version: "3.5.17"
      };
      var d3_arraySlice = [].slice, d3_array = function(list) {
        return d3_arraySlice.call(list);
      };
      var d3_document = this.document;
      function d3_documentElement(node) {
        return node && (node.ownerDocument || node.document || node).documentElement;
      }
      function d3_window(node) {
        return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
      }
      if (d3_document) {
        try {
          d3_array(d3_document.documentElement.childNodes)[0].nodeType;
        } catch (e) {
          d3_array = function(list) {
            var i = list.length, array2 = new Array(i);
            while (i--)
              array2[i] = list[i];
            return array2;
          };
        }
      }
      if (!Date.now)
        Date.now = function() {
          return +/* @__PURE__ */ new Date();
        };
      if (d3_document) {
        try {
          d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
        } catch (error) {
          var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
          d3_element_prototype.setAttribute = function(name, value) {
            d3_element_setAttribute.call(this, name, value + "");
          };
          d3_element_prototype.setAttributeNS = function(space, local, value) {
            d3_element_setAttributeNS.call(this, space, local, value + "");
          };
          d3_style_prototype.setProperty = function(name, value, priority) {
            d3_style_setProperty.call(this, name, value + "", priority);
          };
        }
      }
      d32.ascending = d3_ascending;
      function d3_ascending(a2, b) {
        return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
      }
      d32.descending = function(a2, b) {
        return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
      };
      d32.min = function(array2, f) {
        var i = -1, n = array2.length, a2, b;
        if (arguments.length === 1) {
          while (++i < n)
            if ((b = array2[i]) != null && b >= b) {
              a2 = b;
              break;
            }
          while (++i < n)
            if ((b = array2[i]) != null && a2 > b)
              a2 = b;
        } else {
          while (++i < n)
            if ((b = f.call(array2, array2[i], i)) != null && b >= b) {
              a2 = b;
              break;
            }
          while (++i < n)
            if ((b = f.call(array2, array2[i], i)) != null && a2 > b)
              a2 = b;
        }
        return a2;
      };
      d32.max = function(array2, f) {
        var i = -1, n = array2.length, a2, b;
        if (arguments.length === 1) {
          while (++i < n)
            if ((b = array2[i]) != null && b >= b) {
              a2 = b;
              break;
            }
          while (++i < n)
            if ((b = array2[i]) != null && b > a2)
              a2 = b;
        } else {
          while (++i < n)
            if ((b = f.call(array2, array2[i], i)) != null && b >= b) {
              a2 = b;
              break;
            }
          while (++i < n)
            if ((b = f.call(array2, array2[i], i)) != null && b > a2)
              a2 = b;
        }
        return a2;
      };
      d32.extent = function(array2, f) {
        var i = -1, n = array2.length, a2, b, c2;
        if (arguments.length === 1) {
          while (++i < n)
            if ((b = array2[i]) != null && b >= b) {
              a2 = c2 = b;
              break;
            }
          while (++i < n)
            if ((b = array2[i]) != null) {
              if (a2 > b)
                a2 = b;
              if (c2 < b)
                c2 = b;
            }
        } else {
          while (++i < n)
            if ((b = f.call(array2, array2[i], i)) != null && b >= b) {
              a2 = c2 = b;
              break;
            }
          while (++i < n)
            if ((b = f.call(array2, array2[i], i)) != null) {
              if (a2 > b)
                a2 = b;
              if (c2 < b)
                c2 = b;
            }
        }
        return [a2, c2];
      };
      function d3_number(x2) {
        return x2 === null ? NaN : +x2;
      }
      function d3_numeric(x2) {
        return !isNaN(x2);
      }
      d32.sum = function(array2, f) {
        var s2 = 0, n = array2.length, a2, i = -1;
        if (arguments.length === 1) {
          while (++i < n)
            if (d3_numeric(a2 = +array2[i]))
              s2 += a2;
        } else {
          while (++i < n)
            if (d3_numeric(a2 = +f.call(array2, array2[i], i)))
              s2 += a2;
        }
        return s2;
      };
      d32.mean = function(array2, f) {
        var s2 = 0, n = array2.length, a2, i = -1, j = n;
        if (arguments.length === 1) {
          while (++i < n)
            if (d3_numeric(a2 = d3_number(array2[i])))
              s2 += a2;
            else
              --j;
        } else {
          while (++i < n)
            if (d3_numeric(a2 = d3_number(f.call(array2, array2[i], i))))
              s2 += a2;
            else
              --j;
        }
        if (j)
          return s2 / j;
      };
      d32.quantile = function(values, p) {
        var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
        return e ? v + e * (values[h] - v) : v;
      };
      d32.median = function(array2, f) {
        var numbers = [], n = array2.length, a2, i = -1;
        if (arguments.length === 1) {
          while (++i < n)
            if (d3_numeric(a2 = d3_number(array2[i])))
              numbers.push(a2);
        } else {
          while (++i < n)
            if (d3_numeric(a2 = d3_number(f.call(array2, array2[i], i))))
              numbers.push(a2);
        }
        if (numbers.length)
          return d32.quantile(numbers.sort(d3_ascending), 0.5);
      };
      d32.variance = function(array2, f) {
        var n = array2.length, m = 0, a2, d, s2 = 0, i = -1, j = 0;
        if (arguments.length === 1) {
          while (++i < n) {
            if (d3_numeric(a2 = d3_number(array2[i]))) {
              d = a2 - m;
              m += d / ++j;
              s2 += d * (a2 - m);
            }
          }
        } else {
          while (++i < n) {
            if (d3_numeric(a2 = d3_number(f.call(array2, array2[i], i)))) {
              d = a2 - m;
              m += d / ++j;
              s2 += d * (a2 - m);
            }
          }
        }
        if (j > 1)
          return s2 / (j - 1);
      };
      d32.deviation = function() {
        var v = d32.variance.apply(this, arguments);
        return v ? Math.sqrt(v) : v;
      };
      function d3_bisector(compare) {
        return {
          left: function(a2, x2, lo, hi) {
            if (arguments.length < 3)
              lo = 0;
            if (arguments.length < 4)
              hi = a2.length;
            while (lo < hi) {
              var mid = lo + hi >>> 1;
              if (compare(a2[mid], x2) < 0)
                lo = mid + 1;
              else
                hi = mid;
            }
            return lo;
          },
          right: function(a2, x2, lo, hi) {
            if (arguments.length < 3)
              lo = 0;
            if (arguments.length < 4)
              hi = a2.length;
            while (lo < hi) {
              var mid = lo + hi >>> 1;
              if (compare(a2[mid], x2) > 0)
                hi = mid;
              else
                lo = mid + 1;
            }
            return lo;
          }
        };
      }
      var d3_bisect = d3_bisector(d3_ascending);
      d32.bisectLeft = d3_bisect.left;
      d32.bisect = d32.bisectRight = d3_bisect.right;
      d32.bisector = function(f) {
        return d3_bisector(f.length === 1 ? function(d, x2) {
          return d3_ascending(f(d), x2);
        } : f);
      };
      d32.shuffle = function(array2, i0, i1) {
        if ((m = arguments.length) < 3) {
          i1 = array2.length;
          if (m < 2)
            i0 = 0;
        }
        var m = i1 - i0, t, i;
        while (m) {
          i = Math.random() * m-- | 0;
          t = array2[m + i0], array2[m + i0] = array2[i + i0], array2[i + i0] = t;
        }
        return array2;
      };
      d32.permute = function(array2, indexes) {
        var i = indexes.length, permutes = new Array(i);
        while (i--)
          permutes[i] = array2[indexes[i]];
        return permutes;
      };
      d32.pairs = function(array2) {
        var i = 0, n = array2.length - 1, p0, p1 = array2[0], pairs = new Array(n < 0 ? 0 : n);
        while (i < n)
          pairs[i] = [p0 = p1, p1 = array2[++i]];
        return pairs;
      };
      d32.transpose = function(matrix) {
        if (!(n = matrix.length))
          return [];
        for (var i = -1, m = d32.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
          for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
            row[j] = matrix[j][i];
          }
        }
        return transpose;
      };
      function d3_transposeLength(d) {
        return d.length;
      }
      d32.zip = function() {
        return d32.transpose(arguments);
      };
      d32.keys = function(map3) {
        var keys = [];
        for (var key in map3)
          keys.push(key);
        return keys;
      };
      d32.values = function(map3) {
        var values = [];
        for (var key in map3)
          values.push(map3[key]);
        return values;
      };
      d32.entries = function(map3) {
        var entries = [];
        for (var key in map3)
          entries.push({
            key,
            value: map3[key]
          });
        return entries;
      };
      d32.merge = function(arrays) {
        var n = arrays.length, m, i = -1, j = 0, merged, array2;
        while (++i < n)
          j += arrays[i].length;
        merged = new Array(j);
        while (--n >= 0) {
          array2 = arrays[n];
          m = array2.length;
          while (--m >= 0) {
            merged[--j] = array2[m];
          }
        }
        return merged;
      };
      var abs = Math.abs;
      d32.range = function(start, stop, step) {
        if (arguments.length < 3) {
          step = 1;
          if (arguments.length < 2) {
            stop = start;
            start = 0;
          }
        }
        if ((stop - start) / step === Infinity)
          throw new Error("infinite range");
        var range = [], k2 = d3_range_integerScale(abs(step)), i = -1, j;
        start *= k2, stop *= k2, step *= k2;
        if (step < 0)
          while ((j = start + step * ++i) > stop)
            range.push(j / k2);
        else
          while ((j = start + step * ++i) < stop)
            range.push(j / k2);
        return range;
      };
      function d3_range_integerScale(x2) {
        var k2 = 1;
        while (x2 * k2 % 1)
          k2 *= 10;
        return k2;
      }
      function d3_class(ctor, properties) {
        for (var key in properties) {
          Object.defineProperty(ctor.prototype, key, {
            value: properties[key],
            enumerable: false
          });
        }
      }
      d32.map = function(object, f) {
        var map3 = new d3_Map();
        if (object instanceof d3_Map) {
          object.forEach(function(key2, value) {
            map3.set(key2, value);
          });
        } else if (Array.isArray(object)) {
          var i = -1, n = object.length, o;
          if (arguments.length === 1)
            while (++i < n)
              map3.set(i, object[i]);
          else
            while (++i < n)
              map3.set(f.call(object, o = object[i], i), o);
        } else {
          for (var key in object)
            map3.set(key, object[key]);
        }
        return map3;
      };
      function d3_Map() {
        this._ = /* @__PURE__ */ Object.create(null);
      }
      var d3_map_proto = "__proto__", d3_map_zero = "\0";
      d3_class(d3_Map, {
        has: d3_map_has,
        get: function(key) {
          return this._[d3_map_escape(key)];
        },
        set: function(key, value) {
          return this._[d3_map_escape(key)] = value;
        },
        remove: d3_map_remove,
        keys: d3_map_keys,
        values: function() {
          var values = [];
          for (var key in this._)
            values.push(this._[key]);
          return values;
        },
        entries: function() {
          var entries = [];
          for (var key in this._)
            entries.push({
              key: d3_map_unescape(key),
              value: this._[key]
            });
          return entries;
        },
        size: d3_map_size,
        empty: d3_map_empty,
        forEach: function(f) {
          for (var key in this._)
            f.call(this, d3_map_unescape(key), this._[key]);
        }
      });
      function d3_map_escape(key) {
        return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
      }
      function d3_map_unescape(key) {
        return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
      }
      function d3_map_has(key) {
        return d3_map_escape(key) in this._;
      }
      function d3_map_remove(key) {
        return (key = d3_map_escape(key)) in this._ && delete this._[key];
      }
      function d3_map_keys() {
        var keys = [];
        for (var key in this._)
          keys.push(d3_map_unescape(key));
        return keys;
      }
      function d3_map_size() {
        var size = 0;
        for (var key in this._)
          ++size;
        return size;
      }
      function d3_map_empty() {
        for (var key in this._)
          return false;
        return true;
      }
      d32.nest = function() {
        var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
        function map3(mapType, array2, depth) {
          if (depth >= keys.length)
            return rollup ? rollup.call(nest, array2) : sortValues ? array2.sort(sortValues) : array2;
          var i = -1, n = array2.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
          while (++i < n) {
            if (values = valuesByKey.get(keyValue = key(object = array2[i]))) {
              values.push(object);
            } else {
              valuesByKey.set(keyValue, [object]);
            }
          }
          if (mapType) {
            object = mapType();
            setter = function(keyValue2, values2) {
              object.set(keyValue2, map3(mapType, values2, depth));
            };
          } else {
            object = {};
            setter = function(keyValue2, values2) {
              object[keyValue2] = map3(mapType, values2, depth);
            };
          }
          valuesByKey.forEach(setter);
          return object;
        }
        function entries(map4, depth) {
          if (depth >= keys.length)
            return map4;
          var array2 = [], sortKey = sortKeys[depth++];
          map4.forEach(function(key, keyMap) {
            array2.push({
              key,
              values: entries(keyMap, depth)
            });
          });
          return sortKey ? array2.sort(function(a2, b) {
            return sortKey(a2.key, b.key);
          }) : array2;
        }
        nest.map = function(array2, mapType) {
          return map3(mapType, array2, 0);
        };
        nest.entries = function(array2) {
          return entries(map3(d32.map, array2, 0), 0);
        };
        nest.key = function(d) {
          keys.push(d);
          return nest;
        };
        nest.sortKeys = function(order) {
          sortKeys[keys.length - 1] = order;
          return nest;
        };
        nest.sortValues = function(order) {
          sortValues = order;
          return nest;
        };
        nest.rollup = function(f) {
          rollup = f;
          return nest;
        };
        return nest;
      };
      d32.set = function(array2) {
        var set2 = new d3_Set();
        if (array2)
          for (var i = 0, n = array2.length; i < n; ++i)
            set2.add(array2[i]);
        return set2;
      };
      function d3_Set() {
        this._ = /* @__PURE__ */ Object.create(null);
      }
      d3_class(d3_Set, {
        has: d3_map_has,
        add: function(key) {
          this._[d3_map_escape(key += "")] = true;
          return key;
        },
        remove: d3_map_remove,
        values: d3_map_keys,
        size: d3_map_size,
        empty: d3_map_empty,
        forEach: function(f) {
          for (var key in this._)
            f.call(this, d3_map_unescape(key));
        }
      });
      d32.behavior = {};
      function d3_identity(d) {
        return d;
      }
      d32.rebind = function(target, source) {
        var i = 1, n = arguments.length, method;
        while (++i < n)
          target[method = arguments[i]] = d3_rebind(target, source, source[method]);
        return target;
      };
      function d3_rebind(target, source, method) {
        return function() {
          var value = method.apply(source, arguments);
          return value === source ? target : value;
        };
      }
      function d3_vendorSymbol(object, name) {
        if (name in object)
          return name;
        name = name.charAt(0).toUpperCase() + name.slice(1);
        for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
          var prefixName = d3_vendorPrefixes[i] + name;
          if (prefixName in object)
            return prefixName;
        }
      }
      var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];
      function d3_noop() {
      }
      d32.dispatch = function() {
        var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
        while (++i < n)
          dispatch[arguments[i]] = d3_dispatch_event(dispatch);
        return dispatch;
      };
      function d3_dispatch() {
      }
      d3_dispatch.prototype.on = function(type, listener) {
        var i = type.indexOf("."), name = "";
        if (i >= 0) {
          name = type.slice(i + 1);
          type = type.slice(0, i);
        }
        if (type)
          return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
        if (arguments.length === 2) {
          if (listener == null)
            for (type in this) {
              if (this.hasOwnProperty(type))
                this[type].on(name, null);
            }
          return this;
        }
      };
      function d3_dispatch_event(dispatch) {
        var listeners = [], listenerByName = new d3_Map();
        function event2() {
          var z = listeners, i = -1, n = z.length, l;
          while (++i < n)
            if (l = z[i].on)
              l.apply(this, arguments);
          return dispatch;
        }
        event2.on = function(name, listener) {
          var l = listenerByName.get(name), i;
          if (arguments.length < 2)
            return l && l.on;
          if (l) {
            l.on = null;
            listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
            listenerByName.remove(name);
          }
          if (listener)
            listeners.push(listenerByName.set(name, {
              on: listener
            }));
          return dispatch;
        };
        return event2;
      }
      d32.event = null;
      function d3_eventPreventDefault() {
        d32.event.preventDefault();
      }
      function d3_eventSource() {
        var e = d32.event, s2;
        while (s2 = e.sourceEvent)
          e = s2;
        return e;
      }
      function d3_eventDispatch(target) {
        var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
        while (++i < n)
          dispatch[arguments[i]] = d3_dispatch_event(dispatch);
        dispatch.of = function(thiz, argumentz) {
          return function(e1) {
            try {
              var e0 = e1.sourceEvent = d32.event;
              e1.target = target;
              d32.event = e1;
              dispatch[e1.type].apply(thiz, argumentz);
            } finally {
              d32.event = e0;
            }
          };
        };
        return dispatch;
      }
      d32.requote = function(s2) {
        return s2.replace(d3_requote_re, "\\$&");
      };
      var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
      var d3_subclass = {}.__proto__ ? function(object, prototype) {
        object.__proto__ = prototype;
      } : function(object, prototype) {
        for (var property in prototype)
          object[property] = prototype[property];
      };
      function d3_selection(groups) {
        d3_subclass(groups, d3_selectionPrototype);
        return groups;
      }
      var d3_select = function(s2, n) {
        return n.querySelector(s2);
      }, d3_selectAll = function(s2, n) {
        return n.querySelectorAll(s2);
      }, d3_selectMatches = function(n, s2) {
        var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
        d3_selectMatches = function(n2, s3) {
          return d3_selectMatcher.call(n2, s3);
        };
        return d3_selectMatches(n, s2);
      };
      if (typeof Sizzle === "function") {
        d3_select = function(s2, n) {
          return Sizzle(s2, n)[0] || null;
        };
        d3_selectAll = Sizzle;
        d3_selectMatches = Sizzle.matchesSelector;
      }
      d32.selection = function() {
        return d32.select(d3_document.documentElement);
      };
      var d3_selectionPrototype = d32.selection.prototype = [];
      d3_selectionPrototype.select = function(selector) {
        var subgroups = [], subgroup, subnode, group, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
          subgroups.push(subgroup = []);
          subgroup.parentNode = (group = this[j]).parentNode;
          for (var i = -1, n = group.length; ++i < n; ) {
            if (node = group[i]) {
              subgroup.push(subnode = selector.call(node, node.__data__, i, j));
              if (subnode && "__data__" in node)
                subnode.__data__ = node.__data__;
            } else {
              subgroup.push(null);
            }
          }
        }
        return d3_selection(subgroups);
      };
      function d3_selection_selector(selector) {
        return typeof selector === "function" ? selector : function() {
          return d3_select(selector, this);
        };
      }
      d3_selectionPrototype.selectAll = function(selector) {
        var subgroups = [], subgroup, node;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
          for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
            if (node = group[i]) {
              subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
              subgroup.parentNode = node;
            }
          }
        }
        return d3_selection(subgroups);
      };
      function d3_selection_selectorAll(selector) {
        return typeof selector === "function" ? selector : function() {
          return d3_selectAll(selector, this);
        };
      }
      var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
      var d3_nsPrefix = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: d3_nsXhtml,
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
      };
      d32.ns = {
        prefix: d3_nsPrefix,
        qualify: function(name) {
          var i = name.indexOf(":"), prefix2 = name;
          if (i >= 0 && (prefix2 = name.slice(0, i)) !== "xmlns")
            name = name.slice(i + 1);
          return d3_nsPrefix.hasOwnProperty(prefix2) ? {
            space: d3_nsPrefix[prefix2],
            local: name
          } : name;
        }
      };
      d3_selectionPrototype.attr = function(name, value) {
        if (arguments.length < 2) {
          if (typeof name === "string") {
            var node = this.node();
            name = d32.ns.qualify(name);
            return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
          }
          for (value in name)
            this.each(d3_selection_attr(value, name[value]));
          return this;
        }
        return this.each(d3_selection_attr(name, value));
      };
      function d3_selection_attr(name, value) {
        name = d32.ns.qualify(name);
        function attrNull() {
          this.removeAttribute(name);
        }
        function attrNullNS() {
          this.removeAttributeNS(name.space, name.local);
        }
        function attrConstant2() {
          this.setAttribute(name, value);
        }
        function attrConstantNS2() {
          this.setAttributeNS(name.space, name.local, value);
        }
        function attrFunction2() {
          var x2 = value.apply(this, arguments);
          if (x2 == null)
            this.removeAttribute(name);
          else
            this.setAttribute(name, x2);
        }
        function attrFunctionNS2() {
          var x2 = value.apply(this, arguments);
          if (x2 == null)
            this.removeAttributeNS(name.space, name.local);
          else
            this.setAttributeNS(name.space, name.local, x2);
        }
        return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS2 : attrFunction2 : name.local ? attrConstantNS2 : attrConstant2;
      }
      function d3_collapse(s2) {
        return s2.trim().replace(/\s+/g, " ");
      }
      d3_selectionPrototype.classed = function(name, value) {
        if (arguments.length < 2) {
          if (typeof name === "string") {
            var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
            if (value = node.classList) {
              while (++i < n)
                if (!value.contains(name[i]))
                  return false;
            } else {
              value = node.getAttribute("class");
              while (++i < n)
                if (!d3_selection_classedRe(name[i]).test(value))
                  return false;
            }
            return true;
          }
          for (value in name)
            this.each(d3_selection_classed(value, name[value]));
          return this;
        }
        return this.each(d3_selection_classed(name, value));
      };
      function d3_selection_classedRe(name) {
        return new RegExp("(?:^|\\s+)" + d32.requote(name) + "(?:\\s+|$)", "g");
      }
      function d3_selection_classes(name) {
        return (name + "").trim().split(/^|\s+/);
      }
      function d3_selection_classed(name, value) {
        name = d3_selection_classes(name).map(d3_selection_classedName);
        var n = name.length;
        function classedConstant() {
          var i = -1;
          while (++i < n)
            name[i](this, value);
        }
        function classedFunction2() {
          var i = -1, x2 = value.apply(this, arguments);
          while (++i < n)
            name[i](this, x2);
        }
        return typeof value === "function" ? classedFunction2 : classedConstant;
      }
      function d3_selection_classedName(name) {
        var re2 = d3_selection_classedRe(name);
        return function(node, value) {
          if (c2 = node.classList)
            return value ? c2.add(name) : c2.remove(name);
          var c2 = node.getAttribute("class") || "";
          if (value) {
            re2.lastIndex = 0;
            if (!re2.test(c2))
              node.setAttribute("class", d3_collapse(c2 + " " + name));
          } else {
            node.setAttribute("class", d3_collapse(c2.replace(re2, " ")));
          }
        };
      }
      d3_selectionPrototype.style = function(name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
          if (typeof name !== "string") {
            if (n < 2)
              value = "";
            for (priority in name)
              this.each(d3_selection_style(priority, name[priority], value));
            return this;
          }
          if (n < 2) {
            var node = this.node();
            return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
          }
          priority = "";
        }
        return this.each(d3_selection_style(name, value, priority));
      };
      function d3_selection_style(name, value, priority) {
        function styleNull() {
          this.style.removeProperty(name);
        }
        function styleConstant2() {
          this.style.setProperty(name, value, priority);
        }
        function styleFunction2() {
          var x2 = value.apply(this, arguments);
          if (x2 == null)
            this.style.removeProperty(name);
          else
            this.style.setProperty(name, x2, priority);
        }
        return value == null ? styleNull : typeof value === "function" ? styleFunction2 : styleConstant2;
      }
      d3_selectionPrototype.property = function(name, value) {
        if (arguments.length < 2) {
          if (typeof name === "string")
            return this.node()[name];
          for (value in name)
            this.each(d3_selection_property(value, name[value]));
          return this;
        }
        return this.each(d3_selection_property(name, value));
      };
      function d3_selection_property(name, value) {
        function propertyNull() {
          delete this[name];
        }
        function propertyConstant2() {
          this[name] = value;
        }
        function propertyFunction2() {
          var x2 = value.apply(this, arguments);
          if (x2 == null)
            delete this[name];
          else
            this[name] = x2;
        }
        return value == null ? propertyNull : typeof value === "function" ? propertyFunction2 : propertyConstant2;
      }
      d3_selectionPrototype.text = function(value) {
        return arguments.length ? this.each(typeof value === "function" ? function() {
          var v = value.apply(this, arguments);
          this.textContent = v == null ? "" : v;
        } : value == null ? function() {
          this.textContent = "";
        } : function() {
          this.textContent = value;
        }) : this.node().textContent;
      };
      d3_selectionPrototype.html = function(value) {
        return arguments.length ? this.each(typeof value === "function" ? function() {
          var v = value.apply(this, arguments);
          this.innerHTML = v == null ? "" : v;
        } : value == null ? function() {
          this.innerHTML = "";
        } : function() {
          this.innerHTML = value;
        }) : this.node().innerHTML;
      };
      d3_selectionPrototype.append = function(name) {
        name = d3_selection_creator(name);
        return this.select(function() {
          return this.appendChild(name.apply(this, arguments));
        });
      };
      function d3_selection_creator(name) {
        function create() {
          var document2 = this.ownerDocument, namespace = this.namespaceURI;
          return namespace === d3_nsXhtml && document2.documentElement.namespaceURI === d3_nsXhtml ? document2.createElement(name) : document2.createElementNS(namespace, name);
        }
        function createNS() {
          return this.ownerDocument.createElementNS(name.space, name.local);
        }
        return typeof name === "function" ? name : (name = d32.ns.qualify(name)).local ? createNS : create;
      }
      d3_selectionPrototype.insert = function(name, before) {
        name = d3_selection_creator(name);
        before = d3_selection_selector(before);
        return this.select(function() {
          return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
        });
      };
      d3_selectionPrototype.remove = function() {
        return this.each(d3_selectionRemove);
      };
      function d3_selectionRemove() {
        var parent = this.parentNode;
        if (parent)
          parent.removeChild(this);
      }
      d3_selectionPrototype.data = function(value, key) {
        var i = -1, n = this.length, group, node;
        if (!arguments.length) {
          value = new Array(n = (group = this[0]).length);
          while (++i < n) {
            if (node = group[i]) {
              value[i] = node.__data__;
            }
          }
          return value;
        }
        function bind(group2, groupData) {
          var i2, n2 = group2.length, m = groupData.length, n0 = Math.min(n2, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n2), node2, nodeData;
          if (key) {
            var nodeByKeyValue = new d3_Map(), keyValues = new Array(n2), keyValue;
            for (i2 = -1; ++i2 < n2; ) {
              if (node2 = group2[i2]) {
                if (nodeByKeyValue.has(keyValue = key.call(node2, node2.__data__, i2))) {
                  exitNodes[i2] = node2;
                } else {
                  nodeByKeyValue.set(keyValue, node2);
                }
                keyValues[i2] = keyValue;
              }
            }
            for (i2 = -1; ++i2 < m; ) {
              if (!(node2 = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i2], i2)))) {
                enterNodes[i2] = d3_selection_dataNode(nodeData);
              } else if (node2 !== true) {
                updateNodes[i2] = node2;
                node2.__data__ = nodeData;
              }
              nodeByKeyValue.set(keyValue, true);
            }
            for (i2 = -1; ++i2 < n2; ) {
              if (i2 in keyValues && nodeByKeyValue.get(keyValues[i2]) !== true) {
                exitNodes[i2] = group2[i2];
              }
            }
          } else {
            for (i2 = -1; ++i2 < n0; ) {
              node2 = group2[i2];
              nodeData = groupData[i2];
              if (node2) {
                node2.__data__ = nodeData;
                updateNodes[i2] = node2;
              } else {
                enterNodes[i2] = d3_selection_dataNode(nodeData);
              }
            }
            for (; i2 < m; ++i2) {
              enterNodes[i2] = d3_selection_dataNode(groupData[i2]);
            }
            for (; i2 < n2; ++i2) {
              exitNodes[i2] = group2[i2];
            }
          }
          enterNodes.update = updateNodes;
          enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group2.parentNode;
          enter.push(enterNodes);
          update.push(updateNodes);
          exit.push(exitNodes);
        }
        var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
        if (typeof value === "function") {
          while (++i < n) {
            bind(group = this[i], value.call(group, group.parentNode.__data__, i));
          }
        } else {
          while (++i < n) {
            bind(group = this[i], value);
          }
        }
        update.enter = function() {
          return enter;
        };
        update.exit = function() {
          return exit;
        };
        return update;
      };
      function d3_selection_dataNode(data) {
        return {
          __data__: data
        };
      }
      d3_selectionPrototype.datum = function(value) {
        return arguments.length ? this.property("__data__", value) : this.property("__data__");
      };
      d3_selectionPrototype.filter = function(filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== "function")
          filter = d3_selection_filter(filter);
        for (var j = 0, m = this.length; j < m; j++) {
          subgroups.push(subgroup = []);
          subgroup.parentNode = (group = this[j]).parentNode;
          for (var i = 0, n = group.length; i < n; i++) {
            if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
              subgroup.push(node);
            }
          }
        }
        return d3_selection(subgroups);
      };
      function d3_selection_filter(selector) {
        return function() {
          return d3_selectMatches(this, selector);
        };
      }
      d3_selectionPrototype.order = function() {
        for (var j = -1, m = this.length; ++j < m; ) {
          for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
            if (node = group[i]) {
              if (next && next !== node.nextSibling)
                next.parentNode.insertBefore(node, next);
              next = node;
            }
          }
        }
        return this;
      };
      d3_selectionPrototype.sort = function(comparator) {
        comparator = d3_selection_sortComparator.apply(this, arguments);
        for (var j = -1, m = this.length; ++j < m; )
          this[j].sort(comparator);
        return this.order();
      };
      function d3_selection_sortComparator(comparator) {
        if (!arguments.length)
          comparator = d3_ascending;
        return function(a2, b) {
          return a2 && b ? comparator(a2.__data__, b.__data__) : !a2 - !b;
        };
      }
      d3_selectionPrototype.each = function(callback) {
        return d3_selection_each(this, function(node, i, j) {
          callback.call(node, node.__data__, i, j);
        });
      };
      function d3_selection_each(groups, callback) {
        for (var j = 0, m = groups.length; j < m; j++) {
          for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
            if (node = group[i])
              callback(node, i, j);
          }
        }
        return groups;
      }
      d3_selectionPrototype.call = function(callback) {
        var args = d3_array(arguments);
        callback.apply(args[0] = this, args);
        return this;
      };
      d3_selectionPrototype.empty = function() {
        return !this.node();
      };
      d3_selectionPrototype.node = function() {
        for (var j = 0, m = this.length; j < m; j++) {
          for (var group = this[j], i = 0, n = group.length; i < n; i++) {
            var node = group[i];
            if (node)
              return node;
          }
        }
        return null;
      };
      d3_selectionPrototype.size = function() {
        var n = 0;
        d3_selection_each(this, function() {
          ++n;
        });
        return n;
      };
      function d3_selection_enter(selection2) {
        d3_subclass(selection2, d3_selection_enterPrototype);
        return selection2;
      }
      var d3_selection_enterPrototype = [];
      d32.selection.enter = d3_selection_enter;
      d32.selection.enter.prototype = d3_selection_enterPrototype;
      d3_selection_enterPrototype.append = d3_selectionPrototype.append;
      d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
      d3_selection_enterPrototype.node = d3_selectionPrototype.node;
      d3_selection_enterPrototype.call = d3_selectionPrototype.call;
      d3_selection_enterPrototype.size = d3_selectionPrototype.size;
      d3_selection_enterPrototype.select = function(selector) {
        var subgroups = [], subgroup, subnode, upgroup, group, node;
        for (var j = -1, m = this.length; ++j < m; ) {
          upgroup = (group = this[j]).update;
          subgroups.push(subgroup = []);
          subgroup.parentNode = group.parentNode;
          for (var i = -1, n = group.length; ++i < n; ) {
            if (node = group[i]) {
              subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
              subnode.__data__ = node.__data__;
            } else {
              subgroup.push(null);
            }
          }
        }
        return d3_selection(subgroups);
      };
      d3_selection_enterPrototype.insert = function(name, before) {
        if (arguments.length < 2)
          before = d3_selection_enterInsertBefore(this);
        return d3_selectionPrototype.insert.call(this, name, before);
      };
      function d3_selection_enterInsertBefore(enter) {
        var i0, j0;
        return function(d, i, j) {
          var group = enter[j].update, n = group.length, node;
          if (j != j0)
            j0 = j, i0 = 0;
          if (i >= i0)
            i0 = i + 1;
          while (!(node = group[i0]) && ++i0 < n)
            ;
          return node;
        };
      }
      d32.select = function(node) {
        var group;
        if (typeof node === "string") {
          group = [d3_select(node, d3_document)];
          group.parentNode = d3_document.documentElement;
        } else {
          group = [node];
          group.parentNode = d3_documentElement(node);
        }
        return d3_selection([group]);
      };
      d32.selectAll = function(nodes) {
        var group;
        if (typeof nodes === "string") {
          group = d3_array(d3_selectAll(nodes, d3_document));
          group.parentNode = d3_document.documentElement;
        } else {
          group = d3_array(nodes);
          group.parentNode = null;
        }
        return d3_selection([group]);
      };
      d3_selectionPrototype.on = function(type, listener, capture) {
        var n = arguments.length;
        if (n < 3) {
          if (typeof type !== "string") {
            if (n < 2)
              listener = false;
            for (capture in type)
              this.each(d3_selection_on(capture, type[capture], listener));
            return this;
          }
          if (n < 2)
            return (n = this.node()["__on" + type]) && n._;
          capture = false;
        }
        return this.each(d3_selection_on(type, listener, capture));
      };
      function d3_selection_on(type, listener, capture) {
        var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
        if (i > 0)
          type = type.slice(0, i);
        var filter = d3_selection_onFilters.get(type);
        if (filter)
          type = filter, wrap = d3_selection_onFilter;
        function onRemove2() {
          var l = this[name];
          if (l) {
            this.removeEventListener(type, l, l.$);
            delete this[name];
          }
        }
        function onAdd2() {
          var l = wrap(listener, d3_array(arguments));
          onRemove2.call(this);
          this.addEventListener(type, this[name] = l, l.$ = capture);
          l._ = listener;
        }
        function removeAll() {
          var re2 = new RegExp("^__on([^.]+)" + d32.requote(type) + "$"), match;
          for (var name2 in this) {
            if (match = name2.match(re2)) {
              var l = this[name2];
              this.removeEventListener(match[1], l, l.$);
              delete this[name2];
            }
          }
        }
        return i ? listener ? onAdd2 : onRemove2 : listener ? d3_noop : removeAll;
      }
      var d3_selection_onFilters = d32.map({
        mouseenter: "mouseover",
        mouseleave: "mouseout"
      });
      if (d3_document) {
        d3_selection_onFilters.forEach(function(k2) {
          if ("on" + k2 in d3_document)
            d3_selection_onFilters.remove(k2);
        });
      }
      function d3_selection_onListener(listener, argumentz) {
        return function(e) {
          var o = d32.event;
          d32.event = e;
          argumentz[0] = this.__data__;
          try {
            listener.apply(this, argumentz);
          } finally {
            d32.event = o;
          }
        };
      }
      function d3_selection_onFilter(listener, argumentz) {
        var l = d3_selection_onListener(listener, argumentz);
        return function(e) {
          var target = this, related = e.relatedTarget;
          if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
            l.call(target, e);
          }
        };
      }
      var d3_event_dragSelect, d3_event_dragId = 0;
      function d3_event_dragSuppress(node) {
        var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d32.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
        if (d3_event_dragSelect == null) {
          d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
        }
        if (d3_event_dragSelect) {
          var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
          style[d3_event_dragSelect] = "none";
        }
        return function(suppressClick) {
          w.on(name, null);
          if (d3_event_dragSelect)
            style[d3_event_dragSelect] = select;
          if (suppressClick) {
            var off = function() {
              w.on(click, null);
            };
            w.on(click, function() {
              d3_eventPreventDefault();
              off();
            }, true);
            setTimeout(off, 0);
          }
        };
      }
      d32.mouse = function(container) {
        return d3_mousePoint(container, d3_eventSource());
      };
      var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
      function d3_mousePoint(container, e) {
        if (e.changedTouches)
          e = e.changedTouches[0];
        var svg = container.ownerSVGElement || container;
        if (svg.createSVGPoint) {
          var point6 = svg.createSVGPoint();
          if (d3_mouse_bug44083 < 0) {
            var window = d3_window(container);
            if (window.scrollX || window.scrollY) {
              svg = d32.select("body").append("svg").style({
                position: "absolute",
                top: 0,
                left: 0,
                margin: 0,
                padding: 0,
                border: "none"
              }, "important");
              var ctm = svg[0][0].getScreenCTM();
              d3_mouse_bug44083 = !(ctm.f || ctm.e);
              svg.remove();
            }
          }
          if (d3_mouse_bug44083)
            point6.x = e.pageX, point6.y = e.pageY;
          else
            point6.x = e.clientX, point6.y = e.clientY;
          point6 = point6.matrixTransform(container.getScreenCTM().inverse());
          return [point6.x, point6.y];
        }
        var rect = container.getBoundingClientRect();
        return [e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop];
      }
      d32.touch = function(container, touches, identifier) {
        if (arguments.length < 3)
          identifier = touches, touches = d3_eventSource().changedTouches;
        if (touches)
          for (var i = 0, n = touches.length, touch; i < n; ++i) {
            if ((touch = touches[i]).identifier === identifier) {
              return d3_mousePoint(container, touch);
            }
          }
      };
      d32.behavior.drag = function() {
        var event2 = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d32.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d32.touch, d3_identity, "touchmove", "touchend");
        function drag() {
          this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
        }
        function dragstart(id, position, subject, move, end) {
          return function() {
            var that = this, target = d32.event.target.correspondingElement || d32.event.target, parent = that.parentNode, dispatch = event2.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d32.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
            if (origin) {
              dragOffset = origin.apply(that, arguments);
              dragOffset = [dragOffset.x - position0[0], dragOffset.y - position0[1]];
            } else {
              dragOffset = [0, 0];
            }
            dispatch({
              type: "dragstart"
            });
            function moved() {
              var position1 = position(parent, dragId), dx, dy;
              if (!position1)
                return;
              dx = position1[0] - position0[0];
              dy = position1[1] - position0[1];
              dragged |= dx | dy;
              position0 = position1;
              dispatch({
                type: "drag",
                x: position1[0] + dragOffset[0],
                y: position1[1] + dragOffset[1],
                dx,
                dy
              });
            }
            function ended() {
              if (!position(parent, dragId))
                return;
              dragSubject.on(move + dragName, null).on(end + dragName, null);
              dragRestore(dragged);
              dispatch({
                type: "dragend"
              });
            }
          };
        }
        drag.origin = function(x2) {
          if (!arguments.length)
            return origin;
          origin = x2;
          return drag;
        };
        return d32.rebind(drag, event2, "on");
      };
      function d3_behavior_dragTouchId() {
        return d32.event.changedTouches[0].identifier;
      }
      d32.touches = function(container, touches) {
        if (arguments.length < 2)
          touches = d3_eventSource().touches;
        return touches ? d3_array(touches).map(function(touch) {
          var point6 = d3_mousePoint(container, touch);
          point6.identifier = touch.identifier;
          return point6;
        }) : [];
      };
      var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
      function d3_sgn(x2) {
        return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
      }
      function d3_cross2d(a2, b, c2) {
        return (b[0] - a2[0]) * (c2[1] - a2[1]) - (b[1] - a2[1]) * (c2[0] - a2[0]);
      }
      function d3_acos(x2) {
        return x2 > 1 ? 0 : x2 < -1 ? π : Math.acos(x2);
      }
      function d3_asin(x2) {
        return x2 > 1 ? halfπ : x2 < -1 ? -halfπ : Math.asin(x2);
      }
      function d3_sinh(x2) {
        return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
      }
      function d3_cosh(x2) {
        return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
      }
      function d3_tanh(x2) {
        return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
      }
      function d3_haversin(x2) {
        return (x2 = Math.sin(x2 / 2)) * x2;
      }
      var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
      d32.interpolateZoom = function(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        if (d2 < ε2) {
          S = Math.log(w1 / w0) / ρ;
          i = function(t) {
            return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S)];
          };
        } else {
          var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
          S = (r1 - r0) / ρ;
          i = function(t) {
            var s2 = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s2 + r0) - d3_sinh(r0));
            return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s2 + r0)];
          };
        }
        i.duration = S * 1e3;
        return i;
      };
      d32.behavior.zoom = function() {
        var view = {
          x: 0,
          y: 0,
          k: 1
        }, translate0, center0, center2, size = [960, 500], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event2 = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
        if (!d3_behavior_zoomWheel) {
          d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
            return -d32.event.deltaY * (d32.event.deltaMode ? 120 : 1);
          }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
            return d32.event.wheelDelta;
          }, "mousewheel") : (d3_behavior_zoomDelta = function() {
            return -d32.event.detail;
          }, "MozMousePixelScroll");
        }
        function zoom(g) {
          g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
        }
        zoom.event = function(g) {
          g.each(function() {
            var dispatch = event2.of(this, arguments), view1 = view;
            if (d3_transitionInheritId) {
              d32.select(this).transition().each("start.zoom", function() {
                view = this.__chart__ || {
                  x: 0,
                  y: 0,
                  k: 1
                };
                zoomstarted(dispatch);
              }).tween("zoom:zoom", function() {
                var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d32.interpolateZoom([(cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k], [(cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k]);
                return function(t) {
                  var l = i(t), k2 = dx / l[2];
                  this.__chart__ = view = {
                    x: cx - l[0] * k2,
                    y: cy - l[1] * k2,
                    k: k2
                  };
                  zoomed(dispatch);
                };
              }).each("interrupt.zoom", function() {
                zoomended(dispatch);
              }).each("end.zoom", function() {
                zoomended(dispatch);
              });
            } else {
              this.__chart__ = view;
              zoomstarted(dispatch);
              zoomed(dispatch);
              zoomended(dispatch);
            }
          });
        };
        zoom.translate = function(_) {
          if (!arguments.length)
            return [view.x, view.y];
          view = {
            x: +_[0],
            y: +_[1],
            k: view.k
          };
          rescale();
          return zoom;
        };
        zoom.scale = function(_) {
          if (!arguments.length)
            return view.k;
          view = {
            x: view.x,
            y: view.y,
            k: null
          };
          scaleTo(+_);
          rescale();
          return zoom;
        };
        zoom.scaleExtent = function(_) {
          if (!arguments.length)
            return scaleExtent;
          scaleExtent = _ == null ? d3_behavior_zoomInfinity : [+_[0], +_[1]];
          return zoom;
        };
        zoom.center = function(_) {
          if (!arguments.length)
            return center2;
          center2 = _ && [+_[0], +_[1]];
          return zoom;
        };
        zoom.size = function(_) {
          if (!arguments.length)
            return size;
          size = _ && [+_[0], +_[1]];
          return zoom;
        };
        zoom.duration = function(_) {
          if (!arguments.length)
            return duration;
          duration = +_;
          return zoom;
        };
        zoom.x = function(z) {
          if (!arguments.length)
            return x1;
          x1 = z;
          x0 = z.copy();
          view = {
            x: 0,
            y: 0,
            k: 1
          };
          return zoom;
        };
        zoom.y = function(z) {
          if (!arguments.length)
            return y1;
          y1 = z;
          y0 = z.copy();
          view = {
            x: 0,
            y: 0,
            k: 1
          };
          return zoom;
        };
        function location2(p) {
          return [(p[0] - view.x) / view.k, (p[1] - view.y) / view.k];
        }
        function point6(l) {
          return [l[0] * view.k + view.x, l[1] * view.k + view.y];
        }
        function scaleTo(s2) {
          view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s2));
        }
        function translateTo(p, l) {
          l = point6(l);
          view.x += p[0] - l[0];
          view.y += p[1] - l[1];
        }
        function zoomTo(that, p, l, k2) {
          that.__chart__ = {
            x: view.x,
            y: view.y,
            k: view.k
          };
          scaleTo(Math.pow(2, k2));
          translateTo(center0 = p, l);
          that = d32.select(that);
          if (duration > 0)
            that = that.transition().duration(duration);
          that.call(zoom.event);
        }
        function rescale() {
          if (x1)
            x1.domain(x0.range().map(function(x2) {
              return (x2 - view.x) / view.k;
            }).map(x0.invert));
          if (y1)
            y1.domain(y0.range().map(function(y2) {
              return (y2 - view.y) / view.k;
            }).map(y0.invert));
        }
        function zoomstarted(dispatch) {
          if (!zooming++)
            dispatch({
              type: "zoomstart"
            });
        }
        function zoomed(dispatch) {
          rescale();
          dispatch({
            type: "zoom",
            scale: view.k,
            translate: [view.x, view.y]
          });
        }
        function zoomended(dispatch) {
          if (!--zooming)
            dispatch({
              type: "zoomend"
            }), center0 = null;
        }
        function mousedowned() {
          var that = this, dispatch = event2.of(that, arguments), dragged = 0, subject = d32.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location2(d32.mouse(that)), dragRestore = d3_event_dragSuppress(that);
          d3_selection_interrupt.call(that);
          zoomstarted(dispatch);
          function moved() {
            dragged = 1;
            translateTo(d32.mouse(that), location0);
            zoomed(dispatch);
          }
          function ended() {
            subject.on(mousemove, null).on(mouseup, null);
            dragRestore(dragged);
            zoomended(dispatch);
          }
        }
        function touchstarted() {
          var that = this, dispatch = event2.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d32.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d32.select(that), dragRestore = d3_event_dragSuppress(that);
          started();
          zoomstarted(dispatch);
          subject.on(mousedown, null).on(touchstart, started);
          function relocate() {
            var touches = d32.touches(that);
            scale0 = view.k;
            touches.forEach(function(t) {
              if (t.identifier in locations0)
                locations0[t.identifier] = location2(t);
            });
            return touches;
          }
          function started() {
            var target = d32.event.target;
            d32.select(target).on(touchmove, moved).on(touchend, ended);
            targets.push(target);
            var changed = d32.event.changedTouches;
            for (var i = 0, n = changed.length; i < n; ++i) {
              locations0[changed[i].identifier] = null;
            }
            var touches = relocate(), now = Date.now();
            if (touches.length === 1) {
              if (now - touchtime < 500) {
                var p = touches[0];
                zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
                d3_eventPreventDefault();
              }
              touchtime = now;
            } else if (touches.length > 1) {
              var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
              distance0 = dx * dx + dy * dy;
            }
          }
          function moved() {
            var touches = d32.touches(that), p0, l0, p1, l1;
            d3_selection_interrupt.call(that);
            for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
              p1 = touches[i];
              if (l1 = locations0[p1.identifier]) {
                if (l0)
                  break;
                p0 = p1, l0 = l1;
              }
            }
            if (l1) {
              var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
              p0 = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
              l0 = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
              scaleTo(scale1 * scale0);
            }
            touchtime = null;
            translateTo(p0, l0);
            zoomed(dispatch);
          }
          function ended() {
            if (d32.event.touches.length) {
              var changed = d32.event.changedTouches;
              for (var i = 0, n = changed.length; i < n; ++i) {
                delete locations0[changed[i].identifier];
              }
              for (var identifier in locations0) {
                return void relocate();
              }
            }
            d32.selectAll(targets).on(zoomName, null);
            subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
            dragRestore();
            zoomended(dispatch);
          }
        }
        function mousewheeled() {
          var dispatch = event2.of(this, arguments);
          if (mousewheelTimer)
            clearTimeout(mousewheelTimer);
          else
            d3_selection_interrupt.call(this), translate0 = location2(center0 = center2 || d32.mouse(this)), zoomstarted(dispatch);
          mousewheelTimer = setTimeout(function() {
            mousewheelTimer = null;
            zoomended(dispatch);
          }, 50);
          d3_eventPreventDefault();
          scaleTo(Math.pow(2, d3_behavior_zoomDelta() * 2e-3) * view.k);
          translateTo(center0, translate0);
          zoomed(dispatch);
        }
        function dblclicked() {
          var p = d32.mouse(this), k2 = Math.log(view.k) / Math.LN2;
          zoomTo(this, p, location2(p), d32.event.shiftKey ? Math.ceil(k2) - 1 : Math.floor(k2) + 1);
        }
        return d32.rebind(zoom, event2, "on");
      };
      var d3_behavior_zoomInfinity = [0, Infinity], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
      d32.color = d3_color;
      function d3_color() {
      }
      d3_color.prototype.toString = function() {
        return this.rgb() + "";
      };
      d32.hsl = d3_hsl;
      function d3_hsl(h, s2, l) {
        return this instanceof d3_hsl ? void (this.h = +h, this.s = +s2, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s2, l);
      }
      var d3_hslPrototype = d3_hsl.prototype = new d3_color();
      d3_hslPrototype.brighter = function(k2) {
        k2 = Math.pow(0.7, arguments.length ? k2 : 1);
        return new d3_hsl(this.h, this.s, this.l / k2);
      };
      d3_hslPrototype.darker = function(k2) {
        k2 = Math.pow(0.7, arguments.length ? k2 : 1);
        return new d3_hsl(this.h, this.s, k2 * this.l);
      };
      d3_hslPrototype.rgb = function() {
        return d3_hsl_rgb(this.h, this.s, this.l);
      };
      function d3_hsl_rgb(h, s2, l) {
        var m1, m2;
        h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
        s2 = isNaN(s2) ? 0 : s2 < 0 ? 0 : s2 > 1 ? 1 : s2;
        l = l < 0 ? 0 : l > 1 ? 1 : l;
        m2 = l <= 0.5 ? l * (1 + s2) : l + s2 - l * s2;
        m1 = 2 * l - m2;
        function v(h2) {
          if (h2 > 360)
            h2 -= 360;
          else if (h2 < 0)
            h2 += 360;
          if (h2 < 60)
            return m1 + (m2 - m1) * h2 / 60;
          if (h2 < 180)
            return m2;
          if (h2 < 240)
            return m1 + (m2 - m1) * (240 - h2) / 60;
          return m1;
        }
        function vv(h2) {
          return Math.round(v(h2) * 255);
        }
        return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
      }
      d32.hcl = d3_hcl;
      function d3_hcl(h, c2, l) {
        return this instanceof d3_hcl ? void (this.h = +h, this.c = +c2, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d32.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c2, l);
      }
      var d3_hclPrototype = d3_hcl.prototype = new d3_color();
      d3_hclPrototype.brighter = function(k2) {
        return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k2 : 1)));
      };
      d3_hclPrototype.darker = function(k2) {
        return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k2 : 1)));
      };
      d3_hclPrototype.rgb = function() {
        return d3_hcl_lab(this.h, this.c, this.l).rgb();
      };
      function d3_hcl_lab(h, c2, l) {
        if (isNaN(h))
          h = 0;
        if (isNaN(c2))
          c2 = 0;
        return new d3_lab(l, Math.cos(h *= d3_radians) * c2, Math.sin(h) * c2);
      }
      d32.lab = d3_lab;
      function d3_lab(l, a2, b) {
        return this instanceof d3_lab ? void (this.l = +l, this.a = +a2, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a2, b);
      }
      var d3_lab_K = 18;
      var d3_lab_X = 0.95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
      var d3_labPrototype = d3_lab.prototype = new d3_color();
      d3_labPrototype.brighter = function(k2) {
        return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k2 : 1)), this.a, this.b);
      };
      d3_labPrototype.darker = function(k2) {
        return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k2 : 1)), this.a, this.b);
      };
      d3_labPrototype.rgb = function() {
        return d3_lab_rgb(this.l, this.a, this.b);
      };
      function d3_lab_rgb(l, a2, b) {
        var y2 = (l + 16) / 116, x2 = y2 + a2 / 500, z = y2 - b / 200;
        x2 = d3_lab_xyz(x2) * d3_lab_X;
        y2 = d3_lab_xyz(y2) * d3_lab_Y;
        z = d3_lab_xyz(z) * d3_lab_Z;
        return new d3_rgb(d3_xyz_rgb(3.2404542 * x2 - 1.5371385 * y2 - 0.4985314 * z), d3_xyz_rgb(-0.969266 * x2 + 1.8760108 * y2 + 0.041556 * z), d3_xyz_rgb(0.0556434 * x2 - 0.2040259 * y2 + 1.0572252 * z));
      }
      function d3_lab_hcl(l, a2, b) {
        return l > 0 ? new d3_hcl(Math.atan2(b, a2) * d3_degrees, Math.sqrt(a2 * a2 + b * b), l) : new d3_hcl(NaN, NaN, l);
      }
      function d3_lab_xyz(x2) {
        return x2 > 0.206893034 ? x2 * x2 * x2 : (x2 - 4 / 29) / 7.787037;
      }
      function d3_xyz_lab(x2) {
        return x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787037 * x2 + 4 / 29;
      }
      function d3_xyz_rgb(r) {
        return Math.round(255 * (r <= 304e-5 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055));
      }
      d32.rgb = d3_rgb;
      function d3_rgb(r, g, b) {
        return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
      }
      function d3_rgbNumber(value) {
        return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
      }
      function d3_rgbString(value) {
        return d3_rgbNumber(value) + "";
      }
      var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
      d3_rgbPrototype.brighter = function(k2) {
        k2 = Math.pow(0.7, arguments.length ? k2 : 1);
        var r = this.r, g = this.g, b = this.b, i = 30;
        if (!r && !g && !b)
          return new d3_rgb(i, i, i);
        if (r && r < i)
          r = i;
        if (g && g < i)
          g = i;
        if (b && b < i)
          b = i;
        return new d3_rgb(Math.min(255, r / k2), Math.min(255, g / k2), Math.min(255, b / k2));
      };
      d3_rgbPrototype.darker = function(k2) {
        k2 = Math.pow(0.7, arguments.length ? k2 : 1);
        return new d3_rgb(k2 * this.r, k2 * this.g, k2 * this.b);
      };
      d3_rgbPrototype.hsl = function() {
        return d3_rgb_hsl(this.r, this.g, this.b);
      };
      d3_rgbPrototype.toString = function() {
        return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
      };
      function d3_rgb_hex(v) {
        return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
      }
      function d3_rgb_parse(format2, rgb2, hsl2) {
        var r = 0, g = 0, b = 0, m1, m2, color2;
        m1 = /([a-z]+)\((.*)\)/.exec(format2 = format2.toLowerCase());
        if (m1) {
          m2 = m1[2].split(",");
          switch (m1[1]) {
            case "hsl": {
              return hsl2(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
            }
            case "rgb": {
              return rgb2(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
            }
          }
        }
        if (color2 = d3_rgb_names.get(format2)) {
          return rgb2(color2.r, color2.g, color2.b);
        }
        if (format2 != null && format2.charAt(0) === "#" && !isNaN(color2 = parseInt(format2.slice(1), 16))) {
          if (format2.length === 4) {
            r = (color2 & 3840) >> 4;
            r = r >> 4 | r;
            g = color2 & 240;
            g = g >> 4 | g;
            b = color2 & 15;
            b = b << 4 | b;
          } else if (format2.length === 7) {
            r = (color2 & 16711680) >> 16;
            g = (color2 & 65280) >> 8;
            b = color2 & 255;
          }
        }
        return rgb2(r, g, b);
      }
      function d3_rgb_hsl(r, g, b) {
        var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s2, l = (max + min) / 2;
        if (d) {
          s2 = l < 0.5 ? d / (max + min) : d / (2 - max - min);
          if (r == max)
            h = (g - b) / d + (g < b ? 6 : 0);
          else if (g == max)
            h = (b - r) / d + 2;
          else
            h = (r - g) / d + 4;
          h *= 60;
        } else {
          h = NaN;
          s2 = l > 0 && l < 1 ? 0 : h;
        }
        return new d3_hsl(h, s2, l);
      }
      function d3_rgb_lab(r, g, b) {
        r = d3_rgb_xyz(r);
        g = d3_rgb_xyz(g);
        b = d3_rgb_xyz(b);
        var x2 = d3_xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / d3_lab_X), y2 = d3_xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / d3_lab_Y), z = d3_xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / d3_lab_Z);
        return d3_lab(116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z));
      }
      function d3_rgb_xyz(r) {
        return (r /= 255) <= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
      }
      function d3_rgb_parseNumber(c2) {
        var f = parseFloat(c2);
        return c2.charAt(c2.length - 1) === "%" ? Math.round(f * 2.55) : f;
      }
      var d3_rgb_names = d32.map({
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
      });
      d3_rgb_names.forEach(function(key, value) {
        d3_rgb_names.set(key, d3_rgbNumber(value));
      });
      function d3_functor(v) {
        return typeof v === "function" ? v : function() {
          return v;
        };
      }
      d32.functor = d3_functor;
      d32.xhr = d3_xhrType(d3_identity);
      function d3_xhrType(response) {
        return function(url, mimeType, callback) {
          if (arguments.length === 2 && typeof mimeType === "function")
            callback = mimeType, mimeType = null;
          return d3_xhr(url, mimeType, response, callback);
        };
      }
      function d3_xhr(url, mimeType, response, callback) {
        var xhr = {}, dispatch = d32.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
        if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url))
          request = new XDomainRequest();
        "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
          request.readyState > 3 && respond();
        };
        function respond() {
          var status = request.status, result;
          if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
            try {
              result = response.call(xhr, request);
            } catch (e) {
              dispatch.error.call(xhr, e);
              return;
            }
            dispatch.load.call(xhr, result);
          } else {
            dispatch.error.call(xhr, request);
          }
        }
        request.onprogress = function(event2) {
          var o = d32.event;
          d32.event = event2;
          try {
            dispatch.progress.call(xhr, request);
          } finally {
            d32.event = o;
          }
        };
        xhr.header = function(name, value) {
          name = (name + "").toLowerCase();
          if (arguments.length < 2)
            return headers[name];
          if (value == null)
            delete headers[name];
          else
            headers[name] = value + "";
          return xhr;
        };
        xhr.mimeType = function(value) {
          if (!arguments.length)
            return mimeType;
          mimeType = value == null ? null : value + "";
          return xhr;
        };
        xhr.responseType = function(value) {
          if (!arguments.length)
            return responseType;
          responseType = value;
          return xhr;
        };
        xhr.response = function(value) {
          response = value;
          return xhr;
        };
        ["get", "post"].forEach(function(method) {
          xhr[method] = function() {
            return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
          };
        });
        xhr.send = function(method, data, callback2) {
          if (arguments.length === 2 && typeof data === "function")
            callback2 = data, data = null;
          request.open(method, url, true);
          if (mimeType != null && !("accept" in headers))
            headers["accept"] = mimeType + ",*/*";
          if (request.setRequestHeader)
            for (var name in headers)
              request.setRequestHeader(name, headers[name]);
          if (mimeType != null && request.overrideMimeType)
            request.overrideMimeType(mimeType);
          if (responseType != null)
            request.responseType = responseType;
          if (callback2 != null)
            xhr.on("error", callback2).on("load", function(request2) {
              callback2(null, request2);
            });
          dispatch.beforesend.call(xhr, request);
          request.send(data == null ? null : data);
          return xhr;
        };
        xhr.abort = function() {
          request.abort();
          return xhr;
        };
        d32.rebind(xhr, dispatch, "on");
        return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
      }
      function d3_xhr_fixCallback(callback) {
        return callback.length === 1 ? function(error, request) {
          callback(error == null ? request : null);
        } : callback;
      }
      function d3_xhrHasResponse(request) {
        var type = request.responseType;
        return type && type !== "text" ? request.response : request.responseText;
      }
      d32.dsv = function(delimiter, mimeType) {
        var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
        function dsv(url, row, callback) {
          if (arguments.length < 3)
            callback = row, row = null;
          var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
          xhr.row = function(_) {
            return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
          };
          return xhr;
        }
        function response(request) {
          return dsv.parse(request.responseText);
        }
        function typedResponse(f) {
          return function(request) {
            return dsv.parse(request.responseText, f);
          };
        }
        dsv.parse = function(text, f) {
          var o;
          return dsv.parseRows(text, function(row, i) {
            if (o)
              return o(row, i - 1);
            var a2 = new Function("d", "return {" + row.map(function(name, i2) {
              return JSON.stringify(name) + ": d[" + i2 + "]";
            }).join(",") + "}");
            o = f ? function(row2, i2) {
              return f(a2(row2), i2);
            } : a2;
          });
        };
        dsv.parseRows = function(text, f) {
          var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
          function token() {
            if (I >= N)
              return EOF;
            if (eol)
              return eol = false, EOL;
            var j = I;
            if (text.charCodeAt(j) === 34) {
              var i = j;
              while (i++ < N) {
                if (text.charCodeAt(i) === 34) {
                  if (text.charCodeAt(i + 1) !== 34)
                    break;
                  ++i;
                }
              }
              I = i + 2;
              var c2 = text.charCodeAt(i + 1);
              if (c2 === 13) {
                eol = true;
                if (text.charCodeAt(i + 2) === 10)
                  ++I;
              } else if (c2 === 10) {
                eol = true;
              }
              return text.slice(j + 1, i).replace(/""/g, '"');
            }
            while (I < N) {
              var c2 = text.charCodeAt(I++), k2 = 1;
              if (c2 === 10)
                eol = true;
              else if (c2 === 13) {
                eol = true;
                if (text.charCodeAt(I) === 10)
                  ++I, ++k2;
              } else if (c2 !== delimiterCode)
                continue;
              return text.slice(j, I - k2);
            }
            return text.slice(j);
          }
          while ((t = token()) !== EOF) {
            var a2 = [];
            while (t !== EOL && t !== EOF) {
              a2.push(t);
              t = token();
            }
            if (f && (a2 = f(a2, n++)) == null)
              continue;
            rows.push(a2);
          }
          return rows;
        };
        dsv.format = function(rows) {
          if (Array.isArray(rows[0]))
            return dsv.formatRows(rows);
          var fieldSet = new d3_Set(), fields = [];
          rows.forEach(function(row) {
            for (var field in row) {
              if (!fieldSet.has(field)) {
                fields.push(fieldSet.add(field));
              }
            }
          });
          return [fields.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
            return fields.map(function(field) {
              return formatValue(row[field]);
            }).join(delimiter);
          })).join("\n");
        };
        dsv.formatRows = function(rows) {
          return rows.map(formatRow).join("\n");
        };
        function formatRow(row) {
          return row.map(formatValue).join(delimiter);
        }
        function formatValue(text) {
          return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
        }
        return dsv;
      };
      d32.csv = d32.dsv(",", "text/csv");
      d32.tsv = d32.dsv("	", "text/tab-separated-values");
      var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
        setTimeout(callback, 17);
      };
      d32.timer = function() {
        d3_timer.apply(this, arguments);
      };
      function d3_timer(callback, delay, then) {
        var n = arguments.length;
        if (n < 2)
          delay = 0;
        if (n < 3)
          then = Date.now();
        var time = then + delay, timer = {
          c: callback,
          t: time,
          n: null
        };
        if (d3_timer_queueTail)
          d3_timer_queueTail.n = timer;
        else
          d3_timer_queueHead = timer;
        d3_timer_queueTail = timer;
        if (!d3_timer_interval) {
          d3_timer_timeout = clearTimeout(d3_timer_timeout);
          d3_timer_interval = 1;
          d3_timer_frame(d3_timer_step);
        }
        return timer;
      }
      function d3_timer_step() {
        var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
        if (delay > 24) {
          if (isFinite(delay)) {
            clearTimeout(d3_timer_timeout);
            d3_timer_timeout = setTimeout(d3_timer_step, delay);
          }
          d3_timer_interval = 0;
        } else {
          d3_timer_interval = 1;
          d3_timer_frame(d3_timer_step);
        }
      }
      d32.timer.flush = function() {
        d3_timer_mark();
        d3_timer_sweep();
      };
      function d3_timer_mark() {
        var now = Date.now(), timer = d3_timer_queueHead;
        while (timer) {
          if (now >= timer.t && timer.c(now - timer.t))
            timer.c = null;
          timer = timer.n;
        }
        return now;
      }
      function d3_timer_sweep() {
        var t03, t13 = d3_timer_queueHead, time = Infinity;
        while (t13) {
          if (t13.c) {
            if (t13.t < time)
              time = t13.t;
            t13 = (t03 = t13).n;
          } else {
            t13 = t03 ? t03.n = t13.n : d3_timer_queueHead = t13.n;
          }
        }
        d3_timer_queueTail = t03;
        return time;
      }
      function d3_format_precision(x2, p) {
        return p - (x2 ? Math.ceil(Math.log(x2) / Math.LN10) : 1);
      }
      d32.round = function(x2, n) {
        return n ? Math.round(x2 * (n = Math.pow(10, n))) / n : Math.round(x2);
      };
      var d3_formatPrefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"].map(d3_formatPrefix);
      d32.formatPrefix = function(value, precision) {
        var i = 0;
        if (value = +value) {
          if (value < 0)
            value *= -1;
          if (precision)
            value = d32.round(value, d3_format_precision(value, precision));
          i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
          i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
        }
        return d3_formatPrefixes[8 + i / 3];
      };
      function d3_formatPrefix(d, i) {
        var k2 = Math.pow(10, abs(8 - i) * 3);
        return {
          scale: i > 8 ? function(d2) {
            return d2 / k2;
          } : function(d2) {
            return d2 * k2;
          },
          symbol: d
        };
      }
      function d3_locale_numberFormat(locale) {
        var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
          var i = value.length, t = [], j = 0, g = locale_grouping[0], length2 = 0;
          while (i > 0 && g > 0) {
            if (length2 + g + 1 > width)
              g = Math.max(1, width - length2);
            t.push(value.substring(i -= g, i + g));
            if ((length2 += g + 1) > width)
              break;
            g = locale_grouping[j = (j + 1) % locale_grouping.length];
          }
          return t.reverse().join(locale_thousands);
        } : d3_identity;
        return function(specifier) {
          var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign2 = match[3] || "-", symbol2 = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix2 = "", suffix = "", integer = false, exponent = true;
          if (precision)
            precision = +precision.substring(1);
          if (zfill || fill === "0" && align === "=") {
            zfill = fill = "0";
            align = "=";
          }
          switch (type) {
            case "n":
              comma = true;
              type = "g";
              break;
            case "%":
              scale = 100;
              suffix = "%";
              type = "f";
              break;
            case "p":
              scale = 100;
              suffix = "%";
              type = "r";
              break;
            case "b":
            case "o":
            case "x":
            case "X":
              if (symbol2 === "#")
                prefix2 = "0" + type.toLowerCase();
            case "c":
              exponent = false;
            case "d":
              integer = true;
              precision = 0;
              break;
            case "s":
              scale = -1;
              type = "r";
              break;
          }
          if (symbol2 === "$")
            prefix2 = locale_currency[0], suffix = locale_currency[1];
          if (type == "r" && !precision)
            type = "g";
          if (precision != null) {
            if (type == "g")
              precision = Math.max(1, Math.min(21, precision));
            else if (type == "e" || type == "f")
              precision = Math.max(0, Math.min(20, precision));
          }
          type = d3_format_types.get(type) || d3_format_typeDefault;
          var zcomma = zfill && comma;
          return function(value) {
            var fullSuffix = suffix;
            if (integer && value % 1)
              return "";
            var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign2 === "-" ? "" : sign2;
            if (scale < 0) {
              var unit2 = d32.formatPrefix(value, precision);
              value = unit2.scale(value);
              fullSuffix = unit2.symbol + suffix;
            } else {
              value *= scale;
            }
            value = type(value, precision);
            var i = value.lastIndexOf("."), before, after;
            if (i < 0) {
              var j = exponent ? value.lastIndexOf("e") : -1;
              if (j < 0)
                before = value, after = "";
              else
                before = value.substring(0, j), after = value.substring(j);
            } else {
              before = value.substring(0, i);
              after = locale_decimal + value.substring(i + 1);
            }
            if (!zfill && comma)
              before = formatGroup(before, Infinity);
            var length2 = prefix2.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length2 < width ? new Array(length2 = width - length2 + 1).join(fill) : "";
            if (zcomma)
              before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
            negative += prefix2;
            value = before + after;
            return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length2 >>= 1) + negative + value + padding.substring(length2) : negative + (zcomma ? value : padding + value)) + fullSuffix;
          };
        };
      }
      var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
      var d3_format_types = d32.map({
        b: function(x2) {
          return x2.toString(2);
        },
        c: function(x2) {
          return String.fromCharCode(x2);
        },
        o: function(x2) {
          return x2.toString(8);
        },
        x: function(x2) {
          return x2.toString(16);
        },
        X: function(x2) {
          return x2.toString(16).toUpperCase();
        },
        g: function(x2, p) {
          return x2.toPrecision(p);
        },
        e: function(x2, p) {
          return x2.toExponential(p);
        },
        f: function(x2, p) {
          return x2.toFixed(p);
        },
        r: function(x2, p) {
          return (x2 = d32.round(x2, d3_format_precision(x2, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x2 * (1 + 1e-15), p))));
        }
      });
      function d3_format_typeDefault(x2) {
        return x2 + "";
      }
      var d3_time = d32.time = {}, d3_date = Date;
      function d3_date_utc() {
        this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
      }
      d3_date_utc.prototype = {
        getDate: function() {
          return this._.getUTCDate();
        },
        getDay: function() {
          return this._.getUTCDay();
        },
        getFullYear: function() {
          return this._.getUTCFullYear();
        },
        getHours: function() {
          return this._.getUTCHours();
        },
        getMilliseconds: function() {
          return this._.getUTCMilliseconds();
        },
        getMinutes: function() {
          return this._.getUTCMinutes();
        },
        getMonth: function() {
          return this._.getUTCMonth();
        },
        getSeconds: function() {
          return this._.getUTCSeconds();
        },
        getTime: function() {
          return this._.getTime();
        },
        getTimezoneOffset: function() {
          return 0;
        },
        valueOf: function() {
          return this._.valueOf();
        },
        setDate: function() {
          d3_time_prototype.setUTCDate.apply(this._, arguments);
        },
        setDay: function() {
          d3_time_prototype.setUTCDay.apply(this._, arguments);
        },
        setFullYear: function() {
          d3_time_prototype.setUTCFullYear.apply(this._, arguments);
        },
        setHours: function() {
          d3_time_prototype.setUTCHours.apply(this._, arguments);
        },
        setMilliseconds: function() {
          d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
        },
        setMinutes: function() {
          d3_time_prototype.setUTCMinutes.apply(this._, arguments);
        },
        setMonth: function() {
          d3_time_prototype.setUTCMonth.apply(this._, arguments);
        },
        setSeconds: function() {
          d3_time_prototype.setUTCSeconds.apply(this._, arguments);
        },
        setTime: function() {
          d3_time_prototype.setTime.apply(this._, arguments);
        }
      };
      var d3_time_prototype = Date.prototype;
      function d3_time_interval(local, step, number2) {
        function round(date) {
          var d0 = local(date), d1 = offset(d0, 1);
          return date - d0 < d1 - date ? d0 : d1;
        }
        function ceil(date) {
          step(date = local(new d3_date(date - 1)), 1);
          return date;
        }
        function offset(date, k2) {
          step(date = new d3_date(+date), k2);
          return date;
        }
        function range(t03, t13, dt) {
          var time = ceil(t03), times = [];
          if (dt > 1) {
            while (time < t13) {
              if (!(number2(time) % dt))
                times.push(/* @__PURE__ */ new Date(+time));
              step(time, 1);
            }
          } else {
            while (time < t13)
              times.push(/* @__PURE__ */ new Date(+time)), step(time, 1);
          }
          return times;
        }
        function range_utc(t03, t13, dt) {
          try {
            d3_date = d3_date_utc;
            var utc2 = new d3_date_utc();
            utc2._ = t03;
            return range(utc2, t13, dt);
          } finally {
            d3_date = Date;
          }
        }
        local.floor = local;
        local.round = round;
        local.ceil = ceil;
        local.offset = offset;
        local.range = range;
        var utc = local.utc = d3_time_interval_utc(local);
        utc.floor = utc;
        utc.round = d3_time_interval_utc(round);
        utc.ceil = d3_time_interval_utc(ceil);
        utc.offset = d3_time_interval_utc(offset);
        utc.range = range_utc;
        return local;
      }
      function d3_time_interval_utc(method) {
        return function(date, k2) {
          try {
            d3_date = d3_date_utc;
            var utc = new d3_date_utc();
            utc._ = date;
            return method(utc, k2)._;
          } finally {
            d3_date = Date;
          }
        };
      }
      d3_time.year = d3_time_interval(function(date) {
        date = d3_time.day(date);
        date.setMonth(0, 1);
        return date;
      }, function(date, offset) {
        date.setFullYear(date.getFullYear() + offset);
      }, function(date) {
        return date.getFullYear();
      });
      d3_time.years = d3_time.year.range;
      d3_time.years.utc = d3_time.year.utc.range;
      d3_time.day = d3_time_interval(function(date) {
        var day2 = new d3_date(2e3, 0);
        day2.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        return day2;
      }, function(date, offset) {
        date.setDate(date.getDate() + offset);
      }, function(date) {
        return date.getDate() - 1;
      });
      d3_time.days = d3_time.day.range;
      d3_time.days.utc = d3_time.day.utc.range;
      d3_time.dayOfYear = function(date) {
        var year = d3_time.year(date);
        return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
      };
      ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"].forEach(function(day2, i) {
        i = 7 - i;
        var interval = d3_time[day2] = d3_time_interval(function(date) {
          (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
          return date;
        }, function(date, offset) {
          date.setDate(date.getDate() + Math.floor(offset) * 7);
        }, function(date) {
          var day3 = d3_time.year(date).getDay();
          return Math.floor((d3_time.dayOfYear(date) + (day3 + i) % 7) / 7) - (day3 !== i);
        });
        d3_time[day2 + "s"] = interval.range;
        d3_time[day2 + "s"].utc = interval.utc.range;
        d3_time[day2 + "OfYear"] = function(date) {
          var day3 = d3_time.year(date).getDay();
          return Math.floor((d3_time.dayOfYear(date) + (day3 + i) % 7) / 7);
        };
      });
      d3_time.week = d3_time.sunday;
      d3_time.weeks = d3_time.sunday.range;
      d3_time.weeks.utc = d3_time.sunday.utc.range;
      d3_time.weekOfYear = d3_time.sundayOfYear;
      function d3_locale_timeFormat(locale) {
        var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
        function d3_time_format2(template) {
          var n = template.length;
          function format2(date) {
            var string = [], i = -1, j = 0, c2, p, f;
            while (++i < n) {
              if (template.charCodeAt(i) === 37) {
                string.push(template.slice(j, i));
                if ((p = d3_time_formatPads[c2 = template.charAt(++i)]) != null)
                  c2 = template.charAt(++i);
                if (f = d3_time_formats[c2])
                  c2 = f(date, p == null ? c2 === "e" ? " " : "0" : p);
                string.push(c2);
                j = i + 1;
              }
            }
            string.push(template.slice(j, i));
            return string.join("");
          }
          format2.parse = function(string) {
            var d = {
              y: 1900,
              m: 0,
              d: 1,
              H: 0,
              M: 0,
              S: 0,
              L: 0,
              Z: null
            }, i = d3_time_parse(d, template, string, 0);
            if (i != string.length)
              return null;
            if ("p" in d)
              d.H = d.H % 12 + d.p * 12;
            var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
            if ("j" in d)
              date.setFullYear(d.y, 0, d.j);
            else if ("W" in d || "U" in d) {
              if (!("w" in d))
                d.w = "W" in d ? 1 : 0;
              date.setFullYear(d.y, 0, 1);
              date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
            } else
              date.setFullYear(d.y, d.m, d.d);
            date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
            return localZ ? date._ : date;
          };
          format2.toString = function() {
            return template;
          };
          return format2;
        }
        function d3_time_parse(date, template, string, j) {
          var c2, p, t, i = 0, n = template.length, m = string.length;
          while (i < n) {
            if (j >= m)
              return -1;
            c2 = template.charCodeAt(i++);
            if (c2 === 37) {
              t = template.charAt(i++);
              p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
              if (!p || (j = p(date, string, j)) < 0)
                return -1;
            } else if (c2 != string.charCodeAt(j++)) {
              return -1;
            }
          }
          return j;
        }
        d3_time_format2.utc = function(template) {
          var local = d3_time_format2(template);
          function format2(date) {
            try {
              d3_date = d3_date_utc;
              var utc = new d3_date();
              utc._ = date;
              return local(utc);
            } finally {
              d3_date = Date;
            }
          }
          format2.parse = function(string) {
            try {
              d3_date = d3_date_utc;
              var date = local.parse(string);
              return date && date._;
            } finally {
              d3_date = Date;
            }
          };
          format2.toString = local.toString;
          return format2;
        };
        d3_time_format2.multi = d3_time_format2.utc.multi = d3_time_formatMulti;
        var d3_time_periodLookup = d32.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
        locale_periods.forEach(function(p, i) {
          d3_time_periodLookup.set(p.toLowerCase(), i);
        });
        var d3_time_formats = {
          a: function(d) {
            return locale_shortDays[d.getDay()];
          },
          A: function(d) {
            return locale_days[d.getDay()];
          },
          b: function(d) {
            return locale_shortMonths[d.getMonth()];
          },
          B: function(d) {
            return locale_months[d.getMonth()];
          },
          c: d3_time_format2(locale_dateTime),
          d: function(d, p) {
            return d3_time_formatPad(d.getDate(), p, 2);
          },
          e: function(d, p) {
            return d3_time_formatPad(d.getDate(), p, 2);
          },
          H: function(d, p) {
            return d3_time_formatPad(d.getHours(), p, 2);
          },
          I: function(d, p) {
            return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
          },
          j: function(d, p) {
            return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
          },
          L: function(d, p) {
            return d3_time_formatPad(d.getMilliseconds(), p, 3);
          },
          m: function(d, p) {
            return d3_time_formatPad(d.getMonth() + 1, p, 2);
          },
          M: function(d, p) {
            return d3_time_formatPad(d.getMinutes(), p, 2);
          },
          p: function(d) {
            return locale_periods[+(d.getHours() >= 12)];
          },
          S: function(d, p) {
            return d3_time_formatPad(d.getSeconds(), p, 2);
          },
          U: function(d, p) {
            return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
          },
          w: function(d) {
            return d.getDay();
          },
          W: function(d, p) {
            return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
          },
          x: d3_time_format2(locale_date),
          X: d3_time_format2(locale_time),
          y: function(d, p) {
            return d3_time_formatPad(d.getFullYear() % 100, p, 2);
          },
          Y: function(d, p) {
            return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
          },
          Z: d3_time_zone,
          "%": function() {
            return "%";
          }
        };
        var d3_time_parsers = {
          a: d3_time_parseWeekdayAbbrev,
          A: d3_time_parseWeekday,
          b: d3_time_parseMonthAbbrev,
          B: d3_time_parseMonth,
          c: d3_time_parseLocaleFull,
          d: d3_time_parseDay,
          e: d3_time_parseDay,
          H: d3_time_parseHour24,
          I: d3_time_parseHour24,
          j: d3_time_parseDayOfYear,
          L: d3_time_parseMilliseconds,
          m: d3_time_parseMonthNumber,
          M: d3_time_parseMinutes,
          p: d3_time_parseAmPm,
          S: d3_time_parseSeconds,
          U: d3_time_parseWeekNumberSunday,
          w: d3_time_parseWeekdayNumber,
          W: d3_time_parseWeekNumberMonday,
          x: d3_time_parseLocaleDate,
          X: d3_time_parseLocaleTime,
          y: d3_time_parseYear,
          Y: d3_time_parseFullYear,
          Z: d3_time_parseZone,
          "%": d3_time_parseLiteralPercent
        };
        function d3_time_parseWeekdayAbbrev(date, string, i) {
          d3_time_dayAbbrevRe.lastIndex = 0;
          var n = d3_time_dayAbbrevRe.exec(string.slice(i));
          return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseWeekday(date, string, i) {
          d3_time_dayRe.lastIndex = 0;
          var n = d3_time_dayRe.exec(string.slice(i));
          return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseMonthAbbrev(date, string, i) {
          d3_time_monthAbbrevRe.lastIndex = 0;
          var n = d3_time_monthAbbrevRe.exec(string.slice(i));
          return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseMonth(date, string, i) {
          d3_time_monthRe.lastIndex = 0;
          var n = d3_time_monthRe.exec(string.slice(i));
          return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseLocaleFull(date, string, i) {
          return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
        }
        function d3_time_parseLocaleDate(date, string, i) {
          return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
        }
        function d3_time_parseLocaleTime(date, string, i) {
          return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
        }
        function d3_time_parseAmPm(date, string, i) {
          var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
          return n == null ? -1 : (date.p = n, i);
        }
        return d3_time_format2;
      }
      var d3_time_formatPads = {
        "-": "",
        _: " ",
        "0": "0"
      }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
      function d3_time_formatPad(value, fill, width) {
        var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length2 = string.length;
        return sign2 + (length2 < width ? new Array(width - length2 + 1).join(fill) + string : string);
      }
      function d3_time_formatRe(names) {
        return new RegExp("^(?:" + names.map(d32.requote).join("|") + ")", "i");
      }
      function d3_time_formatLookup(names) {
        var map3 = new d3_Map(), i = -1, n = names.length;
        while (++i < n)
          map3.set(names[i].toLowerCase(), i);
        return map3;
      }
      function d3_time_parseWeekdayNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 1));
        return n ? (date.w = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseWeekNumberSunday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i));
        return n ? (date.U = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseWeekNumberMonday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i));
        return n ? (date.W = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseFullYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 4));
        return n ? (date.y = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
      }
      function d3_time_parseZone(date, string, i) {
        return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, i + 5) : -1;
      }
      function d3_time_expandYear(d) {
        return d + (d > 68 ? 1900 : 2e3);
      }
      function d3_time_parseMonthNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
      }
      function d3_time_parseDay(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.d = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseDayOfYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 3));
        return n ? (date.j = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseHour24(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.H = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseMinutes(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.M = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseSeconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.S = +n[0], i + n[0].length) : -1;
      }
      function d3_time_parseMilliseconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 3));
        return n ? (date.L = +n[0], i + n[0].length) : -1;
      }
      function d3_time_zone(d) {
        var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
        return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
      }
      function d3_time_parseLiteralPercent(date, string, i) {
        d3_time_percentRe.lastIndex = 0;
        var n = d3_time_percentRe.exec(string.slice(i, i + 1));
        return n ? i + n[0].length : -1;
      }
      function d3_time_formatMulti(formats) {
        var n = formats.length, i = -1;
        while (++i < n)
          formats[i][0] = this(formats[i][0]);
        return function(date) {
          var i2 = 0, f = formats[i2];
          while (!f[1](date))
            f = formats[++i2];
          return f[0](date);
        };
      }
      d32.locale = function(locale) {
        return {
          numberFormat: d3_locale_numberFormat(locale),
          timeFormat: d3_locale_timeFormat(locale)
        };
      };
      var d3_locale_enUS = d32.locale({
        decimal: ".",
        thousands: ",",
        grouping: [3],
        currency: ["$", ""],
        dateTime: "%a %b %e %X %Y",
        date: "%m/%d/%Y",
        time: "%H:%M:%S",
        periods: ["AM", "PM"],
        days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
      });
      d32.format = d3_locale_enUS.numberFormat;
      d32.geo = {};
      function d3_adder() {
      }
      d3_adder.prototype = {
        s: 0,
        t: 0,
        add: function(y2) {
          d3_adderSum(y2, this.t, d3_adderTemp);
          d3_adderSum(d3_adderTemp.s, this.s, this);
          if (this.s)
            this.t += d3_adderTemp.t;
          else
            this.s = d3_adderTemp.t;
        },
        reset: function() {
          this.s = this.t = 0;
        },
        valueOf: function() {
          return this.s;
        }
      };
      var d3_adderTemp = new d3_adder();
      function d3_adderSum(a2, b, o) {
        var x2 = o.s = a2 + b, bv = x2 - a2, av = x2 - bv;
        o.t = a2 - av + (b - bv);
      }
      d32.geo.stream = function(object, listener) {
        if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
          d3_geo_streamObjectType[object.type](object, listener);
        } else {
          d3_geo_streamGeometry(object, listener);
        }
      };
      function d3_geo_streamGeometry(geometry, listener) {
        if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
          d3_geo_streamGeometryType[geometry.type](geometry, listener);
        }
      }
      var d3_geo_streamObjectType = {
        Feature: function(feature, listener) {
          d3_geo_streamGeometry(feature.geometry, listener);
        },
        FeatureCollection: function(object, listener) {
          var features = object.features, i = -1, n = features.length;
          while (++i < n)
            d3_geo_streamGeometry(features[i].geometry, listener);
        }
      };
      var d3_geo_streamGeometryType = {
        Sphere: function(object, listener) {
          listener.sphere();
        },
        Point: function(object, listener) {
          object = object.coordinates;
          listener.point(object[0], object[1], object[2]);
        },
        MultiPoint: function(object, listener) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n)
            object = coordinates[i], listener.point(object[0], object[1], object[2]);
        },
        LineString: function(object, listener) {
          d3_geo_streamLine(object.coordinates, listener, 0);
        },
        MultiLineString: function(object, listener) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n)
            d3_geo_streamLine(coordinates[i], listener, 0);
        },
        Polygon: function(object, listener) {
          d3_geo_streamPolygon(object.coordinates, listener);
        },
        MultiPolygon: function(object, listener) {
          var coordinates = object.coordinates, i = -1, n = coordinates.length;
          while (++i < n)
            d3_geo_streamPolygon(coordinates[i], listener);
        },
        GeometryCollection: function(object, listener) {
          var geometries = object.geometries, i = -1, n = geometries.length;
          while (++i < n)
            d3_geo_streamGeometry(geometries[i], listener);
        }
      };
      function d3_geo_streamLine(coordinates, listener, closed) {
        var i = -1, n = coordinates.length - closed, coordinate;
        listener.lineStart();
        while (++i < n)
          coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
        listener.lineEnd();
      }
      function d3_geo_streamPolygon(coordinates, listener) {
        var i = -1, n = coordinates.length;
        listener.polygonStart();
        while (++i < n)
          d3_geo_streamLine(coordinates[i], listener, 1);
        listener.polygonEnd();
      }
      d32.geo.area = function(object) {
        d3_geo_areaSum = 0;
        d32.geo.stream(object, d3_geo_area);
        return d3_geo_areaSum;
      };
      var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
      var d3_geo_area = {
        sphere: function() {
          d3_geo_areaSum += 4 * π;
        },
        point: d3_noop,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: function() {
          d3_geo_areaRingSum.reset();
          d3_geo_area.lineStart = d3_geo_areaRingStart;
        },
        polygonEnd: function() {
          var area = 2 * d3_geo_areaRingSum;
          d3_geo_areaSum += area < 0 ? 4 * π + area : area;
          d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
        }
      };
      function d3_geo_areaRingStart() {
        var λ00, φ00, λ0, cosφ0, sinφ0;
        d3_geo_area.point = function(λ, φ) {
          d3_geo_area.point = nextPoint;
          λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ);
        };
        function nextPoint(λ, φ) {
          λ *= d3_radians;
          φ = φ * d3_radians / 2 + π / 4;
          var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k2 = sinφ0 * sinφ, u = cosφ0 * cosφ + k2 * Math.cos(adλ), v = k2 * sdλ * Math.sin(adλ);
          d3_geo_areaRingSum.add(Math.atan2(v, u));
          λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
        }
        d3_geo_area.lineEnd = function() {
          nextPoint(λ00, φ00);
        };
      }
      function d3_geo_cartesian(spherical) {
        var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
        return [cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ)];
      }
      function d3_geo_cartesianDot(a2, b) {
        return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
      }
      function d3_geo_cartesianCross(a2, b) {
        return [a2[1] * b[2] - a2[2] * b[1], a2[2] * b[0] - a2[0] * b[2], a2[0] * b[1] - a2[1] * b[0]];
      }
      function d3_geo_cartesianAdd(a2, b) {
        a2[0] += b[0];
        a2[1] += b[1];
        a2[2] += b[2];
      }
      function d3_geo_cartesianScale(vector, k2) {
        return [vector[0] * k2, vector[1] * k2, vector[2] * k2];
      }
      function d3_geo_cartesianNormalize(d) {
        var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
        d[0] /= l;
        d[1] /= l;
        d[2] /= l;
      }
      function d3_geo_spherical(cartesian) {
        return [Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2])];
      }
      function d3_geo_sphericalEqual(a2, b) {
        return abs(a2[0] - b[0]) < ε && abs(a2[1] - b[1]) < ε;
      }
      d32.geo.bounds = function() {
        var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
        var bound = {
          point: point6,
          lineStart,
          lineEnd,
          polygonStart: function() {
            bound.point = ringPoint;
            bound.lineStart = ringStart;
            bound.lineEnd = ringEnd;
            dλSum = 0;
            d3_geo_area.polygonStart();
          },
          polygonEnd: function() {
            d3_geo_area.polygonEnd();
            bound.point = point6;
            bound.lineStart = lineStart;
            bound.lineEnd = lineEnd;
            if (d3_geo_areaRingSum < 0)
              λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);
            else if (dλSum > ε)
              φ1 = 90;
            else if (dλSum < -ε)
              φ0 = -90;
            range[0] = λ0, range[1] = λ1;
          }
        };
        function point6(λ, φ) {
          ranges.push(range = [λ0 = λ, λ1 = λ]);
          if (φ < φ0)
            φ0 = φ;
          if (φ > φ1)
            φ1 = φ;
        }
        function linePoint(λ, φ) {
          var p = d3_geo_cartesian([λ * d3_radians, φ * d3_radians]);
          if (p0) {
            var normal = d3_geo_cartesianCross(p0, p), equatorial = [normal[1], -normal[0], 0], inflection = d3_geo_cartesianCross(equatorial, normal);
            d3_geo_cartesianNormalize(inflection);
            inflection = d3_geo_spherical(inflection);
            var dλ = λ - λ_, s2 = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s2, antimeridian = abs(dλ) > 180;
            if (antimeridian ^ (s2 * λ_ < λi && λi < s2 * λ)) {
              var φi = inflection[1] * d3_degrees;
              if (φi > φ1)
                φ1 = φi;
            } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s2 * λ_ < λi && λi < s2 * λ)) {
              var φi = -inflection[1] * d3_degrees;
              if (φi < φ0)
                φ0 = φi;
            } else {
              if (φ < φ0)
                φ0 = φ;
              if (φ > φ1)
                φ1 = φ;
            }
            if (antimeridian) {
              if (λ < λ_) {
                if (angle(λ0, λ) > angle(λ0, λ1))
                  λ1 = λ;
              } else {
                if (angle(λ, λ1) > angle(λ0, λ1))
                  λ0 = λ;
              }
            } else {
              if (λ1 >= λ0) {
                if (λ < λ0)
                  λ0 = λ;
                if (λ > λ1)
                  λ1 = λ;
              } else {
                if (λ > λ_) {
                  if (angle(λ0, λ) > angle(λ0, λ1))
                    λ1 = λ;
                } else {
                  if (angle(λ, λ1) > angle(λ0, λ1))
                    λ0 = λ;
                }
              }
            }
          } else {
            point6(λ, φ);
          }
          p0 = p, λ_ = λ;
        }
        function lineStart() {
          bound.point = linePoint;
        }
        function lineEnd() {
          range[0] = λ0, range[1] = λ1;
          bound.point = point6;
          p0 = null;
        }
        function ringPoint(λ, φ) {
          if (p0) {
            var dλ = λ - λ_;
            dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
          } else
            λ__ = λ, φ__ = φ;
          d3_geo_area.point(λ, φ);
          linePoint(λ, φ);
        }
        function ringStart() {
          d3_geo_area.lineStart();
        }
        function ringEnd() {
          ringPoint(λ__, φ__);
          d3_geo_area.lineEnd();
          if (abs(dλSum) > ε)
            λ0 = -(λ1 = 180);
          range[0] = λ0, range[1] = λ1;
          p0 = null;
        }
        function angle(λ02, λ12) {
          return (λ12 -= λ02) < 0 ? λ12 + 360 : λ12;
        }
        function compareRanges(a2, b) {
          return a2[0] - b[0];
        }
        function withinRange(x2, range2) {
          return range2[0] <= range2[1] ? range2[0] <= x2 && x2 <= range2[1] : x2 < range2[0] || range2[1] < x2;
        }
        return function(feature) {
          φ1 = λ1 = -(λ0 = φ0 = Infinity);
          ranges = [];
          d32.geo.stream(feature, bound);
          var n = ranges.length;
          if (n) {
            ranges.sort(compareRanges);
            for (var i = 1, a2 = ranges[0], b, merged = [a2]; i < n; ++i) {
              b = ranges[i];
              if (withinRange(b[0], a2) || withinRange(b[1], a2)) {
                if (angle(a2[0], b[1]) > angle(a2[0], a2[1]))
                  a2[1] = b[1];
                if (angle(b[0], a2[1]) > angle(a2[0], a2[1]))
                  a2[0] = b[0];
              } else {
                merged.push(a2 = b);
              }
            }
            var best = -Infinity, dλ;
            for (var n = merged.length - 1, i = 0, a2 = merged[n], b; i <= n; a2 = b, ++i) {
              b = merged[i];
              if ((dλ = angle(a2[1], b[0])) > best)
                best = dλ, λ0 = b[0], λ1 = a2[1];
            }
          }
          ranges = range = null;
          return λ0 === Infinity || φ0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[λ0, φ0], [λ1, φ1]];
        };
      }();
      d32.geo.centroid = function(object) {
        d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
        d32.geo.stream(object, d3_geo_centroid);
        var x2 = d3_geo_centroidX2, y2 = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x2 * x2 + y2 * y2 + z * z;
        if (m < ε2) {
          x2 = d3_geo_centroidX1, y2 = d3_geo_centroidY1, z = d3_geo_centroidZ1;
          if (d3_geo_centroidW1 < ε)
            x2 = d3_geo_centroidX0, y2 = d3_geo_centroidY0, z = d3_geo_centroidZ0;
          m = x2 * x2 + y2 * y2 + z * z;
          if (m < ε2)
            return [NaN, NaN];
        }
        return [Math.atan2(y2, x2) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees];
      };
      var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
      var d3_geo_centroid = {
        sphere: d3_noop,
        point: d3_geo_centroidPoint,
        lineStart: d3_geo_centroidLineStart,
        lineEnd: d3_geo_centroidLineEnd,
        polygonStart: function() {
          d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
        },
        polygonEnd: function() {
          d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
        }
      };
      function d3_geo_centroidPoint(λ, φ) {
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians);
        d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
      }
      function d3_geo_centroidPointXYZ(x2, y2, z) {
        ++d3_geo_centroidW0;
        d3_geo_centroidX0 += (x2 - d3_geo_centroidX0) / d3_geo_centroidW0;
        d3_geo_centroidY0 += (y2 - d3_geo_centroidY0) / d3_geo_centroidW0;
        d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
      }
      function d3_geo_centroidLineStart() {
        var x0, y0, z0;
        d3_geo_centroid.point = function(λ, φ) {
          λ *= d3_radians;
          var cosφ = Math.cos(φ *= d3_radians);
          x0 = cosφ * Math.cos(λ);
          y0 = cosφ * Math.sin(λ);
          z0 = Math.sin(φ);
          d3_geo_centroid.point = nextPoint;
          d3_geo_centroidPointXYZ(x0, y0, z0);
        };
        function nextPoint(λ, φ) {
          λ *= d3_radians;
          var cosφ = Math.cos(φ *= d3_radians), x2 = cosφ * Math.cos(λ), y2 = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y2) * w + (w = z0 * x2 - x0 * z) * w + (w = x0 * y2 - y0 * x2) * w), x0 * x2 + y0 * y2 + z0 * z);
          d3_geo_centroidW1 += w;
          d3_geo_centroidX1 += w * (x0 + (x0 = x2));
          d3_geo_centroidY1 += w * (y0 + (y0 = y2));
          d3_geo_centroidZ1 += w * (z0 + (z0 = z));
          d3_geo_centroidPointXYZ(x0, y0, z0);
        }
      }
      function d3_geo_centroidLineEnd() {
        d3_geo_centroid.point = d3_geo_centroidPoint;
      }
      function d3_geo_centroidRingStart() {
        var λ00, φ00, x0, y0, z0;
        d3_geo_centroid.point = function(λ, φ) {
          λ00 = λ, φ00 = φ;
          d3_geo_centroid.point = nextPoint;
          λ *= d3_radians;
          var cosφ = Math.cos(φ *= d3_radians);
          x0 = cosφ * Math.cos(λ);
          y0 = cosφ * Math.sin(λ);
          z0 = Math.sin(φ);
          d3_geo_centroidPointXYZ(x0, y0, z0);
        };
        d3_geo_centroid.lineEnd = function() {
          nextPoint(λ00, φ00);
          d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
          d3_geo_centroid.point = d3_geo_centroidPoint;
        };
        function nextPoint(λ, φ) {
          λ *= d3_radians;
          var cosφ = Math.cos(φ *= d3_radians), x2 = cosφ * Math.cos(λ), y2 = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y2, cy = z0 * x2 - x0 * z, cz = x0 * y2 - y0 * x2, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x2 + y0 * y2 + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
          d3_geo_centroidX2 += v * cx;
          d3_geo_centroidY2 += v * cy;
          d3_geo_centroidZ2 += v * cz;
          d3_geo_centroidW1 += w;
          d3_geo_centroidX1 += w * (x0 + (x0 = x2));
          d3_geo_centroidY1 += w * (y0 + (y0 = y2));
          d3_geo_centroidZ1 += w * (z0 + (z0 = z));
          d3_geo_centroidPointXYZ(x0, y0, z0);
        }
      }
      function d3_geo_compose(a2, b) {
        function compose(x2, y2) {
          return x2 = a2(x2, y2), b(x2[0], x2[1]);
        }
        if (a2.invert && b.invert)
          compose.invert = function(x2, y2) {
            return x2 = b.invert(x2, y2), x2 && a2.invert(x2[0], x2[1]);
          };
        return compose;
      }
      function d3_true() {
        return true;
      }
      function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
        var subject = [], clip = [];
        segments.forEach(function(segment) {
          if ((n2 = segment.length - 1) <= 0)
            return;
          var n2, p0 = segment[0], p1 = segment[n2];
          if (d3_geo_sphericalEqual(p0, p1)) {
            listener.lineStart();
            for (var i2 = 0; i2 < n2; ++i2)
              listener.point((p0 = segment[i2])[0], p0[1]);
            listener.lineEnd();
            return;
          }
          var a2 = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a2, false);
          a2.o = b;
          subject.push(a2);
          clip.push(b);
          a2 = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
          b = new d3_geo_clipPolygonIntersection(p1, null, a2, true);
          a2.o = b;
          subject.push(a2);
          clip.push(b);
        });
        clip.sort(compare);
        d3_geo_clipPolygonLinkCircular(subject);
        d3_geo_clipPolygonLinkCircular(clip);
        if (!subject.length)
          return;
        for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
          clip[i].e = entry = !entry;
        }
        var start = subject[0], points, point6;
        while (1) {
          var current = start, isSubject = true;
          while (current.v)
            if ((current = current.n) === start)
              return;
          points = current.z;
          listener.lineStart();
          do {
            current.v = current.o.v = true;
            if (current.e) {
              if (isSubject) {
                for (var i = 0, n = points.length; i < n; ++i)
                  listener.point((point6 = points[i])[0], point6[1]);
              } else {
                interpolate(current.x, current.n.x, 1, listener);
              }
              current = current.n;
            } else {
              if (isSubject) {
                points = current.p.z;
                for (var i = points.length - 1; i >= 0; --i)
                  listener.point((point6 = points[i])[0], point6[1]);
              } else {
                interpolate(current.x, current.p.x, -1, listener);
              }
              current = current.p;
            }
            current = current.o;
            points = current.z;
            isSubject = !isSubject;
          } while (!current.v);
          listener.lineEnd();
        }
      }
      function d3_geo_clipPolygonLinkCircular(array2) {
        if (!(n = array2.length))
          return;
        var n, i = 0, a2 = array2[0], b;
        while (++i < n) {
          a2.n = b = array2[i];
          b.p = a2;
          a2 = b;
        }
        a2.n = b = array2[0];
        b.p = a2;
      }
      function d3_geo_clipPolygonIntersection(point6, points, other, entry) {
        this.x = point6;
        this.z = points;
        this.o = other;
        this.e = entry;
        this.v = false;
        this.n = this.p = null;
      }
      function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
        return function(rotate, listener) {
          var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
          var clip = {
            point: point6,
            lineStart,
            lineEnd,
            polygonStart: function() {
              clip.point = pointRing;
              clip.lineStart = ringStart;
              clip.lineEnd = ringEnd;
              segments = [];
              polygon = [];
            },
            polygonEnd: function() {
              clip.point = point6;
              clip.lineStart = lineStart;
              clip.lineEnd = lineEnd;
              segments = d32.merge(segments);
              var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
              if (segments.length) {
                if (!polygonStarted)
                  listener.polygonStart(), polygonStarted = true;
                d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
              } else if (clipStartInside) {
                if (!polygonStarted)
                  listener.polygonStart(), polygonStarted = true;
                listener.lineStart();
                interpolate(null, null, 1, listener);
                listener.lineEnd();
              }
              if (polygonStarted)
                listener.polygonEnd(), polygonStarted = false;
              segments = polygon = null;
            },
            sphere: function() {
              listener.polygonStart();
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
              listener.polygonEnd();
            }
          };
          function point6(λ, φ) {
            var point7 = rotate(λ, φ);
            if (pointVisible(λ = point7[0], φ = point7[1]))
              listener.point(λ, φ);
          }
          function pointLine(λ, φ) {
            var point7 = rotate(λ, φ);
            line.point(point7[0], point7[1]);
          }
          function lineStart() {
            clip.point = pointLine;
            line.lineStart();
          }
          function lineEnd() {
            clip.point = point6;
            line.lineEnd();
          }
          var segments;
          var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
          function pointRing(λ, φ) {
            ring.push([λ, φ]);
            var point7 = rotate(λ, φ);
            ringListener.point(point7[0], point7[1]);
          }
          function ringStart() {
            ringListener.lineStart();
            ring = [];
          }
          function ringEnd() {
            pointRing(ring[0][0], ring[0][1]);
            ringListener.lineEnd();
            var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
            ring.pop();
            polygon.push(ring);
            ring = null;
            if (!n)
              return;
            if (clean & 1) {
              segment = ringSegments[0];
              var n = segment.length - 1, i = -1, point7;
              if (n > 0) {
                if (!polygonStarted)
                  listener.polygonStart(), polygonStarted = true;
                listener.lineStart();
                while (++i < n)
                  listener.point((point7 = segment[i])[0], point7[1]);
                listener.lineEnd();
              }
              return;
            }
            if (n > 1 && clean & 2)
              ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
            segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
          }
          return clip;
        };
      }
      function d3_geo_clipSegmentLength1(segment) {
        return segment.length > 1;
      }
      function d3_geo_clipBufferListener() {
        var lines = [], line;
        return {
          lineStart: function() {
            lines.push(line = []);
          },
          point: function(λ, φ) {
            line.push([λ, φ]);
          },
          lineEnd: d3_noop,
          buffer: function() {
            var buffer = lines;
            lines = [];
            line = null;
            return buffer;
          },
          rejoin: function() {
            if (lines.length > 1)
              lines.push(lines.pop().concat(lines.shift()));
          }
        };
      }
      function d3_geo_clipSort(a2, b) {
        return ((a2 = a2.x)[0] < 0 ? a2[1] - halfπ - ε : halfπ - a2[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
      }
      var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [-π, -π / 2]);
      function d3_geo_clipAntimeridianLine(listener) {
        var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
        return {
          lineStart: function() {
            listener.lineStart();
            clean = 1;
          },
          point: function(λ1, φ1) {
            var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
            if (abs(dλ - π) < ε) {
              listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
              listener.point(sλ0, φ0);
              listener.lineEnd();
              listener.lineStart();
              listener.point(sλ1, φ0);
              listener.point(λ1, φ0);
              clean = 0;
            } else if (sλ0 !== sλ1 && dλ >= π) {
              if (abs(λ0 - sλ0) < ε)
                λ0 -= sλ0 * ε;
              if (abs(λ1 - sλ1) < ε)
                λ1 -= sλ1 * ε;
              φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
              listener.point(sλ0, φ0);
              listener.lineEnd();
              listener.lineStart();
              listener.point(sλ1, φ0);
              clean = 0;
            }
            listener.point(λ0 = λ1, φ0 = φ1);
            sλ0 = sλ1;
          },
          lineEnd: function() {
            listener.lineEnd();
            λ0 = φ0 = NaN;
          },
          clean: function() {
            return 2 - clean;
          }
        };
      }
      function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
        var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
        return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
      }
      function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
        var φ;
        if (from == null) {
          φ = direction * halfπ;
          listener.point(-π, φ);
          listener.point(0, φ);
          listener.point(π, φ);
          listener.point(π, 0);
          listener.point(π, -φ);
          listener.point(0, -φ);
          listener.point(-π, -φ);
          listener.point(-π, 0);
          listener.point(-π, φ);
        } else if (abs(from[0] - to[0]) > ε) {
          var s2 = from[0] < to[0] ? π : -π;
          φ = direction * s2 / 2;
          listener.point(-s2, φ);
          listener.point(0, φ);
          listener.point(s2, φ);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function d3_geo_pointInPolygon(point6, polygon) {
        var meridian = point6[0], parallel = point6[1], meridianNormal = [Math.sin(meridian), -Math.cos(meridian), 0], polarAngle = 0, winding = 0;
        d3_geo_areaRingSum.reset();
        for (var i = 0, n = polygon.length; i < n; ++i) {
          var ring = polygon[i], m = ring.length;
          if (!m)
            continue;
          var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
          while (true) {
            if (j === m)
              j = 0;
            point6 = ring[j];
            var λ = point6[0], φ = point6[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k2 = sinφ0 * sinφ;
            d3_geo_areaRingSum.add(Math.atan2(k2 * sdλ * Math.sin(adλ), cosφ0 * cosφ + k2 * Math.cos(adλ)));
            polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
            if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
              var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point6));
              d3_geo_cartesianNormalize(arc);
              var intersection = d3_geo_cartesianCross(meridianNormal, arc);
              d3_geo_cartesianNormalize(intersection);
              var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
              if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
                winding += antimeridian ^ dλ >= 0 ? 1 : -1;
              }
            }
            if (!j++)
              break;
            λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point6;
          }
        }
        return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
      }
      function d3_geo_clipCircle(radius) {
        var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
        return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-π, radius - π]);
        function visible(λ, φ) {
          return Math.cos(λ) * Math.cos(φ) > cr;
        }
        function clipLine(listener) {
          var point0, c0, v0, v00, clean;
          return {
            lineStart: function() {
              v00 = v0 = false;
              clean = 1;
            },
            point: function(λ, φ) {
              var point1 = [λ, φ], point22, v = visible(λ, φ), c2 = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
              if (!point0 && (v00 = v0 = v))
                listener.lineStart();
              if (v !== v0) {
                point22 = intersect2(point0, point1);
                if (d3_geo_sphericalEqual(point0, point22) || d3_geo_sphericalEqual(point1, point22)) {
                  point1[0] += ε;
                  point1[1] += ε;
                  v = visible(point1[0], point1[1]);
                }
              }
              if (v !== v0) {
                clean = 0;
                if (v) {
                  listener.lineStart();
                  point22 = intersect2(point1, point0);
                  listener.point(point22[0], point22[1]);
                } else {
                  point22 = intersect2(point0, point1);
                  listener.point(point22[0], point22[1]);
                  listener.lineEnd();
                }
                point0 = point22;
              } else if (notHemisphere && point0 && smallRadius ^ v) {
                var t;
                if (!(c2 & c0) && (t = intersect2(point1, point0, true))) {
                  clean = 0;
                  if (smallRadius) {
                    listener.lineStart();
                    listener.point(t[0][0], t[0][1]);
                    listener.point(t[1][0], t[1][1]);
                    listener.lineEnd();
                  } else {
                    listener.point(t[1][0], t[1][1]);
                    listener.lineEnd();
                    listener.lineStart();
                    listener.point(t[0][0], t[0][1]);
                  }
                }
              }
              if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
                listener.point(point1[0], point1[1]);
              }
              point0 = point1, v0 = v, c0 = c2;
            },
            lineEnd: function() {
              if (v0)
                listener.lineEnd();
              point0 = null;
            },
            clean: function() {
              return clean | (v00 && v0) << 1;
            }
          };
        }
        function intersect2(a2, b, two) {
          var pa = d3_geo_cartesian(a2), pb = d3_geo_cartesian(b);
          var n1 = [1, 0, 0], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
          if (!determinant)
            return !two && a2;
          var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A2 = d3_geo_cartesianScale(n1, c1), B2 = d3_geo_cartesianScale(n2, c2);
          d3_geo_cartesianAdd(A2, B2);
          var u = n1xn2, w = d3_geo_cartesianDot(A2, u), uu = d3_geo_cartesianDot(u, u), t22 = w * w - uu * (d3_geo_cartesianDot(A2, A2) - 1);
          if (t22 < 0)
            return;
          var t = Math.sqrt(t22), q = d3_geo_cartesianScale(u, (-w - t) / uu);
          d3_geo_cartesianAdd(q, A2);
          q = d3_geo_spherical(q);
          if (!two)
            return q;
          var λ0 = a2[0], λ1 = b[0], φ0 = a2[1], φ1 = b[1], z;
          if (λ1 < λ0)
            z = λ0, λ0 = λ1, λ1 = z;
          var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
          if (!polar && φ1 < φ0)
            z = φ0, φ0 = φ1, φ1 = z;
          if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
            var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
            d3_geo_cartesianAdd(q1, A2);
            return [q, d3_geo_spherical(q1)];
          }
        }
        function code(λ, φ) {
          var r = smallRadius ? radius : π - radius, code2 = 0;
          if (λ < -r)
            code2 |= 1;
          else if (λ > r)
            code2 |= 2;
          if (φ < -r)
            code2 |= 4;
          else if (φ > r)
            code2 |= 8;
          return code2;
        }
      }
      function d3_geom_clipLine(x0, y0, x1, y1) {
        return function(line) {
          var a2 = line.a, b = line.b, ax = a2.x, ay = a2.y, bx = b.x, by = b.y, t03 = 0, t13 = 1, dx = bx - ax, dy = by - ay, r;
          r = x0 - ax;
          if (!dx && r > 0)
            return;
          r /= dx;
          if (dx < 0) {
            if (r < t03)
              return;
            if (r < t13)
              t13 = r;
          } else if (dx > 0) {
            if (r > t13)
              return;
            if (r > t03)
              t03 = r;
          }
          r = x1 - ax;
          if (!dx && r < 0)
            return;
          r /= dx;
          if (dx < 0) {
            if (r > t13)
              return;
            if (r > t03)
              t03 = r;
          } else if (dx > 0) {
            if (r < t03)
              return;
            if (r < t13)
              t13 = r;
          }
          r = y0 - ay;
          if (!dy && r > 0)
            return;
          r /= dy;
          if (dy < 0) {
            if (r < t03)
              return;
            if (r < t13)
              t13 = r;
          } else if (dy > 0) {
            if (r > t13)
              return;
            if (r > t03)
              t03 = r;
          }
          r = y1 - ay;
          if (!dy && r < 0)
            return;
          r /= dy;
          if (dy < 0) {
            if (r > t13)
              return;
            if (r > t03)
              t03 = r;
          } else if (dy > 0) {
            if (r < t03)
              return;
            if (r < t13)
              t13 = r;
          }
          if (t03 > 0)
            line.a = {
              x: ax + t03 * dx,
              y: ay + t03 * dy
            };
          if (t13 < 1)
            line.b = {
              x: ax + t13 * dx,
              y: ay + t13 * dy
            };
          return line;
        };
      }
      var d3_geo_clipExtentMAX = 1e9;
      d32.geo.clipExtent = function() {
        var x0, y0, x1, y1, stream, clip, clipExtent = {
          stream: function(output) {
            if (stream)
              stream.valid = false;
            stream = clip(output);
            stream.valid = true;
            return stream;
          },
          extent: function(_) {
            if (!arguments.length)
              return [[x0, y0], [x1, y1]];
            clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
            if (stream)
              stream.valid = false, stream = null;
            return clipExtent;
          }
        };
        return clipExtent.extent([[0, 0], [960, 500]]);
      };
      function d3_geo_clipExtent(x0, y0, x1, y1) {
        return function(listener) {
          var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
          var clip = {
            point: point6,
            lineStart,
            lineEnd,
            polygonStart: function() {
              listener = bufferListener;
              segments = [];
              polygon = [];
              clean = true;
            },
            polygonEnd: function() {
              listener = listener_;
              segments = d32.merge(segments);
              var clipStartInside = insidePolygon([x0, y1]), inside = clean && clipStartInside, visible = segments.length;
              if (inside || visible) {
                listener.polygonStart();
                if (inside) {
                  listener.lineStart();
                  interpolate(null, null, 1, listener);
                  listener.lineEnd();
                }
                if (visible) {
                  d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
                }
                listener.polygonEnd();
              }
              segments = polygon = ring = null;
            }
          };
          function insidePolygon(p) {
            var wn = 0, n = polygon.length, y2 = p[1];
            for (var i = 0; i < n; ++i) {
              for (var j = 1, v = polygon[i], m = v.length, a2 = v[0], b; j < m; ++j) {
                b = v[j];
                if (a2[1] <= y2) {
                  if (b[1] > y2 && d3_cross2d(a2, b, p) > 0)
                    ++wn;
                } else {
                  if (b[1] <= y2 && d3_cross2d(a2, b, p) < 0)
                    --wn;
                }
                a2 = b;
              }
            }
            return wn !== 0;
          }
          function interpolate(from, to, direction, listener2) {
            var a2 = 0, a1 = 0;
            if (from == null || (a2 = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
              do {
                listener2.point(a2 === 0 || a2 === 3 ? x0 : x1, a2 > 1 ? y1 : y0);
              } while ((a2 = (a2 + direction + 4) % 4) !== a1);
            } else {
              listener2.point(to[0], to[1]);
            }
          }
          function pointVisible(x2, y2) {
            return x0 <= x2 && x2 <= x1 && y0 <= y2 && y2 <= y1;
          }
          function point6(x2, y2) {
            if (pointVisible(x2, y2))
              listener.point(x2, y2);
          }
          var x__, y__, v__, x_, y_, v_, first, clean;
          function lineStart() {
            clip.point = linePoint;
            if (polygon)
              polygon.push(ring = []);
            first = true;
            v_ = false;
            x_ = y_ = NaN;
          }
          function lineEnd() {
            if (segments) {
              linePoint(x__, y__);
              if (v__ && v_)
                bufferListener.rejoin();
              segments.push(bufferListener.buffer());
            }
            clip.point = point6;
            if (v_)
              listener.lineEnd();
          }
          function linePoint(x2, y2) {
            x2 = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x2));
            y2 = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y2));
            var v = pointVisible(x2, y2);
            if (polygon)
              ring.push([x2, y2]);
            if (first) {
              x__ = x2, y__ = y2, v__ = v;
              first = false;
              if (v) {
                listener.lineStart();
                listener.point(x2, y2);
              }
            } else {
              if (v && v_)
                listener.point(x2, y2);
              else {
                var l = {
                  a: {
                    x: x_,
                    y: y_
                  },
                  b: {
                    x: x2,
                    y: y2
                  }
                };
                if (clipLine(l)) {
                  if (!v_) {
                    listener.lineStart();
                    listener.point(l.a.x, l.a.y);
                  }
                  listener.point(l.b.x, l.b.y);
                  if (!v)
                    listener.lineEnd();
                  clean = false;
                } else if (v) {
                  listener.lineStart();
                  listener.point(x2, y2);
                  clean = false;
                }
              }
            }
            x_ = x2, y_ = y2, v_ = v;
          }
          return clip;
        };
        function corner(p, direction) {
          return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
        }
        function compare(a2, b) {
          return comparePoints(a2.x, b.x);
        }
        function comparePoints(a2, b) {
          var ca = corner(a2, 1), cb = corner(b, 1);
          return ca !== cb ? ca - cb : ca === 0 ? b[1] - a2[1] : ca === 1 ? a2[0] - b[0] : ca === 2 ? a2[1] - b[1] : b[0] - a2[0];
        }
      }
      function d3_geo_conic(projectAt) {
        var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
        p.parallels = function(_) {
          if (!arguments.length)
            return [φ0 / π * 180, φ1 / π * 180];
          return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
        };
        return p;
      }
      function d3_geo_conicEqualArea(φ0, φ1) {
        var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C2 = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C2) / n;
        function forward(λ, φ) {
          var ρ3 = Math.sqrt(C2 - 2 * n * Math.sin(φ)) / n;
          return [ρ3 * Math.sin(λ *= n), ρ0 - ρ3 * Math.cos(λ)];
        }
        forward.invert = function(x2, y2) {
          var ρ0_y = ρ0 - y2;
          return [Math.atan2(x2, ρ0_y) / n, d3_asin((C2 - (x2 * x2 + ρ0_y * ρ0_y) * n * n) / (2 * n))];
        };
        return forward;
      }
      (d32.geo.conicEqualArea = function() {
        return d3_geo_conic(d3_geo_conicEqualArea);
      }).raw = d3_geo_conicEqualArea;
      d32.geo.albers = function() {
        return d32.geo.conicEqualArea().rotate([96, 0]).center([-0.6, 38.7]).parallels([29.5, 45.5]).scale(1070);
      };
      d32.geo.albersUsa = function() {
        var lower48 = d32.geo.albers();
        var alaska = d32.geo.conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]);
        var hawaii = d32.geo.conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]);
        var point6, pointStream = {
          point: function(x2, y2) {
            point6 = [x2, y2];
          }
        }, lower48Point, alaskaPoint, hawaiiPoint;
        function albersUsa(coordinates) {
          var x2 = coordinates[0], y2 = coordinates[1];
          point6 = null;
          (lower48Point(x2, y2), point6) || (alaskaPoint(x2, y2), point6) || hawaiiPoint(x2, y2);
          return point6;
        }
        albersUsa.invert = function(coordinates) {
          var k2 = lower48.scale(), t = lower48.translate(), x2 = (coordinates[0] - t[0]) / k2, y2 = (coordinates[1] - t[1]) / k2;
          return (y2 >= 0.12 && y2 < 0.234 && x2 >= -0.425 && x2 < -0.214 ? alaska : y2 >= 0.166 && y2 < 0.234 && x2 >= -0.214 && x2 < -0.115 ? hawaii : lower48).invert(coordinates);
        };
        albersUsa.stream = function(stream) {
          var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
          return {
            point: function(x2, y2) {
              lower48Stream.point(x2, y2);
              alaskaStream.point(x2, y2);
              hawaiiStream.point(x2, y2);
            },
            sphere: function() {
              lower48Stream.sphere();
              alaskaStream.sphere();
              hawaiiStream.sphere();
            },
            lineStart: function() {
              lower48Stream.lineStart();
              alaskaStream.lineStart();
              hawaiiStream.lineStart();
            },
            lineEnd: function() {
              lower48Stream.lineEnd();
              alaskaStream.lineEnd();
              hawaiiStream.lineEnd();
            },
            polygonStart: function() {
              lower48Stream.polygonStart();
              alaskaStream.polygonStart();
              hawaiiStream.polygonStart();
            },
            polygonEnd: function() {
              lower48Stream.polygonEnd();
              alaskaStream.polygonEnd();
              hawaiiStream.polygonEnd();
            }
          };
        };
        albersUsa.precision = function(_) {
          if (!arguments.length)
            return lower48.precision();
          lower48.precision(_);
          alaska.precision(_);
          hawaii.precision(_);
          return albersUsa;
        };
        albersUsa.scale = function(_) {
          if (!arguments.length)
            return lower48.scale();
          lower48.scale(_);
          alaska.scale(_ * 0.35);
          hawaii.scale(_);
          return albersUsa.translate(lower48.translate());
        };
        albersUsa.translate = function(_) {
          if (!arguments.length)
            return lower48.translate();
          var k2 = lower48.scale(), x2 = +_[0], y2 = +_[1];
          lower48Point = lower48.translate(_).clipExtent([[x2 - 0.455 * k2, y2 - 0.238 * k2], [x2 + 0.455 * k2, y2 + 0.238 * k2]]).stream(pointStream).point;
          alaskaPoint = alaska.translate([x2 - 0.307 * k2, y2 + 0.201 * k2]).clipExtent([[x2 - 0.425 * k2 + ε, y2 + 0.12 * k2 + ε], [x2 - 0.214 * k2 - ε, y2 + 0.234 * k2 - ε]]).stream(pointStream).point;
          hawaiiPoint = hawaii.translate([x2 - 0.205 * k2, y2 + 0.212 * k2]).clipExtent([[x2 - 0.214 * k2 + ε, y2 + 0.166 * k2 + ε], [x2 - 0.115 * k2 - ε, y2 + 0.234 * k2 - ε]]).stream(pointStream).point;
          return albersUsa;
        };
        return albersUsa.scale(1070);
      };
      var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
        point: d3_noop,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: function() {
          d3_geo_pathAreaPolygon = 0;
          d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
        },
        polygonEnd: function() {
          d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
          d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
        }
      };
      function d3_geo_pathAreaRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathArea.point = function(x2, y2) {
          d3_geo_pathArea.point = nextPoint;
          x00 = x0 = x2, y00 = y0 = y2;
        };
        function nextPoint(x2, y2) {
          d3_geo_pathAreaPolygon += y0 * x2 - x0 * y2;
          x0 = x2, y0 = y2;
        }
        d3_geo_pathArea.lineEnd = function() {
          nextPoint(x00, y00);
        };
      }
      var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
      var d3_geo_pathBounds = {
        point: d3_geo_pathBoundsPoint,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
      };
      function d3_geo_pathBoundsPoint(x2, y2) {
        if (x2 < d3_geo_pathBoundsX0)
          d3_geo_pathBoundsX0 = x2;
        if (x2 > d3_geo_pathBoundsX1)
          d3_geo_pathBoundsX1 = x2;
        if (y2 < d3_geo_pathBoundsY0)
          d3_geo_pathBoundsY0 = y2;
        if (y2 > d3_geo_pathBoundsY1)
          d3_geo_pathBoundsY1 = y2;
      }
      function d3_geo_pathBuffer() {
        var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
        var stream = {
          point: point6,
          lineStart: function() {
            stream.point = pointLineStart;
          },
          lineEnd,
          polygonStart: function() {
            stream.lineEnd = lineEndPolygon;
          },
          polygonEnd: function() {
            stream.lineEnd = lineEnd;
            stream.point = point6;
          },
          pointRadius: function(_) {
            pointCircle = d3_geo_pathBufferCircle(_);
            return stream;
          },
          result: function() {
            if (buffer.length) {
              var result = buffer.join("");
              buffer = [];
              return result;
            }
          }
        };
        function point6(x2, y2) {
          buffer.push("M", x2, ",", y2, pointCircle);
        }
        function pointLineStart(x2, y2) {
          buffer.push("M", x2, ",", y2);
          stream.point = pointLine;
        }
        function pointLine(x2, y2) {
          buffer.push("L", x2, ",", y2);
        }
        function lineEnd() {
          stream.point = point6;
        }
        function lineEndPolygon() {
          buffer.push("Z");
        }
        return stream;
      }
      function d3_geo_pathBufferCircle(radius) {
        return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
      }
      var d3_geo_pathCentroid = {
        point: d3_geo_pathCentroidPoint,
        lineStart: d3_geo_pathCentroidLineStart,
        lineEnd: d3_geo_pathCentroidLineEnd,
        polygonStart: function() {
          d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
        },
        polygonEnd: function() {
          d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
          d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
          d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
        }
      };
      function d3_geo_pathCentroidPoint(x2, y2) {
        d3_geo_centroidX0 += x2;
        d3_geo_centroidY0 += y2;
        ++d3_geo_centroidZ0;
      }
      function d3_geo_pathCentroidLineStart() {
        var x0, y0;
        d3_geo_pathCentroid.point = function(x2, y2) {
          d3_geo_pathCentroid.point = nextPoint;
          d3_geo_pathCentroidPoint(x0 = x2, y0 = y2);
        };
        function nextPoint(x2, y2) {
          var dx = x2 - x0, dy = y2 - y0, z = Math.sqrt(dx * dx + dy * dy);
          d3_geo_centroidX1 += z * (x0 + x2) / 2;
          d3_geo_centroidY1 += z * (y0 + y2) / 2;
          d3_geo_centroidZ1 += z;
          d3_geo_pathCentroidPoint(x0 = x2, y0 = y2);
        }
      }
      function d3_geo_pathCentroidLineEnd() {
        d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      }
      function d3_geo_pathCentroidRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathCentroid.point = function(x2, y2) {
          d3_geo_pathCentroid.point = nextPoint;
          d3_geo_pathCentroidPoint(x00 = x0 = x2, y00 = y0 = y2);
        };
        function nextPoint(x2, y2) {
          var dx = x2 - x0, dy = y2 - y0, z = Math.sqrt(dx * dx + dy * dy);
          d3_geo_centroidX1 += z * (x0 + x2) / 2;
          d3_geo_centroidY1 += z * (y0 + y2) / 2;
          d3_geo_centroidZ1 += z;
          z = y0 * x2 - x0 * y2;
          d3_geo_centroidX2 += z * (x0 + x2);
          d3_geo_centroidY2 += z * (y0 + y2);
          d3_geo_centroidZ2 += z * 3;
          d3_geo_pathCentroidPoint(x0 = x2, y0 = y2);
        }
        d3_geo_pathCentroid.lineEnd = function() {
          nextPoint(x00, y00);
        };
      }
      function d3_geo_pathContext(context) {
        var pointRadius = 4.5;
        var stream = {
          point: point6,
          lineStart: function() {
            stream.point = pointLineStart;
          },
          lineEnd,
          polygonStart: function() {
            stream.lineEnd = lineEndPolygon;
          },
          polygonEnd: function() {
            stream.lineEnd = lineEnd;
            stream.point = point6;
          },
          pointRadius: function(_) {
            pointRadius = _;
            return stream;
          },
          result: d3_noop
        };
        function point6(x2, y2) {
          context.moveTo(x2 + pointRadius, y2);
          context.arc(x2, y2, pointRadius, 0, τ);
        }
        function pointLineStart(x2, y2) {
          context.moveTo(x2, y2);
          stream.point = pointLine;
        }
        function pointLine(x2, y2) {
          context.lineTo(x2, y2);
        }
        function lineEnd() {
          stream.point = point6;
        }
        function lineEndPolygon() {
          context.closePath();
        }
        return stream;
      }
      function d3_geo_resample(project) {
        var δ2 = 0.5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
        function resample(stream) {
          return (maxDepth ? resampleRecursive : resampleNone)(stream);
        }
        function resampleNone(stream) {
          return d3_geo_transformPoint(stream, function(x2, y2) {
            x2 = project(x2, y2);
            stream.point(x2[0], x2[1]);
          });
        }
        function resampleRecursive(stream) {
          var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
          var resample2 = {
            point: point6,
            lineStart,
            lineEnd,
            polygonStart: function() {
              stream.polygonStart();
              resample2.lineStart = ringStart;
            },
            polygonEnd: function() {
              stream.polygonEnd();
              resample2.lineStart = lineStart;
            }
          };
          function point6(x2, y2) {
            x2 = project(x2, y2);
            stream.point(x2[0], x2[1]);
          }
          function lineStart() {
            x0 = NaN;
            resample2.point = linePoint;
            stream.lineStart();
          }
          function linePoint(λ, φ) {
            var c2 = d3_geo_cartesian([λ, φ]), p = project(λ, φ);
            resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c2[0], b0 = c2[1], c0 = c2[2], maxDepth, stream);
            stream.point(x0, y0);
          }
          function lineEnd() {
            resample2.point = point6;
            stream.lineEnd();
          }
          function ringStart() {
            lineStart();
            resample2.point = ringPoint;
            resample2.lineEnd = ringEnd;
          }
          function ringPoint(λ, φ) {
            linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
            resample2.point = linePoint;
          }
          function ringEnd() {
            resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
            resample2.lineEnd = lineEnd;
            lineEnd();
          }
          return resample2;
        }
        function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
          var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
          if (d2 > 4 * δ2 && depth--) {
            var a2 = a0 + a1, b = b0 + b1, c2 = c0 + c1, m = Math.sqrt(a2 * a2 + b * b + c2 * c2), φ2 = Math.asin(c2 /= m), λ2 = abs(abs(c2) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a2), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
            if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
              resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a2 /= m, b /= m, c2, depth, stream);
              stream.point(x2, y2);
              resampleLineTo(x2, y2, λ2, a2, b, c2, x1, y1, λ1, a1, b1, c1, depth, stream);
            }
          }
        }
        resample.precision = function(_) {
          if (!arguments.length)
            return Math.sqrt(δ2);
          maxDepth = (δ2 = _ * _) > 0 && 16;
          return resample;
        };
        return resample;
      }
      d32.geo.path = function() {
        var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
        function path2(object) {
          if (object) {
            if (typeof pointRadius === "function")
              contextStream.pointRadius(+pointRadius.apply(this, arguments));
            if (!cacheStream || !cacheStream.valid)
              cacheStream = projectStream(contextStream);
            d32.geo.stream(object, cacheStream);
          }
          return contextStream.result();
        }
        path2.area = function(object) {
          d3_geo_pathAreaSum = 0;
          d32.geo.stream(object, projectStream(d3_geo_pathArea));
          return d3_geo_pathAreaSum;
        };
        path2.centroid = function(object) {
          d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
          d32.geo.stream(object, projectStream(d3_geo_pathCentroid));
          return d3_geo_centroidZ2 ? [d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2] : d3_geo_centroidZ1 ? [d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1] : d3_geo_centroidZ0 ? [d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0] : [NaN, NaN];
        };
        path2.bounds = function(object) {
          d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
          d32.geo.stream(object, projectStream(d3_geo_pathBounds));
          return [[d3_geo_pathBoundsX0, d3_geo_pathBoundsY0], [d3_geo_pathBoundsX1, d3_geo_pathBoundsY1]];
        };
        path2.projection = function(_) {
          if (!arguments.length)
            return projection;
          projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
          return reset();
        };
        path2.context = function(_) {
          if (!arguments.length)
            return context;
          contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
          if (typeof pointRadius !== "function")
            contextStream.pointRadius(pointRadius);
          return reset();
        };
        path2.pointRadius = function(_) {
          if (!arguments.length)
            return pointRadius;
          pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
          return path2;
        };
        function reset() {
          cacheStream = null;
          return path2;
        }
        return path2.projection(d32.geo.albersUsa()).context(null);
      };
      function d3_geo_pathProjectStream(project) {
        var resample = d3_geo_resample(function(x2, y2) {
          return project([x2 * d3_degrees, y2 * d3_degrees]);
        });
        return function(stream) {
          return d3_geo_projectionRadians(resample(stream));
        };
      }
      d32.geo.transform = function(methods) {
        return {
          stream: function(stream) {
            var transform = new d3_geo_transform(stream);
            for (var k2 in methods)
              transform[k2] = methods[k2];
            return transform;
          }
        };
      };
      function d3_geo_transform(stream) {
        this.stream = stream;
      }
      d3_geo_transform.prototype = {
        point: function(x2, y2) {
          this.stream.point(x2, y2);
        },
        sphere: function() {
          this.stream.sphere();
        },
        lineStart: function() {
          this.stream.lineStart();
        },
        lineEnd: function() {
          this.stream.lineEnd();
        },
        polygonStart: function() {
          this.stream.polygonStart();
        },
        polygonEnd: function() {
          this.stream.polygonEnd();
        }
      };
      function d3_geo_transformPoint(stream, point6) {
        return {
          point: point6,
          sphere: function() {
            stream.sphere();
          },
          lineStart: function() {
            stream.lineStart();
          },
          lineEnd: function() {
            stream.lineEnd();
          },
          polygonStart: function() {
            stream.polygonStart();
          },
          polygonEnd: function() {
            stream.polygonEnd();
          }
        };
      }
      d32.geo.projection = d3_geo_projection;
      d32.geo.projectionMutator = d3_geo_projectionMutator;
      function d3_geo_projection(project) {
        return d3_geo_projectionMutator(function() {
          return project;
        })();
      }
      function d3_geo_projectionMutator(projectAt) {
        var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x3, y3) {
          x3 = project(x3, y3);
          return [x3[0] * k2 + δx, δy - x3[1] * k2];
        }), k2 = 150, x2 = 480, y2 = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
        function projection(point6) {
          point6 = projectRotate(point6[0] * d3_radians, point6[1] * d3_radians);
          return [point6[0] * k2 + δx, δy - point6[1] * k2];
        }
        function invert(point6) {
          point6 = projectRotate.invert((point6[0] - δx) / k2, (δy - point6[1]) / k2);
          return point6 && [point6[0] * d3_degrees, point6[1] * d3_degrees];
        }
        projection.stream = function(output) {
          if (stream)
            stream.valid = false;
          stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
          stream.valid = true;
          return stream;
        };
        projection.clipAngle = function(_) {
          if (!arguments.length)
            return clipAngle;
          preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
          return invalidate();
        };
        projection.clipExtent = function(_) {
          if (!arguments.length)
            return clipExtent;
          clipExtent = _;
          postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
          return invalidate();
        };
        projection.scale = function(_) {
          if (!arguments.length)
            return k2;
          k2 = +_;
          return reset();
        };
        projection.translate = function(_) {
          if (!arguments.length)
            return [x2, y2];
          x2 = +_[0];
          y2 = +_[1];
          return reset();
        };
        projection.center = function(_) {
          if (!arguments.length)
            return [λ * d3_degrees, φ * d3_degrees];
          λ = _[0] % 360 * d3_radians;
          φ = _[1] % 360 * d3_radians;
          return reset();
        };
        projection.rotate = function(_) {
          if (!arguments.length)
            return [δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees];
          δλ = _[0] % 360 * d3_radians;
          δφ = _[1] % 360 * d3_radians;
          δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
          return reset();
        };
        d32.rebind(projection, projectResample, "precision");
        function reset() {
          projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
          var center2 = project(λ, φ);
          δx = x2 - center2[0] * k2;
          δy = y2 + center2[1] * k2;
          return invalidate();
        }
        function invalidate() {
          if (stream)
            stream.valid = false, stream = null;
          return projection;
        }
        return function() {
          project = projectAt.apply(this, arguments);
          projection.invert = project.invert && invert;
          return reset();
        };
      }
      function d3_geo_projectionRadians(stream) {
        return d3_geo_transformPoint(stream, function(x2, y2) {
          stream.point(x2 * d3_radians, y2 * d3_radians);
        });
      }
      function d3_geo_equirectangular(λ, φ) {
        return [λ, φ];
      }
      (d32.geo.equirectangular = function() {
        return d3_geo_projection(d3_geo_equirectangular);
      }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
      d32.geo.rotation = function(rotate) {
        rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
        function forward(coordinates) {
          coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
          return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
        }
        forward.invert = function(coordinates) {
          coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
          return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
        };
        return forward;
      };
      function d3_geo_identityRotation(λ, φ) {
        return [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];
      }
      d3_geo_identityRotation.invert = d3_geo_equirectangular;
      function d3_geo_rotation(δλ, δφ, δγ) {
        return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
      }
      function d3_geo_forwardRotationλ(δλ) {
        return function(λ, φ) {
          return λ += δλ, [λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ];
        };
      }
      function d3_geo_rotationλ(δλ) {
        var rotation = d3_geo_forwardRotationλ(δλ);
        rotation.invert = d3_geo_forwardRotationλ(-δλ);
        return rotation;
      }
      function d3_geo_rotationφγ(δφ, δγ) {
        var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
        function rotation(λ, φ) {
          var cosφ = Math.cos(φ), x2 = Math.cos(λ) * cosφ, y2 = Math.sin(λ) * cosφ, z = Math.sin(φ), k2 = z * cosδφ + x2 * sinδφ;
          return [Math.atan2(y2 * cosδγ - k2 * sinδγ, x2 * cosδφ - z * sinδφ), d3_asin(k2 * cosδγ + y2 * sinδγ)];
        }
        rotation.invert = function(λ, φ) {
          var cosφ = Math.cos(φ), x2 = Math.cos(λ) * cosφ, y2 = Math.sin(λ) * cosφ, z = Math.sin(φ), k2 = z * cosδγ - y2 * sinδγ;
          return [Math.atan2(y2 * cosδγ + z * sinδγ, x2 * cosδφ + k2 * sinδφ), d3_asin(k2 * cosδφ - x2 * sinδφ)];
        };
        return rotation;
      }
      d32.geo.circle = function() {
        var origin = [0, 0], angle, precision = 6, interpolate;
        function circle() {
          var center2 = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center2[0] * d3_radians, -center2[1] * d3_radians, 0).invert, ring = [];
          interpolate(null, null, 1, {
            point: function(x2, y2) {
              ring.push(x2 = rotate(x2, y2));
              x2[0] *= d3_degrees, x2[1] *= d3_degrees;
            }
          });
          return {
            type: "Polygon",
            coordinates: [ring]
          };
        }
        circle.origin = function(x2) {
          if (!arguments.length)
            return origin;
          origin = x2;
          return circle;
        };
        circle.angle = function(x2) {
          if (!arguments.length)
            return angle;
          interpolate = d3_geo_circleInterpolate((angle = +x2) * d3_radians, precision * d3_radians);
          return circle;
        };
        circle.precision = function(_) {
          if (!arguments.length)
            return precision;
          interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
          return circle;
        };
        return circle.angle(90);
      };
      function d3_geo_circleInterpolate(radius, precision) {
        var cr = Math.cos(radius), sr = Math.sin(radius);
        return function(from, to, direction, listener) {
          var step = direction * precision;
          if (from != null) {
            from = d3_geo_circleAngle(cr, from);
            to = d3_geo_circleAngle(cr, to);
            if (direction > 0 ? from < to : from > to)
              from += direction * τ;
          } else {
            from = radius + direction * τ;
            to = radius - 0.5 * step;
          }
          for (var point6, t = from; direction > 0 ? t > to : t < to; t -= step) {
            listener.point((point6 = d3_geo_spherical([cr, -sr * Math.cos(t), -sr * Math.sin(t)]))[0], point6[1]);
          }
        };
      }
      function d3_geo_circleAngle(cr, point6) {
        var a2 = d3_geo_cartesian(point6);
        a2[0] -= cr;
        d3_geo_cartesianNormalize(a2);
        var angle = d3_acos(-a2[1]);
        return ((-a2[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
      }
      d32.geo.distance = function(a2, b) {
        var Δλ = (b[0] - a2[0]) * d3_radians, φ0 = a2[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
        return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
      };
      d32.geo.graticule = function() {
        var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x2, y2, X, Y, precision = 2.5;
        function graticule() {
          return {
            type: "MultiLineString",
            coordinates: lines()
          };
        }
        function lines() {
          return d32.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d32.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d32.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x3) {
            return abs(x3 % DX) > ε;
          }).map(x2)).concat(d32.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y3) {
            return abs(y3 % DY) > ε;
          }).map(y2));
        }
        graticule.lines = function() {
          return lines().map(function(coordinates) {
            return {
              type: "LineString",
              coordinates
            };
          });
        };
        graticule.outline = function() {
          return {
            type: "Polygon",
            coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
          };
        };
        graticule.extent = function(_) {
          if (!arguments.length)
            return graticule.minorExtent();
          return graticule.majorExtent(_).minorExtent(_);
        };
        graticule.majorExtent = function(_) {
          if (!arguments.length)
            return [[X0, Y0], [X1, Y1]];
          X0 = +_[0][0], X1 = +_[1][0];
          Y0 = +_[0][1], Y1 = +_[1][1];
          if (X0 > X1)
            _ = X0, X0 = X1, X1 = _;
          if (Y0 > Y1)
            _ = Y0, Y0 = Y1, Y1 = _;
          return graticule.precision(precision);
        };
        graticule.minorExtent = function(_) {
          if (!arguments.length)
            return [[x0, y0], [x1, y1]];
          x0 = +_[0][0], x1 = +_[1][0];
          y0 = +_[0][1], y1 = +_[1][1];
          if (x0 > x1)
            _ = x0, x0 = x1, x1 = _;
          if (y0 > y1)
            _ = y0, y0 = y1, y1 = _;
          return graticule.precision(precision);
        };
        graticule.step = function(_) {
          if (!arguments.length)
            return graticule.minorStep();
          return graticule.majorStep(_).minorStep(_);
        };
        graticule.majorStep = function(_) {
          if (!arguments.length)
            return [DX, DY];
          DX = +_[0], DY = +_[1];
          return graticule;
        };
        graticule.minorStep = function(_) {
          if (!arguments.length)
            return [dx, dy];
          dx = +_[0], dy = +_[1];
          return graticule;
        };
        graticule.precision = function(_) {
          if (!arguments.length)
            return precision;
          precision = +_;
          x2 = d3_geo_graticuleX(y0, y1, 90);
          y2 = d3_geo_graticuleY(x0, x1, precision);
          X = d3_geo_graticuleX(Y0, Y1, 90);
          Y = d3_geo_graticuleY(X0, X1, precision);
          return graticule;
        };
        return graticule.majorExtent([[-180, -90 + ε], [180, 90 - ε]]).minorExtent([[-180, -80 - ε], [180, 80 + ε]]);
      };
      function d3_geo_graticuleX(y0, y1, dy) {
        var y2 = d32.range(y0, y1 - ε, dy).concat(y1);
        return function(x2) {
          return y2.map(function(y3) {
            return [x2, y3];
          });
        };
      }
      function d3_geo_graticuleY(x0, x1, dx) {
        var x2 = d32.range(x0, x1 - ε, dx).concat(x1);
        return function(y2) {
          return x2.map(function(x3) {
            return [x3, y2];
          });
        };
      }
      function d3_source(d) {
        return d.source;
      }
      function d3_target(d) {
        return d.target;
      }
      d32.geo.greatArc = function() {
        var source = d3_source, source_, target = d3_target, target_;
        function greatArc() {
          return {
            type: "LineString",
            coordinates: [source_ || source.apply(this, arguments), target_ || target.apply(this, arguments)]
          };
        }
        greatArc.distance = function() {
          return d32.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
        };
        greatArc.source = function(_) {
          if (!arguments.length)
            return source;
          source = _, source_ = typeof _ === "function" ? null : _;
          return greatArc;
        };
        greatArc.target = function(_) {
          if (!arguments.length)
            return target;
          target = _, target_ = typeof _ === "function" ? null : _;
          return greatArc;
        };
        greatArc.precision = function() {
          return arguments.length ? greatArc : 0;
        };
        return greatArc;
      };
      d32.geo.interpolate = function(source, target) {
        return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
      };
      function d3_geo_interpolate(x0, y0, x1, y1) {
        var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k2 = 1 / Math.sin(d);
        var interpolate = d ? function(t) {
          var B2 = Math.sin(t *= d) * k2, A2 = Math.sin(d - t) * k2, x2 = A2 * kx0 + B2 * kx1, y2 = A2 * ky0 + B2 * ky1, z = A2 * sy0 + B2 * sy1;
          return [Math.atan2(y2, x2) * d3_degrees, Math.atan2(z, Math.sqrt(x2 * x2 + y2 * y2)) * d3_degrees];
        } : function() {
          return [x0 * d3_degrees, y0 * d3_degrees];
        };
        interpolate.distance = d;
        return interpolate;
      }
      d32.geo.length = function(object) {
        d3_geo_lengthSum = 0;
        d32.geo.stream(object, d3_geo_length);
        return d3_geo_lengthSum;
      };
      var d3_geo_lengthSum;
      var d3_geo_length = {
        sphere: d3_noop,
        point: d3_noop,
        lineStart: d3_geo_lengthLineStart,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
      };
      function d3_geo_lengthLineStart() {
        var λ0, sinφ0, cosφ0;
        d3_geo_length.point = function(λ, φ) {
          λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
          d3_geo_length.point = nextPoint;
        };
        d3_geo_length.lineEnd = function() {
          d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
        };
        function nextPoint(λ, φ) {
          var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
          d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
          λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
        }
      }
      function d3_geo_azimuthal(scale, angle) {
        function azimuthal(λ, φ) {
          var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k2 = scale(cosλ * cosφ);
          return [k2 * cosφ * Math.sin(λ), k2 * Math.sin(φ)];
        }
        azimuthal.invert = function(x2, y2) {
          var ρ3 = Math.sqrt(x2 * x2 + y2 * y2), c2 = angle(ρ3), sinc = Math.sin(c2), cosc = Math.cos(c2);
          return [Math.atan2(x2 * sinc, ρ3 * cosc), Math.asin(ρ3 && y2 * sinc / ρ3)];
        };
        return azimuthal;
      }
      var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
        return Math.sqrt(2 / (1 + cosλcosφ));
      }, function(ρ3) {
        return 2 * Math.asin(ρ3 / 2);
      });
      (d32.geo.azimuthalEqualArea = function() {
        return d3_geo_projection(d3_geo_azimuthalEqualArea);
      }).raw = d3_geo_azimuthalEqualArea;
      var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
        var c2 = Math.acos(cosλcosφ);
        return c2 && c2 / Math.sin(c2);
      }, d3_identity);
      (d32.geo.azimuthalEquidistant = function() {
        return d3_geo_projection(d3_geo_azimuthalEquidistant);
      }).raw = d3_geo_azimuthalEquidistant;
      function d3_geo_conicConformal(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), t = function(φ) {
          return Math.tan(π / 4 + φ / 2);
        }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
        if (!n)
          return d3_geo_mercator;
        function forward(λ, φ) {
          if (F > 0) {
            if (φ < -halfπ + ε)
              φ = -halfπ + ε;
          } else {
            if (φ > halfπ - ε)
              φ = halfπ - ε;
          }
          var ρ3 = F / Math.pow(t(φ), n);
          return [ρ3 * Math.sin(n * λ), F - ρ3 * Math.cos(n * λ)];
        }
        forward.invert = function(x2, y2) {
          var ρ0_y = F - y2, ρ3 = d3_sgn(n) * Math.sqrt(x2 * x2 + ρ0_y * ρ0_y);
          return [Math.atan2(x2, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ3, 1 / n)) - halfπ];
        };
        return forward;
      }
      (d32.geo.conicConformal = function() {
        return d3_geo_conic(d3_geo_conicConformal);
      }).raw = d3_geo_conicConformal;
      function d3_geo_conicEquidistant(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
        if (abs(n) < ε)
          return d3_geo_equirectangular;
        function forward(λ, φ) {
          var ρ3 = G - φ;
          return [ρ3 * Math.sin(n * λ), G - ρ3 * Math.cos(n * λ)];
        }
        forward.invert = function(x2, y2) {
          var ρ0_y = G - y2;
          return [Math.atan2(x2, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x2 * x2 + ρ0_y * ρ0_y)];
        };
        return forward;
      }
      (d32.geo.conicEquidistant = function() {
        return d3_geo_conic(d3_geo_conicEquidistant);
      }).raw = d3_geo_conicEquidistant;
      var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
        return 1 / cosλcosφ;
      }, Math.atan);
      (d32.geo.gnomonic = function() {
        return d3_geo_projection(d3_geo_gnomonic);
      }).raw = d3_geo_gnomonic;
      function d3_geo_mercator(λ, φ) {
        return [λ, Math.log(Math.tan(π / 4 + φ / 2))];
      }
      d3_geo_mercator.invert = function(x2, y2) {
        return [x2, 2 * Math.atan(Math.exp(y2)) - halfπ];
      };
      function d3_geo_mercatorProjection(project) {
        var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
        m.scale = function() {
          var v = scale.apply(m, arguments);
          return v === m ? clipAuto ? m.clipExtent(null) : m : v;
        };
        m.translate = function() {
          var v = translate.apply(m, arguments);
          return v === m ? clipAuto ? m.clipExtent(null) : m : v;
        };
        m.clipExtent = function(_) {
          var v = clipExtent.apply(m, arguments);
          if (v === m) {
            if (clipAuto = _ == null) {
              var k2 = π * scale(), t = translate();
              clipExtent([[t[0] - k2, t[1] - k2], [t[0] + k2, t[1] + k2]]);
            }
          } else if (clipAuto) {
            v = null;
          }
          return v;
        };
        return m.clipExtent(null);
      }
      (d32.geo.mercator = function() {
        return d3_geo_mercatorProjection(d3_geo_mercator);
      }).raw = d3_geo_mercator;
      var d3_geo_orthographic = d3_geo_azimuthal(function() {
        return 1;
      }, Math.asin);
      (d32.geo.orthographic = function() {
        return d3_geo_projection(d3_geo_orthographic);
      }).raw = d3_geo_orthographic;
      var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
        return 1 / (1 + cosλcosφ);
      }, function(ρ3) {
        return 2 * Math.atan(ρ3);
      });
      (d32.geo.stereographic = function() {
        return d3_geo_projection(d3_geo_stereographic);
      }).raw = d3_geo_stereographic;
      function d3_geo_transverseMercator(λ, φ) {
        return [Math.log(Math.tan(π / 4 + φ / 2)), -λ];
      }
      d3_geo_transverseMercator.invert = function(x2, y2) {
        return [-y2, 2 * Math.atan(Math.exp(x2)) - halfπ];
      };
      (d32.geo.transverseMercator = function() {
        var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center2 = projection.center, rotate = projection.rotate;
        projection.center = function(_) {
          return _ ? center2([-_[1], _[0]]) : (_ = center2(), [_[1], -_[0]]);
        };
        projection.rotate = function(_) {
          return _ ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
        };
        return rotate([0, 0, 90]);
      }).raw = d3_geo_transverseMercator;
      d32.geom = {};
      function d3_geom_pointX(d) {
        return d[0];
      }
      function d3_geom_pointY(d) {
        return d[1];
      }
      d32.geom.hull = function(vertices) {
        var x2 = d3_geom_pointX, y2 = d3_geom_pointY;
        if (arguments.length)
          return hull(vertices);
        function hull(data) {
          if (data.length < 3)
            return [];
          var fx = d3_functor(x2), fy = d3_functor(y2), i, n = data.length, points = [], flippedPoints = [];
          for (i = 0; i < n; i++) {
            points.push([+fx.call(this, data[i], i), +fy.call(this, data[i], i), i]);
          }
          points.sort(d3_geom_hullOrder);
          for (i = 0; i < n; i++)
            flippedPoints.push([points[i][0], -points[i][1]]);
          var upper = d3_geom_hullUpper(points), lower2 = d3_geom_hullUpper(flippedPoints);
          var skipLeft = lower2[0] === upper[0], skipRight = lower2[lower2.length - 1] === upper[upper.length - 1], polygon = [];
          for (i = upper.length - 1; i >= 0; --i)
            polygon.push(data[points[upper[i]][2]]);
          for (i = +skipLeft; i < lower2.length - skipRight; ++i)
            polygon.push(data[points[lower2[i]][2]]);
          return polygon;
        }
        hull.x = function(_) {
          return arguments.length ? (x2 = _, hull) : x2;
        };
        hull.y = function(_) {
          return arguments.length ? (y2 = _, hull) : y2;
        };
        return hull;
      };
      function d3_geom_hullUpper(points) {
        var n = points.length, hull = [0, 1], hs = 2;
        for (var i = 2; i < n; i++) {
          while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0)
            --hs;
          hull[hs++] = i;
        }
        return hull.slice(0, hs);
      }
      function d3_geom_hullOrder(a2, b) {
        return a2[0] - b[0] || a2[1] - b[1];
      }
      d32.geom.polygon = function(coordinates) {
        d3_subclass(coordinates, d3_geom_polygonPrototype);
        return coordinates;
      };
      var d3_geom_polygonPrototype = d32.geom.polygon.prototype = [];
      d3_geom_polygonPrototype.area = function() {
        var i = -1, n = this.length, a2, b = this[n - 1], area = 0;
        while (++i < n) {
          a2 = b;
          b = this[i];
          area += a2[1] * b[0] - a2[0] * b[1];
        }
        return area * 0.5;
      };
      d3_geom_polygonPrototype.centroid = function(k2) {
        var i = -1, n = this.length, x2 = 0, y2 = 0, a2, b = this[n - 1], c2;
        if (!arguments.length)
          k2 = -1 / (6 * this.area());
        while (++i < n) {
          a2 = b;
          b = this[i];
          c2 = a2[0] * b[1] - b[0] * a2[1];
          x2 += (a2[0] + b[0]) * c2;
          y2 += (a2[1] + b[1]) * c2;
        }
        return [x2 * k2, y2 * k2];
      };
      d3_geom_polygonPrototype.clip = function(subject) {
        var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a2 = this[n - 1], b, c2, d;
        while (++i < n) {
          input = subject.slice();
          subject.length = 0;
          b = this[i];
          c2 = input[(m = input.length - closed) - 1];
          j = -1;
          while (++j < m) {
            d = input[j];
            if (d3_geom_polygonInside(d, a2, b)) {
              if (!d3_geom_polygonInside(c2, a2, b)) {
                subject.push(d3_geom_polygonIntersect(c2, d, a2, b));
              }
              subject.push(d);
            } else if (d3_geom_polygonInside(c2, a2, b)) {
              subject.push(d3_geom_polygonIntersect(c2, d, a2, b));
            }
            c2 = d;
          }
          if (closed)
            subject.push(subject[0]);
          a2 = b;
        }
        return subject;
      };
      function d3_geom_polygonInside(p, a2, b) {
        return (b[0] - a2[0]) * (p[1] - a2[1]) < (b[1] - a2[1]) * (p[0] - a2[0]);
      }
      function d3_geom_polygonIntersect(c2, d, a2, b) {
        var x1 = c2[0], x3 = a2[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c2[1], y3 = a2[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
        return [x1 + ua * x21, y1 + ua * y21];
      }
      function d3_geom_polygonClosed(coordinates) {
        var a2 = coordinates[0], b = coordinates[coordinates.length - 1];
        return !(a2[0] - b[0] || a2[1] - b[1]);
      }
      var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
      function d3_geom_voronoiBeach() {
        d3_geom_voronoiRedBlackNode(this);
        this.edge = this.site = this.circle = null;
      }
      function d3_geom_voronoiCreateBeach(site) {
        var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
        beach.site = site;
        return beach;
      }
      function d3_geom_voronoiDetachBeach(beach) {
        d3_geom_voronoiDetachCircle(beach);
        d3_geom_voronoiBeaches.remove(beach);
        d3_geom_voronoiBeachPool.push(beach);
        d3_geom_voronoiRedBlackNode(beach);
      }
      function d3_geom_voronoiRemoveBeach(beach) {
        var circle = beach.circle, x2 = circle.x, y2 = circle.cy, vertex = {
          x: x2,
          y: y2
        }, previous = beach.P, next = beach.N, disappearing = [beach];
        d3_geom_voronoiDetachBeach(beach);
        var lArc = previous;
        while (lArc.circle && abs(x2 - lArc.circle.x) < ε && abs(y2 - lArc.circle.cy) < ε) {
          previous = lArc.P;
          disappearing.unshift(lArc);
          d3_geom_voronoiDetachBeach(lArc);
          lArc = previous;
        }
        disappearing.unshift(lArc);
        d3_geom_voronoiDetachCircle(lArc);
        var rArc = next;
        while (rArc.circle && abs(x2 - rArc.circle.x) < ε && abs(y2 - rArc.circle.cy) < ε) {
          next = rArc.N;
          disappearing.push(rArc);
          d3_geom_voronoiDetachBeach(rArc);
          rArc = next;
        }
        disappearing.push(rArc);
        d3_geom_voronoiDetachCircle(rArc);
        var nArcs = disappearing.length, iArc;
        for (iArc = 1; iArc < nArcs; ++iArc) {
          rArc = disappearing[iArc];
          lArc = disappearing[iArc - 1];
          d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
        }
        lArc = disappearing[0];
        rArc = disappearing[nArcs - 1];
        rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
      }
      function d3_geom_voronoiAddBeach(site) {
        var x2 = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
        while (node) {
          dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x2;
          if (dxl > ε)
            node = node.L;
          else {
            dxr = x2 - d3_geom_voronoiRightBreakPoint(node, directrix);
            if (dxr > ε) {
              if (!node.R) {
                lArc = node;
                break;
              }
              node = node.R;
            } else {
              if (dxl > -ε) {
                lArc = node.P;
                rArc = node;
              } else if (dxr > -ε) {
                lArc = node;
                rArc = node.N;
              } else {
                lArc = rArc = node;
              }
              break;
            }
          }
        }
        var newArc = d3_geom_voronoiCreateBeach(site);
        d3_geom_voronoiBeaches.insert(lArc, newArc);
        if (!lArc && !rArc)
          return;
        if (lArc === rArc) {
          d3_geom_voronoiDetachCircle(lArc);
          rArc = d3_geom_voronoiCreateBeach(lArc.site);
          d3_geom_voronoiBeaches.insert(newArc, rArc);
          newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
          d3_geom_voronoiAttachCircle(lArc);
          d3_geom_voronoiAttachCircle(rArc);
          return;
        }
        if (!rArc) {
          newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
          return;
        }
        d3_geom_voronoiDetachCircle(lArc);
        d3_geom_voronoiDetachCircle(rArc);
        var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
          x: (cy * hb - by * hc) / d + ax,
          y: (bx * hc - cx * hb) / d + ay
        };
        d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
        newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
        rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
      }
      function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
        var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
        if (!pby2)
          return rfocx;
        var lArc = arc.P;
        if (!lArc)
          return -Infinity;
        site = lArc.site;
        var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
        if (!plby2)
          return lfocx;
        var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
        if (aby2)
          return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
        return (rfocx + lfocx) / 2;
      }
      function d3_geom_voronoiRightBreakPoint(arc, directrix) {
        var rArc = arc.N;
        if (rArc)
          return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
        var site = arc.site;
        return site.y === directrix ? site.x : Infinity;
      }
      function d3_geom_voronoiCell(site) {
        this.site = site;
        this.edges = [];
      }
      d3_geom_voronoiCell.prototype.prepare = function() {
        var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
        while (iHalfEdge--) {
          edge = halfEdges[iHalfEdge].edge;
          if (!edge.b || !edge.a)
            halfEdges.splice(iHalfEdge, 1);
        }
        halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
        return halfEdges.length;
      };
      function d3_geom_voronoiCloseCells(extent) {
        var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
        while (iCell--) {
          cell = cells[iCell];
          if (!cell || !cell.prepare())
            continue;
          halfEdges = cell.edges;
          nHalfEdges = halfEdges.length;
          iHalfEdge = 0;
          while (iHalfEdge < nHalfEdges) {
            end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
            start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
            if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
              halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
                x: x0,
                y: abs(x2 - x0) < ε ? y2 : y1
              } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
                x: abs(y2 - y1) < ε ? x2 : x1,
                y: y1
              } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
                x: x1,
                y: abs(x2 - x1) < ε ? y2 : y0
              } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
                x: abs(y2 - y0) < ε ? x2 : x0,
                y: y0
              } : null), cell.site, null));
              ++nHalfEdges;
            }
          }
        }
      }
      function d3_geom_voronoiHalfEdgeOrder(a2, b) {
        return b.angle - a2.angle;
      }
      function d3_geom_voronoiCircle() {
        d3_geom_voronoiRedBlackNode(this);
        this.x = this.y = this.arc = this.site = this.cy = null;
      }
      function d3_geom_voronoiAttachCircle(arc) {
        var lArc = arc.P, rArc = arc.N;
        if (!lArc || !rArc)
          return;
        var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
        if (lSite === rSite)
          return;
        var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
        var d = 2 * (ax * cy - ay * cx);
        if (d >= -ε2)
          return;
        var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x2 = (cy * ha - ay * hc) / d, y2 = (ax * hc - cx * ha) / d, cy = y2 + by;
        var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
        circle.arc = arc;
        circle.site = cSite;
        circle.x = x2 + bx;
        circle.y = cy + Math.sqrt(x2 * x2 + y2 * y2);
        circle.cy = cy;
        arc.circle = circle;
        var before = null, node = d3_geom_voronoiCircles._;
        while (node) {
          if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
            if (node.L)
              node = node.L;
            else {
              before = node.P;
              break;
            }
          } else {
            if (node.R)
              node = node.R;
            else {
              before = node;
              break;
            }
          }
        }
        d3_geom_voronoiCircles.insert(before, circle);
        if (!before)
          d3_geom_voronoiFirstCircle = circle;
      }
      function d3_geom_voronoiDetachCircle(arc) {
        var circle = arc.circle;
        if (circle) {
          if (!circle.P)
            d3_geom_voronoiFirstCircle = circle.N;
          d3_geom_voronoiCircles.remove(circle);
          d3_geom_voronoiCirclePool.push(circle);
          d3_geom_voronoiRedBlackNode(circle);
          arc.circle = null;
        }
      }
      function d3_geom_voronoiClipEdges(extent) {
        var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
        while (i--) {
          e = edges[i];
          if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
            e.a = e.b = null;
            edges.splice(i, 1);
          }
        }
      }
      function d3_geom_voronoiConnectEdge(edge, extent) {
        var vb = edge.b;
        if (vb)
          return true;
        var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
        if (ry === ly) {
          if (fx < x0 || fx >= x1)
            return;
          if (lx > rx) {
            if (!va)
              va = {
                x: fx,
                y: y0
              };
            else if (va.y >= y1)
              return;
            vb = {
              x: fx,
              y: y1
            };
          } else {
            if (!va)
              va = {
                x: fx,
                y: y1
              };
            else if (va.y < y0)
              return;
            vb = {
              x: fx,
              y: y0
            };
          }
        } else {
          fm = (lx - rx) / (ry - ly);
          fb = fy - fm * fx;
          if (fm < -1 || fm > 1) {
            if (lx > rx) {
              if (!va)
                va = {
                  x: (y0 - fb) / fm,
                  y: y0
                };
              else if (va.y >= y1)
                return;
              vb = {
                x: (y1 - fb) / fm,
                y: y1
              };
            } else {
              if (!va)
                va = {
                  x: (y1 - fb) / fm,
                  y: y1
                };
              else if (va.y < y0)
                return;
              vb = {
                x: (y0 - fb) / fm,
                y: y0
              };
            }
          } else {
            if (ly < ry) {
              if (!va)
                va = {
                  x: x0,
                  y: fm * x0 + fb
                };
              else if (va.x >= x1)
                return;
              vb = {
                x: x1,
                y: fm * x1 + fb
              };
            } else {
              if (!va)
                va = {
                  x: x1,
                  y: fm * x1 + fb
                };
              else if (va.x < x0)
                return;
              vb = {
                x: x0,
                y: fm * x0 + fb
              };
            }
          }
        }
        edge.a = va;
        edge.b = vb;
        return true;
      }
      function d3_geom_voronoiEdge(lSite, rSite) {
        this.l = lSite;
        this.r = rSite;
        this.a = this.b = null;
      }
      function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, rSite);
        d3_geom_voronoiEdges.push(edge);
        if (va)
          d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
        if (vb)
          d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
        d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
        d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
        return edge;
      }
      function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, null);
        edge.a = va;
        edge.b = vb;
        d3_geom_voronoiEdges.push(edge);
        return edge;
      }
      function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
        if (!edge.a && !edge.b) {
          edge.a = vertex;
          edge.l = lSite;
          edge.r = rSite;
        } else if (edge.l === rSite) {
          edge.b = vertex;
        } else {
          edge.a = vertex;
        }
      }
      function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
        var va = edge.a, vb = edge.b;
        this.edge = edge;
        this.site = lSite;
        this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
      }
      d3_geom_voronoiHalfEdge.prototype = {
        start: function() {
          return this.edge.l === this.site ? this.edge.a : this.edge.b;
        },
        end: function() {
          return this.edge.l === this.site ? this.edge.b : this.edge.a;
        }
      };
      function d3_geom_voronoiRedBlackTree() {
        this._ = null;
      }
      function d3_geom_voronoiRedBlackNode(node) {
        node.U = node.C = node.L = node.R = node.P = node.N = null;
      }
      d3_geom_voronoiRedBlackTree.prototype = {
        insert: function(after, node) {
          var parent, grandpa, uncle;
          if (after) {
            node.P = after;
            node.N = after.N;
            if (after.N)
              after.N.P = node;
            after.N = node;
            if (after.R) {
              after = after.R;
              while (after.L)
                after = after.L;
              after.L = node;
            } else {
              after.R = node;
            }
            parent = after;
          } else if (this._) {
            after = d3_geom_voronoiRedBlackFirst(this._);
            node.P = null;
            node.N = after;
            after.P = after.L = node;
            parent = after;
          } else {
            node.P = node.N = null;
            this._ = node;
            parent = null;
          }
          node.L = node.R = null;
          node.U = parent;
          node.C = true;
          after = node;
          while (parent && parent.C) {
            grandpa = parent.U;
            if (parent === grandpa.L) {
              uncle = grandpa.R;
              if (uncle && uncle.C) {
                parent.C = uncle.C = false;
                grandpa.C = true;
                after = grandpa;
              } else {
                if (after === parent.R) {
                  d3_geom_voronoiRedBlackRotateLeft(this, parent);
                  after = parent;
                  parent = after.U;
                }
                parent.C = false;
                grandpa.C = true;
                d3_geom_voronoiRedBlackRotateRight(this, grandpa);
              }
            } else {
              uncle = grandpa.L;
              if (uncle && uncle.C) {
                parent.C = uncle.C = false;
                grandpa.C = true;
                after = grandpa;
              } else {
                if (after === parent.L) {
                  d3_geom_voronoiRedBlackRotateRight(this, parent);
                  after = parent;
                  parent = after.U;
                }
                parent.C = false;
                grandpa.C = true;
                d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
              }
            }
            parent = after.U;
          }
          this._.C = false;
        },
        remove: function(node) {
          if (node.N)
            node.N.P = node.P;
          if (node.P)
            node.P.N = node.N;
          node.N = node.P = null;
          var parent = node.U, sibling, left2 = node.L, right2 = node.R, next, red;
          if (!left2)
            next = right2;
          else if (!right2)
            next = left2;
          else
            next = d3_geom_voronoiRedBlackFirst(right2);
          if (parent) {
            if (parent.L === node)
              parent.L = next;
            else
              parent.R = next;
          } else {
            this._ = next;
          }
          if (left2 && right2) {
            red = next.C;
            next.C = node.C;
            next.L = left2;
            left2.U = next;
            if (next !== right2) {
              parent = next.U;
              next.U = node.U;
              node = next.R;
              parent.L = node;
              next.R = right2;
              right2.U = next;
            } else {
              next.U = parent;
              parent = next;
              node = next.R;
            }
          } else {
            red = node.C;
            node = next;
          }
          if (node)
            node.U = parent;
          if (red)
            return;
          if (node && node.C) {
            node.C = false;
            return;
          }
          do {
            if (node === this._)
              break;
            if (node === parent.L) {
              sibling = parent.R;
              if (sibling.C) {
                sibling.C = false;
                parent.C = true;
                d3_geom_voronoiRedBlackRotateLeft(this, parent);
                sibling = parent.R;
              }
              if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                if (!sibling.R || !sibling.R.C) {
                  sibling.L.C = false;
                  sibling.C = true;
                  d3_geom_voronoiRedBlackRotateRight(this, sibling);
                  sibling = parent.R;
                }
                sibling.C = parent.C;
                parent.C = sibling.R.C = false;
                d3_geom_voronoiRedBlackRotateLeft(this, parent);
                node = this._;
                break;
              }
            } else {
              sibling = parent.L;
              if (sibling.C) {
                sibling.C = false;
                parent.C = true;
                d3_geom_voronoiRedBlackRotateRight(this, parent);
                sibling = parent.L;
              }
              if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                if (!sibling.L || !sibling.L.C) {
                  sibling.R.C = false;
                  sibling.C = true;
                  d3_geom_voronoiRedBlackRotateLeft(this, sibling);
                  sibling = parent.L;
                }
                sibling.C = parent.C;
                parent.C = sibling.L.C = false;
                d3_geom_voronoiRedBlackRotateRight(this, parent);
                node = this._;
                break;
              }
            }
            sibling.C = true;
            node = parent;
            parent = parent.U;
          } while (!node.C);
          if (node)
            node.C = false;
        }
      };
      function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
        var p = node, q = node.R, parent = p.U;
        if (parent) {
          if (parent.L === p)
            parent.L = q;
          else
            parent.R = q;
        } else {
          tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.R = q.L;
        if (p.R)
          p.R.U = p;
        q.L = p;
      }
      function d3_geom_voronoiRedBlackRotateRight(tree, node) {
        var p = node, q = node.L, parent = p.U;
        if (parent) {
          if (parent.L === p)
            parent.L = q;
          else
            parent.R = q;
        } else {
          tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.L = q.R;
        if (p.L)
          p.L.U = p;
        q.R = p;
      }
      function d3_geom_voronoiRedBlackFirst(node) {
        while (node.L)
          node = node.L;
        return node;
      }
      function d3_geom_voronoi(sites, bbox) {
        var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
        d3_geom_voronoiEdges = [];
        d3_geom_voronoiCells = new Array(sites.length);
        d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
        d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
        while (true) {
          circle = d3_geom_voronoiFirstCircle;
          if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
            if (site.x !== x0 || site.y !== y0) {
              d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
              d3_geom_voronoiAddBeach(site);
              x0 = site.x, y0 = site.y;
            }
            site = sites.pop();
          } else if (circle) {
            d3_geom_voronoiRemoveBeach(circle.arc);
          } else {
            break;
          }
        }
        if (bbox)
          d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
        var diagram = {
          cells: d3_geom_voronoiCells,
          edges: d3_geom_voronoiEdges
        };
        d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
        return diagram;
      }
      function d3_geom_voronoiVertexOrder(a2, b) {
        return b.y - a2.y || b.x - a2.x;
      }
      d32.geom.voronoi = function(points) {
        var x2 = d3_geom_pointX, y2 = d3_geom_pointY, fx = x2, fy = y2, clipExtent = d3_geom_voronoiClipExtent;
        if (points)
          return voronoi(points);
        function voronoi(data) {
          var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
          d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
            var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
              var s2 = e.start();
              return [s2.x, s2.y];
            }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [[x0, y1], [x1, y1], [x1, y0], [x0, y0]] : [];
            polygon.point = data[i];
          });
          return polygons;
        }
        function sites(data) {
          return data.map(function(d, i) {
            return {
              x: Math.round(fx(d, i) / ε) * ε,
              y: Math.round(fy(d, i) / ε) * ε,
              i
            };
          });
        }
        voronoi.links = function(data) {
          return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
            return edge.l && edge.r;
          }).map(function(edge) {
            return {
              source: data[edge.l.i],
              target: data[edge.r.i]
            };
          });
        };
        voronoi.triangles = function(data) {
          var triangles = [];
          d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
            var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
            while (++j < m) {
              e0 = e1;
              s0 = s1;
              e1 = edges[j].edge;
              s1 = e1.l === site ? e1.r : e1.l;
              if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
                triangles.push([data[i], data[s0.i], data[s1.i]]);
              }
            }
          });
          return triangles;
        };
        voronoi.x = function(_) {
          return arguments.length ? (fx = d3_functor(x2 = _), voronoi) : x2;
        };
        voronoi.y = function(_) {
          return arguments.length ? (fy = d3_functor(y2 = _), voronoi) : y2;
        };
        voronoi.clipExtent = function(_) {
          if (!arguments.length)
            return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
          clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
          return voronoi;
        };
        voronoi.size = function(_) {
          if (!arguments.length)
            return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
          return voronoi.clipExtent(_ && [[0, 0], _]);
        };
        return voronoi;
      };
      var d3_geom_voronoiClipExtent = [[-1e6, -1e6], [1e6, 1e6]];
      function d3_geom_voronoiTriangleArea(a2, b, c2) {
        return (a2.x - c2.x) * (b.y - a2.y) - (a2.x - b.x) * (c2.y - a2.y);
      }
      d32.geom.delaunay = function(vertices) {
        return d32.geom.voronoi().triangles(vertices);
      };
      d32.geom.quadtree = function(points, x1, y1, x2, y2) {
        var x3 = d3_geom_pointX, y3 = d3_geom_pointY, compat;
        if (compat = arguments.length) {
          x3 = d3_geom_quadtreeCompatX;
          y3 = d3_geom_quadtreeCompatY;
          if (compat === 3) {
            y2 = y1;
            x2 = x1;
            y1 = x1 = 0;
          }
          return quadtree(points);
        }
        function quadtree(data) {
          var d, fx = d3_functor(x3), fy = d3_functor(y3), xs, ys, i, n, x1_, y1_, x2_, y2_;
          if (x1 != null) {
            x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
          } else {
            x2_ = y2_ = -(x1_ = y1_ = Infinity);
            xs = [], ys = [];
            n = data.length;
            if (compat)
              for (i = 0; i < n; ++i) {
                d = data[i];
                if (d.x < x1_)
                  x1_ = d.x;
                if (d.y < y1_)
                  y1_ = d.y;
                if (d.x > x2_)
                  x2_ = d.x;
                if (d.y > y2_)
                  y2_ = d.y;
                xs.push(d.x);
                ys.push(d.y);
              }
            else
              for (i = 0; i < n; ++i) {
                var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
                if (x_ < x1_)
                  x1_ = x_;
                if (y_ < y1_)
                  y1_ = y_;
                if (x_ > x2_)
                  x2_ = x_;
                if (y_ > y2_)
                  y2_ = y_;
                xs.push(x_);
                ys.push(y_);
              }
          }
          var dx = x2_ - x1_, dy = y2_ - y1_;
          if (dx > dy)
            y2_ = y1_ + dx;
          else
            x2_ = x1_ + dy;
          function insert2(n2, d2, x4, y4, x12, y12, x22, y22) {
            if (isNaN(x4) || isNaN(y4))
              return;
            if (n2.leaf) {
              var nx = n2.x, ny = n2.y;
              if (nx != null) {
                if (abs(nx - x4) + abs(ny - y4) < 0.01) {
                  insertChild(n2, d2, x4, y4, x12, y12, x22, y22);
                } else {
                  var nPoint = n2.point;
                  n2.x = n2.y = n2.point = null;
                  insertChild(n2, nPoint, nx, ny, x12, y12, x22, y22);
                  insertChild(n2, d2, x4, y4, x12, y12, x22, y22);
                }
              } else {
                n2.x = x4, n2.y = y4, n2.point = d2;
              }
            } else {
              insertChild(n2, d2, x4, y4, x12, y12, x22, y22);
            }
          }
          function insertChild(n2, d2, x4, y4, x12, y12, x22, y22) {
            var xm = (x12 + x22) * 0.5, ym = (y12 + y22) * 0.5, right2 = x4 >= xm, below = y4 >= ym, i2 = below << 1 | right2;
            n2.leaf = false;
            n2 = n2.nodes[i2] || (n2.nodes[i2] = d3_geom_quadtreeNode());
            if (right2)
              x12 = xm;
            else
              x22 = xm;
            if (below)
              y12 = ym;
            else
              y22 = ym;
            insert2(n2, d2, x4, y4, x12, y12, x22, y22);
          }
          var root2 = d3_geom_quadtreeNode();
          root2.add = function(d2) {
            insert2(root2, d2, +fx(d2, ++i), +fy(d2, i), x1_, y1_, x2_, y2_);
          };
          root2.visit = function(f) {
            d3_geom_quadtreeVisit(f, root2, x1_, y1_, x2_, y2_);
          };
          root2.find = function(point6) {
            return d3_geom_quadtreeFind(root2, point6[0], point6[1], x1_, y1_, x2_, y2_);
          };
          i = -1;
          if (x1 == null) {
            while (++i < n) {
              insert2(root2, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
            }
            --i;
          } else
            data.forEach(root2.add);
          xs = ys = data = d = null;
          return root2;
        }
        quadtree.x = function(_) {
          return arguments.length ? (x3 = _, quadtree) : x3;
        };
        quadtree.y = function(_) {
          return arguments.length ? (y3 = _, quadtree) : y3;
        };
        quadtree.extent = function(_) {
          if (!arguments.length)
            return x1 == null ? null : [[x1, y1], [x2, y2]];
          if (_ == null)
            x1 = y1 = x2 = y2 = null;
          else
            x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
          return quadtree;
        };
        quadtree.size = function(_) {
          if (!arguments.length)
            return x1 == null ? null : [x2 - x1, y2 - y1];
          if (_ == null)
            x1 = y1 = x2 = y2 = null;
          else
            x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
          return quadtree;
        };
        return quadtree;
      };
      function d3_geom_quadtreeCompatX(d) {
        return d.x;
      }
      function d3_geom_quadtreeCompatY(d) {
        return d.y;
      }
      function d3_geom_quadtreeNode() {
        return {
          leaf: true,
          nodes: [],
          point: null,
          x: null,
          y: null
        };
      }
      function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
        if (!f(node, x1, y1, x2, y2)) {
          var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, children = node.nodes;
          if (children[0])
            d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
          if (children[1])
            d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
          if (children[2])
            d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
          if (children[3])
            d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
        }
      }
      function d3_geom_quadtreeFind(root2, x2, y2, x0, y0, x3, y3) {
        var minDistance2 = Infinity, closestPoint;
        (function find(node, x1, y1, x22, y22) {
          if (x1 > x3 || y1 > y3 || x22 < x0 || y22 < y0)
            return;
          if (point6 = node.point) {
            var point6, dx = x2 - node.x, dy = y2 - node.y, distance2 = dx * dx + dy * dy;
            if (distance2 < minDistance2) {
              var distance = Math.sqrt(minDistance2 = distance2);
              x0 = x2 - distance, y0 = y2 - distance;
              x3 = x2 + distance, y3 = y2 + distance;
              closestPoint = point6;
            }
          }
          var children = node.nodes, xm = (x1 + x22) * 0.5, ym = (y1 + y22) * 0.5, right2 = x2 >= xm, below = y2 >= ym;
          for (var i = below << 1 | right2, j = i + 4; i < j; ++i) {
            if (node = children[i & 3])
              switch (i & 3) {
                case 0:
                  find(node, x1, y1, xm, ym);
                  break;
                case 1:
                  find(node, xm, y1, x22, ym);
                  break;
                case 2:
                  find(node, x1, ym, xm, y22);
                  break;
                case 3:
                  find(node, xm, ym, x22, y22);
                  break;
              }
          }
        })(root2, x0, y0, x3, y3);
        return closestPoint;
      }
      d32.interpolateRgb = d3_interpolateRgb;
      function d3_interpolateRgb(a2, b) {
        a2 = d32.rgb(a2);
        b = d32.rgb(b);
        var ar = a2.r, ag = a2.g, ab = a2.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
        return function(t) {
          return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
        };
      }
      d32.interpolateObject = d3_interpolateObject;
      function d3_interpolateObject(a2, b) {
        var i = {}, c2 = {}, k2;
        for (k2 in a2) {
          if (k2 in b) {
            i[k2] = d3_interpolate(a2[k2], b[k2]);
          } else {
            c2[k2] = a2[k2];
          }
        }
        for (k2 in b) {
          if (!(k2 in a2)) {
            c2[k2] = b[k2];
          }
        }
        return function(t) {
          for (k2 in i)
            c2[k2] = i[k2](t);
          return c2;
        };
      }
      d32.interpolateNumber = d3_interpolateNumber;
      function d3_interpolateNumber(a2, b) {
        a2 = +a2, b = +b;
        return function(t) {
          return a2 * (1 - t) + b * t;
        };
      }
      d32.interpolateString = d3_interpolateString;
      function d3_interpolateString(a2, b) {
        var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
        a2 = a2 + "", b = b + "";
        while ((am = d3_interpolate_numberA.exec(a2)) && (bm = d3_interpolate_numberB.exec(b))) {
          if ((bs = bm.index) > bi) {
            bs = b.slice(bi, bs);
            if (s2[i])
              s2[i] += bs;
            else
              s2[++i] = bs;
          }
          if ((am = am[0]) === (bm = bm[0])) {
            if (s2[i])
              s2[i] += bm;
            else
              s2[++i] = bm;
          } else {
            s2[++i] = null;
            q.push({
              i,
              x: d3_interpolateNumber(am, bm)
            });
          }
          bi = d3_interpolate_numberB.lastIndex;
        }
        if (bi < b.length) {
          bs = b.slice(bi);
          if (s2[i])
            s2[i] += bs;
          else
            s2[++i] = bs;
        }
        return s2.length < 2 ? q[0] ? (b = q[0].x, function(t) {
          return b(t) + "";
        }) : function() {
          return b;
        } : (b = q.length, function(t) {
          for (var i2 = 0, o; i2 < b; ++i2)
            s2[(o = q[i2]).i] = o.x(t);
          return s2.join("");
        });
      }
      var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
      d32.interpolate = d3_interpolate;
      function d3_interpolate(a2, b) {
        var i = d32.interpolators.length, f;
        while (--i >= 0 && !(f = d32.interpolators[i](a2, b)))
          ;
        return f;
      }
      d32.interpolators = [function(a2, b) {
        var t = typeof b;
        return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a2, b);
      }];
      d32.interpolateArray = d3_interpolateArray;
      function d3_interpolateArray(a2, b) {
        var x2 = [], c2 = [], na = a2.length, nb = b.length, n0 = Math.min(a2.length, b.length), i;
        for (i = 0; i < n0; ++i)
          x2.push(d3_interpolate(a2[i], b[i]));
        for (; i < na; ++i)
          c2[i] = a2[i];
        for (; i < nb; ++i)
          c2[i] = b[i];
        return function(t) {
          for (i = 0; i < n0; ++i)
            c2[i] = x2[i](t);
          return c2;
        };
      }
      var d3_ease_default = function() {
        return d3_identity;
      };
      var d3_ease = d32.map({
        linear: d3_ease_default,
        poly: d3_ease_poly,
        quad: function() {
          return d3_ease_quad;
        },
        cubic: function() {
          return d3_ease_cubic;
        },
        sin: function() {
          return d3_ease_sin;
        },
        exp: function() {
          return d3_ease_exp;
        },
        circle: function() {
          return d3_ease_circle;
        },
        elastic: d3_ease_elastic,
        back: d3_ease_back,
        bounce: function() {
          return d3_ease_bounce;
        }
      });
      var d3_ease_mode = d32.map({
        "in": d3_identity,
        out: d3_ease_reverse,
        "in-out": d3_ease_reflect,
        "out-in": function(f) {
          return d3_ease_reflect(d3_ease_reverse(f));
        }
      });
      d32.ease = function(name) {
        var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
        t = d3_ease.get(t) || d3_ease_default;
        m = d3_ease_mode.get(m) || d3_identity;
        return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
      };
      function d3_ease_clamp(f) {
        return function(t) {
          return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
        };
      }
      function d3_ease_reverse(f) {
        return function(t) {
          return 1 - f(1 - t);
        };
      }
      function d3_ease_reflect(f) {
        return function(t) {
          return 0.5 * (t < 0.5 ? f(2 * t) : 2 - f(2 - 2 * t));
        };
      }
      function d3_ease_quad(t) {
        return t * t;
      }
      function d3_ease_cubic(t) {
        return t * t * t;
      }
      function d3_ease_cubicInOut(t) {
        if (t <= 0)
          return 0;
        if (t >= 1)
          return 1;
        var t22 = t * t, t32 = t22 * t;
        return 4 * (t < 0.5 ? t32 : 3 * (t - t22) + t32 - 0.75);
      }
      function d3_ease_poly(e) {
        return function(t) {
          return Math.pow(t, e);
        };
      }
      function d3_ease_sin(t) {
        return 1 - Math.cos(t * halfπ);
      }
      function d3_ease_exp(t) {
        return Math.pow(2, 10 * (t - 1));
      }
      function d3_ease_circle(t) {
        return 1 - Math.sqrt(1 - t * t);
      }
      function d3_ease_elastic(a2, p) {
        var s2;
        if (arguments.length < 2)
          p = 0.45;
        if (arguments.length)
          s2 = p / τ * Math.asin(1 / a2);
        else
          a2 = 1, s2 = p / 4;
        return function(t) {
          return 1 + a2 * Math.pow(2, -10 * t) * Math.sin((t - s2) * τ / p);
        };
      }
      function d3_ease_back(s2) {
        if (!s2)
          s2 = 1.70158;
        return function(t) {
          return t * t * ((s2 + 1) * t - s2);
        };
      }
      function d3_ease_bounce(t) {
        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
      }
      d32.interpolateHcl = d3_interpolateHcl;
      function d3_interpolateHcl(a2, b) {
        a2 = d32.hcl(a2);
        b = d32.hcl(b);
        var ah = a2.h, ac = a2.c, al = a2.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
        if (isNaN(bc))
          bc = 0, ac = isNaN(ac) ? b.c : ac;
        if (isNaN(bh))
          bh = 0, ah = isNaN(ah) ? b.h : ah;
        else if (bh > 180)
          bh -= 360;
        else if (bh < -180)
          bh += 360;
        return function(t) {
          return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
        };
      }
      d32.interpolateHsl = d3_interpolateHsl;
      function d3_interpolateHsl(a2, b) {
        a2 = d32.hsl(a2);
        b = d32.hsl(b);
        var ah = a2.h, as = a2.s, al = a2.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
        if (isNaN(bs))
          bs = 0, as = isNaN(as) ? b.s : as;
        if (isNaN(bh))
          bh = 0, ah = isNaN(ah) ? b.h : ah;
        else if (bh > 180)
          bh -= 360;
        else if (bh < -180)
          bh += 360;
        return function(t) {
          return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
        };
      }
      d32.interpolateLab = d3_interpolateLab;
      function d3_interpolateLab(a2, b) {
        a2 = d32.lab(a2);
        b = d32.lab(b);
        var al = a2.l, aa = a2.a, ab = a2.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
        return function(t) {
          return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
        };
      }
      d32.interpolateRound = d3_interpolateRound;
      function d3_interpolateRound(a2, b) {
        b -= a2;
        return function(t) {
          return Math.round(a2 + b * t);
        };
      }
      d32.transform = function(string) {
        var g = d3_document.createElementNS(d32.ns.prefix.svg, "g");
        return (d32.transform = function(string2) {
          if (string2 != null) {
            g.setAttribute("transform", string2);
            var t = g.transform.baseVal.consolidate();
          }
          return new d3_transform(t ? t.matrix : d3_transformIdentity);
        })(string);
      };
      function d3_transform(m) {
        var r0 = [m.a, m.b], r1 = [m.c, m.d], kx2 = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky2 = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
        if (r0[0] * r1[1] < r1[0] * r0[1]) {
          r0[0] *= -1;
          r0[1] *= -1;
          kx2 *= -1;
          kz *= -1;
        }
        this.rotate = (kx2 ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
        this.translate = [m.e, m.f];
        this.scale = [kx2, ky2];
        this.skew = ky2 ? Math.atan2(kz, ky2) * d3_degrees : 0;
      }
      d3_transform.prototype.toString = function() {
        return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
      };
      function d3_transformDot(a2, b) {
        return a2[0] * b[0] + a2[1] * b[1];
      }
      function d3_transformNormalize(a2) {
        var k2 = Math.sqrt(d3_transformDot(a2, a2));
        if (k2) {
          a2[0] /= k2;
          a2[1] /= k2;
        }
        return k2;
      }
      function d3_transformCombine(a2, b, k2) {
        a2[0] += k2 * b[0];
        a2[1] += k2 * b[1];
        return a2;
      }
      var d3_transformIdentity = {
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        e: 0,
        f: 0
      };
      d32.interpolateTransform = d3_interpolateTransform;
      function d3_interpolateTransformPop(s2) {
        return s2.length ? s2.pop() + "," : "";
      }
      function d3_interpolateTranslate(ta, tb, s2, q) {
        if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
          var i = s2.push("translate(", null, ",", null, ")");
          q.push({
            i: i - 4,
            x: d3_interpolateNumber(ta[0], tb[0])
          }, {
            i: i - 2,
            x: d3_interpolateNumber(ta[1], tb[1])
          });
        } else if (tb[0] || tb[1]) {
          s2.push("translate(" + tb + ")");
        }
      }
      function d3_interpolateRotate(ra, rb, s2, q) {
        if (ra !== rb) {
          if (ra - rb > 180)
            rb += 360;
          else if (rb - ra > 180)
            ra += 360;
          q.push({
            i: s2.push(d3_interpolateTransformPop(s2) + "rotate(", null, ")") - 2,
            x: d3_interpolateNumber(ra, rb)
          });
        } else if (rb) {
          s2.push(d3_interpolateTransformPop(s2) + "rotate(" + rb + ")");
        }
      }
      function d3_interpolateSkew(wa, wb, s2, q) {
        if (wa !== wb) {
          q.push({
            i: s2.push(d3_interpolateTransformPop(s2) + "skewX(", null, ")") - 2,
            x: d3_interpolateNumber(wa, wb)
          });
        } else if (wb) {
          s2.push(d3_interpolateTransformPop(s2) + "skewX(" + wb + ")");
        }
      }
      function d3_interpolateScale(ka2, kb, s2, q) {
        if (ka2[0] !== kb[0] || ka2[1] !== kb[1]) {
          var i = s2.push(d3_interpolateTransformPop(s2) + "scale(", null, ",", null, ")");
          q.push({
            i: i - 4,
            x: d3_interpolateNumber(ka2[0], kb[0])
          }, {
            i: i - 2,
            x: d3_interpolateNumber(ka2[1], kb[1])
          });
        } else if (kb[0] !== 1 || kb[1] !== 1) {
          s2.push(d3_interpolateTransformPop(s2) + "scale(" + kb + ")");
        }
      }
      function d3_interpolateTransform(a2, b) {
        var s2 = [], q = [];
        a2 = d32.transform(a2), b = d32.transform(b);
        d3_interpolateTranslate(a2.translate, b.translate, s2, q);
        d3_interpolateRotate(a2.rotate, b.rotate, s2, q);
        d3_interpolateSkew(a2.skew, b.skew, s2, q);
        d3_interpolateScale(a2.scale, b.scale, s2, q);
        a2 = b = null;
        return function(t) {
          var i = -1, n = q.length, o;
          while (++i < n)
            s2[(o = q[i]).i] = o.x(t);
          return s2.join("");
        };
      }
      function d3_uninterpolateNumber(a2, b) {
        b = (b -= a2 = +a2) || 1 / b;
        return function(x2) {
          return (x2 - a2) / b;
        };
      }
      function d3_uninterpolateClamp(a2, b) {
        b = (b -= a2 = +a2) || 1 / b;
        return function(x2) {
          return Math.max(0, Math.min(1, (x2 - a2) / b));
        };
      }
      d32.layout = {};
      d32.layout.bundle = function() {
        return function(links) {
          var paths = [], i = -1, n = links.length;
          while (++i < n)
            paths.push(d3_layout_bundlePath(links[i]));
          return paths;
        };
      };
      function d3_layout_bundlePath(link) {
        var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [start];
        while (start !== lca) {
          start = start.parent;
          points.push(start);
        }
        var k2 = points.length;
        while (end !== lca) {
          points.splice(k2, 0, end);
          end = end.parent;
        }
        return points;
      }
      function d3_layout_bundleAncestors(node) {
        var ancestors = [], parent = node.parent;
        while (parent != null) {
          ancestors.push(node);
          node = parent;
          parent = parent.parent;
        }
        ancestors.push(node);
        return ancestors;
      }
      function d3_layout_bundleLeastCommonAncestor(a2, b) {
        if (a2 === b)
          return a2;
        var aNodes = d3_layout_bundleAncestors(a2), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
        while (aNode === bNode) {
          sharedNode = aNode;
          aNode = aNodes.pop();
          bNode = bNodes.pop();
        }
        return sharedNode;
      }
      d32.layout.chord = function() {
        var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
        function relayout() {
          var subgroups = {}, groupSums = [], groupIndex = d32.range(n), subgroupIndex = [], k2, x2, x0, i, j;
          chords = [];
          groups = [];
          k2 = 0, i = -1;
          while (++i < n) {
            x2 = 0, j = -1;
            while (++j < n) {
              x2 += matrix[i][j];
            }
            groupSums.push(x2);
            subgroupIndex.push(d32.range(n));
            k2 += x2;
          }
          if (sortGroups) {
            groupIndex.sort(function(a2, b) {
              return sortGroups(groupSums[a2], groupSums[b]);
            });
          }
          if (sortSubgroups) {
            subgroupIndex.forEach(function(d, i2) {
              d.sort(function(a2, b) {
                return sortSubgroups(matrix[i2][a2], matrix[i2][b]);
              });
            });
          }
          k2 = (τ - padding * n) / k2;
          x2 = 0, i = -1;
          while (++i < n) {
            x0 = x2, j = -1;
            while (++j < n) {
              var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x2, a1 = x2 += v * k2;
              subgroups[di + "-" + dj] = {
                index: di,
                subindex: dj,
                startAngle: a0,
                endAngle: a1,
                value: v
              };
            }
            groups[di] = {
              index: di,
              startAngle: x0,
              endAngle: x2,
              value: groupSums[di]
            };
            x2 += padding;
          }
          i = -1;
          while (++i < n) {
            j = i - 1;
            while (++j < n) {
              var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
              if (source.value || target.value) {
                chords.push(source.value < target.value ? {
                  source: target,
                  target: source
                } : {
                  source,
                  target
                });
              }
            }
          }
          if (sortChords)
            resort();
        }
        function resort() {
          chords.sort(function(a2, b) {
            return sortChords((a2.source.value + a2.target.value) / 2, (b.source.value + b.target.value) / 2);
          });
        }
        chord.matrix = function(x2) {
          if (!arguments.length)
            return matrix;
          n = (matrix = x2) && matrix.length;
          chords = groups = null;
          return chord;
        };
        chord.padding = function(x2) {
          if (!arguments.length)
            return padding;
          padding = x2;
          chords = groups = null;
          return chord;
        };
        chord.sortGroups = function(x2) {
          if (!arguments.length)
            return sortGroups;
          sortGroups = x2;
          chords = groups = null;
          return chord;
        };
        chord.sortSubgroups = function(x2) {
          if (!arguments.length)
            return sortSubgroups;
          sortSubgroups = x2;
          chords = null;
          return chord;
        };
        chord.sortChords = function(x2) {
          if (!arguments.length)
            return sortChords;
          sortChords = x2;
          if (chords)
            resort();
          return chord;
        };
        chord.chords = function() {
          if (!chords)
            relayout();
          return chords;
        };
        chord.groups = function() {
          if (!groups)
            relayout();
          return groups;
        };
        return chord;
      };
      d32.layout.force = function() {
        var force = {}, event2 = d32.dispatch("start", "tick", "end"), timer, size = [1, 1], drag, alpha, friction = 0.9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = 0.1, theta2 = 0.64, nodes = [], links = [], distances, strengths, charges;
        function repulse(node) {
          return function(quad, x1, _, x2) {
            if (quad.point !== node) {
              var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
              if (dw * dw / theta2 < dn) {
                if (dn < chargeDistance2) {
                  var k2 = quad.charge / dn;
                  node.px -= dx * k2;
                  node.py -= dy * k2;
                }
                return true;
              }
              if (quad.point && dn && dn < chargeDistance2) {
                var k2 = quad.pointCharge / dn;
                node.px -= dx * k2;
                node.py -= dy * k2;
              }
            }
            return !quad.charge;
          };
        }
        force.tick = function() {
          if ((alpha *= 0.99) < 5e-3) {
            timer = null;
            event2.end({
              type: "end",
              alpha: alpha = 0
            });
            return true;
          }
          var n = nodes.length, m = links.length, q, i, o, s2, t, l, k2, x2, y2;
          for (i = 0; i < m; ++i) {
            o = links[i];
            s2 = o.source;
            t = o.target;
            x2 = t.x - s2.x;
            y2 = t.y - s2.y;
            if (l = x2 * x2 + y2 * y2) {
              l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
              x2 *= l;
              y2 *= l;
              t.x -= x2 * (k2 = s2.weight + t.weight ? s2.weight / (s2.weight + t.weight) : 0.5);
              t.y -= y2 * k2;
              s2.x += x2 * (k2 = 1 - k2);
              s2.y += y2 * k2;
            }
          }
          if (k2 = alpha * gravity) {
            x2 = size[0] / 2;
            y2 = size[1] / 2;
            i = -1;
            if (k2)
              while (++i < n) {
                o = nodes[i];
                o.x += (x2 - o.x) * k2;
                o.y += (y2 - o.y) * k2;
              }
          }
          if (charge) {
            d3_layout_forceAccumulate(q = d32.geom.quadtree(nodes), alpha, charges);
            i = -1;
            while (++i < n) {
              if (!(o = nodes[i]).fixed) {
                q.visit(repulse(o));
              }
            }
          }
          i = -1;
          while (++i < n) {
            o = nodes[i];
            if (o.fixed) {
              o.x = o.px;
              o.y = o.py;
            } else {
              o.x -= (o.px - (o.px = o.x)) * friction;
              o.y -= (o.py - (o.py = o.y)) * friction;
            }
          }
          event2.tick({
            type: "tick",
            alpha
          });
        };
        force.nodes = function(x2) {
          if (!arguments.length)
            return nodes;
          nodes = x2;
          return force;
        };
        force.links = function(x2) {
          if (!arguments.length)
            return links;
          links = x2;
          return force;
        };
        force.size = function(x2) {
          if (!arguments.length)
            return size;
          size = x2;
          return force;
        };
        force.linkDistance = function(x2) {
          if (!arguments.length)
            return linkDistance;
          linkDistance = typeof x2 === "function" ? x2 : +x2;
          return force;
        };
        force.distance = force.linkDistance;
        force.linkStrength = function(x2) {
          if (!arguments.length)
            return linkStrength;
          linkStrength = typeof x2 === "function" ? x2 : +x2;
          return force;
        };
        force.friction = function(x2) {
          if (!arguments.length)
            return friction;
          friction = +x2;
          return force;
        };
        force.charge = function(x2) {
          if (!arguments.length)
            return charge;
          charge = typeof x2 === "function" ? x2 : +x2;
          return force;
        };
        force.chargeDistance = function(x2) {
          if (!arguments.length)
            return Math.sqrt(chargeDistance2);
          chargeDistance2 = x2 * x2;
          return force;
        };
        force.gravity = function(x2) {
          if (!arguments.length)
            return gravity;
          gravity = +x2;
          return force;
        };
        force.theta = function(x2) {
          if (!arguments.length)
            return Math.sqrt(theta2);
          theta2 = x2 * x2;
          return force;
        };
        force.alpha = function(x2) {
          if (!arguments.length)
            return alpha;
          x2 = +x2;
          if (alpha) {
            if (x2 > 0) {
              alpha = x2;
            } else {
              timer.c = null, timer.t = NaN, timer = null;
              event2.end({
                type: "end",
                alpha: alpha = 0
              });
            }
          } else if (x2 > 0) {
            event2.start({
              type: "start",
              alpha: alpha = x2
            });
            timer = d3_timer(force.tick);
          }
          return force;
        };
        force.start = function() {
          var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
          for (i = 0; i < n; ++i) {
            (o = nodes[i]).index = i;
            o.weight = 0;
          }
          for (i = 0; i < m; ++i) {
            o = links[i];
            if (typeof o.source == "number")
              o.source = nodes[o.source];
            if (typeof o.target == "number")
              o.target = nodes[o.target];
            ++o.source.weight;
            ++o.target.weight;
          }
          for (i = 0; i < n; ++i) {
            o = nodes[i];
            if (isNaN(o.x))
              o.x = position("x", w);
            if (isNaN(o.y))
              o.y = position("y", h);
            if (isNaN(o.px))
              o.px = o.x;
            if (isNaN(o.py))
              o.py = o.y;
          }
          distances = [];
          if (typeof linkDistance === "function")
            for (i = 0; i < m; ++i)
              distances[i] = +linkDistance.call(this, links[i], i);
          else
            for (i = 0; i < m; ++i)
              distances[i] = linkDistance;
          strengths = [];
          if (typeof linkStrength === "function")
            for (i = 0; i < m; ++i)
              strengths[i] = +linkStrength.call(this, links[i], i);
          else
            for (i = 0; i < m; ++i)
              strengths[i] = linkStrength;
          charges = [];
          if (typeof charge === "function")
            for (i = 0; i < n; ++i)
              charges[i] = +charge.call(this, nodes[i], i);
          else
            for (i = 0; i < n; ++i)
              charges[i] = charge;
          function position(dimension, size2) {
            if (!neighbors) {
              neighbors = new Array(n);
              for (j = 0; j < n; ++j) {
                neighbors[j] = [];
              }
              for (j = 0; j < m; ++j) {
                var o2 = links[j];
                neighbors[o2.source.index].push(o2.target);
                neighbors[o2.target.index].push(o2.source);
              }
            }
            var candidates = neighbors[i], j = -1, l = candidates.length, x2;
            while (++j < l)
              if (!isNaN(x2 = candidates[j][dimension]))
                return x2;
            return Math.random() * size2;
          }
          return force.resume();
        };
        force.resume = function() {
          return force.alpha(0.1);
        };
        force.stop = function() {
          return force.alpha(0);
        };
        force.drag = function() {
          if (!drag)
            drag = d32.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
          if (!arguments.length)
            return drag;
          this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
        };
        function dragmove(d) {
          d.px = d32.event.x, d.py = d32.event.y;
          force.resume();
        }
        return d32.rebind(force, event2, "on");
      };
      function d3_layout_forceDragstart(d) {
        d.fixed |= 2;
      }
      function d3_layout_forceDragend(d) {
        d.fixed &= ~6;
      }
      function d3_layout_forceMouseover(d) {
        d.fixed |= 4;
        d.px = d.x, d.py = d.y;
      }
      function d3_layout_forceMouseout(d) {
        d.fixed &= ~4;
      }
      function d3_layout_forceAccumulate(quad, alpha, charges) {
        var cx = 0, cy = 0;
        quad.charge = 0;
        if (!quad.leaf) {
          var nodes = quad.nodes, n = nodes.length, i = -1, c2;
          while (++i < n) {
            c2 = nodes[i];
            if (c2 == null)
              continue;
            d3_layout_forceAccumulate(c2, alpha, charges);
            quad.charge += c2.charge;
            cx += c2.charge * c2.cx;
            cy += c2.charge * c2.cy;
          }
        }
        if (quad.point) {
          if (!quad.leaf) {
            quad.point.x += Math.random() - 0.5;
            quad.point.y += Math.random() - 0.5;
          }
          var k2 = alpha * charges[quad.point.index];
          quad.charge += quad.pointCharge = k2;
          cx += k2 * quad.point.x;
          cy += k2 * quad.point.y;
        }
        quad.cx = cx / quad.charge;
        quad.cy = cy / quad.charge;
      }
      var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
      d32.layout.hierarchy = function() {
        var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
        function hierarchy(root2) {
          var stack = [root2], nodes = [], node;
          root2.depth = 0;
          while ((node = stack.pop()) != null) {
            nodes.push(node);
            if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
              var n, childs, child;
              while (--n >= 0) {
                stack.push(child = childs[n]);
                child.parent = node;
                child.depth = node.depth + 1;
              }
              if (value)
                node.value = 0;
              node.children = childs;
            } else {
              if (value)
                node.value = +value.call(hierarchy, node, node.depth) || 0;
              delete node.children;
            }
          }
          d3_layout_hierarchyVisitAfter(root2, function(node2) {
            var childs2, parent;
            if (sort && (childs2 = node2.children))
              childs2.sort(sort);
            if (value && (parent = node2.parent))
              parent.value += node2.value;
          });
          return nodes;
        }
        hierarchy.sort = function(x2) {
          if (!arguments.length)
            return sort;
          sort = x2;
          return hierarchy;
        };
        hierarchy.children = function(x2) {
          if (!arguments.length)
            return children;
          children = x2;
          return hierarchy;
        };
        hierarchy.value = function(x2) {
          if (!arguments.length)
            return value;
          value = x2;
          return hierarchy;
        };
        hierarchy.revalue = function(root2) {
          if (value) {
            d3_layout_hierarchyVisitBefore(root2, function(node) {
              if (node.children)
                node.value = 0;
            });
            d3_layout_hierarchyVisitAfter(root2, function(node) {
              var parent;
              if (!node.children)
                node.value = +value.call(hierarchy, node, node.depth) || 0;
              if (parent = node.parent)
                parent.value += node.value;
            });
          }
          return root2;
        };
        return hierarchy;
      };
      function d3_layout_hierarchyRebind(object, hierarchy) {
        d32.rebind(object, hierarchy, "sort", "children", "value");
        object.nodes = object;
        object.links = d3_layout_hierarchyLinks;
        return object;
      }
      function d3_layout_hierarchyVisitBefore(node, callback) {
        var nodes = [node];
        while ((node = nodes.pop()) != null) {
          callback(node);
          if ((children = node.children) && (n = children.length)) {
            var n, children;
            while (--n >= 0)
              nodes.push(children[n]);
          }
        }
      }
      function d3_layout_hierarchyVisitAfter(node, callback) {
        var nodes = [node], nodes2 = [];
        while ((node = nodes.pop()) != null) {
          nodes2.push(node);
          if ((children = node.children) && (n = children.length)) {
            var i = -1, n, children;
            while (++i < n)
              nodes.push(children[i]);
          }
        }
        while ((node = nodes2.pop()) != null) {
          callback(node);
        }
      }
      function d3_layout_hierarchyChildren(d) {
        return d.children;
      }
      function d3_layout_hierarchyValue(d) {
        return d.value;
      }
      function d3_layout_hierarchySort(a2, b) {
        return b.value - a2.value;
      }
      function d3_layout_hierarchyLinks(nodes) {
        return d32.merge(nodes.map(function(parent) {
          return (parent.children || []).map(function(child) {
            return {
              source: parent,
              target: child
            };
          });
        }));
      }
      d32.layout.partition = function() {
        var hierarchy = d32.layout.hierarchy(), size = [1, 1];
        function position(node, x2, dx, dy) {
          var children = node.children;
          node.x = x2;
          node.y = node.depth * dy;
          node.dx = dx;
          node.dy = dy;
          if (children && (n = children.length)) {
            var i = -1, n, c2, d;
            dx = node.value ? dx / node.value : 0;
            while (++i < n) {
              position(c2 = children[i], x2, d = c2.value * dx, dy);
              x2 += d;
            }
          }
        }
        function depth(node) {
          var children = node.children, d = 0;
          if (children && (n = children.length)) {
            var i = -1, n;
            while (++i < n)
              d = Math.max(d, depth(children[i]));
          }
          return 1 + d;
        }
        function partition(d, i) {
          var nodes = hierarchy.call(this, d, i);
          position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
          return nodes;
        }
        partition.size = function(x2) {
          if (!arguments.length)
            return size;
          size = x2;
          return partition;
        };
        return d3_layout_hierarchyRebind(partition, hierarchy);
      };
      d32.layout.pie = function() {
        var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
        function pie(data) {
          var n = data.length, values = data.map(function(d, i) {
            return +value.call(pie, d, i);
          }), a2 = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a2, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum2 = d32.sum(values), k2 = sum2 ? (da - n * pa) / sum2 : 0, index = d32.range(n), arcs = [], v;
          if (sort != null)
            index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
              return values[j] - values[i];
            } : function(i, j) {
              return sort(data[i], data[j]);
            });
          index.forEach(function(i) {
            arcs[i] = {
              data: data[i],
              value: v = values[i],
              startAngle: a2,
              endAngle: a2 += v * k2 + pa,
              padAngle: p
            };
          });
          return arcs;
        }
        pie.value = function(_) {
          if (!arguments.length)
            return value;
          value = _;
          return pie;
        };
        pie.sort = function(_) {
          if (!arguments.length)
            return sort;
          sort = _;
          return pie;
        };
        pie.startAngle = function(_) {
          if (!arguments.length)
            return startAngle;
          startAngle = _;
          return pie;
        };
        pie.endAngle = function(_) {
          if (!arguments.length)
            return endAngle;
          endAngle = _;
          return pie;
        };
        pie.padAngle = function(_) {
          if (!arguments.length)
            return padAngle;
          padAngle = _;
          return pie;
        };
        return pie;
      };
      var d3_layout_pieSortByValue = {};
      d32.layout.stack = function() {
        var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x2 = d3_layout_stackX, y2 = d3_layout_stackY;
        function stack(data, index) {
          if (!(n = data.length))
            return data;
          var series = data.map(function(d, i2) {
            return values.call(stack, d, i2);
          });
          var points = series.map(function(d) {
            return d.map(function(v, i2) {
              return [x2.call(stack, v, i2), y2.call(stack, v, i2)];
            });
          });
          var orders = order.call(stack, points, index);
          series = d32.permute(series, orders);
          points = d32.permute(points, orders);
          var offsets = offset.call(stack, points, index);
          var m = series[0].length, n, i, j, o;
          for (j = 0; j < m; ++j) {
            out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
            for (i = 1; i < n; ++i) {
              out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
            }
          }
          return data;
        }
        stack.values = function(x3) {
          if (!arguments.length)
            return values;
          values = x3;
          return stack;
        };
        stack.order = function(x3) {
          if (!arguments.length)
            return order;
          order = typeof x3 === "function" ? x3 : d3_layout_stackOrders.get(x3) || d3_layout_stackOrderDefault;
          return stack;
        };
        stack.offset = function(x3) {
          if (!arguments.length)
            return offset;
          offset = typeof x3 === "function" ? x3 : d3_layout_stackOffsets.get(x3) || d3_layout_stackOffsetZero;
          return stack;
        };
        stack.x = function(z) {
          if (!arguments.length)
            return x2;
          x2 = z;
          return stack;
        };
        stack.y = function(z) {
          if (!arguments.length)
            return y2;
          y2 = z;
          return stack;
        };
        stack.out = function(z) {
          if (!arguments.length)
            return out;
          out = z;
          return stack;
        };
        return stack;
      };
      function d3_layout_stackX(d) {
        return d.x;
      }
      function d3_layout_stackY(d) {
        return d.y;
      }
      function d3_layout_stackOut(d, y0, y2) {
        d.y0 = y0;
        d.y = y2;
      }
      var d3_layout_stackOrders = d32.map({
        "inside-out": function(data) {
          var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d32.range(n).sort(function(a2, b) {
            return max[a2] - max[b];
          }), top2 = 0, bottom2 = 0, tops = [], bottoms = [];
          for (i = 0; i < n; ++i) {
            j = index[i];
            if (top2 < bottom2) {
              top2 += sums[j];
              tops.push(j);
            } else {
              bottom2 += sums[j];
              bottoms.push(j);
            }
          }
          return bottoms.reverse().concat(tops);
        },
        reverse: function(data) {
          return d32.range(data.length).reverse();
        },
        "default": d3_layout_stackOrderDefault
      });
      var d3_layout_stackOffsets = d32.map({
        silhouette: function(data) {
          var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
          for (j = 0; j < m; ++j) {
            for (i = 0, o = 0; i < n; i++)
              o += data[i][j][1];
            if (o > max)
              max = o;
            sums.push(o);
          }
          for (j = 0; j < m; ++j) {
            y0[j] = (max - sums[j]) / 2;
          }
          return y0;
        },
        wiggle: function(data) {
          var n = data.length, x2 = data[0], m = x2.length, i, j, k2, s1, s2, s3, dx, o, o0, y0 = [];
          y0[0] = o = o0 = 0;
          for (j = 1; j < m; ++j) {
            for (i = 0, s1 = 0; i < n; ++i)
              s1 += data[i][j][1];
            for (i = 0, s2 = 0, dx = x2[j][0] - x2[j - 1][0]; i < n; ++i) {
              for (k2 = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k2 < i; ++k2) {
                s3 += (data[k2][j][1] - data[k2][j - 1][1]) / dx;
              }
              s2 += s3 * data[i][j][1];
            }
            y0[j] = o -= s1 ? s2 / s1 * dx : 0;
            if (o < o0)
              o0 = o;
          }
          for (j = 0; j < m; ++j)
            y0[j] -= o0;
          return y0;
        },
        expand: function(data) {
          var n = data.length, m = data[0].length, k2 = 1 / n, i, j, o, y0 = [];
          for (j = 0; j < m; ++j) {
            for (i = 0, o = 0; i < n; i++)
              o += data[i][j][1];
            if (o)
              for (i = 0; i < n; i++)
                data[i][j][1] /= o;
            else
              for (i = 0; i < n; i++)
                data[i][j][1] = k2;
          }
          for (j = 0; j < m; ++j)
            y0[j] = 0;
          return y0;
        },
        zero: d3_layout_stackOffsetZero
      });
      function d3_layout_stackOrderDefault(data) {
        return d32.range(data.length);
      }
      function d3_layout_stackOffsetZero(data) {
        var j = -1, m = data[0].length, y0 = [];
        while (++j < m)
          y0[j] = 0;
        return y0;
      }
      function d3_layout_stackMaxIndex(array2) {
        var i = 1, j = 0, v = array2[0][1], k2, n = array2.length;
        for (; i < n; ++i) {
          if ((k2 = array2[i][1]) > v) {
            j = i;
            v = k2;
          }
        }
        return j;
      }
      function d3_layout_stackReduceSum(d) {
        return d.reduce(d3_layout_stackSum, 0);
      }
      function d3_layout_stackSum(p, d) {
        return p + d[1];
      }
      d32.layout.histogram = function() {
        var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
        function histogram(data, i) {
          var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k2 = frequency ? 1 : 1 / n, x2;
          while (++i < m) {
            bin = bins[i] = [];
            bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
            bin.y = 0;
          }
          if (m > 0) {
            i = -1;
            while (++i < n) {
              x2 = values[i];
              if (x2 >= range[0] && x2 <= range[1]) {
                bin = bins[d32.bisect(thresholds, x2, 1, m) - 1];
                bin.y += k2;
                bin.push(data[i]);
              }
            }
          }
          return bins;
        }
        histogram.value = function(x2) {
          if (!arguments.length)
            return valuer;
          valuer = x2;
          return histogram;
        };
        histogram.range = function(x2) {
          if (!arguments.length)
            return ranger;
          ranger = d3_functor(x2);
          return histogram;
        };
        histogram.bins = function(x2) {
          if (!arguments.length)
            return binner;
          binner = typeof x2 === "number" ? function(range) {
            return d3_layout_histogramBinFixed(range, x2);
          } : d3_functor(x2);
          return histogram;
        };
        histogram.frequency = function(x2) {
          if (!arguments.length)
            return frequency;
          frequency = !!x2;
          return histogram;
        };
        return histogram;
      };
      function d3_layout_histogramBinSturges(range, values) {
        return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
      }
      function d3_layout_histogramBinFixed(range, n) {
        var x2 = -1, b = +range[0], m = (range[1] - b) / n, f = [];
        while (++x2 <= n)
          f[x2] = m * x2 + b;
        return f;
      }
      function d3_layout_histogramRange(values) {
        return [d32.min(values), d32.max(values)];
      }
      d32.layout.pack = function() {
        var hierarchy = d32.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [1, 1], radius;
        function pack(d, i) {
          var nodes = hierarchy.call(this, d, i), root2 = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
            return radius;
          };
          root2.x = root2.y = 0;
          d3_layout_hierarchyVisitAfter(root2, function(d2) {
            d2.r = +r(d2.value);
          });
          d3_layout_hierarchyVisitAfter(root2, d3_layout_packSiblings);
          if (padding) {
            var dr = padding * (radius ? 1 : Math.max(2 * root2.r / w, 2 * root2.r / h)) / 2;
            d3_layout_hierarchyVisitAfter(root2, function(d2) {
              d2.r += dr;
            });
            d3_layout_hierarchyVisitAfter(root2, d3_layout_packSiblings);
            d3_layout_hierarchyVisitAfter(root2, function(d2) {
              d2.r -= dr;
            });
          }
          d3_layout_packTransform(root2, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root2.r / w, 2 * root2.r / h));
          return nodes;
        }
        pack.size = function(_) {
          if (!arguments.length)
            return size;
          size = _;
          return pack;
        };
        pack.radius = function(_) {
          if (!arguments.length)
            return radius;
          radius = _ == null || typeof _ === "function" ? _ : +_;
          return pack;
        };
        pack.padding = function(_) {
          if (!arguments.length)
            return padding;
          padding = +_;
          return pack;
        };
        return d3_layout_hierarchyRebind(pack, hierarchy);
      };
      function d3_layout_packSort(a2, b) {
        return a2.value - b.value;
      }
      function d3_layout_packInsert(a2, b) {
        var c2 = a2._pack_next;
        a2._pack_next = b;
        b._pack_prev = a2;
        b._pack_next = c2;
        c2._pack_prev = b;
      }
      function d3_layout_packSplice(a2, b) {
        a2._pack_next = b;
        b._pack_prev = a2;
      }
      function d3_layout_packIntersects(a2, b) {
        var dx = b.x - a2.x, dy = b.y - a2.y, dr = a2.r + b.r;
        return 0.999 * dr * dr > dx * dx + dy * dy;
      }
      function d3_layout_packSiblings(node) {
        if (!(nodes = node.children) || !(n = nodes.length))
          return;
        var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a2, b, c2, i, j, k2, n;
        function bound(node2) {
          xMin = Math.min(node2.x - node2.r, xMin);
          xMax = Math.max(node2.x + node2.r, xMax);
          yMin = Math.min(node2.y - node2.r, yMin);
          yMax = Math.max(node2.y + node2.r, yMax);
        }
        nodes.forEach(d3_layout_packLink);
        a2 = nodes[0];
        a2.x = -a2.r;
        a2.y = 0;
        bound(a2);
        if (n > 1) {
          b = nodes[1];
          b.x = b.r;
          b.y = 0;
          bound(b);
          if (n > 2) {
            c2 = nodes[2];
            d3_layout_packPlace(a2, b, c2);
            bound(c2);
            d3_layout_packInsert(a2, c2);
            a2._pack_prev = c2;
            d3_layout_packInsert(c2, b);
            b = a2._pack_next;
            for (i = 3; i < n; i++) {
              d3_layout_packPlace(a2, b, c2 = nodes[i]);
              var isect = 0, s1 = 1, s2 = 1;
              for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
                if (d3_layout_packIntersects(j, c2)) {
                  isect = 1;
                  break;
                }
              }
              if (isect == 1) {
                for (k2 = a2._pack_prev; k2 !== j._pack_prev; k2 = k2._pack_prev, s2++) {
                  if (d3_layout_packIntersects(k2, c2)) {
                    break;
                  }
                }
              }
              if (isect) {
                if (s1 < s2 || s1 == s2 && b.r < a2.r)
                  d3_layout_packSplice(a2, b = j);
                else
                  d3_layout_packSplice(a2 = k2, b);
                i--;
              } else {
                d3_layout_packInsert(a2, c2);
                b = c2;
                bound(c2);
              }
            }
          }
        }
        var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
        for (i = 0; i < n; i++) {
          c2 = nodes[i];
          c2.x -= cx;
          c2.y -= cy;
          cr = Math.max(cr, c2.r + Math.sqrt(c2.x * c2.x + c2.y * c2.y));
        }
        node.r = cr;
        nodes.forEach(d3_layout_packUnlink);
      }
      function d3_layout_packLink(node) {
        node._pack_next = node._pack_prev = node;
      }
      function d3_layout_packUnlink(node) {
        delete node._pack_next;
        delete node._pack_prev;
      }
      function d3_layout_packTransform(node, x2, y2, k2) {
        var children = node.children;
        node.x = x2 += k2 * node.x;
        node.y = y2 += k2 * node.y;
        node.r *= k2;
        if (children) {
          var i = -1, n = children.length;
          while (++i < n)
            d3_layout_packTransform(children[i], x2, y2, k2);
        }
      }
      function d3_layout_packPlace(a2, b, c2) {
        var db = a2.r + c2.r, dx = b.x - a2.x, dy = b.y - a2.y;
        if (db && (dx || dy)) {
          var da = b.r + c2.r, dc = dx * dx + dy * dy;
          da *= da;
          db *= db;
          var x2 = 0.5 + (db - da) / (2 * dc), y2 = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
          c2.x = a2.x + x2 * dx + y2 * dy;
          c2.y = a2.y + x2 * dy - y2 * dx;
        } else {
          c2.x = a2.x + db;
          c2.y = a2.y;
        }
      }
      d32.layout.tree = function() {
        var hierarchy = d32.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [1, 1], nodeSize = null;
        function tree(d, i) {
          var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
          d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
          d3_layout_hierarchyVisitBefore(root1, secondWalk);
          if (nodeSize)
            d3_layout_hierarchyVisitBefore(root0, sizeNode);
          else {
            var left2 = root0, right2 = root0, bottom2 = root0;
            d3_layout_hierarchyVisitBefore(root0, function(node) {
              if (node.x < left2.x)
                left2 = node;
              if (node.x > right2.x)
                right2 = node;
              if (node.depth > bottom2.depth)
                bottom2 = node;
            });
            var tx = separation(left2, right2) / 2 - left2.x, kx2 = size[0] / (right2.x + separation(right2, left2) / 2 + tx), ky2 = size[1] / (bottom2.depth || 1);
            d3_layout_hierarchyVisitBefore(root0, function(node) {
              node.x = (node.x + tx) * kx2;
              node.y = node.depth * ky2;
            });
          }
          return nodes;
        }
        function wrapTree(root0) {
          var root1 = {
            A: null,
            children: [root0]
          }, queue = [root1], node1;
          while ((node1 = queue.pop()) != null) {
            for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
              queue.push((children[i] = child = {
                _: children[i],
                parent: node1,
                children: (child = children[i].children) && child.slice() || [],
                A: null,
                a: null,
                z: 0,
                m: 0,
                c: 0,
                s: 0,
                t: null,
                i
              }).a = child);
            }
          }
          return root1.children[0];
        }
        function firstWalk(v) {
          var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
          if (children.length) {
            d3_layout_treeShift(v);
            var midpoint = (children[0].z + children[children.length - 1].z) / 2;
            if (w) {
              v.z = w.z + separation(v._, w._);
              v.m = v.z - midpoint;
            } else {
              v.z = midpoint;
            }
          } else if (w) {
            v.z = w.z + separation(v._, w._);
          }
          v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
        }
        function secondWalk(v) {
          v._.x = v.z + v.parent.m;
          v.m += v.parent.m;
        }
        function apportion(v, w, ancestor) {
          if (w) {
            var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
            while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
              vom = d3_layout_treeLeft(vom);
              vop = d3_layout_treeRight(vop);
              vop.a = v;
              shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
              if (shift > 0) {
                d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
                sip += shift;
                sop += shift;
              }
              sim += vim.m;
              sip += vip.m;
              som += vom.m;
              sop += vop.m;
            }
            if (vim && !d3_layout_treeRight(vop)) {
              vop.t = vim;
              vop.m += sim - sop;
            }
            if (vip && !d3_layout_treeLeft(vom)) {
              vom.t = vip;
              vom.m += sip - som;
              ancestor = v;
            }
          }
          return ancestor;
        }
        function sizeNode(node) {
          node.x *= size[0];
          node.y = node.depth * size[1];
        }
        tree.separation = function(x2) {
          if (!arguments.length)
            return separation;
          separation = x2;
          return tree;
        };
        tree.size = function(x2) {
          if (!arguments.length)
            return nodeSize ? null : size;
          nodeSize = (size = x2) == null ? sizeNode : null;
          return tree;
        };
        tree.nodeSize = function(x2) {
          if (!arguments.length)
            return nodeSize ? size : null;
          nodeSize = (size = x2) == null ? null : sizeNode;
          return tree;
        };
        return d3_layout_hierarchyRebind(tree, hierarchy);
      };
      function d3_layout_treeSeparation(a2, b) {
        return a2.parent == b.parent ? 1 : 2;
      }
      function d3_layout_treeLeft(v) {
        var children = v.children;
        return children.length ? children[0] : v.t;
      }
      function d3_layout_treeRight(v) {
        var children = v.children, n;
        return (n = children.length) ? children[n - 1] : v.t;
      }
      function d3_layout_treeMove(wm, wp, shift) {
        var change = shift / (wp.i - wm.i);
        wp.c -= change;
        wp.s += shift;
        wm.c += change;
        wp.z += shift;
        wp.m += shift;
      }
      function d3_layout_treeShift(v) {
        var shift = 0, change = 0, children = v.children, i = children.length, w;
        while (--i >= 0) {
          w = children[i];
          w.z += shift;
          w.m += shift;
          shift += w.s + (change += w.c);
        }
      }
      function d3_layout_treeAncestor(vim, v, ancestor) {
        return vim.a.parent === v.parent ? vim.a : ancestor;
      }
      d32.layout.cluster = function() {
        var hierarchy = d32.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [1, 1], nodeSize = false;
        function cluster(d, i) {
          var nodes = hierarchy.call(this, d, i), root2 = nodes[0], previousNode, x2 = 0;
          d3_layout_hierarchyVisitAfter(root2, function(node) {
            var children = node.children;
            if (children && children.length) {
              node.x = d3_layout_clusterX(children);
              node.y = d3_layout_clusterY(children);
            } else {
              node.x = previousNode ? x2 += separation(node, previousNode) : 0;
              node.y = 0;
              previousNode = node;
            }
          });
          var left2 = d3_layout_clusterLeft(root2), right2 = d3_layout_clusterRight(root2), x0 = left2.x - separation(left2, right2) / 2, x1 = right2.x + separation(right2, left2) / 2;
          d3_layout_hierarchyVisitAfter(root2, nodeSize ? function(node) {
            node.x = (node.x - root2.x) * size[0];
            node.y = (root2.y - node.y) * size[1];
          } : function(node) {
            node.x = (node.x - x0) / (x1 - x0) * size[0];
            node.y = (1 - (root2.y ? node.y / root2.y : 1)) * size[1];
          });
          return nodes;
        }
        cluster.separation = function(x2) {
          if (!arguments.length)
            return separation;
          separation = x2;
          return cluster;
        };
        cluster.size = function(x2) {
          if (!arguments.length)
            return nodeSize ? null : size;
          nodeSize = (size = x2) == null;
          return cluster;
        };
        cluster.nodeSize = function(x2) {
          if (!arguments.length)
            return nodeSize ? size : null;
          nodeSize = (size = x2) != null;
          return cluster;
        };
        return d3_layout_hierarchyRebind(cluster, hierarchy);
      };
      function d3_layout_clusterY(children) {
        return 1 + d32.max(children, function(child) {
          return child.y;
        });
      }
      function d3_layout_clusterX(children) {
        return children.reduce(function(x2, child) {
          return x2 + child.x;
        }, 0) / children.length;
      }
      function d3_layout_clusterLeft(node) {
        var children = node.children;
        return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
      }
      function d3_layout_clusterRight(node) {
        var children = node.children, n;
        return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
      }
      d32.layout.treemap = function() {
        var hierarchy = d32.layout.hierarchy(), round = Math.round, size = [1, 1], padding = null, pad2 = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = 0.5 * (1 + Math.sqrt(5));
        function scale(children, k2) {
          var i = -1, n = children.length, child, area;
          while (++i < n) {
            area = (child = children[i]).value * (k2 < 0 ? 0 : k2);
            child.area = isNaN(area) || area <= 0 ? 0 : area;
          }
        }
        function squarify(node) {
          var children = node.children;
          if (children && children.length) {
            var rect = pad2(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
            scale(remaining, rect.dx * rect.dy / node.value);
            row.area = 0;
            while ((n = remaining.length) > 0) {
              row.push(child = remaining[n - 1]);
              row.area += child.area;
              if (mode !== "squarify" || (score = worst(row, u)) <= best) {
                remaining.pop();
                best = score;
              } else {
                row.area -= row.pop().area;
                position(row, u, rect, false);
                u = Math.min(rect.dx, rect.dy);
                row.length = row.area = 0;
                best = Infinity;
              }
            }
            if (row.length) {
              position(row, u, rect, true);
              row.length = row.area = 0;
            }
            children.forEach(squarify);
          }
        }
        function stickify(node) {
          var children = node.children;
          if (children && children.length) {
            var rect = pad2(node), remaining = children.slice(), child, row = [];
            scale(remaining, rect.dx * rect.dy / node.value);
            row.area = 0;
            while (child = remaining.pop()) {
              row.push(child);
              row.area += child.area;
              if (child.z != null) {
                position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
                row.length = row.area = 0;
              }
            }
            children.forEach(stickify);
          }
        }
        function worst(row, u) {
          var s2 = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
          while (++i < n) {
            if (!(r = row[i].area))
              continue;
            if (r < rmin)
              rmin = r;
            if (r > rmax)
              rmax = r;
          }
          s2 *= s2;
          u *= u;
          return s2 ? Math.max(u * rmax * ratio / s2, s2 / (u * rmin * ratio)) : Infinity;
        }
        function position(row, u, rect, flush) {
          var i = -1, n = row.length, x2 = rect.x, y2 = rect.y, v = u ? round(row.area / u) : 0, o;
          if (u == rect.dx) {
            if (flush || v > rect.dy)
              v = rect.dy;
            while (++i < n) {
              o = row[i];
              o.x = x2;
              o.y = y2;
              o.dy = v;
              x2 += o.dx = Math.min(rect.x + rect.dx - x2, v ? round(o.area / v) : 0);
            }
            o.z = true;
            o.dx += rect.x + rect.dx - x2;
            rect.y += v;
            rect.dy -= v;
          } else {
            if (flush || v > rect.dx)
              v = rect.dx;
            while (++i < n) {
              o = row[i];
              o.x = x2;
              o.y = y2;
              o.dx = v;
              y2 += o.dy = Math.min(rect.y + rect.dy - y2, v ? round(o.area / v) : 0);
            }
            o.z = false;
            o.dy += rect.y + rect.dy - y2;
            rect.x += v;
            rect.dx -= v;
          }
        }
        function treemap(d) {
          var nodes = stickies || hierarchy(d), root2 = nodes[0];
          root2.x = root2.y = 0;
          if (root2.value)
            root2.dx = size[0], root2.dy = size[1];
          else
            root2.dx = root2.dy = 0;
          if (stickies)
            hierarchy.revalue(root2);
          scale([root2], root2.dx * root2.dy / root2.value);
          (stickies ? stickify : squarify)(root2);
          if (sticky)
            stickies = nodes;
          return nodes;
        }
        treemap.size = function(x2) {
          if (!arguments.length)
            return size;
          size = x2;
          return treemap;
        };
        treemap.padding = function(x2) {
          if (!arguments.length)
            return padding;
          function padFunction(node) {
            var p = x2.call(treemap, node, node.depth);
            return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p, p] : p);
          }
          function padConstant(node) {
            return d3_layout_treemapPad(node, x2);
          }
          var type;
          pad2 = (padding = x2) == null ? d3_layout_treemapPadNull : (type = typeof x2) === "function" ? padFunction : type === "number" ? (x2 = [x2, x2, x2, x2], padConstant) : padConstant;
          return treemap;
        };
        treemap.round = function(x2) {
          if (!arguments.length)
            return round != Number;
          round = x2 ? Math.round : Number;
          return treemap;
        };
        treemap.sticky = function(x2) {
          if (!arguments.length)
            return sticky;
          sticky = x2;
          stickies = null;
          return treemap;
        };
        treemap.ratio = function(x2) {
          if (!arguments.length)
            return ratio;
          ratio = x2;
          return treemap;
        };
        treemap.mode = function(x2) {
          if (!arguments.length)
            return mode;
          mode = x2 + "";
          return treemap;
        };
        return d3_layout_hierarchyRebind(treemap, hierarchy);
      };
      function d3_layout_treemapPadNull(node) {
        return {
          x: node.x,
          y: node.y,
          dx: node.dx,
          dy: node.dy
        };
      }
      function d3_layout_treemapPad(node, padding) {
        var x2 = node.x + padding[3], y2 = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
        if (dx < 0) {
          x2 += dx / 2;
          dx = 0;
        }
        if (dy < 0) {
          y2 += dy / 2;
          dy = 0;
        }
        return {
          x: x2,
          y: y2,
          dx,
          dy
        };
      }
      d32.random = {
        normal: function(µ, σ) {
          var n = arguments.length;
          if (n < 2)
            σ = 1;
          if (n < 1)
            µ = 0;
          return function() {
            var x2, y2, r;
            do {
              x2 = Math.random() * 2 - 1;
              y2 = Math.random() * 2 - 1;
              r = x2 * x2 + y2 * y2;
            } while (!r || r > 1);
            return µ + σ * x2 * Math.sqrt(-2 * Math.log(r) / r);
          };
        },
        logNormal: function() {
          var random = d32.random.normal.apply(d32, arguments);
          return function() {
            return Math.exp(random());
          };
        },
        bates: function(m) {
          var random = d32.random.irwinHall(m);
          return function() {
            return random() / m;
          };
        },
        irwinHall: function(m) {
          return function() {
            for (var s2 = 0, j = 0; j < m; j++)
              s2 += Math.random();
            return s2;
          };
        }
      };
      d32.scale = {};
      function d3_scaleExtent(domain) {
        var start = domain[0], stop = domain[domain.length - 1];
        return start < stop ? [start, stop] : [stop, start];
      }
      function d3_scaleRange(scale) {
        return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
      }
      function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
        var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
        return function(x2) {
          return i(u(x2));
        };
      }
      function d3_scale_nice(domain, nice) {
        var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
        if (x1 < x0) {
          dx = i0, i0 = i1, i1 = dx;
          dx = x0, x0 = x1, x1 = dx;
        }
        domain[i0] = nice.floor(x0);
        domain[i1] = nice.ceil(x1);
        return domain;
      }
      function d3_scale_niceStep(step) {
        return step ? {
          floor: function(x2) {
            return Math.floor(x2 / step) * step;
          },
          ceil: function(x2) {
            return Math.ceil(x2 / step) * step;
          }
        } : d3_scale_niceIdentity;
      }
      var d3_scale_niceIdentity = {
        floor: d3_identity,
        ceil: d3_identity
      };
      function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
        var u = [], i = [], j = 0, k2 = Math.min(domain.length, range.length) - 1;
        if (domain[k2] < domain[0]) {
          domain = domain.slice().reverse();
          range = range.slice().reverse();
        }
        while (++j <= k2) {
          u.push(uninterpolate(domain[j - 1], domain[j]));
          i.push(interpolate(range[j - 1], range[j]));
        }
        return function(x2) {
          var j2 = d32.bisect(domain, x2, 1, k2) - 1;
          return i[j2](u[j2](x2));
        };
      }
      d32.scale.linear = function() {
        return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false);
      };
      function d3_scale_linear(domain, range, interpolate, clamp) {
        var output, input;
        function rescale() {
          var linear3 = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
          output = linear3(domain, range, uninterpolate, interpolate);
          input = linear3(range, domain, uninterpolate, d3_interpolate);
          return scale;
        }
        function scale(x2) {
          return output(x2);
        }
        scale.invert = function(y2) {
          return input(y2);
        };
        scale.domain = function(x2) {
          if (!arguments.length)
            return domain;
          domain = x2.map(Number);
          return rescale();
        };
        scale.range = function(x2) {
          if (!arguments.length)
            return range;
          range = x2;
          return rescale();
        };
        scale.rangeRound = function(x2) {
          return scale.range(x2).interpolate(d3_interpolateRound);
        };
        scale.clamp = function(x2) {
          if (!arguments.length)
            return clamp;
          clamp = x2;
          return rescale();
        };
        scale.interpolate = function(x2) {
          if (!arguments.length)
            return interpolate;
          interpolate = x2;
          return rescale();
        };
        scale.ticks = function(m) {
          return d3_scale_linearTicks(domain, m);
        };
        scale.tickFormat = function(m, format2) {
          return d3_scale_linearTickFormat(domain, m, format2);
        };
        scale.nice = function(m) {
          d3_scale_linearNice(domain, m);
          return rescale();
        };
        scale.copy = function() {
          return d3_scale_linear(domain, range, interpolate, clamp);
        };
        return rescale();
      }
      function d3_scale_linearRebind(scale, linear3) {
        return d32.rebind(scale, linear3, "range", "rangeRound", "interpolate", "clamp");
      }
      function d3_scale_linearNice(domain, m) {
        d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
        d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
        return domain;
      }
      function d3_scale_linearTickRange(domain, m) {
        if (m == null)
          m = 10;
        var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
        if (err <= 0.15)
          step *= 10;
        else if (err <= 0.35)
          step *= 5;
        else if (err <= 0.75)
          step *= 2;
        extent[0] = Math.ceil(extent[0] / step) * step;
        extent[1] = Math.floor(extent[1] / step) * step + step * 0.5;
        extent[2] = step;
        return extent;
      }
      function d3_scale_linearTicks(domain, m) {
        return d32.range.apply(d32, d3_scale_linearTickRange(domain, m));
      }
      function d3_scale_linearTickFormat(domain, m, format2) {
        var range = d3_scale_linearTickRange(domain, m);
        if (format2) {
          var match = d3_format_re.exec(format2);
          match.shift();
          if (match[8] === "s") {
            var prefix2 = d32.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
            if (!match[7])
              match[7] = "." + d3_scale_linearPrecision(prefix2.scale(range[2]));
            match[8] = "f";
            format2 = d32.format(match.join(""));
            return function(d) {
              return format2(prefix2.scale(d)) + prefix2.symbol;
            };
          }
          if (!match[7])
            match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
          format2 = match.join("");
        } else {
          format2 = ",." + d3_scale_linearPrecision(range[2]) + "f";
        }
        return d32.format(format2);
      }
      var d3_scale_linearFormatSignificant = {
        s: 1,
        g: 1,
        p: 1,
        r: 1,
        e: 1
      };
      function d3_scale_linearPrecision(value) {
        return -Math.floor(Math.log(value) / Math.LN10 + 0.01);
      }
      function d3_scale_linearFormatPrecision(type, range) {
        var p = d3_scale_linearPrecision(range[2]);
        return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
      }
      d32.scale.log = function() {
        return d3_scale_log(d32.scale.linear().domain([0, 1]), 10, true, [1, 10]);
      };
      function d3_scale_log(linear3, base, positive, domain) {
        function log2(x2) {
          return (positive ? Math.log(x2 < 0 ? 0 : x2) : -Math.log(x2 > 0 ? 0 : -x2)) / Math.log(base);
        }
        function pow2(x2) {
          return positive ? Math.pow(base, x2) : -Math.pow(base, -x2);
        }
        function scale(x2) {
          return linear3(log2(x2));
        }
        scale.invert = function(x2) {
          return pow2(linear3.invert(x2));
        };
        scale.domain = function(x2) {
          if (!arguments.length)
            return domain;
          positive = x2[0] >= 0;
          linear3.domain((domain = x2.map(Number)).map(log2));
          return scale;
        };
        scale.base = function(_) {
          if (!arguments.length)
            return base;
          base = +_;
          linear3.domain(domain.map(log2));
          return scale;
        };
        scale.nice = function() {
          var niced = d3_scale_nice(domain.map(log2), positive ? Math : d3_scale_logNiceNegative);
          linear3.domain(niced);
          domain = niced.map(pow2);
          return scale;
        };
        scale.ticks = function() {
          var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log2(u)), j = Math.ceil(log2(v)), n = base % 1 ? 2 : base;
          if (isFinite(j - i)) {
            if (positive) {
              for (; i < j; i++)
                for (var k2 = 1; k2 < n; k2++)
                  ticks.push(pow2(i) * k2);
              ticks.push(pow2(i));
            } else {
              ticks.push(pow2(i));
              for (; i++ < j; )
                for (var k2 = n - 1; k2 > 0; k2--)
                  ticks.push(pow2(i) * k2);
            }
            for (i = 0; ticks[i] < u; i++) {
            }
            for (j = ticks.length; ticks[j - 1] > v; j--) {
            }
            ticks = ticks.slice(i, j);
          }
          return ticks;
        };
        scale.tickFormat = function(n, format2) {
          if (!arguments.length)
            return d3_scale_logFormat;
          if (arguments.length < 2)
            format2 = d3_scale_logFormat;
          else if (typeof format2 !== "function")
            format2 = d32.format(format2);
          var k2 = Math.max(1, base * n / scale.ticks().length);
          return function(d) {
            var i = d / pow2(Math.round(log2(d)));
            if (i * base < base - 0.5)
              i *= base;
            return i <= k2 ? format2(d) : "";
          };
        };
        scale.copy = function() {
          return d3_scale_log(linear3.copy(), base, positive, domain);
        };
        return d3_scale_linearRebind(scale, linear3);
      }
      var d3_scale_logFormat = d32.format(".0e"), d3_scale_logNiceNegative = {
        floor: function(x2) {
          return -Math.ceil(-x2);
        },
        ceil: function(x2) {
          return -Math.floor(-x2);
        }
      };
      d32.scale.pow = function() {
        return d3_scale_pow(d32.scale.linear(), 1, [0, 1]);
      };
      function d3_scale_pow(linear3, exponent, domain) {
        var powp2 = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
        function scale(x2) {
          return linear3(powp2(x2));
        }
        scale.invert = function(x2) {
          return powb(linear3.invert(x2));
        };
        scale.domain = function(x2) {
          if (!arguments.length)
            return domain;
          linear3.domain((domain = x2.map(Number)).map(powp2));
          return scale;
        };
        scale.ticks = function(m) {
          return d3_scale_linearTicks(domain, m);
        };
        scale.tickFormat = function(m, format2) {
          return d3_scale_linearTickFormat(domain, m, format2);
        };
        scale.nice = function(m) {
          return scale.domain(d3_scale_linearNice(domain, m));
        };
        scale.exponent = function(x2) {
          if (!arguments.length)
            return exponent;
          powp2 = d3_scale_powPow(exponent = x2);
          powb = d3_scale_powPow(1 / exponent);
          linear3.domain(domain.map(powp2));
          return scale;
        };
        scale.copy = function() {
          return d3_scale_pow(linear3.copy(), exponent, domain);
        };
        return d3_scale_linearRebind(scale, linear3);
      }
      function d3_scale_powPow(e) {
        return function(x2) {
          return x2 < 0 ? -Math.pow(-x2, e) : Math.pow(x2, e);
        };
      }
      d32.scale.sqrt = function() {
        return d32.scale.pow().exponent(0.5);
      };
      d32.scale.ordinal = function() {
        return d3_scale_ordinal([], {
          t: "range",
          a: [[]]
        });
      };
      function d3_scale_ordinal(domain, ranger) {
        var index, range, rangeBand;
        function scale(x2) {
          return range[((index.get(x2) || (ranger.t === "range" ? index.set(x2, domain.push(x2)) : NaN)) - 1) % range.length];
        }
        function steps(start, step) {
          return d32.range(domain.length).map(function(i) {
            return start + step * i;
          });
        }
        scale.domain = function(x2) {
          if (!arguments.length)
            return domain;
          domain = [];
          index = new d3_Map();
          var i = -1, n = x2.length, xi;
          while (++i < n)
            if (!index.has(xi = x2[i]))
              index.set(xi, domain.push(xi));
          return scale[ranger.t].apply(scale, ranger.a);
        };
        scale.range = function(x2) {
          if (!arguments.length)
            return range;
          range = x2;
          rangeBand = 0;
          ranger = {
            t: "range",
            a: arguments
          };
          return scale;
        };
        scale.rangePoints = function(x2, padding) {
          if (arguments.length < 2)
            padding = 0;
          var start = x2[0], stop = x2[1], step = domain.length < 2 ? (start = (start + stop) / 2, 0) : (stop - start) / (domain.length - 1 + padding);
          range = steps(start + step * padding / 2, step);
          rangeBand = 0;
          ranger = {
            t: "rangePoints",
            a: arguments
          };
          return scale;
        };
        scale.rangeRoundPoints = function(x2, padding) {
          if (arguments.length < 2)
            padding = 0;
          var start = x2[0], stop = x2[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 0) : (stop - start) / (domain.length - 1 + padding) | 0;
          range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
          rangeBand = 0;
          ranger = {
            t: "rangeRoundPoints",
            a: arguments
          };
          return scale;
        };
        scale.rangeBands = function(x2, padding, outerPadding) {
          if (arguments.length < 2)
            padding = 0;
          if (arguments.length < 3)
            outerPadding = padding;
          var reverse = x2[1] < x2[0], start = x2[reverse - 0], stop = x2[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
          range = steps(start + step * outerPadding, step);
          if (reverse)
            range.reverse();
          rangeBand = step * (1 - padding);
          ranger = {
            t: "rangeBands",
            a: arguments
          };
          return scale;
        };
        scale.rangeRoundBands = function(x2, padding, outerPadding) {
          if (arguments.length < 2)
            padding = 0;
          if (arguments.length < 3)
            outerPadding = padding;
          var reverse = x2[1] < x2[0], start = x2[reverse - 0], stop = x2[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
          range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
          if (reverse)
            range.reverse();
          rangeBand = Math.round(step * (1 - padding));
          ranger = {
            t: "rangeRoundBands",
            a: arguments
          };
          return scale;
        };
        scale.rangeBand = function() {
          return rangeBand;
        };
        scale.rangeExtent = function() {
          return d3_scaleExtent(ranger.a[0]);
        };
        scale.copy = function() {
          return d3_scale_ordinal(domain, ranger);
        };
        return scale.domain(domain);
      }
      d32.scale.category10 = function() {
        return d32.scale.ordinal().range(d3_category10);
      };
      d32.scale.category20 = function() {
        return d32.scale.ordinal().range(d3_category20);
      };
      d32.scale.category20b = function() {
        return d32.scale.ordinal().range(d3_category20b);
      };
      d32.scale.category20c = function() {
        return d32.scale.ordinal().range(d3_category20c);
      };
      var d3_category10 = [2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175].map(d3_rgbString);
      var d3_category20 = [2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725].map(d3_rgbString);
      var d3_category20b = [3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654].map(d3_rgbString);
      var d3_category20c = [3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081].map(d3_rgbString);
      d32.scale.quantile = function() {
        return d3_scale_quantile([], []);
      };
      function d3_scale_quantile(domain, range) {
        var thresholds;
        function rescale() {
          var k2 = 0, q = range.length;
          thresholds = [];
          while (++k2 < q)
            thresholds[k2 - 1] = d32.quantile(domain, k2 / q);
          return scale;
        }
        function scale(x2) {
          if (!isNaN(x2 = +x2))
            return range[d32.bisect(thresholds, x2)];
        }
        scale.domain = function(x2) {
          if (!arguments.length)
            return domain;
          domain = x2.map(d3_number).filter(d3_numeric).sort(d3_ascending);
          return rescale();
        };
        scale.range = function(x2) {
          if (!arguments.length)
            return range;
          range = x2;
          return rescale();
        };
        scale.quantiles = function() {
          return thresholds;
        };
        scale.invertExtent = function(y2) {
          y2 = range.indexOf(y2);
          return y2 < 0 ? [NaN, NaN] : [y2 > 0 ? thresholds[y2 - 1] : domain[0], y2 < thresholds.length ? thresholds[y2] : domain[domain.length - 1]];
        };
        scale.copy = function() {
          return d3_scale_quantile(domain, range);
        };
        return rescale();
      }
      d32.scale.quantize = function() {
        return d3_scale_quantize(0, 1, [0, 1]);
      };
      function d3_scale_quantize(x0, x1, range) {
        var kx2, i;
        function scale(x2) {
          return range[Math.max(0, Math.min(i, Math.floor(kx2 * (x2 - x0))))];
        }
        function rescale() {
          kx2 = range.length / (x1 - x0);
          i = range.length - 1;
          return scale;
        }
        scale.domain = function(x2) {
          if (!arguments.length)
            return [x0, x1];
          x0 = +x2[0];
          x1 = +x2[x2.length - 1];
          return rescale();
        };
        scale.range = function(x2) {
          if (!arguments.length)
            return range;
          range = x2;
          return rescale();
        };
        scale.invertExtent = function(y2) {
          y2 = range.indexOf(y2);
          y2 = y2 < 0 ? NaN : y2 / kx2 + x0;
          return [y2, y2 + 1 / kx2];
        };
        scale.copy = function() {
          return d3_scale_quantize(x0, x1, range);
        };
        return rescale();
      }
      d32.scale.threshold = function() {
        return d3_scale_threshold([0.5], [0, 1]);
      };
      function d3_scale_threshold(domain, range) {
        function scale(x2) {
          if (x2 <= x2)
            return range[d32.bisect(domain, x2)];
        }
        scale.domain = function(_) {
          if (!arguments.length)
            return domain;
          domain = _;
          return scale;
        };
        scale.range = function(_) {
          if (!arguments.length)
            return range;
          range = _;
          return scale;
        };
        scale.invertExtent = function(y2) {
          y2 = range.indexOf(y2);
          return [domain[y2 - 1], domain[y2]];
        };
        scale.copy = function() {
          return d3_scale_threshold(domain, range);
        };
        return scale;
      }
      d32.scale.identity = function() {
        return d3_scale_identity([0, 1]);
      };
      function d3_scale_identity(domain) {
        function identity4(x2) {
          return +x2;
        }
        identity4.invert = identity4;
        identity4.domain = identity4.range = function(x2) {
          if (!arguments.length)
            return domain;
          domain = x2.map(identity4);
          return identity4;
        };
        identity4.ticks = function(m) {
          return d3_scale_linearTicks(domain, m);
        };
        identity4.tickFormat = function(m, format2) {
          return d3_scale_linearTickFormat(domain, m, format2);
        };
        identity4.copy = function() {
          return d3_scale_identity(domain);
        };
        return identity4;
      }
      d32.svg = {};
      function d3_zero() {
        return 0;
      }
      d32.svg.arc = function() {
        var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
        function arc() {
          var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
          if (r1 < r0)
            rc = r1, r1 = r0, r0 = rc;
          if (da >= τε)
            return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
          var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path2 = [];
          if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
            rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
            if (!cw)
              p1 *= -1;
            if (r1)
              p1 = d3_asin(rp / r1 * Math.sin(ap));
            if (r0)
              p0 = d3_asin(rp / r0 * Math.sin(ap));
          }
          if (r1) {
            x0 = r1 * Math.cos(a0 + p1);
            y0 = r1 * Math.sin(a0 + p1);
            x1 = r1 * Math.cos(a1 - p1);
            y1 = r1 * Math.sin(a1 - p1);
            var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
            if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
              var h1 = (a0 + a1) / 2;
              x0 = r1 * Math.cos(h1);
              y0 = r1 * Math.sin(h1);
              x1 = y1 = null;
            }
          } else {
            x0 = y0 = 0;
          }
          if (r0) {
            x2 = r0 * Math.cos(a1 - p0);
            y2 = r0 * Math.sin(a1 - p0);
            x3 = r0 * Math.cos(a0 + p0);
            y3 = r0 * Math.sin(a0 + p0);
            var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
            if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
              var h0 = (a0 + a1) / 2;
              x2 = r0 * Math.cos(h0);
              y2 = r0 * Math.sin(h0);
              x3 = y3 = null;
            }
          } else {
            x2 = y2 = 0;
          }
          if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > 1e-3) {
            cr = r0 < r1 ^ cw ? 0 : 1;
            var rc1 = rc, rc0 = rc;
            if (da < π) {
              var oc = x3 == null ? [x2, y2] : x1 == null ? [x0, y0] : d3_geom_polygonIntersect([x0, y0], [x3, y3], [x1, y1], [x2, y2]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
              rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
              rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
            }
            if (x1 != null) {
              var t30 = d3_svg_arcCornerTangents(x3 == null ? [x2, y2] : [x3, y3], [x0, y0], r1, rc1, cw), t122 = d3_svg_arcCornerTangents([x1, y1], [x2, y2], r1, rc1, cw);
              if (rc === rc1) {
                path2.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t122[1][0], t122[1][1]), ",", cw, " ", t122[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t122[0]);
              } else {
                path2.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t122[0]);
              }
            } else {
              path2.push("M", x0, ",", y0);
            }
            if (x3 != null) {
              var t03 = d3_svg_arcCornerTangents([x0, y0], [x3, y3], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([x2, y2], x1 == null ? [x0, y0] : [x1, y1], r0, -rc0, cw);
              if (rc === rc0) {
                path2.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
              } else {
                path2.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
              }
            } else {
              path2.push("L", x2, ",", y2);
            }
          } else {
            path2.push("M", x0, ",", y0);
            if (x1 != null)
              path2.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
            path2.push("L", x2, ",", y2);
            if (x3 != null)
              path2.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
          }
          path2.push("Z");
          return path2.join("");
        }
        function circleSegment(r1, cw) {
          return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
        }
        arc.innerRadius = function(v) {
          if (!arguments.length)
            return innerRadius;
          innerRadius = d3_functor(v);
          return arc;
        };
        arc.outerRadius = function(v) {
          if (!arguments.length)
            return outerRadius;
          outerRadius = d3_functor(v);
          return arc;
        };
        arc.cornerRadius = function(v) {
          if (!arguments.length)
            return cornerRadius;
          cornerRadius = d3_functor(v);
          return arc;
        };
        arc.padRadius = function(v) {
          if (!arguments.length)
            return padRadius;
          padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
          return arc;
        };
        arc.startAngle = function(v) {
          if (!arguments.length)
            return startAngle;
          startAngle = d3_functor(v);
          return arc;
        };
        arc.endAngle = function(v) {
          if (!arguments.length)
            return endAngle;
          endAngle = d3_functor(v);
          return arc;
        };
        arc.padAngle = function(v) {
          if (!arguments.length)
            return padAngle;
          padAngle = d3_functor(v);
          return arc;
        };
        arc.centroid = function() {
          var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
          return [Math.cos(a2) * r, Math.sin(a2) * r];
        };
        return arc;
      };
      var d3_svg_arcAuto = "auto";
      function d3_svg_arcInnerRadius(d) {
        return d.innerRadius;
      }
      function d3_svg_arcOuterRadius(d) {
        return d.outerRadius;
      }
      function d3_svg_arcStartAngle(d) {
        return d.startAngle;
      }
      function d3_svg_arcEndAngle(d) {
        return d.endAngle;
      }
      function d3_svg_arcPadAngle(d) {
        return d && d.padAngle;
      }
      function d3_svg_arcSweep(x0, y0, x1, y1) {
        return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
      }
      function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
        var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D2 = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D2 * D2)), cx0 = (D2 * dy - dx * d) / d2, cy0 = (-D2 * dx - dy * d) / d2, cx1 = (D2 * dy + dx * d) / d2, cy1 = (-D2 * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
        if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
          cx0 = cx1, cy0 = cy1;
        return [[cx0 - ox, cy0 - oy], [cx0 * r1 / r, cy0 * r1 / r]];
      }
      function d3_svg_line(projection) {
        var x2 = d3_geom_pointX, y2 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = 0.7;
        function line(data) {
          var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x2), fy = d3_functor(y2);
          function segment() {
            segments.push("M", interpolate(projection(points), tension));
          }
          while (++i < n) {
            if (defined.call(this, d = data[i], i)) {
              points.push([+fx.call(this, d, i), +fy.call(this, d, i)]);
            } else if (points.length) {
              segment();
              points = [];
            }
          }
          if (points.length)
            segment();
          return segments.length ? segments.join("") : null;
        }
        line.x = function(_) {
          if (!arguments.length)
            return x2;
          x2 = _;
          return line;
        };
        line.y = function(_) {
          if (!arguments.length)
            return y2;
          y2 = _;
          return line;
        };
        line.defined = function(_) {
          if (!arguments.length)
            return defined;
          defined = _;
          return line;
        };
        line.interpolate = function(_) {
          if (!arguments.length)
            return interpolateKey;
          if (typeof _ === "function")
            interpolateKey = interpolate = _;
          else
            interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
          return line;
        };
        line.tension = function(_) {
          if (!arguments.length)
            return tension;
          tension = _;
          return line;
        };
        return line;
      }
      d32.svg.line = function() {
        return d3_svg_line(d3_identity);
      };
      var d3_svg_lineInterpolators = d32.map({
        linear: d3_svg_lineLinear,
        "linear-closed": d3_svg_lineLinearClosed,
        step: d3_svg_lineStep,
        "step-before": d3_svg_lineStepBefore,
        "step-after": d3_svg_lineStepAfter,
        basis: d3_svg_lineBasis,
        "basis-open": d3_svg_lineBasisOpen,
        "basis-closed": d3_svg_lineBasisClosed,
        bundle: d3_svg_lineBundle,
        cardinal: d3_svg_lineCardinal,
        "cardinal-open": d3_svg_lineCardinalOpen,
        "cardinal-closed": d3_svg_lineCardinalClosed,
        monotone: d3_svg_lineMonotone
      });
      d3_svg_lineInterpolators.forEach(function(key, value) {
        value.key = key;
        value.closed = /-closed$/.test(key);
      });
      function d3_svg_lineLinear(points) {
        return points.length > 1 ? points.join("L") : points + "Z";
      }
      function d3_svg_lineLinearClosed(points) {
        return points.join("L") + "Z";
      }
      function d3_svg_lineStep(points) {
        var i = 0, n = points.length, p = points[0], path2 = [p[0], ",", p[1]];
        while (++i < n)
          path2.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
        if (n > 1)
          path2.push("H", p[0]);
        return path2.join("");
      }
      function d3_svg_lineStepBefore(points) {
        var i = 0, n = points.length, p = points[0], path2 = [p[0], ",", p[1]];
        while (++i < n)
          path2.push("V", (p = points[i])[1], "H", p[0]);
        return path2.join("");
      }
      function d3_svg_lineStepAfter(points) {
        var i = 0, n = points.length, p = points[0], path2 = [p[0], ",", p[1]];
        while (++i < n)
          path2.push("H", (p = points[i])[0], "V", p[1]);
        return path2.join("");
      }
      function d3_svg_lineCardinalOpen(points, tension) {
        return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
      }
      function d3_svg_lineCardinalClosed(points, tension) {
        return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
      }
      function d3_svg_lineCardinal(points, tension) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
      }
      function d3_svg_lineHermite(points, tangents) {
        if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
          return d3_svg_lineLinear(points);
        }
        var quad = points.length != tangents.length, path2 = "", p0 = points[0], p = points[1], t03 = tangents[0], t = t03, pi3 = 1;
        if (quad) {
          path2 += "Q" + (p[0] - t03[0] * 2 / 3) + "," + (p[1] - t03[1] * 2 / 3) + "," + p[0] + "," + p[1];
          p0 = points[1];
          pi3 = 2;
        }
        if (tangents.length > 1) {
          t = tangents[1];
          p = points[pi3];
          pi3++;
          path2 += "C" + (p0[0] + t03[0]) + "," + (p0[1] + t03[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
          for (var i = 2; i < tangents.length; i++, pi3++) {
            p = points[pi3];
            t = tangents[i];
            path2 += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
          }
        }
        if (quad) {
          var lp = points[pi3];
          path2 += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
        }
        return path2;
      }
      function d3_svg_lineCardinalTangents(points, tension) {
        var tangents = [], a2 = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
        while (++i < n) {
          p0 = p1;
          p1 = p2;
          p2 = points[i];
          tangents.push([a2 * (p2[0] - p0[0]), a2 * (p2[1] - p0[1])]);
        }
        return tangents;
      }
      function d3_svg_lineBasis(points) {
        if (points.length < 3)
          return d3_svg_lineLinear(points);
        var i = 1, n = points.length, pi3 = points[0], x0 = pi3[0], y0 = pi3[1], px = [x0, x0, x0, (pi3 = points[1])[0]], py = [y0, y0, y0, pi3[1]], path2 = [x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
        points.push(points[n - 1]);
        while (++i <= n) {
          pi3 = points[i];
          px.shift();
          px.push(pi3[0]);
          py.shift();
          py.push(pi3[1]);
          d3_svg_lineBasisBezier(path2, px, py);
        }
        points.pop();
        path2.push("L", pi3);
        return path2.join("");
      }
      function d3_svg_lineBasisOpen(points) {
        if (points.length < 4)
          return d3_svg_lineLinear(points);
        var path2 = [], i = -1, n = points.length, pi3, px = [0], py = [0];
        while (++i < 3) {
          pi3 = points[i];
          px.push(pi3[0]);
          py.push(pi3[1]);
        }
        path2.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
        --i;
        while (++i < n) {
          pi3 = points[i];
          px.shift();
          px.push(pi3[0]);
          py.shift();
          py.push(pi3[1]);
          d3_svg_lineBasisBezier(path2, px, py);
        }
        return path2.join("");
      }
      function d3_svg_lineBasisClosed(points) {
        var path2, i = -1, n = points.length, m = n + 4, pi3, px = [], py = [];
        while (++i < 4) {
          pi3 = points[i % n];
          px.push(pi3[0]);
          py.push(pi3[1]);
        }
        path2 = [d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)];
        --i;
        while (++i < m) {
          pi3 = points[i % n];
          px.shift();
          px.push(pi3[0]);
          py.shift();
          py.push(pi3[1]);
          d3_svg_lineBasisBezier(path2, px, py);
        }
        return path2.join("");
      }
      function d3_svg_lineBundle(points, tension) {
        var n = points.length - 1;
        if (n) {
          var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
          while (++i <= n) {
            p = points[i];
            t = i / n;
            p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
            p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
          }
        }
        return d3_svg_lineBasis(points);
      }
      function d3_svg_lineDot4(a2, b) {
        return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2] + a2[3] * b[3];
      }
      var d3_svg_lineBasisBezier1 = [0, 2 / 3, 1 / 3, 0], d3_svg_lineBasisBezier2 = [0, 1 / 3, 2 / 3, 0], d3_svg_lineBasisBezier3 = [0, 1 / 6, 2 / 3, 1 / 6];
      function d3_svg_lineBasisBezier(path2, x2, y2) {
        path2.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x2), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y2), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x2), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y2), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x2), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y2));
      }
      function d3_svg_lineSlope(p0, p1) {
        return (p1[1] - p0[1]) / (p1[0] - p0[0]);
      }
      function d3_svg_lineFiniteDifferences(points) {
        var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
        while (++i < j) {
          m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
        }
        m[i] = d;
        return m;
      }
      function d3_svg_lineMonotoneTangents(points) {
        var tangents = [], d, a2, b, s2, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
        while (++i < j) {
          d = d3_svg_lineSlope(points[i], points[i + 1]);
          if (abs(d) < ε) {
            m[i] = m[i + 1] = 0;
          } else {
            a2 = m[i] / d;
            b = m[i + 1] / d;
            s2 = a2 * a2 + b * b;
            if (s2 > 9) {
              s2 = d * 3 / Math.sqrt(s2);
              m[i] = s2 * a2;
              m[i + 1] = s2 * b;
            }
          }
        }
        i = -1;
        while (++i <= j) {
          s2 = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
          tangents.push([s2 || 0, m[i] * s2 || 0]);
        }
        return tangents;
      }
      function d3_svg_lineMonotone(points) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
      }
      d32.svg.line.radial = function() {
        var line = d3_svg_line(d3_svg_lineRadial);
        line.radius = line.x, delete line.x;
        line.angle = line.y, delete line.y;
        return line;
      };
      function d3_svg_lineRadial(points) {
        var point6, i = -1, n = points.length, r, a2;
        while (++i < n) {
          point6 = points[i];
          r = point6[0];
          a2 = point6[1] - halfπ;
          point6[0] = r * Math.cos(a2);
          point6[1] = r * Math.sin(a2);
        }
        return points;
      }
      function d3_svg_area(projection) {
        var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = 0.7;
        function area(data) {
          var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
            return x2;
          } : d3_functor(x1), fy1 = y0 === y1 ? function() {
            return y2;
          } : d3_functor(y1), x2, y2;
          function segment() {
            segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
          }
          while (++i < n) {
            if (defined.call(this, d = data[i], i)) {
              points0.push([x2 = +fx0.call(this, d, i), y2 = +fy0.call(this, d, i)]);
              points1.push([+fx1.call(this, d, i), +fy1.call(this, d, i)]);
            } else if (points0.length) {
              segment();
              points0 = [];
              points1 = [];
            }
          }
          if (points0.length)
            segment();
          return segments.length ? segments.join("") : null;
        }
        area.x = function(_) {
          if (!arguments.length)
            return x1;
          x0 = x1 = _;
          return area;
        };
        area.x0 = function(_) {
          if (!arguments.length)
            return x0;
          x0 = _;
          return area;
        };
        area.x1 = function(_) {
          if (!arguments.length)
            return x1;
          x1 = _;
          return area;
        };
        area.y = function(_) {
          if (!arguments.length)
            return y1;
          y0 = y1 = _;
          return area;
        };
        area.y0 = function(_) {
          if (!arguments.length)
            return y0;
          y0 = _;
          return area;
        };
        area.y1 = function(_) {
          if (!arguments.length)
            return y1;
          y1 = _;
          return area;
        };
        area.defined = function(_) {
          if (!arguments.length)
            return defined;
          defined = _;
          return area;
        };
        area.interpolate = function(_) {
          if (!arguments.length)
            return interpolateKey;
          if (typeof _ === "function")
            interpolateKey = interpolate = _;
          else
            interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
          interpolateReverse = interpolate.reverse || interpolate;
          L = interpolate.closed ? "M" : "L";
          return area;
        };
        area.tension = function(_) {
          if (!arguments.length)
            return tension;
          tension = _;
          return area;
        };
        return area;
      }
      d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
      d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
      d32.svg.area = function() {
        return d3_svg_area(d3_identity);
      };
      d32.svg.area.radial = function() {
        var area = d3_svg_area(d3_svg_lineRadial);
        area.radius = area.x, delete area.x;
        area.innerRadius = area.x0, delete area.x0;
        area.outerRadius = area.x1, delete area.x1;
        area.angle = area.y, delete area.y;
        area.startAngle = area.y0, delete area.y0;
        area.endAngle = area.y1, delete area.y1;
        return area;
      };
      d32.svg.chord = function() {
        var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
        function chord(d, i) {
          var s2 = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
          return "M" + s2.p0 + arc(s2.r, s2.p1, s2.a1 - s2.a0) + (equals(s2, t) ? curve(s2.r, s2.p1, s2.r, s2.p0) : curve(s2.r, s2.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s2.r, s2.p0)) + "Z";
        }
        function subgroup(self, f, d, i) {
          var subgroup2 = f.call(self, d, i), r = radius.call(self, subgroup2, i), a0 = startAngle.call(self, subgroup2, i) - halfπ, a1 = endAngle.call(self, subgroup2, i) - halfπ;
          return {
            r,
            a0,
            a1,
            p0: [r * Math.cos(a0), r * Math.sin(a0)],
            p1: [r * Math.cos(a1), r * Math.sin(a1)]
          };
        }
        function equals(a2, b) {
          return a2.a0 == b.a0 && a2.a1 == b.a1;
        }
        function arc(r, p, a2) {
          return "A" + r + "," + r + " 0 " + +(a2 > π) + ",1 " + p;
        }
        function curve(r0, p0, r1, p1) {
          return "Q 0,0 " + p1;
        }
        chord.radius = function(v) {
          if (!arguments.length)
            return radius;
          radius = d3_functor(v);
          return chord;
        };
        chord.source = function(v) {
          if (!arguments.length)
            return source;
          source = d3_functor(v);
          return chord;
        };
        chord.target = function(v) {
          if (!arguments.length)
            return target;
          target = d3_functor(v);
          return chord;
        };
        chord.startAngle = function(v) {
          if (!arguments.length)
            return startAngle;
          startAngle = d3_functor(v);
          return chord;
        };
        chord.endAngle = function(v) {
          if (!arguments.length)
            return endAngle;
          endAngle = d3_functor(v);
          return chord;
        };
        return chord;
      };
      function d3_svg_chordRadius(d) {
        return d.radius;
      }
      d32.svg.diagonal = function() {
        var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
        function diagonal(d, i) {
          var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [p0, {
            x: p0.x,
            y: m
          }, {
            x: p3.x,
            y: m
          }, p3];
          p = p.map(projection);
          return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
        }
        diagonal.source = function(x2) {
          if (!arguments.length)
            return source;
          source = d3_functor(x2);
          return diagonal;
        };
        diagonal.target = function(x2) {
          if (!arguments.length)
            return target;
          target = d3_functor(x2);
          return diagonal;
        };
        diagonal.projection = function(x2) {
          if (!arguments.length)
            return projection;
          projection = x2;
          return diagonal;
        };
        return diagonal;
      };
      function d3_svg_diagonalProjection(d) {
        return [d.x, d.y];
      }
      d32.svg.diagonal.radial = function() {
        var diagonal = d32.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
        diagonal.projection = function(x2) {
          return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x2)) : projection;
        };
        return diagonal;
      };
      function d3_svg_diagonalRadialProjection(projection) {
        return function() {
          var d = projection.apply(this, arguments), r = d[0], a2 = d[1] - halfπ;
          return [r * Math.cos(a2), r * Math.sin(a2)];
        };
      }
      d32.svg.symbol = function() {
        var type = d3_svg_symbolType, size = d3_svg_symbolSize;
        function symbol2(d, i) {
          return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
        }
        symbol2.type = function(x2) {
          if (!arguments.length)
            return type;
          type = d3_functor(x2);
          return symbol2;
        };
        symbol2.size = function(x2) {
          if (!arguments.length)
            return size;
          size = d3_functor(x2);
          return symbol2;
        };
        return symbol2;
      };
      function d3_svg_symbolSize() {
        return 64;
      }
      function d3_svg_symbolType() {
        return "circle";
      }
      function d3_svg_symbolCircle(size) {
        var r = Math.sqrt(size / π);
        return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
      }
      var d3_svg_symbols = d32.map({
        circle: d3_svg_symbolCircle,
        cross: function(size) {
          var r = Math.sqrt(size / 5) / 2;
          return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
        },
        diamond: function(size) {
          var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
          return "M0," + -ry + "L" + rx + ",0 0," + ry + " " + -rx + ",0Z";
        },
        square: function(size) {
          var r = Math.sqrt(size) / 2;
          return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
        },
        "triangle-down": function(size) {
          var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
          return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
        },
        "triangle-up": function(size) {
          var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
          return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
        }
      });
      d32.svg.symbolTypes = d3_svg_symbols.keys();
      var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
      d3_selectionPrototype.transition = function(name) {
        var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
          time: Date.now(),
          ease: d3_ease_cubicInOut,
          delay: 0,
          duration: 250
        };
        for (var j = -1, m = this.length; ++j < m; ) {
          subgroups.push(subgroup = []);
          for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
            if (node = group[i])
              d3_transitionNode(node, i, ns, id, transition);
            subgroup.push(node);
          }
        }
        return d3_transition(subgroups, ns, id);
      };
      d3_selectionPrototype.interrupt = function(name) {
        return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
      };
      var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
      function d3_selection_interruptNS(ns) {
        return function() {
          var lock, activeId, active;
          if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
            active.timer.c = null;
            active.timer.t = NaN;
            if (--lock.count)
              delete lock[activeId];
            else
              delete this[ns];
            lock.active += 0.5;
            active.event && active.event.interrupt.call(this, this.__data__, active.index);
          }
        };
      }
      function d3_transition(groups, ns, id) {
        d3_subclass(groups, d3_transitionPrototype);
        groups.namespace = ns;
        groups.id = id;
        return groups;
      }
      var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
      d3_transitionPrototype.call = d3_selectionPrototype.call;
      d3_transitionPrototype.empty = d3_selectionPrototype.empty;
      d3_transitionPrototype.node = d3_selectionPrototype.node;
      d3_transitionPrototype.size = d3_selectionPrototype.size;
      d32.transition = function(selection2, name) {
        return selection2 && selection2.transition ? d3_transitionInheritId ? selection2.transition(name) : selection2 : d32.selection().transition(selection2);
      };
      d32.transition.prototype = d3_transitionPrototype;
      d3_transitionPrototype.select = function(selector) {
        var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
          subgroups.push(subgroup = []);
          for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
            if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
              if ("__data__" in node)
                subnode.__data__ = node.__data__;
              d3_transitionNode(subnode, i, ns, id, node[ns][id]);
              subgroup.push(subnode);
            } else {
              subgroup.push(null);
            }
          }
        }
        return d3_transition(subgroups, ns, id);
      };
      d3_transitionPrototype.selectAll = function(selector) {
        var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m; ) {
          for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
            if (node = group[i]) {
              transition = node[ns][id];
              subnodes = selector.call(node, node.__data__, i, j);
              subgroups.push(subgroup = []);
              for (var k2 = -1, o = subnodes.length; ++k2 < o; ) {
                if (subnode = subnodes[k2])
                  d3_transitionNode(subnode, k2, ns, id, transition);
                subgroup.push(subnode);
              }
            }
          }
        }
        return d3_transition(subgroups, ns, id);
      };
      d3_transitionPrototype.filter = function(filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== "function")
          filter = d3_selection_filter(filter);
        for (var j = 0, m = this.length; j < m; j++) {
          subgroups.push(subgroup = []);
          for (var group = this[j], i = 0, n = group.length; i < n; i++) {
            if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
              subgroup.push(node);
            }
          }
        }
        return d3_transition(subgroups, this.namespace, this.id);
      };
      d3_transitionPrototype.tween = function(name, tween) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 2)
          return this.node()[ns][id].tween.get(name);
        return d3_selection_each(this, tween == null ? function(node) {
          node[ns][id].tween.remove(name);
        } : function(node) {
          node[ns][id].tween.set(name, tween);
        });
      };
      function d3_transition_tween(groups, name, value, tween) {
        var id = groups.id, ns = groups.namespace;
        return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
          node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
        } : (value = tween(value), function(node) {
          node[ns][id].tween.set(name, value);
        }));
      }
      d3_transitionPrototype.attr = function(nameNS, value) {
        if (arguments.length < 2) {
          for (value in nameNS)
            this.attr(value, nameNS[value]);
          return this;
        }
        var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d32.ns.qualify(nameNS);
        function attrNull() {
          this.removeAttribute(name);
        }
        function attrNullNS() {
          this.removeAttributeNS(name.space, name.local);
        }
        function attrTween(b) {
          return b == null ? attrNull : (b += "", function() {
            var a2 = this.getAttribute(name), i;
            return a2 !== b && (i = interpolate(a2, b), function(t) {
              this.setAttribute(name, i(t));
            });
          });
        }
        function attrTweenNS(b) {
          return b == null ? attrNullNS : (b += "", function() {
            var a2 = this.getAttributeNS(name.space, name.local), i;
            return a2 !== b && (i = interpolate(a2, b), function(t) {
              this.setAttributeNS(name.space, name.local, i(t));
            });
          });
        }
        return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
      };
      d3_transitionPrototype.attrTween = function(nameNS, tween) {
        var name = d32.ns.qualify(nameNS);
        function attrTween(d, i) {
          var f = tween.call(this, d, i, this.getAttribute(name));
          return f && function(t) {
            this.setAttribute(name, f(t));
          };
        }
        function attrTweenNS(d, i) {
          var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
          return f && function(t) {
            this.setAttributeNS(name.space, name.local, f(t));
          };
        }
        return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
      };
      d3_transitionPrototype.style = function(name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
          if (typeof name !== "string") {
            if (n < 2)
              value = "";
            for (priority in name)
              this.style(priority, name[priority], value);
            return this;
          }
          priority = "";
        }
        function styleNull() {
          this.style.removeProperty(name);
        }
        function styleString(b) {
          return b == null ? styleNull : (b += "", function() {
            var a2 = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
            return a2 !== b && (i = d3_interpolate(a2, b), function(t) {
              this.style.setProperty(name, i(t), priority);
            });
          });
        }
        return d3_transition_tween(this, "style." + name, value, styleString);
      };
      d3_transitionPrototype.styleTween = function(name, tween, priority) {
        if (arguments.length < 3)
          priority = "";
        function styleTween(d, i) {
          var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
          return f && function(t) {
            this.style.setProperty(name, f(t), priority);
          };
        }
        return this.tween("style." + name, styleTween);
      };
      d3_transitionPrototype.text = function(value) {
        return d3_transition_tween(this, "text", value, d3_transition_text);
      };
      function d3_transition_text(b) {
        if (b == null)
          b = "";
        return function() {
          this.textContent = b;
        };
      }
      d3_transitionPrototype.remove = function() {
        var ns = this.namespace;
        return this.each("end.transition", function() {
          var p;
          if (this[ns].count < 2 && (p = this.parentNode))
            p.removeChild(this);
        });
      };
      d3_transitionPrototype.ease = function(value) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 1)
          return this.node()[ns][id].ease;
        if (typeof value !== "function")
          value = d32.ease.apply(d32, arguments);
        return d3_selection_each(this, function(node) {
          node[ns][id].ease = value;
        });
      };
      d3_transitionPrototype.delay = function(value) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 1)
          return this.node()[ns][id].delay;
        return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
          node[ns][id].delay = +value.call(node, node.__data__, i, j);
        } : (value = +value, function(node) {
          node[ns][id].delay = value;
        }));
      };
      d3_transitionPrototype.duration = function(value) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 1)
          return this.node()[ns][id].duration;
        return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
          node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
        } : (value = Math.max(1, value), function(node) {
          node[ns][id].duration = value;
        }));
      };
      d3_transitionPrototype.each = function(type, listener) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 2) {
          var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
          try {
            d3_transitionInheritId = id;
            d3_selection_each(this, function(node, i, j) {
              d3_transitionInherit = node[ns][id];
              type.call(node, node.__data__, i, j);
            });
          } finally {
            d3_transitionInherit = inherit;
            d3_transitionInheritId = inheritId;
          }
        } else {
          d3_selection_each(this, function(node) {
            var transition = node[ns][id];
            (transition.event || (transition.event = d32.dispatch("start", "end", "interrupt"))).on(type, listener);
          });
        }
        return this;
      };
      d3_transitionPrototype.transition = function() {
        var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
        for (var j = 0, m = this.length; j < m; j++) {
          subgroups.push(subgroup = []);
          for (var group = this[j], i = 0, n = group.length; i < n; i++) {
            if (node = group[i]) {
              transition = node[ns][id0];
              d3_transitionNode(node, i, ns, id1, {
                time: transition.time,
                ease: transition.ease,
                delay: transition.delay + transition.duration,
                duration: transition.duration
              });
            }
            subgroup.push(node);
          }
        }
        return d3_transition(subgroups, ns, id1);
      };
      function d3_transitionNamespace(name) {
        return name == null ? "__transition__" : "__transition_" + name + "__";
      }
      function d3_transitionNode(node, i, ns, id, inherit) {
        var lock = node[ns] || (node[ns] = {
          active: 0,
          count: 0
        }), transition = lock[id], time, timer, duration, ease, tweens;
        function schedule(elapsed) {
          var delay = transition.delay;
          timer.t = delay + time;
          if (delay <= elapsed)
            return start(elapsed - delay);
          timer.c = start;
        }
        function start(elapsed) {
          var activeId = lock.active, active = lock[activeId];
          if (active) {
            active.timer.c = null;
            active.timer.t = NaN;
            --lock.count;
            delete lock[activeId];
            active.event && active.event.interrupt.call(node, node.__data__, active.index);
          }
          for (var cancelId in lock) {
            if (+cancelId < id) {
              var cancel = lock[cancelId];
              cancel.timer.c = null;
              cancel.timer.t = NaN;
              --lock.count;
              delete lock[cancelId];
            }
          }
          timer.c = tick;
          d3_timer(function() {
            if (timer.c && tick(elapsed || 1)) {
              timer.c = null;
              timer.t = NaN;
            }
            return 1;
          }, 0, time);
          lock.active = id;
          transition.event && transition.event.start.call(node, node.__data__, i);
          tweens = [];
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, node.__data__, i)) {
              tweens.push(value);
            }
          });
          ease = transition.ease;
          duration = transition.duration;
        }
        function tick(elapsed) {
          var t = elapsed / duration, e = ease(t), n = tweens.length;
          while (n > 0) {
            tweens[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, node.__data__, i);
            if (--lock.count)
              delete lock[id];
            else
              delete node[ns];
            return 1;
          }
        }
        if (!transition) {
          time = inherit.time;
          timer = d3_timer(schedule, 0, time);
          transition = lock[id] = {
            tween: new d3_Map(),
            time,
            timer,
            delay: inherit.delay,
            duration: inherit.duration,
            ease: inherit.ease,
            index: i
          };
          inherit = null;
          ++lock.count;
        }
      }
      d32.svg.axis = function() {
        var scale = d32.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [10], tickValues = null, tickFormat_;
        function axis2(g) {
          g.each(function() {
            var g2 = d32.select(this);
            var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
            var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g2.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d32.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d32.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
            var range = d3_scaleRange(scale1), path2 = g2.selectAll(".domain").data([0]), pathUpdate = (path2.enter().append("path").attr("class", "domain"), d32.transition(path2));
            tickEnter.append("line");
            tickEnter.append("text");
            var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign2 = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
            if (orient === "bottom" || orient === "top") {
              tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
              text.attr("dy", sign2 < 0 ? "0em" : ".71em").style("text-anchor", "middle");
              pathUpdate.attr("d", "M" + range[0] + "," + sign2 * outerTickSize + "V0H" + range[1] + "V" + sign2 * outerTickSize);
            } else {
              tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
              text.attr("dy", ".32em").style("text-anchor", sign2 < 0 ? "end" : "start");
              pathUpdate.attr("d", "M" + sign2 * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign2 * outerTickSize);
            }
            lineEnter.attr(y2, sign2 * innerTickSize);
            textEnter.attr(y1, sign2 * tickSpacing);
            lineUpdate.attr(x2, 0).attr(y2, sign2 * innerTickSize);
            textUpdate.attr(x1, 0).attr(y1, sign2 * tickSpacing);
            if (scale1.rangeBand) {
              var x3 = scale1, dx = x3.rangeBand() / 2;
              scale0 = scale1 = function(d) {
                return x3(d) + dx;
              };
            } else if (scale0.rangeBand) {
              scale0 = scale1;
            } else {
              tickExit.call(tickTransform, scale1, scale0);
            }
            tickEnter.call(tickTransform, scale0, scale1);
            tickUpdate.call(tickTransform, scale1, scale1);
          });
        }
        axis2.scale = function(x2) {
          if (!arguments.length)
            return scale;
          scale = x2;
          return axis2;
        };
        axis2.orient = function(x2) {
          if (!arguments.length)
            return orient;
          orient = x2 in d3_svg_axisOrients ? x2 + "" : d3_svg_axisDefaultOrient;
          return axis2;
        };
        axis2.ticks = function() {
          if (!arguments.length)
            return tickArguments_;
          tickArguments_ = d3_array(arguments);
          return axis2;
        };
        axis2.tickValues = function(x2) {
          if (!arguments.length)
            return tickValues;
          tickValues = x2;
          return axis2;
        };
        axis2.tickFormat = function(x2) {
          if (!arguments.length)
            return tickFormat_;
          tickFormat_ = x2;
          return axis2;
        };
        axis2.tickSize = function(x2) {
          var n = arguments.length;
          if (!n)
            return innerTickSize;
          innerTickSize = +x2;
          outerTickSize = +arguments[n - 1];
          return axis2;
        };
        axis2.innerTickSize = function(x2) {
          if (!arguments.length)
            return innerTickSize;
          innerTickSize = +x2;
          return axis2;
        };
        axis2.outerTickSize = function(x2) {
          if (!arguments.length)
            return outerTickSize;
          outerTickSize = +x2;
          return axis2;
        };
        axis2.tickPadding = function(x2) {
          if (!arguments.length)
            return tickPadding;
          tickPadding = +x2;
          return axis2;
        };
        axis2.tickSubdivide = function() {
          return arguments.length && axis2;
        };
        return axis2;
      };
      var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
        top: 1,
        right: 1,
        bottom: 1,
        left: 1
      };
      function d3_svg_axisX(selection2, x0, x1) {
        selection2.attr("transform", function(d) {
          var v0 = x0(d);
          return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
        });
      }
      function d3_svg_axisY(selection2, y0, y1) {
        selection2.attr("transform", function(d) {
          var v0 = y0(d);
          return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
        });
      }
      d32.svg.brush = function() {
        var event2 = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x2 = null, y2 = null, xExtent = [0, 0], yExtent = [0, 0], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
        function brush(g) {
          g.each(function() {
            var g2 = d32.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
            var background = g2.selectAll(".background").data([0]);
            background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
            g2.selectAll(".extent").data([0]).enter().append("rect").attr("class", "extent").style("cursor", "move");
            var resize = g2.selectAll(".resize").data(resizes, d3_identity);
            resize.exit().remove();
            resize.enter().append("g").attr("class", function(d) {
              return "resize " + d;
            }).style("cursor", function(d) {
              return d3_svg_brushCursor[d];
            }).append("rect").attr("x", function(d) {
              return /[ew]$/.test(d) ? -3 : null;
            }).attr("y", function(d) {
              return /^[ns]/.test(d) ? -3 : null;
            }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
            resize.style("display", brush.empty() ? "none" : null);
            var gUpdate = d32.transition(g2), backgroundUpdate = d32.transition(background), range;
            if (x2) {
              range = d3_scaleRange(x2);
              backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
              redrawX(gUpdate);
            }
            if (y2) {
              range = d3_scaleRange(y2);
              backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
              redrawY(gUpdate);
            }
            redraw(gUpdate);
          });
        }
        brush.event = function(g) {
          g.each(function() {
            var event_ = event2.of(this, arguments), extent1 = {
              x: xExtent,
              y: yExtent,
              i: xExtentDomain,
              j: yExtentDomain
            }, extent0 = this.__chart__ || extent1;
            this.__chart__ = extent1;
            if (d3_transitionInheritId) {
              d32.select(this).transition().each("start.brush", function() {
                xExtentDomain = extent0.i;
                yExtentDomain = extent0.j;
                xExtent = extent0.x;
                yExtent = extent0.y;
                event_({
                  type: "brushstart"
                });
              }).tween("brush:brush", function() {
                var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
                xExtentDomain = yExtentDomain = null;
                return function(t) {
                  xExtent = extent1.x = xi(t);
                  yExtent = extent1.y = yi(t);
                  event_({
                    type: "brush",
                    mode: "resize"
                  });
                };
              }).each("end.brush", function() {
                xExtentDomain = extent1.i;
                yExtentDomain = extent1.j;
                event_({
                  type: "brush",
                  mode: "resize"
                });
                event_({
                  type: "brushend"
                });
              });
            } else {
              event_({
                type: "brushstart"
              });
              event_({
                type: "brush",
                mode: "resize"
              });
              event_({
                type: "brushend"
              });
            }
          });
        };
        function redraw(g) {
          g.selectAll(".resize").attr("transform", function(d) {
            return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
          });
        }
        function redrawX(g) {
          g.select(".extent").attr("x", xExtent[0]);
          g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
        }
        function redrawY(g) {
          g.select(".extent").attr("y", yExtent[0]);
          g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
        }
        function brushstart() {
          var target = this, eventTarget = d32.select(d32.event.target), event_ = event2.of(target, arguments), g = d32.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x2, resizingY = !/^(e|w)$/.test(resizing) && y2, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center2, origin = d32.mouse(target), offset;
          var w = d32.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
          if (d32.event.changedTouches) {
            w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
          } else {
            w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
          }
          g.interrupt().selectAll("*").interrupt();
          if (dragging) {
            origin[0] = xExtent[0] - origin[0];
            origin[1] = yExtent[0] - origin[1];
          } else if (resizing) {
            var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
            offset = [xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1]];
            origin[0] = xExtent[ex];
            origin[1] = yExtent[ey];
          } else if (d32.event.altKey)
            center2 = origin.slice();
          g.style("pointer-events", "none").selectAll(".resize").style("display", null);
          d32.select("body").style("cursor", eventTarget.style("cursor"));
          event_({
            type: "brushstart"
          });
          brushmove();
          function keydown() {
            if (d32.event.keyCode == 32) {
              if (!dragging) {
                center2 = null;
                origin[0] -= xExtent[1];
                origin[1] -= yExtent[1];
                dragging = 2;
              }
              d3_eventPreventDefault();
            }
          }
          function keyup() {
            if (d32.event.keyCode == 32 && dragging == 2) {
              origin[0] += xExtent[1];
              origin[1] += yExtent[1];
              dragging = 0;
              d3_eventPreventDefault();
            }
          }
          function brushmove() {
            var point6 = d32.mouse(target), moved = false;
            if (offset) {
              point6[0] += offset[0];
              point6[1] += offset[1];
            }
            if (!dragging) {
              if (d32.event.altKey) {
                if (!center2)
                  center2 = [(xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2];
                origin[0] = xExtent[+(point6[0] < center2[0])];
                origin[1] = yExtent[+(point6[1] < center2[1])];
              } else
                center2 = null;
            }
            if (resizingX && move1(point6, x2, 0)) {
              redrawX(g);
              moved = true;
            }
            if (resizingY && move1(point6, y2, 1)) {
              redrawY(g);
              moved = true;
            }
            if (moved) {
              redraw(g);
              event_({
                type: "brush",
                mode: dragging ? "move" : "resize"
              });
            }
          }
          function move1(point6, scale, i) {
            var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
            if (dragging) {
              r0 -= position;
              r1 -= size + position;
            }
            min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point6[i])) : point6[i];
            if (dragging) {
              max = (min += position) + size;
            } else {
              if (center2)
                position = Math.max(r0, Math.min(r1, 2 * center2[i] - min));
              if (position < min) {
                max = min;
                min = position;
              } else {
                max = position;
              }
            }
            if (extent[0] != min || extent[1] != max) {
              if (i)
                yExtentDomain = null;
              else
                xExtentDomain = null;
              extent[0] = min;
              extent[1] = max;
              return true;
            }
          }
          function brushend() {
            brushmove();
            g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
            d32.select("body").style("cursor", null);
            w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
            dragRestore();
            event_({
              type: "brushend"
            });
          }
        }
        brush.x = function(z) {
          if (!arguments.length)
            return x2;
          x2 = z;
          resizes = d3_svg_brushResizes[!x2 << 1 | !y2];
          return brush;
        };
        brush.y = function(z) {
          if (!arguments.length)
            return y2;
          y2 = z;
          resizes = d3_svg_brushResizes[!x2 << 1 | !y2];
          return brush;
        };
        brush.clamp = function(z) {
          if (!arguments.length)
            return x2 && y2 ? [xClamp, yClamp] : x2 ? xClamp : y2 ? yClamp : null;
          if (x2 && y2)
            xClamp = !!z[0], yClamp = !!z[1];
          else if (x2)
            xClamp = !!z;
          else if (y2)
            yClamp = !!z;
          return brush;
        };
        brush.extent = function(z) {
          var x0, x1, y0, y1, t;
          if (!arguments.length) {
            if (x2) {
              if (xExtentDomain) {
                x0 = xExtentDomain[0], x1 = xExtentDomain[1];
              } else {
                x0 = xExtent[0], x1 = xExtent[1];
                if (x2.invert)
                  x0 = x2.invert(x0), x1 = x2.invert(x1);
                if (x1 < x0)
                  t = x0, x0 = x1, x1 = t;
              }
            }
            if (y2) {
              if (yExtentDomain) {
                y0 = yExtentDomain[0], y1 = yExtentDomain[1];
              } else {
                y0 = yExtent[0], y1 = yExtent[1];
                if (y2.invert)
                  y0 = y2.invert(y0), y1 = y2.invert(y1);
                if (y1 < y0)
                  t = y0, y0 = y1, y1 = t;
              }
            }
            return x2 && y2 ? [[x0, y0], [x1, y1]] : x2 ? [x0, x1] : y2 && [y0, y1];
          }
          if (x2) {
            x0 = z[0], x1 = z[1];
            if (y2)
              x0 = x0[0], x1 = x1[0];
            xExtentDomain = [x0, x1];
            if (x2.invert)
              x0 = x2(x0), x1 = x2(x1);
            if (x1 < x0)
              t = x0, x0 = x1, x1 = t;
            if (x0 != xExtent[0] || x1 != xExtent[1])
              xExtent = [x0, x1];
          }
          if (y2) {
            y0 = z[0], y1 = z[1];
            if (x2)
              y0 = y0[1], y1 = y1[1];
            yExtentDomain = [y0, y1];
            if (y2.invert)
              y0 = y2(y0), y1 = y2(y1);
            if (y1 < y0)
              t = y0, y0 = y1, y1 = t;
            if (y0 != yExtent[0] || y1 != yExtent[1])
              yExtent = [y0, y1];
          }
          return brush;
        };
        brush.clear = function() {
          if (!brush.empty()) {
            xExtent = [0, 0], yExtent = [0, 0];
            xExtentDomain = yExtentDomain = null;
          }
          return brush;
        };
        brush.empty = function() {
          return !!x2 && xExtent[0] == xExtent[1] || !!y2 && yExtent[0] == yExtent[1];
        };
        return d32.rebind(brush, event2, "on");
      };
      var d3_svg_brushCursor = {
        n: "ns-resize",
        e: "ew-resize",
        s: "ns-resize",
        w: "ew-resize",
        nw: "nwse-resize",
        ne: "nesw-resize",
        se: "nwse-resize",
        sw: "nesw-resize"
      };
      var d3_svg_brushResizes = [["n", "e", "s", "w", "nw", "ne", "se", "sw"], ["e", "w"], ["n", "s"], []];
      var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
      var d3_time_formatUtc = d3_time_format.utc;
      var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
      d3_time_format.iso = Date.prototype.toISOString && +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
      function d3_time_formatIsoNative(date) {
        return date.toISOString();
      }
      d3_time_formatIsoNative.parse = function(string) {
        var date = new Date(string);
        return isNaN(date) ? null : date;
      };
      d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
      d3_time.second = d3_time_interval(function(date) {
        return new d3_date(Math.floor(date / 1e3) * 1e3);
      }, function(date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 1e3);
      }, function(date) {
        return date.getSeconds();
      });
      d3_time.seconds = d3_time.second.range;
      d3_time.seconds.utc = d3_time.second.utc.range;
      d3_time.minute = d3_time_interval(function(date) {
        return new d3_date(Math.floor(date / 6e4) * 6e4);
      }, function(date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 6e4);
      }, function(date) {
        return date.getMinutes();
      });
      d3_time.minutes = d3_time.minute.range;
      d3_time.minutes.utc = d3_time.minute.utc.range;
      d3_time.hour = d3_time_interval(function(date) {
        var timezone = date.getTimezoneOffset() / 60;
        return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
      }, function(date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 36e5);
      }, function(date) {
        return date.getHours();
      });
      d3_time.hours = d3_time.hour.range;
      d3_time.hours.utc = d3_time.hour.utc.range;
      d3_time.month = d3_time_interval(function(date) {
        date = d3_time.day(date);
        date.setDate(1);
        return date;
      }, function(date, offset) {
        date.setMonth(date.getMonth() + offset);
      }, function(date) {
        return date.getMonth();
      });
      d3_time.months = d3_time.month.range;
      d3_time.months.utc = d3_time.month.utc.range;
      function d3_time_scale(linear3, methods, format2) {
        function scale(x2) {
          return linear3(x2);
        }
        scale.invert = function(x2) {
          return d3_time_scaleDate(linear3.invert(x2));
        };
        scale.domain = function(x2) {
          if (!arguments.length)
            return linear3.domain().map(d3_time_scaleDate);
          linear3.domain(x2);
          return scale;
        };
        function tickMethod(extent, count) {
          var span = extent[1] - extent[0], target = span / count, i = d32.bisect(d3_time_scaleSteps, target);
          return i == d3_time_scaleSteps.length ? [methods.year, d3_scale_linearTickRange(extent.map(function(d) {
            return d / 31536e6;
          }), count)[2]] : !i ? [d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2]] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
        }
        scale.nice = function(interval, skip) {
          var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
          if (method)
            interval = method[0], skip = method[1];
          function skipped(date) {
            return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
          }
          return scale.domain(d3_scale_nice(domain, skip > 1 ? {
            floor: function(date) {
              while (skipped(date = interval.floor(date)))
                date = d3_time_scaleDate(date - 1);
              return date;
            },
            ceil: function(date) {
              while (skipped(date = interval.ceil(date)))
                date = d3_time_scaleDate(+date + 1);
              return date;
            }
          } : interval));
        };
        scale.ticks = function(interval, skip) {
          var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [{
            range: interval
          }, skip];
          if (method)
            interval = method[0], skip = method[1];
          return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
        };
        scale.tickFormat = function() {
          return format2;
        };
        scale.copy = function() {
          return d3_time_scale(linear3.copy(), methods, format2);
        };
        return d3_scale_linearRebind(scale, linear3);
      }
      function d3_time_scaleDate(t) {
        return new Date(t);
      }
      var d3_time_scaleSteps = [1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6];
      var d3_time_scaleLocalMethods = [[d3_time.second, 1], [d3_time.second, 5], [d3_time.second, 15], [d3_time.second, 30], [d3_time.minute, 1], [d3_time.minute, 5], [d3_time.minute, 15], [d3_time.minute, 30], [d3_time.hour, 1], [d3_time.hour, 3], [d3_time.hour, 6], [d3_time.hour, 12], [d3_time.day, 1], [d3_time.day, 2], [d3_time.week, 1], [d3_time.month, 1], [d3_time.month, 3], [d3_time.year, 1]];
      var d3_time_scaleLocalFormat = d3_time_format.multi([[".%L", function(d) {
        return d.getMilliseconds();
      }], [":%S", function(d) {
        return d.getSeconds();
      }], ["%I:%M", function(d) {
        return d.getMinutes();
      }], ["%I %p", function(d) {
        return d.getHours();
      }], ["%a %d", function(d) {
        return d.getDay() && d.getDate() != 1;
      }], ["%b %d", function(d) {
        return d.getDate() != 1;
      }], ["%B", function(d) {
        return d.getMonth();
      }], ["%Y", d3_true]]);
      var d3_time_scaleMilliseconds = {
        range: function(start, stop, step) {
          return d32.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
        },
        floor: d3_identity,
        ceil: d3_identity
      };
      d3_time_scaleLocalMethods.year = d3_time.year;
      d3_time.scale = function() {
        return d3_time_scale(d32.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
      };
      var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
        return [m[0].utc, m[1]];
      });
      var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([[".%L", function(d) {
        return d.getUTCMilliseconds();
      }], [":%S", function(d) {
        return d.getUTCSeconds();
      }], ["%I:%M", function(d) {
        return d.getUTCMinutes();
      }], ["%I %p", function(d) {
        return d.getUTCHours();
      }], ["%a %d", function(d) {
        return d.getUTCDay() && d.getUTCDate() != 1;
      }], ["%b %d", function(d) {
        return d.getUTCDate() != 1;
      }], ["%B", function(d) {
        return d.getUTCMonth();
      }], ["%Y", d3_true]]);
      d3_time_scaleUtcMethods.year = d3_time.year.utc;
      d3_time.scale.utc = function() {
        return d3_time_scale(d32.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
      };
      d32.text = d3_xhrType(function(request) {
        return request.responseText;
      });
      d32.json = function(url, callback) {
        return d3_xhr(url, "application/json", d3_json, callback);
      };
      function d3_json(request) {
        return JSON.parse(request.responseText);
      }
      d32.html = function(url, callback) {
        return d3_xhr(url, "text/html", d3_html, callback);
      };
      function d3_html(request) {
        var range = d3_document.createRange();
        range.selectNode(d3_document.body);
        return range.createContextualFragment(request.responseText);
      }
      d32.xml = d3_xhrType(function(request) {
        return request.responseXML;
      });
      if (typeof define === "function" && define.amd)
        this.d3 = d32, define(d32);
      else if (typeof module === "object" && module.exports)
        module.exports = d32;
      else
        this.d3 = d32;
    }();
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/utils/series.js
var require_series = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/utils/series.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.series = series;
    var _d = require_d3();
    var _d2 = _interopRequireDefault(_d);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function series(props, horizontal) {
      var data = props.data;
      var chartSeries = props.chartSeries;
      var x2 = props.x;
      var y2 = props.y;
      var categoricalColors = props.categoricalColors;
      categoricalColors = categoricalColors || _d2.default.scale.category10();
      var chartSeriesData = chartSeries.map(function(f, i) {
        f.color = f.color || categoricalColors(i);
        f.name = f.name || f.field;
        var mapping = data.map(function(d) {
          if (!d._style)
            d._style = {};
          if (!horizontal) {
            return {
              x: x2(d),
              y: y2(d[f.field]),
              color: f.color,
              name: f.name,
              field: f.field,
              _style: d._style
            };
          } else {
            return {
              y: y2(d),
              x: x2(d[f.field]),
              color: f.color,
              name: f.name,
              field: f.field,
              _style: d._style
            };
          }
        });
        return Object.assign(f, { data: mapping });
      });
      return chartSeriesData;
    }
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/commonProps.js
var require_commonProps2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/commonProps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.pieProps = void 0;
    var _d3Scale = (init_d3_scale(), __toCommonJS(d3_scale_exports));
    var _d3Scale2 = _interopRequireDefault(_d3Scale);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var width = 960;
    var height = 500;
    var margins = { top: 80, right: 100, bottom: 80, left: 100 };
    exports.default = {
      width,
      height,
      margins,
      y: function y2(d) {
        return +d;
      },
      xScale: "linear",
      yScale: "linear",
      showXGrid: true,
      showYGrid: true
    };
    var pieProps = exports.pieProps = {
      width,
      height,
      margins,
      innerRadius: 0,
      categoricalColors: _d3Scale2.default.scaleCategory10(),
      pieSort: function pieSort() {
      },
      pieTextShow: true
    };
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/chart.js
var require_chart = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/chart.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _commonProps = require_commonProps2();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var ChartSvg = function(_Component) {
      _inherits(ChartSvg2, _Component);
      function ChartSvg2(props) {
        _classCallCheck(this, ChartSvg2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(ChartSvg2).call(this, props));
      }
      _createClass(ChartSvg2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var horizontal = _props.horizontal;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var xScale = _props.xScale;
          var yScale = _props.yScale;
          var xRange = _props.xRange;
          var yRange = _props.yRange;
          var xDomain = _props.xDomain;
          var yDomain = _props.yDomain;
          var xTicks = _props.xTicks;
          var yTicks = _props.yTicks;
          var xTickFormat = _props.xTickFormat;
          var yTickFormat = _props.yTickFormat;
          var xBandPaddingInner = _props.xBandPaddingInner;
          var xBandPaddingOuter = _props.xBandPaddingOuter;
          var yBandPaddingInner = _props.yBandPaddingInner;
          var yBandPaddingOuter = _props.yBandPaddingOuter;
          var xLabel = _props.xLabel;
          var yLabel = _props.yLabel;
          var stack = _props.stack;
          var data = _props.data;
          var svgClassName = _props.svgClassName;
          var id = _props.id;
          var x2 = _props.x;
          var y2 = _props.y;
          var xRange = xRange || [0, width - margins.left - margins.right];
          var yRange = yRange || [height - margins.top - margins.bottom, 0];
          var xDomain = xDomain || (0, _reactD3Core.xDomainCount)(this.props, stack, horizontal);
          var yDomain = yDomain || (0, _reactD3Core.yDomainCount)(this.props, stack, horizontal);
          if (xScale === "ordinal")
            xScale = "band";
          if (yScale === "ordinal")
            yScale = "band";
          var newXScale = {
            scale: xScale,
            range: xRange,
            domain: xDomain,
            bandPaddingInner: xBandPaddingInner,
            bandPaddingOuter: xBandPaddingOuter
          };
          var xScaleSet = (0, _reactD3Core.scale)(newXScale);
          var newYScale = {
            scale: yScale,
            range: yRange,
            domain: yDomain,
            bandPaddingInner: yBandPaddingInner,
            bandPaddingOuter: yBandPaddingOuter
          };
          var yScaleSet = (0, _reactD3Core.scale)(newYScale);
          var children = _react2.default.Children.map(this.props.children, function(el) {
            if (el) {
              return _react2.default.cloneElement(el, {
                height,
                width,
                margins,
                xScaleSet,
                yScaleSet,
                xDomain,
                yDomain,
                xRange,
                yRange,
                xBandPaddingInner,
                xBandPaddingOuter,
                yBandPaddingInner,
                yBandPaddingOuter,
                xScale,
                yScale,
                xTickFormat,
                yTickFormat,
                xTicks,
                yTicks,
                xLabel,
                yLabel,
                data,
                x: x2,
                y: y2
              });
            } else {
              return null;
            }
          });
          var t = "translate(" + margins.left + ", " + margins.top + ")";
          return _react2.default.createElement(
            "svg",
            {
              height,
              width,
              className: svgClassName,
              id,
              ref: "svgContainer"
            },
            _react2.default.createElement(
              "g",
              {
                transform: t
              },
              children
            )
          );
        }
      }]);
      return ChartSvg2;
    }(_react.Component);
    ChartSvg.defaultProps = _extends({
      svgClassName: "react-d3-core__container_svg"
    }, _commonProps2.default);
    ChartSvg.propTypes = {
      id: _react.PropTypes.string,
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      svgClassName: _react.PropTypes.string.isRequired
    };
    exports.default = ChartSvg;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/chartpie.js
var require_chartpie = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/chartpie.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _commonProps = require_commonProps2();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var ChartSvg = function(_Component) {
      _inherits(ChartSvg2, _Component);
      function ChartSvg2(props) {
        _classCallCheck(this, ChartSvg2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(ChartSvg2).call(this, props));
      }
      _createClass(ChartSvg2, [{
        key: "render",
        value: function render() {
          var _this2 = this;
          var _props = this.props;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var data = _props.data;
          var svgClassName = _props.svgClassName;
          var id = _props.id;
          var name = _props.name;
          var value = _props.value;
          var children = _react2.default.Children.map(this.props.children, function(el) {
            if (el)
              return _react2.default.cloneElement(el, _this2.props);
            else
              return null;
          });
          var t = "translate(" + margins.left + ", " + margins.top + ")";
          return _react2.default.createElement(
            "svg",
            {
              height,
              width,
              className: svgClassName,
              id,
              ref: "svgContainer"
            },
            _react2.default.createElement(
              "g",
              {
                transform: t
              },
              children
            )
          );
        }
      }]);
      return ChartSvg2;
    }(_react.Component);
    ChartSvg.defaultProps = _extends({
      svgClassName: "react-d3-core__container_svg"
    }, _commonProps2.default);
    ChartSvg.propTypes = {
      id: _react.PropTypes.string,
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      svgClassName: _react.PropTypes.string.isRequired
    };
    exports.default = ChartSvg;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-path/src/path.js
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = [];
}
function path() {
  return new Path();
}
var pi, tau, epsilon2, tauEpsilon, path_default;
var init_path = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-path/src/path.js"() {
    pi = Math.PI;
    tau = 2 * pi;
    epsilon2 = 1e-6;
    tauEpsilon = tau - epsilon2;
    Path.prototype = path.prototype = {
      constructor: Path,
      moveTo: function(x2, y2) {
        this._.push("M", this._x0 = this._x1 = +x2, ",", this._y0 = this._y1 = +y2);
      },
      closePath: function() {
        if (this._x1 !== null) {
          this._x1 = this._x0, this._y1 = this._y0;
          this._.push("Z");
        }
      },
      lineTo: function(x2, y2) {
        this._.push("L", this._x1 = +x2, ",", this._y1 = +y2);
      },
      quadraticCurveTo: function(x1, y1, x2, y2) {
        this._.push("Q", +x1, ",", +y1, ",", this._x1 = +x2, ",", this._y1 = +y2);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
        this._.push("C", +x1, ",", +y1, ",", +x2, ",", +y2, ",", this._x1 = +x3, ",", this._y1 = +y3);
      },
      arcTo: function(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._.push(
            "M",
            this._x1 = x1,
            ",",
            this._y1 = y1
          );
        } else if (!(l01_2 > epsilon2))
          ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon2) || !r) {
          this._.push(
            "L",
            this._x1 = x1,
            ",",
            this._y1 = y1
          );
        } else {
          var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
          if (Math.abs(t01 - 1) > epsilon2) {
            this._.push(
              "L",
              x1 + t01 * x01,
              ",",
              y1 + t01 * y01
            );
          }
          this._.push(
            "A",
            r,
            ",",
            r,
            ",0,0,",
            +(y01 * x20 > x01 * y20),
            ",",
            this._x1 = x1 + t21 * x21,
            ",",
            this._y1 = y1 + t21 * y21
          );
        }
      },
      arc: function(x2, y2, r, a0, a1, ccw) {
        x2 = +x2, y2 = +y2, r = +r;
        var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        if (r < 0)
          throw new Error("negative radius: " + r);
        if (this._x1 === null) {
          this._.push(
            "M",
            x0,
            ",",
            y0
          );
        } else if (Math.abs(this._x1 - x0) > epsilon2 || Math.abs(this._y1 - y0) > epsilon2) {
          this._.push(
            "L",
            x0,
            ",",
            y0
          );
        }
        if (!r)
          return;
        if (da > tauEpsilon) {
          this._.push(
            "A",
            r,
            ",",
            r,
            ",0,1,",
            cw,
            ",",
            x2 - dx,
            ",",
            y2 - dy,
            "A",
            r,
            ",",
            r,
            ",0,1,",
            cw,
            ",",
            this._x1 = x0,
            ",",
            this._y1 = y0
          );
        } else {
          if (da < 0)
            da = da % tau + tau;
          this._.push(
            "A",
            r,
            ",",
            r,
            ",0,",
            +(da >= pi),
            ",",
            cw,
            ",",
            this._x1 = x2 + r * Math.cos(a1),
            ",",
            this._y1 = y2 + r * Math.sin(a1)
          );
        }
      },
      rect: function(x2, y2, w, h) {
        this._.push("M", this._x0 = this._x1 = +x2, ",", this._y0 = this._y1 = +y2, "h", +w, "v", +h, "h", -w, "Z");
      },
      toString: function() {
        return this._.join("");
      }
    };
    path_default = path;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-path/index.js
var init_d3_path = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-path/index.js"() {
    init_path();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/constant.js
function constant_default5(x2) {
  return function constant() {
    return x2;
  };
}
var init_constant5 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/constant.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/math.js
var epsilon3, pi2, halfPi, tau2;
var init_math2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/math.js"() {
    epsilon3 = 1e-12;
    pi2 = Math.PI;
    halfPi = pi2 / 2;
    tau2 = 2 * pi2;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/arc.js
function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle;
}
function asin(x2) {
  return x2 >= 1 ? halfPi : x2 <= -1 ? -halfPi : Math.asin(x2);
}
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
  return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D2 = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D2 * D2)), cx0 = (D2 * dy - dx * d) / d2, cy0 = (-D2 * dx - dy * d) / d2, cx1 = (D2 * dy + dx * d) / d2, cy1 = (-D2 * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default5(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = Math.abs(a1 - a0), cw = a1 > a0;
    if (!context)
      context = buffer = path_default();
    if (r1 < r0)
      r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon3))
      context.moveTo(0, 0);
    else if (da > tau2 - epsilon3) {
      context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon3) {
        context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon3 && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)), rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t03, t13;
      if (rp > epsilon3) {
        var p0 = asin(rp / r0 * Math.sin(ap)), p1 = asin(rp / r1 * Math.sin(ap));
        if ((da0 -= p0 * 2) > epsilon3)
          p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon3)
          p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * Math.cos(a01), y01 = r1 * Math.sin(a01), x10 = r0 * Math.cos(a10), y10 = r0 * Math.sin(a10);
      if (rc > epsilon3) {
        var x11 = r1 * Math.cos(a11), y11 = r1 * Math.sin(a11), x00 = r0 * Math.cos(a00), y00 = r0 * Math.sin(a00);
        if (da < pi2) {
          var oc = da0 > epsilon3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10], ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon3))
        context.moveTo(x01, y01);
      else if (rc1 > epsilon3) {
        t03 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t13 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc1 < rc)
          context.arc(t03.cx, t03.cy, rc1, Math.atan2(t03.y01, t03.x01), Math.atan2(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc1, Math.atan2(t03.y01, t03.x01), Math.atan2(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r1, Math.atan2(t03.cy + t03.y11, t03.cx + t03.x11), Math.atan2(t13.cy + t13.y11, t13.cx + t13.x11), !cw);
          context.arc(t13.cx, t13.cy, rc1, Math.atan2(t13.y11, t13.x11), Math.atan2(t13.y01, t13.x01), !cw);
        }
      } else
        context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon3) || !(da0 > epsilon3))
        context.lineTo(x10, y10);
      else if (rc0 > epsilon3) {
        t03 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t13 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t03.cx + t03.x01, t03.cy + t03.y01);
        if (rc0 < rc)
          context.arc(t03.cx, t03.cy, rc0, Math.atan2(t03.y01, t03.x01), Math.atan2(t13.y01, t13.x01), !cw);
        else {
          context.arc(t03.cx, t03.cy, rc0, Math.atan2(t03.y01, t03.x01), Math.atan2(t03.y11, t03.x11), !cw);
          context.arc(0, 0, r0, Math.atan2(t03.cy + t03.y11, t03.cx + t03.x11), Math.atan2(t13.cy + t13.y11, t13.cx + t13.x11), cw);
          context.arc(t13.cx, t13.cy, rc0, Math.atan2(t13.y11, t13.x11), Math.atan2(t13.y01, t13.x01), !cw);
        }
      } else
        context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
      return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [Math.cos(a2) * r, Math.sin(a2) * r];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default5(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default5(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default5(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default5(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default5(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default5(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default5(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}
var init_arc = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/arc.js"() {
    init_d3_path();
    init_constant5();
    init_math2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/bind.js
function bind_default(curve, args) {
  if (args.length < 2)
    return curve;
  args = slice3.call(args);
  args[0] = null;
  return function(context) {
    args[0] = context;
    return curve.apply(null, args);
  };
}
var slice3;
var init_bind = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/bind.js"() {
    slice3 = Array.prototype.slice;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
function linear_default(context) {
  return new Linear(context);
}
var init_linear2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/linear.js"() {
    Linear.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          default:
            this._context.lineTo(x2, y2);
            break;
        }
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/point.js
function x(p) {
  return p[0];
}
function y(p) {
  return p[1];
}
var init_point2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/point.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/area.js
function area_default() {
  var x0 = x, x1 = null, y0 = constant_default5(0), y1 = y, defined = constant_default5(true), context = null, curve = linear_default, output = null;
  function area(data) {
    var i, j, k2, n = data.length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
    if (!context)
      output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k2 = i - 1; k2 >= j; --k2) {
            output.point(x0z[k2], y0z[k2]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default5(+_), x1 = null, area) : x0;
  };
  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default5(+_), area) : x0;
  };
  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default5(+_), area) : x1;
  };
  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default5(+_), y1 = null, area) : y0;
  };
  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default5(+_), area) : y0;
  };
  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default5(+_), area) : y1;
  };
  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default5(!!_), area) : defined;
  };
  area.curve = function(_) {
    return arguments.length ? (curve = bind_default(_, arguments), context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };
  return area;
}
var init_area = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/area.js"() {
    init_d3_path();
    init_constant5();
    init_bind();
    init_linear2();
    init_point2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/line.js
function line_default() {
  var x2 = x, y2 = y, defined = constant_default5(true), context = null, curve = linear_default, output = null;
  function line(data) {
    var i, n = data.length, d, defined0 = false, buffer;
    if (!context)
      output = curve(buffer = path_default());
    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0)
          output.lineStart();
        else
          output.lineEnd();
      }
      if (defined0)
        output.point(+x2(d, i, data), +y2(d, i, data));
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x2 = typeof _ === "function" ? _ : constant_default5(+_), line) : x2;
  };
  line.y = function(_) {
    return arguments.length ? (y2 = typeof _ === "function" ? _ : constant_default5(+_), line) : y2;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default5(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = bind_default(_, arguments), context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}
var init_line = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/line.js"() {
    init_d3_path();
    init_constant5();
    init_bind();
    init_linear2();
    init_point2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/descending.js
function descending_default2(a2, b) {
  return b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}
var init_descending2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/descending.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/identity.js
function identity_default3(d) {
  return d;
}
var init_identity4 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/identity.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default3, sortValues = descending_default2, sort = null, startAngle = constant_default5(0), endAngle = constant_default5(tau2), padAngle = constant_default5(0);
  function pie(data) {
    var i, n = data.length, j, k2, sum2 = 0, index = new Array(n), arcs = new Array(n), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)), pa = p * (da < 0 ? -1 : 1), v;
    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum2 += v;
      }
    }
    if (sortValues != null)
      index.sort(function(i2, j2) {
        return sortValues(arcs[i2], arcs[j2]);
      });
    else if (sort !== null)
      index.sort(function(i2, j2) {
        return sort(data[i2], data[j2]);
      });
    for (i = 0, k2 = sum2 ? (da - n * pa) / sum2 : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k2 : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }
    return arcs;
  }
  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default5(+_), pie) : value;
  };
  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };
  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };
  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default5(+_), pie) : startAngle;
  };
  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default5(+_), pie) : endAngle;
  };
  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default5(+_), pie) : padAngle;
  };
  return pie;
}
var init_pie = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/pie.js"() {
    init_constant5();
    init_descending2();
    init_identity4();
    init_math2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/radial.js
function Radial(curve) {
  this._curve = curve;
}
function radial_default(curve, args) {
  curve = bind_default(curve, args);
  function radial(context) {
    return new Radial(curve(context));
  }
  radial._curve = curve;
  return radial;
}
var init_radial = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/radial.js"() {
    init_bind();
    init_math2();
    Radial.prototype = {
      areaStart: function() {
        this._curve.areaStart();
      },
      areaEnd: function() {
        this._curve.areaEnd();
      },
      lineStart: function() {
        this._curve.lineStart();
      },
      lineEnd: function() {
        this._curve.lineEnd();
      },
      point: function(a2, r) {
        a2 -= halfPi, this._curve.point(r * Math.cos(a2), r * Math.sin(a2));
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/radialArea.js
function radialArea_default() {
  var a2 = area_default(), c2 = a2.curve;
  a2.angle = a2.x, delete a2.x;
  a2.startAngle = a2.x0, delete a2.x0;
  a2.endAngle = a2.x1, delete a2.x1;
  a2.radius = a2.y, delete a2.y;
  a2.innerRadius = a2.y0, delete a2.y0;
  a2.outerRadius = a2.y1, delete a2.y1;
  a2.curve = function(_) {
    return arguments.length ? c2(radial_default(_, arguments)) : c2()._curve;
  };
  return a2.curve(linear_default);
}
var init_radialArea = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/radialArea.js"() {
    init_linear2();
    init_radial();
    init_area();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/radialLine.js
function radialLine_default() {
  var l = line_default(), c2 = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  l.curve = function(_) {
    return arguments.length ? c2(radial_default(_, arguments)) : c2()._curve;
  };
  return l.curve(linear_default);
}
var init_radialLine = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/radialLine.js"() {
    init_linear2();
    init_radial();
    init_line();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/circle.js
var circle_default;
var init_circle = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/circle.js"() {
    init_math2();
    circle_default = {
      draw: function(context, size) {
        var r = Math.sqrt(size / pi2);
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, tau2);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/cross.js
var cross_default;
var init_cross = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/cross.js"() {
    cross_default = {
      draw: function(context, size) {
        var r = Math.sqrt(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/diamond.js
var tan30, tan30_2, diamond_default;
var init_diamond = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/diamond.js"() {
    tan30 = Math.sqrt(1 / 3);
    tan30_2 = tan30 * 2;
    diamond_default = {
      draw: function(context, size) {
        var y2 = Math.sqrt(size / tan30_2), x2 = y2 * tan30;
        context.moveTo(0, -y2);
        context.lineTo(x2, 0);
        context.lineTo(0, y2);
        context.lineTo(-x2, 0);
        context.closePath();
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/star.js
var ka, kr, kx, ky, star_default;
var init_star = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/star.js"() {
    init_math2();
    ka = 0.8908130915292852;
    kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
    kx = Math.sin(tau2 / 10) * kr;
    ky = -Math.cos(tau2 / 10) * kr;
    star_default = {
      draw: function(context, size) {
        var r = Math.sqrt(size * ka), x2 = kx * r, y2 = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x2, y2);
        for (var i = 1; i < 5; ++i) {
          var a2 = tau2 * i / 5, c2 = Math.cos(a2), s2 = Math.sin(a2);
          context.lineTo(s2 * r, -c2 * r);
          context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2);
        }
        context.closePath();
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/square.js
var square_default;
var init_square = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/square.js"() {
    square_default = {
      draw: function(context, size) {
        var w = Math.sqrt(size), x2 = -w / 2;
        context.rect(x2, x2, w, w);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/triangle.js
var sqrt3, triangle_default;
var init_triangle = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/triangle.js"() {
    sqrt3 = Math.sqrt(3);
    triangle_default = {
      draw: function(context, size) {
        var y2 = -Math.sqrt(size / (sqrt3 * 3));
        context.moveTo(0, y2 * 2);
        context.lineTo(-sqrt3 * y2, -y2);
        context.lineTo(sqrt3 * y2, -y2);
        context.closePath();
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/wye.js
var c, s, k, a, wye_default;
var init_wye = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol/wye.js"() {
    c = -0.5;
    s = Math.sqrt(3) / 2;
    k = 1 / Math.sqrt(12);
    a = (k / 2 + 1) * 3;
    wye_default = {
      draw: function(context, size) {
        var r = Math.sqrt(size / a), x0 = r / 2, y0 = r * k, x1 = x0, y1 = r * k + r, x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol.js
function symbol_default() {
  var type = constant_default5(circle_default), size = constant_default5(64), context = null;
  function symbol2() {
    var buffer;
    if (!context)
      context = buffer = path_default();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer)
      return context = null, buffer + "" || null;
  }
  symbol2.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant_default5(_), symbol2) : type;
  };
  symbol2.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant_default5(+_), symbol2) : size;
  };
  symbol2.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol2) : context;
  };
  return symbol2;
}
var symbols;
var init_symbol = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/symbol.js"() {
    init_d3_path();
    init_circle();
    init_cross();
    init_diamond();
    init_star();
    init_square();
    init_triangle();
    init_wye();
    init_constant5();
    symbols = [
      circle_default,
      cross_default,
      diamond_default,
      square_default,
      star_default,
      triangle_default,
      wye_default
    ];
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/noop.js
function noop_default() {
}
var init_noop = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/noop.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/basis.js
function point2(that, x2, y2) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x2) / 6,
    (that._y0 + 4 * that._y1 + y2) / 6
  );
}
function Basis(context) {
  this._context = context;
}
function basis_default(context) {
  return new Basis(context);
}
var init_basis = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/basis.js"() {
    Basis.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 3:
            point2(this, this._x1, this._y1);
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
          default:
            point2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
function basisClosed_default(context) {
  return new BasisClosed(context);
}
var init_basisClosed = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/basisClosed.js"() {
    init_noop();
    init_basis();
    BasisClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x2, this._y2);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
            this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x2, this._y2);
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x2 = x2, this._y2 = y2;
            break;
          case 1:
            this._point = 2;
            this._x3 = x2, this._y3 = y2;
            break;
          case 2:
            this._point = 3;
            this._x4 = x2, this._y4 = y2;
            this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
            break;
          default:
            point2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
function basisOpen_default(context) {
  return new BasisOpen(context);
}
var init_basisOpen = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/basisOpen.js"() {
    init_basis();
    BasisOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
            this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
            break;
          case 3:
            this._point = 4;
          default:
            point2(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = basis_default(context);
  this._beta = beta;
}
function bundle_default(context, beta) {
  return beta == null ? new Bundle(context, 0.85) : (beta = +beta) === 1 ? basis_default(context) : new Bundle(context, beta);
}
var init_bundle = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/bundle.js"() {
    init_basis();
    Bundle.prototype = {
      lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
      },
      lineEnd: function() {
        var x2 = this._x, y2 = this._y, j = x2.length - 1;
        if (j > 0) {
          var x0 = x2[0], y0 = y2[0], dx = x2[j] - x0, dy = y2[j] - y0, i = -1, t;
          while (++i <= j) {
            t = i / j;
            this._basis.point(
              this._beta * x2[i] + (1 - this._beta) * (x0 + t * dx),
              this._beta * y2[i] + (1 - this._beta) * (y0 + t * dy)
            );
          }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
      },
      point: function(x2, y2) {
        this._x.push(+x2);
        this._y.push(+y2);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x2, y2) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x2),
    that._y2 + that._k * (that._y1 - y2),
    that._x2,
    that._y2
  );
}
function Cardinal(context, k2) {
  this._context = context;
  this._k = k2;
}
function cardinal_default(context, tension) {
  return new Cardinal(context, (tension == null ? 1 : 1 - tension) / 6);
}
var init_cardinal = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/cardinal.js"() {
    Cardinal.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            point3(this, this._x1, this._y1);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            this._x1 = x2, this._y1 = y2;
            break;
          case 2:
            this._point = 3;
          default:
            point3(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, k2) {
  this._context = context;
  this._k = k2;
}
function cardinalClosed_default(context, tension) {
  return new CardinalClosed(context, (tension == null ? 1 : 1 - tension) / 6);
}
var init_cardinalClosed = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/cardinalClosed.js"() {
    init_noop();
    init_cardinal();
    CardinalClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x2, this._y3 = y2;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x2, this._y4 = y2);
            break;
          case 2:
            this._point = 3;
            this._x5 = x2, this._y5 = y2;
            break;
          default:
            point3(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, k2) {
  this._context = context;
  this._k = k2;
}
function cardinalOpen_default(context, tension) {
  return new CardinalOpen(context, (tension == null ? 1 : 1 - tension) / 6);
}
var init_cardinalOpen = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/cardinalOpen.js"() {
    init_cardinal();
    CardinalOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point3(this, x2, y2);
            break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x2, y2) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon3) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon3) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b + that._x1 * that._l23_2a - x2 * that._l12_2a) / m;
    y22 = (y22 * b + that._y1 * that._l23_2a - y2 * that._l12_2a) / m;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
function catmullRom_default(context, alpha) {
  return (alpha = alpha == null ? 0.5 : +alpha) ? new CatmullRom(context, alpha) : cardinal_default(context, 0);
}
var init_catmullRom = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/catmullRom.js"() {
    init_math2();
    init_cardinal();
    CatmullRom.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x2, this._y2);
            break;
          case 3:
            this.point(this, this._x2, this._y2);
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point) {
          var x23 = this._x2 - x2, y23 = this._y2 - y2;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
          default:
            point4(this, x2, y2);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
function catmullRomClosed_default(context, alpha) {
  return (alpha = alpha == null ? 0.5 : +alpha) ? new CatmullRomClosed(context, alpha) : cardinalClosed_default(context, 0);
}
var init_catmullRomClosed = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/catmullRomClosed.js"() {
    init_cardinalClosed();
    init_noop();
    init_catmullRom();
    CatmullRomClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 1: {
            this._context.moveTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 2: {
            this._context.lineTo(this._x3, this._y3);
            this._context.closePath();
            break;
          }
          case 3: {
            this.point(this._x3, this._y3);
            this.point(this._x4, this._y4);
            this.point(this._x5, this._y5);
            break;
          }
        }
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point) {
          var x23 = this._x2 - x2, y23 = this._y2 - y2;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            this._x3 = x2, this._y3 = y2;
            break;
          case 1:
            this._point = 2;
            this._context.moveTo(this._x4 = x2, this._y4 = y2);
            break;
          case 2:
            this._point = 3;
            this._x5 = x2, this._y5 = y2;
            break;
          default:
            point4(this, x2, y2);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
function catmullRomOpen_default(context, alpha) {
  return (alpha = alpha == null ? 0.5 : +alpha) ? new CatmullRomOpen(context, alpha) : cardinalOpen_default(context, 0);
}
var init_catmullRomOpen = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/catmullRomOpen.js"() {
    init_cardinalOpen();
    init_catmullRom();
    CatmullRomOpen.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
      },
      lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point) {
          var x23 = this._x2 - x2, y23 = this._y2 - y2;
          this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch (this._point) {
          case 0:
            this._point = 1;
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
            break;
          case 3:
            this._point = 4;
          default:
            point4(this, x2, y2);
            break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
function linearClosed_default(context) {
  return new LinearClosed(context);
}
var init_linearClosed = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/linearClosed.js"() {
    init_noop();
    LinearClosed.prototype = {
      areaStart: noop_default,
      areaEnd: noop_default,
      lineStart: function() {
        this._point = 0;
      },
      lineEnd: function() {
        if (this._point)
          this._context.closePath();
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        if (this._point)
          this._context.lineTo(x2, y2);
        else
          this._point = 1, this._context.moveTo(x2, y2);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/monotone.js
function sign(x2) {
  return x2 < 0 ? -1 : 1;
}
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
function point5(that, t03, t13) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t03, x1 - dx, y1 - dx * t13, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
function ReflectContext(context) {
  this._context = context;
}
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}
var init_monotone = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/monotone.js"() {
    MonotoneX.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        switch (this._point) {
          case 2:
            this._context.lineTo(this._x1, this._y1);
            break;
          case 3:
            point5(this, this._t0, slope2(this, this._t0));
            break;
        }
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        var t13 = NaN;
        x2 = +x2, y2 = +y2;
        if (x2 === this._x1 && y2 === this._y1)
          return;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
            break;
          case 2:
            this._point = 3;
            point5(this, slope2(this, t13 = slope3(this, x2, y2)), t13);
            break;
          default:
            point5(this, this._t0, t13 = slope3(this, x2, y2));
            break;
        }
        this._x0 = this._x1, this._x1 = x2;
        this._y0 = this._y1, this._y1 = y2;
        this._t0 = t13;
      }
    };
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
      MonotoneX.prototype.point.call(this, y2, x2);
    };
    ReflectContext.prototype = {
      moveTo: function(x2, y2) {
        this._context.moveTo(y2, x2);
      },
      closePath: function() {
        this._context.closePath();
      },
      lineTo: function(x2, y2) {
        this._context.lineTo(y2, x2);
      },
      bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
function controlPoints(x2) {
  var i, n = x2.length - 1, m, a2 = new Array(n), b = new Array(n), r = new Array(n);
  a2[0] = 0, b[0] = 2, r[0] = x2[0] + 2 * x2[1];
  for (i = 1; i < n - 1; ++i)
    a2[i] = 1, b[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
  a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x2[n - 1] + x2[n];
  for (i = 1; i < n; ++i)
    m = a2[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a2[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i)
    a2[i] = (r[i] - a2[i + 1]) / b[i];
  b[n - 1] = (x2[n] + a2[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i)
    b[i] = 2 * x2[i + 1] - a2[i + 1];
  return [a2, b];
}
function natural_default(context) {
  return new Natural(context);
}
var init_natural = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/natural.js"() {
    Natural.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = [];
        this._y = [];
      },
      lineEnd: function() {
        var x2 = this._x, y2 = this._y, n = x2.length;
        if (n) {
          this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
          if (n === 2) {
            this._context.lineTo(x2[1], y2[1]);
          } else {
            var px = controlPoints(x2), py = controlPoints(y2);
            for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
              this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
            }
          }
        }
        if (this._line || this._line !== 0 && n === 1)
          this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
      },
      point: function(x2, y2) {
        this._x.push(+x2);
        this._y.push(+y2);
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}
var init_step = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/curve/step.js"() {
    Step.prototype = {
      areaStart: function() {
        this._line = 0;
      },
      areaEnd: function() {
        this._line = NaN;
      },
      lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
      },
      lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2)
          this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1)
          this._context.closePath();
        this._line = 1 - this._line;
      },
      point: function(x2, y2) {
        x2 = +x2, y2 = +y2;
        switch (this._point) {
          case 0:
            this._point = 1;
            this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
            break;
          case 1:
            this._point = 2;
          default: {
            var t = x2 > this._x ? this._t : 1 - this._t;
            if (t <= 0) {
              this._context.lineTo(this._x, y2);
              this._context.lineTo(x2, y2);
            } else if (t >= 1) {
              this._context.lineTo(x2, this._y);
              this._context.lineTo(x2, y2);
            } else {
              var x1 = (this._x + x2) * t;
              this._context.lineTo(x1, this._y);
              this._context.lineTo(x1, y2);
            }
            break;
          }
        }
        this._x = x2, this._y = y2;
      }
    };
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/array.js
var slice4;
var init_array4 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/array.js"() {
    slice4 = Array.prototype.slice;
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n = series.length) > 1))
    return;
  for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (var j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
var init_none = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/none.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0)
    o[n] = n;
  return o;
}
var init_none2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/order/none.js"() {
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/stack.js
function stackValue(d, key) {
  return d[key];
}
function stack_default() {
  var keys = constant_default5([]), order = none_default2, offset = none_default, value = stackValue;
  function stack(data) {
    var kz = keys.apply(this, arguments), i, m = data.length, n = kz.length, sz = new Array(n), oz;
    for (i = 0; i < n; ++i) {
      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
        si[j] = sij = [0, +value(data[j], ki, j, data)];
        sij.data = data[j];
      }
      si.key = ki;
    }
    for (i = 0, oz = order(sz); i < n; ++i) {
      sz[oz[i]].index = i;
    }
    offset(sz, oz);
    return sz;
  }
  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant_default5(slice4.call(_)), stack) : keys;
  };
  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default5(+_), stack) : value;
  };
  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none_default2 : typeof _ === "function" ? _ : constant_default5(slice4.call(_)), stack) : order;
  };
  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none_default : _, stack) : offset;
  };
  return stack;
}
var init_stack = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/stack.js"() {
    init_array4();
    init_constant5();
    init_none();
    init_none2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n = series.length) > 0))
    return;
  for (var i, n, j = 0, m = series[0].length, y2; j < m; ++j) {
    for (y2 = i = 0; i < n; ++i)
      y2 += series[i][j][1] || 0;
    if (y2)
      for (i = 0; i < n; ++i)
        series[i][j][1] /= y2;
  }
  none_default(series, order);
}
var init_expand = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/expand.js"() {
    init_none();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n = series.length) > 0))
    return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y2 = 0; i < n; ++i)
      y2 += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y2 / 2;
  }
  none_default(series, order);
}
var init_silhouette = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/silhouette.js"() {
    init_none();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0))
    return;
  for (var y2 = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
      for (var k2 = 0; k2 < i; ++k2) {
        var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y2;
    if (s1)
      y2 -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y2;
  none_default(series, order);
}
var init_wiggle = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/offset/wiggle.js"() {
    init_none();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/order/ascending.js
function ascending_default2(series) {
  var sums = series.map(sum);
  return none_default2(series).sort(function(a2, b) {
    return sums[a2] - sums[b];
  });
}
function sum(series) {
  var s2 = 0, i = -1, n = series.length, v;
  while (++i < n)
    if (v = +series[i][1])
      s2 += v;
  return s2;
}
var init_ascending2 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/order/ascending.js"() {
    init_none2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/order/descending.js
function descending_default3(series) {
  return ascending_default2(series).reverse();
}
var init_descending3 = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/order/descending.js"() {
    init_ascending2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n = series.length, i, j, sums = series.map(sum), order = none_default2(series).sort(function(a2, b) {
    return sums[b] - sums[a2];
  }), top2 = 0, bottom2 = 0, tops = [], bottoms = [];
  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top2 < bottom2) {
      top2 += sums[j];
      tops.push(j);
    } else {
      bottom2 += sums[j];
      bottoms.push(j);
    }
  }
  return bottoms.reverse().concat(tops);
}
var init_insideOut = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/order/insideOut.js"() {
    init_none2();
    init_ascending2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}
var init_reverse = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/src/order/reverse.js"() {
    init_none2();
  }
});

// node_modules/react-d3-zoom/node_modules/d3-shape/index.js
var d3_shape_exports = {};
__export(d3_shape_exports, {
  arc: () => arc_default,
  area: () => area_default,
  curveBasis: () => basis_default,
  curveBasisClosed: () => basisClosed_default,
  curveBasisOpen: () => basisOpen_default,
  curveBundle: () => bundle_default,
  curveCardinal: () => cardinal_default,
  curveCardinalClosed: () => cardinalClosed_default,
  curveCardinalOpen: () => cardinalOpen_default,
  curveCatmullRom: () => catmullRom_default,
  curveCatmullRomClosed: () => catmullRomClosed_default,
  curveCatmullRomOpen: () => catmullRomOpen_default,
  curveLinear: () => linear_default,
  curveLinearClosed: () => linearClosed_default,
  curveMonotoneX: () => monotoneX,
  curveMonotoneY: () => monotoneY,
  curveNatural: () => natural_default,
  curveStep: () => step_default,
  curveStepAfter: () => stepAfter,
  curveStepBefore: () => stepBefore,
  line: () => line_default,
  pie: () => pie_default,
  radialArea: () => radialArea_default,
  radialLine: () => radialLine_default,
  stack: () => stack_default,
  stackOffsetExpand: () => expand_default,
  stackOffsetNone: () => none_default,
  stackOffsetSilhouette: () => silhouette_default,
  stackOffsetWiggle: () => wiggle_default,
  stackOrderAscending: () => ascending_default2,
  stackOrderDescending: () => descending_default3,
  stackOrderInsideOut: () => insideOut_default,
  stackOrderNone: () => none_default2,
  stackOrderReverse: () => reverse_default,
  symbol: () => symbol_default,
  symbolCircle: () => circle_default,
  symbolCross: () => cross_default,
  symbolDiamond: () => diamond_default,
  symbolSquare: () => square_default,
  symbolStar: () => star_default,
  symbolTriangle: () => triangle_default,
  symbolWye: () => wye_default,
  symbols: () => symbols
});
var init_d3_shape = __esm({
  "node_modules/react-d3-zoom/node_modules/d3-shape/index.js"() {
    init_arc();
    init_area();
    init_line();
    init_pie();
    init_radialArea();
    init_radialLine();
    init_symbol();
    init_circle();
    init_cross();
    init_diamond();
    init_square();
    init_star();
    init_triangle();
    init_wye();
    init_basisClosed();
    init_basisOpen();
    init_basis();
    init_bundle();
    init_cardinalClosed();
    init_cardinalOpen();
    init_cardinal();
    init_catmullRomClosed();
    init_catmullRomOpen();
    init_catmullRom();
    init_linearClosed();
    init_linear2();
    init_monotone();
    init_natural();
    init_step();
    init_stack();
    init_expand();
    init_none();
    init_silhouette();
    init_wiggle();
    init_ascending2();
    init_descending3();
    init_insideOut();
    init_none2();
    init_reverse();
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/line.js
var require_line = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/line.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Shape = (init_d3_shape(), __toCommonJS(d3_shape_exports));
    var _d3Shape2 = _interopRequireDefault(_d3Shape);
    var _commonProps = require_commonProps2();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Line = function(_Component) {
      _inherits(Line2, _Component);
      function Line2(props) {
        _classCallCheck(this, Line2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Line2).call(this, props));
      }
      _createClass(Line2, [{
        key: "_mkLine",
        value: function _mkLine(dom) {
          var lineClassName = this.props.lineClassName;
          var dataset = (0, _series.series)(this.props);
          var that = this;
          return _react2.default.createElement(
            "g",
            null,
            dataset.map(function(line, i) {
              return _react2.default.createElement("path", {
                stroke: line.color,
                fill: "none",
                className: lineClassName + " line",
                d: that._setAxes(line.data),
                style: line.style,
                key: i
              });
            })
          );
        }
      }, {
        key: "_setAxes",
        value: function _setAxes(data) {
          var _props = this.props;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          var line = _d3Shape2.default.line().x(function(d) {
            return xScaleSet(d.x);
          }).y(function(d) {
            return yScaleSet(d.y);
          });
          return line.call(this, data);
        }
      }, {
        key: "render",
        value: function render() {
          var line = this._mkLine();
          return _react2.default.createElement(
            "g",
            null,
            line
          );
        }
      }]);
      return Line2;
    }(_react.Component);
    Line.defaultProps = _extends({
      interpolate: null,
      lineClassName: "react-d3-basic__line"
    }, _commonProps2.default);
    exports.default = Line;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/area.js
var require_area = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/area.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Shape = (init_d3_shape(), __toCommonJS(d3_shape_exports));
    var _d3Shape2 = _interopRequireDefault(_d3Shape);
    var _commonProps = require_commonProps2();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Area = function(_Component) {
      _inherits(Area2, _Component);
      function Area2(props) {
        _classCallCheck(this, Area2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Area2).call(this, props));
      }
      _createClass(Area2, [{
        key: "_mkArea",
        value: function _mkArea() {
          var _props = this.props;
          var areaClassName = _props.areaClassName;
          var areaOpacity = _props.areaOpacity;
          var dataset = (0, _series.series)(this.props);
          var that = this;
          return _react2.default.createElement(
            "g",
            null,
            dataset.map(function(area, i) {
              return _react2.default.createElement("path", {
                className: areaClassName + " area",
                fill: area.color,
                d: that._setAxes(area.data),
                style: area.style,
                key: i
              });
            })
          );
        }
      }, {
        key: "_setAxes",
        value: function _setAxes(data) {
          var _props2 = this.props;
          var height = _props2.height;
          var margins = _props2.margins;
          var xScaleSet = _props2.xScaleSet;
          var yScaleSet = _props2.yScaleSet;
          var area = _d3Shape2.default.area().x(function(d) {
            return xScaleSet(d.x);
          }).y0(function(d) {
            var domain = yScaleSet.domain();
            if (domain[0] * domain[1] < 0) {
              return yScaleSet(0);
            } else if (domain[0] * domain[1] >= 0 && domain[0] >= 0) {
              return yScaleSet.range()[0];
            } else if (domain[0] * domain[1] >= 0 && domain[0] < 0) {
              return yScaleSet.range()[1];
            }
          }).y1(function(d) {
            return yScaleSet(d.y);
          });
          return area.call(this, data);
        }
      }, {
        key: "render",
        value: function render() {
          var area = this._mkArea();
          return _react2.default.createElement(
            "g",
            null,
            area
          );
        }
      }]);
      return Area2;
    }(_react.Component);
    Area.defaultProps = _extends({
      areaClassName: "react-d3-basic__area"
    }, _commonProps2.default);
    exports.default = Area;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/area_stack.js
var require_area_stack = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/area_stack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Shape = (init_d3_shape(), __toCommonJS(d3_shape_exports));
    var _d3Shape2 = _interopRequireDefault(_d3Shape);
    var _commonProps = require_commonProps2();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var AreaStack = function(_Component) {
      _inherits(AreaStack2, _Component);
      function AreaStack2(props) {
        _classCallCheck(this, AreaStack2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(AreaStack2).call(this, props));
      }
      _createClass(AreaStack2, [{
        key: "_mkStack",
        value: function _mkStack() {
          var areaClassName = this.props.areaClassName;
          var dataset = (0, _series.series)(this.props);
          var _setStack = this._setStack();
          var _setAxes = this._setAxes();
          return _react2.default.createElement(
            "g",
            null,
            _setStack(dataset).map(function(area) {
              return _react2.default.createElement("path", {
                className: areaClassName + " area",
                fill: area.color,
                d: _setAxes(area.data),
                style: area.style
              });
            })
          );
        }
      }, {
        key: "_setStack",
        value: function _setStack() {
          var chartSeries = this.props.chartSeries;
          var buildOut = function buildOut2(len) {
            var currentXOffsets = [];
            var currentXIndex = 0;
            return function(d, y0, y2) {
              if (currentXIndex++ % len === 0) {
                currentXOffsets = [0, 0];
              }
              if (y2 >= 0) {
                d.y0 = currentXOffsets[1];
                d.y = y2;
                currentXOffsets[1] += y2;
              } else {
                d.y0 = currentXOffsets[0] + y2;
                d.y = -y2;
                currentXOffsets[0] += y2;
              }
            };
          };
          return d3.layout.stack().values(function(d) {
            return d.data;
          }).out(buildOut(chartSeries.length));
        }
      }, {
        key: "_setAxes",
        value: function _setAxes() {
          var _props = this.props;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          return _d3Shape2.default.area().x(function(d) {
            return xScaleSet(d.x);
          }).y0(function(d) {
            return yScaleSet(d.y0);
          }).y1(function(d) {
            return yScaleSet(d.y0 + d.y);
          });
        }
      }, {
        key: "render",
        value: function render() {
          var area = this._mkStack();
          return _react2.default.createElement(
            "g",
            null,
            area
          );
        }
      }]);
      return AreaStack2;
    }(_react.Component);
    AreaStack.defaultProps = _extends({
      areaClass: "react-d3-basics__area_stack",
      areaClassName: "react-d3-basic__area_stack"
    }, _commonProps2.default);
    exports.default = AreaStack;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar.js
var require_bar = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Bar = function(_Component) {
      _inherits(Bar2, _Component);
      function Bar2(props) {
        _classCallCheck(this, Bar2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Bar2).call(this, props));
      }
      _createClass(Bar2, [{
        key: "triggerOver",
        value: function triggerOver(data, e) {
          this.props.onMouseOver(e, data);
        }
      }, {
        key: "triggerOut",
        value: function triggerOut(data, e) {
          this.props.onMouseOut(e, data);
        }
      }, {
        key: "triggerClick",
        value: function triggerClick(data, e) {
          this.props.onClick(e, data);
        }
      }, {
        key: "_mkBar",
        value: function _mkBar() {
          var _this2 = this;
          var _props = this.props;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var barClassName = _props.barClassName;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          var that = this;
          var dataset = (0, _series.series)(this.props)[0];
          var domain = yScaleSet.domain();
          var zeroBase;
          if (domain[0] * domain[1] < 0) {
            zeroBase = yScaleSet(0);
          } else if (domain[0] * domain[1] >= 0 && domain[0] >= 0) {
            zeroBase = yScaleSet.range()[0];
          } else if (domain[0] * domain[1] >= 0 && domain[0] < 0) {
            zeroBase = yScaleSet.range()[1];
          }
          return _react2.default.createElement(
            "g",
            null,
            dataset.data.map(function(bar, i) {
              return _react2.default.createElement("rect", {
                className: barClassName + " bar",
                x: xScaleSet(bar.x) || xScaleSet(bar.x) === 0 ? xScaleSet(bar.x) : -1e4,
                y: bar.y < 0 ? zeroBase : yScaleSet(bar.y),
                width: xScaleSet.bandwidth(),
                height: bar.y < domain[0] ? 0 : Math.abs(zeroBase - yScaleSet(bar.y)),
                fill: bar._style.color ? bar._style.color : dataset.color,
                style: Object.assign({}, dataset.style, bar._style),
                onMouseOut: that.triggerOut.bind(_this2, bar),
                onMouseOver: that.triggerOver.bind(_this2, bar),
                onClick: that.triggerClick.bind(_this2, bar),
                key: i
              });
            })
          );
        }
      }, {
        key: "render",
        value: function render() {
          var bar = this._mkBar();
          return _react2.default.createElement(
            "g",
            null,
            bar
          );
        }
      }]);
      return Bar2;
    }(_react.Component);
    Bar.defaultProps = {
      onMouseOver: function onMouseOver(d) {
      },
      onMouseOut: function onMouseOut(d) {
      },
      onClick: function onClick(d) {
      },
      barClassName: "react-d3-basic__bar"
    };
    exports.default = Bar;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_horizontal.js
var require_bar_horizontal = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_horizontal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarHorizontal = function(_Component) {
      _inherits(BarHorizontal2, _Component);
      function BarHorizontal2(props) {
        _classCallCheck(this, BarHorizontal2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarHorizontal2).call(this, props));
      }
      _createClass(BarHorizontal2, [{
        key: "triggerOver",
        value: function triggerOver(data, e) {
          this.props.onMouseOver(e, data);
        }
      }, {
        key: "triggerOut",
        value: function triggerOut(data, e) {
          this.props.onMouseOut(e, data);
        }
      }, {
        key: "_mkBar",
        value: function _mkBar(dom) {
          var _this2 = this;
          var _props = this.props;
          var height = _props.height;
          var margins = _props.margins;
          var barClassName = _props.barClassName;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          var that = this;
          var dataset = (0, _series.series)(this.props, true)[0];
          var domain = xScaleSet.domain();
          var zeroBase;
          if (domain[0] * domain[1] < 0) {
            zeroBase = xScaleSet(0);
          } else if (domain[0] * domain[1] >= 0 && domain[0] >= 0) {
            zeroBase = xScaleSet.range()[0];
          } else if (domain[0] * domain[1] >= 0 && domain[0] < 0) {
            zeroBase = xScaleSet.range()[1];
          }
          return _react2.default.createElement(
            "g",
            null,
            dataset.data.map(function(bar, i) {
              return _react2.default.createElement("rect", {
                className: barClassName + " bar",
                y: yScaleSet(bar.y) || yScaleSet(bar.y) === 0 ? yScaleSet(bar.y) : -1e4,
                x: bar.x > 0 ? zeroBase : zeroBase - Math.abs(zeroBase - xScaleSet(bar.x)),
                height: yScaleSet.bandwidth(),
                width: bar.x < domain[0] ? 0 : Math.abs(zeroBase - xScaleSet(bar.x)),
                fill: bar._style.color ? bar._style.color : dataset.color,
                style: Object.assign({}, dataset.style, bar._style),
                onMouseOut: that.triggerOut.bind(_this2, bar),
                onMouseOver: that.triggerOver.bind(_this2, bar),
                key: i
              });
            })
          );
        }
      }, {
        key: "render",
        value: function render() {
          var bar = this._mkBar();
          return _react2.default.createElement(
            "g",
            null,
            bar
          );
        }
      }]);
      return BarHorizontal2;
    }(_react.Component);
    BarHorizontal.defaultProps = {
      onMouseOver: function onMouseOver(d) {
      },
      onMouseOut: function onMouseOut(d) {
      },
      barClassName: "react-d3-basic__bar_horizontal"
    };
    exports.default = BarHorizontal;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_group.js
var require_bar_group = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_group.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Scale = (init_d3_scale(), __toCommonJS(d3_scale_exports));
    var _d3Scale2 = _interopRequireDefault(_d3Scale);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarGroup = function(_Component) {
      _inherits(BarGroup2, _Component);
      function BarGroup2(props) {
        _classCallCheck(this, BarGroup2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarGroup2).call(this, props));
      }
      _createClass(BarGroup2, [{
        key: "triggerOver",
        value: function triggerOver(data, e) {
          this.props.onMouseOver(e, data);
        }
      }, {
        key: "triggerOut",
        value: function triggerOut(data, e) {
          this.props.onMouseOut(e, data);
        }
      }, {
        key: "_mkBarGroup",
        value: function _mkBarGroup(dom) {
          var _this2 = this;
          var _props = this.props;
          var height = _props.height;
          var margins = _props.margins;
          var barClassName = _props.barClassName;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          var that = this;
          var dataset = (0, _series.series)(this.props);
          var x1 = _d3Scale2.default.scaleBand();
          x1.domain(dataset.map(function(d) {
            return d.field;
          })).range([0, xScaleSet.bandwidth()]).padding(0.1).round(true);
          var domain = yScaleSet.domain();
          var zeroBase;
          if (domain[0] * domain[1] < 0) {
            zeroBase = yScaleSet(0);
          } else if (domain[0] * domain[1] >= 0 && domain[0] >= 0) {
            zeroBase = yScaleSet.range()[0];
          } else if (domain[0] * domain[1] >= 0 && domain[0] < 0) {
            zeroBase = yScaleSet.range()[1];
          }
          return dataset.map(function(barGroup, i) {
            return _react2.default.createElement(
              "g",
              { className: "bargroup", key: i },
              barGroup.data.map(function(bar, j) {
                return _react2.default.createElement("rect", {
                  key: j,
                  className: barClassName + " bar",
                  width: x1.bandwidth(),
                  x: xScaleSet(bar.x) || xScaleSet(bar.x) === 0 ? xScaleSet(bar.x) + x1.bandwidth() * i : -1e4,
                  y: bar.y < 0 ? zeroBase : yScaleSet(bar.y),
                  height: bar.y < domain[0] ? 0 : Math.abs(zeroBase - yScaleSet(bar.y)),
                  fill: barGroup.color,
                  onMouseOut: that.triggerOut.bind(_this2, bar),
                  onMouseOver: that.triggerOver.bind(_this2, bar),
                  style: barGroup.style
                });
              })
            );
          });
        }
      }, {
        key: "render",
        value: function render() {
          var bar = this._mkBarGroup();
          return _react2.default.createElement(
            "g",
            null,
            bar
          );
        }
      }]);
      return BarGroup2;
    }(_react.Component);
    BarGroup.defaultProps = {
      onMouseOver: function onMouseOver(d) {
      },
      onMouseOut: function onMouseOut(d) {
      },
      barClassName: "react-d3-basic__bar_group"
    };
    exports.default = BarGroup;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_group_horizontal.js
var require_bar_group_horizontal = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_group_horizontal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Scale = (init_d3_scale(), __toCommonJS(d3_scale_exports));
    var _d3Scale2 = _interopRequireDefault(_d3Scale);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarGroupHorizontal = function(_Component) {
      _inherits(BarGroupHorizontal2, _Component);
      function BarGroupHorizontal2(props) {
        _classCallCheck(this, BarGroupHorizontal2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarGroupHorizontal2).call(this, props));
      }
      _createClass(BarGroupHorizontal2, [{
        key: "triggerOver",
        value: function triggerOver(data, e) {
          this.props.onMouseOver(e, data);
        }
      }, {
        key: "triggerOut",
        value: function triggerOut(data, e) {
          this.props.onMouseOut(e, data);
        }
      }, {
        key: "_mkBarGroup",
        value: function _mkBarGroup() {
          var _this2 = this;
          var _props = this.props;
          var height = _props.height;
          var margins = _props.margins;
          var barClassName = _props.barClassName;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          var onMouseOut = _props.onMouseOut;
          var onMouseOver = _props.onMouseOver;
          var that = this;
          var dataset = (0, _series.series)(this.props, true);
          var y1 = _d3Scale2.default.scaleBand();
          y1.domain(dataset.map(function(d) {
            return d.field;
          })).range([0, yScaleSet.bandwidth()]).padding(0.1).round(true);
          var domain = xScaleSet.domain();
          var zeroBase;
          if (domain[0] * domain[1] < 0) {
            zeroBase = xScaleSet(0);
          } else if (domain[0] * domain[1] >= 0 && domain[0] >= 0) {
            zeroBase = xScaleSet.range()[0];
          } else if (domain[0] * domain[1] >= 0 && domain[0] < 0) {
            zeroBase = xScaleSet.range()[1];
          }
          return _react2.default.createElement(
            "g",
            null,
            dataset.map(function(barGroup, i) {
              return _react2.default.createElement(
                "g",
                { className: "bargroup", key: i },
                barGroup.data.map(function(bar, j) {
                  return _react2.default.createElement("rect", {
                    className: barClassName + " bar",
                    height: y1.bandwidth(),
                    y: yScaleSet(bar.y) || yScaleSet(bar.y) === 0 ? yScaleSet(bar.y) + y1.bandwidth() * i : -1e4,
                    x: bar.x > 0 ? zeroBase : zeroBase - Math.abs(zeroBase - xScaleSet(bar.x)),
                    width: bar.x < domain[0] ? 0 : Math.abs(zeroBase - xScaleSet(bar.x)),
                    fill: barGroup.color,
                    onMouseOut: that.triggerOut.bind(_this2, bar),
                    onMouseOver: that.triggerOver.bind(_this2, bar),
                    style: barGroup.style,
                    key: j
                  });
                })
              );
            })
          );
        }
      }, {
        key: "render",
        value: function render() {
          var bar = this._mkBarGroup();
          return _react2.default.createElement(
            "g",
            null,
            bar
          );
        }
      }]);
      return BarGroupHorizontal2;
    }(_react.Component);
    BarGroupHorizontal.defaultProps = {
      onMouseOver: function onMouseOver(d) {
      },
      onMouseOut: function onMouseOut(d) {
      },
      barClassName: "react-d3-basic__bar_group_horizontal"
    };
    exports.default = BarGroupHorizontal;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_stack.js
var require_bar_stack = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_stack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d = require_d3();
    var _d2 = _interopRequireDefault(_d);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarStack = function(_Component) {
      _inherits(BarStack2, _Component);
      function BarStack2(props) {
        _classCallCheck(this, BarStack2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarStack2).call(this, props));
      }
      _createClass(BarStack2, [{
        key: "triggerOver",
        value: function triggerOver(data, e) {
          this.props.onMouseOver(e, data);
        }
      }, {
        key: "triggerOut",
        value: function triggerOut(data, e) {
          this.props.onMouseOut(e, data);
        }
      }, {
        key: "triggerClick",
        value: function triggerClick(data, e) {
          this.props.onClick(e, data);
        }
      }, {
        key: "_mkBarStack",
        value: function _mkBarStack() {
          var _this2 = this;
          var _props = this.props;
          var height = _props.height;
          var margins = _props.margins;
          var barClassName = _props.barClassName;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          var that = this;
          var dataset = (0, _series.series)(this.props);
          var _setStack = this._setStack();
          var domain = yScaleSet.domain();
          var zeroBase;
          if (domain[0] * domain[1] < 0) {
            zeroBase = yScaleSet(0);
          } else if (domain[0] * domain[1] >= 0 && domain[0] >= 0) {
            zeroBase = yScaleSet.range()[0];
          } else if (domain[0] * domain[1] >= 0 && domain[0] < 0) {
            zeroBase = yScaleSet.range()[1];
          }
          return _react2.default.createElement(
            "g",
            null,
            _setStack(dataset).map(function(barGroup, i) {
              return _react2.default.createElement(
                "g",
                {
                  key: i,
                  className: "barGroup",
                  fill: barGroup.color,
                  style: barGroup.style
                },
                barGroup.data.map(function(bar, j) {
                  return _react2.default.createElement("rect", {
                    className: barClassName + " bar",
                    width: xScaleSet.bandwidth(),
                    x: xScaleSet(bar.x) || xScaleSet(bar.x) === 0 ? xScaleSet(bar.x) : -1e4,
                    y: yScaleSet(bar.y0 + bar.y),
                    height: Math.abs(yScaleSet(bar.y) - yScaleSet(0)),
                    onMouseOut: that.triggerOut.bind(_this2, bar),
                    onMouseOver: that.triggerOver.bind(_this2, bar),
                    onClick: that.triggerClick.bind(_this2, bar),
                    key: j
                  });
                })
              );
            })
          );
        }
      }, {
        key: "_setStack",
        value: function _setStack() {
          var chartSeries = this.props.chartSeries;
          var buildOut = function buildOut2(len) {
            var currentXOffsets = [];
            var currentXIndex = 0;
            return function(d, y0, y2) {
              if (currentXIndex++ % len === 0) {
                currentXOffsets = [0, 0];
              }
              if (y2 >= 0) {
                d.y0 = currentXOffsets[1];
                d.y = y2;
                currentXOffsets[1] += y2;
              } else {
                d.y0 = currentXOffsets[0] + y2;
                d.y = -y2;
                currentXOffsets[0] += y2;
              }
            };
          };
          return _d2.default.layout.stack().values(function(d) {
            return d.data;
          }).out(buildOut(chartSeries.length));
        }
      }, {
        key: "render",
        value: function render() {
          var bar = this._mkBarStack();
          return _react2.default.createElement(
            "g",
            null,
            bar
          );
        }
      }]);
      return BarStack2;
    }(_react.Component);
    BarStack.defaultProps = {
      onMouseOver: function onMouseOver(d) {
      },
      onMouseOut: function onMouseOut(d) {
      },
      onClick: function onClick(d) {
      },
      barClassName: "react-d3-basic__bar_stack"
    };
    exports.default = BarStack;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_stack_horizontal.js
var require_bar_stack_horizontal = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/bar_stack_horizontal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d = require_d3();
    var _d2 = _interopRequireDefault(_d);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarStackHorizontal = function(_Component) {
      _inherits(BarStackHorizontal2, _Component);
      function BarStackHorizontal2(props) {
        _classCallCheck(this, BarStackHorizontal2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarStackHorizontal2).call(this, props));
      }
      _createClass(BarStackHorizontal2, [{
        key: "triggerOver",
        value: function triggerOver(data, e) {
          this.props.onMouseOver(e, data);
        }
      }, {
        key: "triggerOut",
        value: function triggerOut(data, e) {
          this.props.onMouseOut(e, data);
        }
      }, {
        key: "_mkBarStack",
        value: function _mkBarStack(dom) {
          var _this2 = this;
          var _props = this.props;
          var height = _props.height;
          var margins = _props.margins;
          var barClassName = _props.barClassName;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          var that = this;
          var dataset = (0, _series.series)(this.props, true);
          var _setStack = this._setStack();
          var chart = _d2.default.select(dom).attr("class", "g");
          var domain = xScaleSet.domain();
          var zeroBase;
          if (domain[0] * domain[1] < 0) {
            zeroBase = xScaleSet(0);
          } else if (domain[0] * domain[1] >= 0 && domain[0] >= 0) {
            zeroBase = xScaleSet.range()[0];
          } else if (domain[0] * domain[1] >= 0 && domain[0] < 0) {
            zeroBase = xScaleSet.range()[1];
          }
          return _react2.default.createElement(
            "g",
            null,
            _setStack(dataset).map(function(barGroup, i) {
              return _react2.default.createElement(
                "g",
                {
                  className: "barGroup",
                  fill: barGroup.color,
                  style: barGroup.style,
                  key: i
                },
                barGroup.data.map(function(bar, j) {
                  return _react2.default.createElement("rect", {
                    className: barClassName + " bar",
                    height: yScaleSet.bandwidth(),
                    y: yScaleSet(bar.y) || yScaleSet(bar.y) === 0 ? yScaleSet(bar.y) : -1e4,
                    x: xScaleSet(bar.x0),
                    width: Math.abs(xScaleSet(bar.x) - xScaleSet(0)),
                    onMouseOut: that.triggerOut.bind(_this2, bar),
                    onMouseOver: that.triggerOver.bind(_this2, bar),
                    key: j
                  });
                })
              );
            })
          );
        }
      }, {
        key: "_setStack",
        value: function _setStack() {
          var chartSeries = this.props.chartSeries;
          var buildOut = function buildOut2(len) {
            var currentXOffsets = [];
            var currentXIndex = 0;
            return function(d, x0, x2) {
              if (currentXIndex++ % len === 0) {
                currentXOffsets = [0, 0];
              }
              if (x2 >= 0) {
                d.x0 = currentXOffsets[1];
                d.x = x2;
                currentXOffsets[1] += x2;
              } else {
                d.x0 = currentXOffsets[0] + x2;
                d.x = -x2;
                currentXOffsets[0] += x2;
              }
            };
          };
          return _d2.default.layout.stack().values(function(d) {
            return d.data;
          }).y(function(d) {
            return d.x;
          }).out(buildOut(chartSeries.length));
        }
      }, {
        key: "render",
        value: function render() {
          var bar = this._mkBarStack();
          return _react2.default.createElement(
            "g",
            null,
            bar
          );
        }
      }]);
      return BarStackHorizontal2;
    }(_react.Component);
    BarStackHorizontal.defaultProps = {
      onMouseOver: function onMouseOver(d) {
      },
      onMouseOut: function onMouseOut(d) {
      },
      barClassName: "react-d3-basic__bar_stack_horizontal"
    };
    exports.default = BarStackHorizontal;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/pie.js
var require_pie = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/pie.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Shape = (init_d3_shape(), __toCommonJS(d3_shape_exports));
    var _d3Shape2 = _interopRequireDefault(_d3Shape);
    var _commonProps = require_commonProps2();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Pie = function(_Component) {
      _inherits(Pie2, _Component);
      function Pie2(props) {
        _classCallCheck(this, Pie2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Pie2).call(this, props));
      }
      _createClass(Pie2, [{
        key: "triggerOver",
        value: function triggerOver(data, e) {
          this.props.onMouseOver(e, data);
        }
      }, {
        key: "triggerOut",
        value: function triggerOut(data, e) {
          this.props.onMouseOut(e, data);
        }
      }, {
        key: "mkSeries",
        value: function mkSeries() {
          var _props = this.props;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var value = _props.value;
          var name = _props.name;
          var categoricalColors = _props.categoricalColors;
          var chartSeriesData = chartSeries.map(function(f, i) {
            if (!f.color)
              f.color = categoricalColors(i);
            if (!f.name)
              f.name = f.field;
            var val;
            data.forEach(function(d) {
              if (name(d) === f.field)
                val = d;
            });
            return Object.assign(f, { value: value(val) });
          });
          return chartSeriesData;
        }
      }, {
        key: "_mkPie",
        value: function _mkPie() {
          var _this2 = this;
          var _props2 = this.props;
          var width = _props2.width;
          var height = _props2.height;
          var innerRadius = _props2.innerRadius;
          var outerRadius = _props2.outerRadius;
          var pieSort = _props2.pieSort;
          var value = _props2.value;
          var radius = _props2.radius;
          var pieTextShow = _props2.pieTextShow;
          var that = this;
          var radius = this.props.radius || Math.min(width - 100, height - 100) / 2;
          var outerRadius = outerRadius || radius - 10;
          var labelr = radius + 10;
          var chartSeriesData = this.mkSeries();
          var arc = _d3Shape2.default.arc().outerRadius(outerRadius).innerRadius(innerRadius);
          var arcOver = _d3Shape2.default.arc().outerRadius(outerRadius + 10).innerRadius(innerRadius);
          var pie = _d3Shape2.default.pie().sort(function(a2, b) {
            return pieSort(a2.value, b.value);
          }).value(function(d) {
            return d.value;
          });
          return _react2.default.createElement(
            "g",
            { className: "arc" },
            pie(chartSeriesData).map(function(slice5, i) {
              var textTransform = function textTransform2(d) {
                var c2 = arc.centroid(d), x2 = c2[0], y2 = c2[1], h = Math.sqrt(x2 * x2 + y2 * y2);
                return "translate(" + x2 / h * labelr + "," + y2 / h * labelr + ")";
              };
              var textAnchor = function textAnchor2(d) {
                return (d.endAngle + d.startAngle) / 2 > Math.PI ? "end" : "start";
              };
              return _react2.default.createElement(
                "g",
                { key: i },
                _react2.default.createElement("path", {
                  d: arc(slice5),
                  style: _extends({ fill: slice5.data.color, stroke: "#FFF" }, slice5.data.style),
                  onMouseOut: that.triggerOut.bind(_this2, slice5),
                  onMouseOver: that.triggerOver.bind(_this2, slice5)
                }),
                pieTextShow ? _react2.default.createElement(
                  "text",
                  {
                    transform: textTransform(slice5),
                    dy: ".35em",
                    textAnchor: textAnchor(slice5)
                  },
                  slice5.data.name
                ) : null
              );
            })
          );
        }
      }, {
        key: "render",
        value: function render() {
          var _props3 = this.props;
          var width = _props3.width;
          var height = _props3.height;
          var margins = _props3.margins;
          var t = "translate(" + (width - margins.left - margins.right) / 2 + ",  " + (height - margins.top - margins.bottom) / 2 + ")";
          var pie = this._mkPie();
          return _react2.default.createElement(
            "g",
            { transform: t },
            pie
          );
        }
      }]);
      return Pie2;
    }(_react.Component);
    Pie.defaultProps = _extends({
      onMouseOver: function onMouseOver(d) {
      },
      onMouseOut: function onMouseOut(d) {
      }
    }, _commonProps.pieProps);
    exports.default = Pie;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/scatter.js
var require_scatter = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/components/scatter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3Shape = (init_d3_shape(), __toCommonJS(d3_shape_exports));
    var _d3Shape2 = _interopRequireDefault(_d3Shape);
    var _series = require_series();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var Scatter = function(_Component) {
      _inherits(Scatter2, _Component);
      function Scatter2(props) {
        _classCallCheck(this, Scatter2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(Scatter2).call(this, props));
      }
      _createClass(Scatter2, [{
        key: "_mkScatter",
        value: function _mkScatter(dataset) {
          var _props = this.props;
          var scatterClassName = _props.scatterClassName;
          var defaultSymbol = _props.defaultSymbol;
          var defaultSymbolSize = _props.defaultSymbolSize;
          var brushSymbol = _props.brushSymbol;
          var xScaleSet = _props.xScaleSet;
          var yScaleSet = _props.yScaleSet;
          if (brushSymbol) {
            symbol = "circle";
            symbolSize = 4;
          }
          return _react2.default.createElement(
            "g",
            null,
            dataset.map(function(dot) {
              var symbol2 = dot.symbol ? dot.symbol : defaultSymbol;
              var symbolSize2 = dot.symbolSize ? dot.symbolSize : defaultSymbolSize;
              return dot.data.map(function(d) {
                var symbolFunc = _d3Shape2.default.symbol().size(symbolSize2 * symbolSize2).type(function() {
                  console.log(symbol2);
                  if (symbol2 === "circle") {
                    return _d3Shape2.default.symbolCircle;
                  } else if (symbol2 === "cross") {
                    return _d3Shape2.default.symbolCross;
                  } else if (symbol2 === "diamond") {
                    return _d3Shape2.default.symbolDiamond;
                  } else if (symbol2 === "square") {
                    return _d3Shape2.default.symbolSquare;
                  } else if (symbol2 === "star") {
                    return _d3Shape2.default.symbolStar;
                  } else if (symbol2 === "triangle") {
                    return _d3Shape2.default.symbolTriangle;
                  } else if (symbol2 === "wye") {
                    return _d3Shape2.default.symbolWye;
                  } else {
                    console.error("Symbol is not support " + symbol2 + ".");
                  }
                });
                return _react2.default.createElement("path", {
                  className: "react-d3-basic__scatter__path",
                  fill: d.color,
                  transform: "translate(" + xScaleSet(d.x) + "," + yScaleSet(d.y) + ")",
                  d: symbolFunc(),
                  style: dot.style
                });
              });
            })
          );
        }
      }, {
        key: "render",
        value: function render() {
          var d = (0, _series.series)(this.props);
          var scatter = this._mkScatter(d);
          return _react2.default.createElement(
            "g",
            null,
            scatter
          );
        }
      }]);
      return Scatter2;
    }(_react.Component);
    Scatter.defaultProps = {
      defaultSymbol: "circle",
      defaultSymbolSize: 10,
      scatterClassName: "react-d3-basic__scatter"
    };
    exports.default = Scatter;
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/node_modules/react-d3-shape/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _series = require_series();
    Object.defineProperty(exports, "series", {
      enumerable: true,
      get: function get() {
        return _series.series;
      }
    });
    var _chart = require_chart();
    Object.defineProperty(exports, "Chart", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_chart).default;
      }
    });
    var _chartpie = require_chartpie();
    Object.defineProperty(exports, "ChartPie", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_chartpie).default;
      }
    });
    var _line = require_line();
    Object.defineProperty(exports, "Line", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_line).default;
      }
    });
    var _area = require_area();
    Object.defineProperty(exports, "Area", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_area).default;
      }
    });
    var _area_stack = require_area_stack();
    Object.defineProperty(exports, "AreaStack", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_area_stack).default;
      }
    });
    var _bar = require_bar();
    Object.defineProperty(exports, "Bar", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_bar).default;
      }
    });
    var _bar_horizontal = require_bar_horizontal();
    Object.defineProperty(exports, "BarHorizontal", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_bar_horizontal).default;
      }
    });
    var _bar_group = require_bar_group();
    Object.defineProperty(exports, "BarGroup", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_bar_group).default;
      }
    });
    var _bar_group_horizontal = require_bar_group_horizontal();
    Object.defineProperty(exports, "BarGroupHorizontal", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_bar_group_horizontal).default;
      }
    });
    var _bar_stack = require_bar_stack();
    Object.defineProperty(exports, "BarStack", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_bar_stack).default;
      }
    });
    var _bar_stack_horizontal = require_bar_stack_horizontal();
    Object.defineProperty(exports, "BarStackHorizontal", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_bar_stack_horizontal).default;
      }
    });
    var _pie = require_pie();
    Object.defineProperty(exports, "Pie", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_pie).default;
      }
    });
    var _scatter = require_scatter();
    Object.defineProperty(exports, "Scatter", {
      enumerable: true,
      get: function get() {
        return _interopRequireDefault(_scatter).default;
      }
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/commonProps.js
var require_commonProps3 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/commonProps.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.pieProps = exports.horizontalProps = void 0;
    var _d3Scale = (init_d3_scale(), __toCommonJS(d3_scale_exports));
    var _d3Scale2 = _interopRequireDefault(_d3Scale);
    var _d3Array = (init_d3_array(), __toCommonJS(d3_array_exports));
    var _d3Array2 = _interopRequireDefault(_d3Array);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var width = 960;
    var height = 500;
    var margins = { top: 40, right: 100, bottom: 40, left: 100 };
    exports.default = {
      width,
      height,
      margins,
      y: function y2(d) {
        return +d;
      },
      xScale: "linear",
      yScale: "linear",
      showXGrid: true,
      showYGrid: true,
      showLegend: true
    };
    var horizontalProps = exports.horizontalProps = {
      width,
      height,
      margins,
      x: function x2(d) {
        return +d;
      },
      xScale: "linear",
      yScale: "linear",
      showXGrid: true,
      showYGrid: true,
      showLegend: true
    };
    var pieProps = exports.pieProps = {
      width,
      height,
      margins,
      innerRadius: 0,
      categoricalColors: _d3Scale2.default.scaleCategory10(),
      pieSort: _d3Array2.default.descending
    };
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/line.js
var require_line2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/line.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var LineChart = function(_Component) {
      _inherits(LineChart2, _Component);
      function LineChart2(props) {
        _classCallCheck(this, LineChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(LineChart2).call(this, props));
      }
      _createClass(LineChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries
              }),
              _react2.default.createElement(_reactD3Shape.Line, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return LineChart2;
    }(_react.Component);
    LineChart.defaultProps = _extends({
      showScatter: false
    }, _commonProps2.default);
    LineChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = LineChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/area.js
var require_area2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/area.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var AreaChart = function(_Component) {
      _inherits(AreaChart2, _Component);
      function AreaChart2(props) {
        _classCallCheck(this, AreaChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(AreaChart2).call(this, props));
      }
      _createClass(AreaChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries
              }),
              _react2.default.createElement(_reactD3Shape.Area, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return AreaChart2;
    }(_react.Component);
    AreaChart.defaultProps = _extends({
      showScatter: false
    }, _commonProps2.default);
    AreaChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = AreaChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/scatter.js
var require_scatter2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/scatter.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var ScatterPlot = function(_Component) {
      _inherits(ScatterPlot2, _Component);
      function ScatterPlot2(props) {
        _classCallCheck(this, ScatterPlot2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(ScatterPlot2).call(this, props));
      }
      _createClass(ScatterPlot2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries
              }),
              _react2.default.createElement(_reactD3Shape.Scatter, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return ScatterPlot2;
    }(_react.Component);
    ScatterPlot.defaultProps = _commonProps2.default;
    ScatterPlot.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = ScatterPlot;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar.js
var require_bar2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarChart = function(_Component) {
      _inherits(BarChart2, _Component);
      function BarChart2(props) {
        _classCallCheck(this, BarChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarChart2).call(this, props));
      }
      _createClass(BarChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries
              }),
              _react2.default.createElement(_reactD3Shape.Bar, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return BarChart2;
    }(_react.Component);
    BarChart.defaultProps = _extends({
      onMouseOver: function onMouseOver() {
      },
      onMouseOut: function onMouseOut() {
      }
    }, _commonProps2.default);
    BarChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = BarChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_horizontal.js
var require_bar_horizontal2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_horizontal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarHorizontalChart = function(_Component) {
      _inherits(BarHorizontalChart2, _Component);
      function BarHorizontalChart2(props) {
        _classCallCheck(this, BarHorizontalChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarHorizontalChart2).call(this, props));
      }
      _createClass(BarHorizontalChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries,
                horizontal: true
              }),
              _react2.default.createElement(_reactD3Shape.BarHorizontal, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return BarHorizontalChart2;
    }(_react.Component);
    BarHorizontalChart.defaultProps = _extends({
      onMouseOver: function onMouseOver() {
      },
      onMouseOut: function onMouseOut() {
      }
    }, _commonProps.horizontalProps);
    BarHorizontalChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = BarHorizontalChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_group.js
var require_bar_group2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_group.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarGroupChart = function(_Component) {
      _inherits(BarGroupChart2, _Component);
      function BarGroupChart2(props) {
        _classCallCheck(this, BarGroupChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarGroupChart2).call(this, props));
      }
      _createClass(BarGroupChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries
              }),
              _react2.default.createElement(_reactD3Shape.BarGroup, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return BarGroupChart2;
    }(_react.Component);
    BarGroupChart.defaultProps = _extends({
      onMouseOver: function onMouseOver() {
      },
      onMouseOut: function onMouseOut() {
      }
    }, _commonProps2.default);
    BarGroupChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = BarGroupChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_group_horizontal.js
var require_bar_group_horizontal2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_group_horizontal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarGroupHorizontalChart = function(_Component) {
      _inherits(BarGroupHorizontalChart2, _Component);
      function BarGroupHorizontalChart2(props) {
        _classCallCheck(this, BarGroupHorizontalChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarGroupHorizontalChart2).call(this, props));
      }
      _createClass(BarGroupHorizontalChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries,
                horizontal: true
              }),
              _react2.default.createElement(_reactD3Shape.BarGroupHorizontal, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return BarGroupHorizontalChart2;
    }(_react.Component);
    BarGroupHorizontalChart.defaultProps = _extends({
      onMouseOver: function onMouseOver() {
      },
      onMouseOut: function onMouseOut() {
      }
    }, _commonProps.horizontalProps);
    BarGroupHorizontalChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = BarGroupHorizontalChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/area_stack.js
var require_area_stack2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/area_stack.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var AreaStackChart = function(_Component) {
      _inherits(AreaStackChart2, _Component);
      function AreaStackChart2(props) {
        _classCallCheck(this, AreaStackChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(AreaStackChart2).call(this, props));
      }
      _createClass(AreaStackChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries,
                stack: true
              }),
              _react2.default.createElement(_reactD3Shape.AreaStack, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return AreaStackChart2;
    }(_react.Component);
    AreaStackChart.defaultProps = _commonProps2.default;
    AreaStackChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = AreaStackChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_stack.js
var require_bar_stack2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_stack.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarStackChart = function(_Component) {
      _inherits(BarStackChart2, _Component);
      function BarStackChart2(props) {
        _classCallCheck(this, BarStackChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarStackChart2).call(this, props));
      }
      _createClass(BarStackChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries,
                stack: true
              }),
              _react2.default.createElement(_reactD3Shape.BarStack, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return BarStackChart2;
    }(_react.Component);
    BarStackChart.defaultProps = _extends({
      onMouseOver: function onMouseOver() {
      },
      onMouseOut: function onMouseOut() {
      }
    }, _commonProps2.default);
    BarStackChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = BarStackChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_stack_horizontal.js
var require_bar_stack_horizontal2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/bar_stack_horizontal.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    var _commonProps = require_commonProps3();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var BarStackChart = function(_Component) {
      _inherits(BarStackChart2, _Component);
      function BarStackChart2(props) {
        _classCallCheck(this, BarStackChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(BarStackChart2).call(this, props));
      }
      _createClass(BarStackChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var showXGrid = _props.showXGrid;
          var showYGrid = _props.showYGrid;
          var showLegend = _props.showLegend;
          var categoricalColors = _props.categoricalColors;
          var xgrid, ygrid;
          if (showXGrid)
            xgrid = _react2.default.createElement(_reactD3Core.Xgrid, null);
          if (showYGrid)
            ygrid = _react2.default.createElement(_reactD3Core.Ygrid, null);
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.Chart,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries,
                stack: true,
                horizontal: true
              }),
              _react2.default.createElement(_reactD3Shape.BarStackHorizontal, {
                chartSeries
              }),
              xgrid,
              ygrid,
              _react2.default.createElement(_reactD3Core.Xaxis, null),
              _react2.default.createElement(_reactD3Core.Yaxis, null),
              this.props.children
            )
          );
        }
      }]);
      return BarStackChart2;
    }(_react.Component);
    BarStackChart.defaultProps = _extends({
      onMouseOver: function onMouseOver() {
      },
      onMouseOut: function onMouseOut() {
      }
    }, _commonProps.horizontalProps);
    BarStackChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      margins: _react.PropTypes.object.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired
    };
    exports.default = BarStackChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/pie.js
var require_pie2 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/pie.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Shape = require_lib3();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var PieChart = function(_Component) {
      _inherits(PieChart2, _Component);
      function PieChart2(props) {
        _classCallCheck(this, PieChart2);
        return _possibleConstructorReturn(this, Object.getPrototypeOf(PieChart2).call(this, props));
      }
      _createClass(PieChart2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var width = _props.width;
          var height = _props.height;
          var margins = _props.margins;
          var data = _props.data;
          var chartSeries = _props.chartSeries;
          var value = _props.value;
          var name = _props.name;
          var categoricalColors = _props.categoricalColors;
          var showLegend = _props.showLegend;
          return _react2.default.createElement(
            "div",
            null,
            showLegend ? _react2.default.createElement(_reactD3Core.Legend, _extends({}, this.props, {
              width,
              margins,
              chartSeries,
              categoricalColors
            })) : null,
            _react2.default.createElement(
              _reactD3Shape.ChartPie,
              _extends({}, this.props, {
                width,
                height,
                data,
                chartSeries,
                value,
                name
              }),
              _react2.default.createElement(_reactD3Shape.Pie, _extends({}, this.props, {
                chartSeries
              })),
              this.props.children
            )
          );
        }
      }]);
      return PieChart2;
    }(_react.Component);
    PieChart.defaultProps = {
      onMouseOver: function onMouseOver() {
      },
      onMouseOut: function onMouseOut() {
      },
      showLegend: true
    };
    PieChart.propTypes = {
      width: _react.PropTypes.number.isRequired,
      height: _react.PropTypes.number.isRequired,
      data: _react.PropTypes.array.isRequired,
      chartSeries: _react.PropTypes.array.isRequired,
      value: _react.PropTypes.func.isRequired,
      name: _react.PropTypes.func.isRequired
    };
    exports.default = PieChart;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/react-d3-zoom/node_modules/react-d3-basic/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.PieChart = exports.BarStackHorizontalChart = exports.BarStackChart = exports.AreaStackChart = exports.BarGroupHorizontalChart = exports.BarGroupChart = exports.BarHorizontalChart = exports.BarChart = exports.ScatterPlot = exports.AreaChart = exports.LineChart = void 0;
    var _line = require_line2();
    var _line2 = _interopRequireDefault(_line);
    var _area = require_area2();
    var _area2 = _interopRequireDefault(_area);
    var _scatter = require_scatter2();
    var _scatter2 = _interopRequireDefault(_scatter);
    var _bar = require_bar2();
    var _bar2 = _interopRequireDefault(_bar);
    var _bar_horizontal = require_bar_horizontal2();
    var _bar_horizontal2 = _interopRequireDefault(_bar_horizontal);
    var _bar_group = require_bar_group2();
    var _bar_group2 = _interopRequireDefault(_bar_group);
    var _bar_group_horizontal = require_bar_group_horizontal2();
    var _bar_group_horizontal2 = _interopRequireDefault(_bar_group_horizontal);
    var _area_stack = require_area_stack2();
    var _area_stack2 = _interopRequireDefault(_area_stack);
    var _bar_stack = require_bar_stack2();
    var _bar_stack2 = _interopRequireDefault(_bar_stack);
    var _bar_stack_horizontal = require_bar_stack_horizontal2();
    var _bar_stack_horizontal2 = _interopRequireDefault(_bar_stack_horizontal);
    var _pie = require_pie2();
    var _pie2 = _interopRequireDefault(_pie);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.LineChart = _line2.default;
    exports.AreaChart = _area2.default;
    exports.ScatterPlot = _scatter2.default;
    exports.BarChart = _bar2.default;
    exports.BarHorizontalChart = _bar_horizontal2.default;
    exports.BarGroupChart = _bar_group2.default;
    exports.BarGroupHorizontalChart = _bar_group_horizontal2.default;
    exports.AreaStackChart = _area_stack2.default;
    exports.BarStackChart = _bar_stack2.default;
    exports.BarStackHorizontalChart = _bar_stack_horizontal2.default;
    exports.PieChart = _pie2.default;
  }
});

// node_modules/react-d3-zoom/lib/inherit/index.js
var require_inherit = __commonJS({
  "node_modules/react-d3-zoom/lib/inherit/index.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _d3 = require_d3();
    var _d32 = _interopRequireDefault(_d3);
    var _reactD3Core = require_lib2();
    var Zoom = function(_Component) {
      _inherits(Zoom2, _Component);
      function Zoom2(props) {
        _classCallCheck(this, Zoom2);
        _get(Object.getPrototypeOf(Zoom2.prototype), "constructor", this).call(this, props);
      }
      _createClass(Zoom2, [{
        key: "mkXDomain",
        value: function mkXDomain() {
          return this.setXDomain = (0, _reactD3Core.xDomainCount)(this.props);
        }
      }, {
        key: "mkYDomain",
        value: function mkYDomain(stack) {
          return this.setYDomain = (0, _reactD3Core.yDomainCount)(this.props, stack);
        }
      }, {
        key: "mkXScale",
        value: function mkXScale(xDomain) {
          var _props = this.props;
          var data = _props.data;
          var xScale = _props.xScale;
          var _state = this.state;
          var xRange = _state.xRange;
          var xRangeRoundBands = _state.xRangeRoundBands;
          var newXScale = {
            scale: xScale,
            range: xRange,
            domain: xDomain,
            rangeRoundBands: xRangeRoundBands
          };
          var newScale = (0, _reactD3Core.scale)(newXScale);
          return this.setXScale = newScale;
        }
      }, {
        key: "mkYScale",
        value: function mkYScale(yDomain) {
          var _props2 = this.props;
          var data = _props2.data;
          var yScale = _props2.yScale;
          var _state2 = this.state;
          var yRange = _state2.yRange;
          var yRangeRoundBands = _state2.yRangeRoundBands;
          var newYScale = {
            scale: yScale,
            range: yRange,
            domain: yDomain,
            rangeRoundBands: yRangeRoundBands
          };
          var newScale = (0, _reactD3Core.scale)(newYScale);
          return this.setYScale = newScale;
        }
      }, {
        key: "zoomed",
        value: function zoomed(xScale, yScale, zoom) {
          var _state3 = this.state;
          var zoomType = _state3.zoomType;
          var xScaleSet = _state3.xScaleSet;
          var yScaleSet = _state3.yScaleSet;
          var yDomainSet = _state3.yDomainSet;
          var xDomainSet = _state3.xDomainSet;
          var _props3 = this.props;
          var zoomX = _props3.zoomX;
          var zoomY = _props3.zoomY;
          var evt = _d32["default"].event;
          var zoomXDomain = xScale.domain();
          var zoomYDomain = yScale.domain();
          if (xScale.domain()[0] < this.setXDomain[0]) {
            zoomXDomain = xDomainSet;
            zoom.translate([zoom.translate()[0] - xScale(this.setXDomain[0]) + xScale.range()[0], zoom.translate()[1]]);
          } else if (xScale.domain()[1] > this.setXDomain[1]) {
            zoomXDomain = xDomainSet;
            zoom.translate([zoom.translate()[0] - xScale(this.setXDomain[1]) + xScale.range()[1], zoom.translate()[1]]);
          }
          if (yScale.domain()[0] < this.setYDomain[0]) {
            zoomYDomain = yDomainSet;
            zoom.translate([zoom.translate()[0], zoom.translate()[1] - yScale(this.setYDomain[0]) + yScale.range()[0]]);
          } else if (yScale.domain()[1] > this.setYDomain[1]) {
            zoomYDomain = yDomainSet;
            zoom.translate([zoom.translate()[0], zoom.translate()[1] - yScale(this.setYDomain[1]) + yScale.range()[1]]);
          }
          if (zoomType === "line" || zoomType === "scatter" || zoomType === "area_stack") {
            this.setState({
              d3EventSet: evt,
              xDomainSet: zoomX ? zoomXDomain : this.setXDomain,
              yDomainSet: zoomY ? zoomYDomain : this.setYDomain
            });
          } else if (zoomType === "bar" || zoomType === "bar_group" || zoomType === "bar_stack") {
            var newDomain = xScale.domain();
            var selected = xScaleSet.domain().filter(function(d) {
              var filterDomain = newDomain[0] <= xScaleSet(d) && xScaleSet(d) <= newDomain[1];
              return filterDomain;
            });
            if (selected.length === 0)
              selected = xDomainSet;
            this.setState({
              d3EventSet: evt,
              xDomainSet: zoomX ? selected : this.setXDomain,
              yDomainSet: zoomY ? zoomYDomain : this.setYDomain
            });
          }
        }
      }], [{
        key: "propTypes",
        value: {
          data: _react.PropTypes.array.isRequired,
          chartSeries: _react.PropTypes.array.isRequired,
          width: _react.PropTypes.number,
          height: _react.PropTypes.number,
          x: _react.PropTypes.func,
          xDomain: _react.PropTypes.array,
          xRange: _react.PropTypes.array,
          xScale: _react.PropTypes.string,
          xRangeRoundBands: _react.PropTypes.object,
          y: _react.PropTypes.func,
          yDomain: _react.PropTypes.array,
          yRange: _react.PropTypes.array,
          yScale: _react.PropTypes.string,
          zoomX: _react.PropTypes.bool,
          zoomY: _react.PropTypes.bool
        },
        enumerable: true
      }]);
      return Zoom2;
    }(_react.Component);
    exports["default"] = Zoom;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/utils/zoom_focus.js
var require_zoom_focus = __commonJS({
  "node_modules/react-d3-zoom/lib/utils/zoom_focus.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var ZoomFocus = function(_Component) {
      _inherits(ZoomFocus2, _Component);
      function ZoomFocus2(props) {
        _classCallCheck(this, ZoomFocus2);
        _get(Object.getPrototypeOf(ZoomFocus2.prototype), "constructor", this).call(this, props);
      }
      _createClass(ZoomFocus2, [{
        key: "render",
        value: function render() {
          var _props = this.props;
          var height = _props.height;
          var width = _props.width;
          var margins = _props.margins;
          var chartId = _props.chartId;
          var id = "react-d3-basic__zoom_focus__clip__" + chartId;
          return _react2["default"].createElement(
            "defs",
            null,
            _react2["default"].createElement(
              "clipPath",
              { id },
              _react2["default"].createElement("rect", {
                width: width - margins.left - margins.right,
                height: height - margins.top - margins.bottom
              })
            )
          );
        }
      }], [{
        key: "defaultProps",
        value: {
          chartId: 0
        },
        enumerable: true
      }]);
      return ZoomFocus2;
    }(_react.Component);
    exports["default"] = ZoomFocus;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/commonProps.js
var require_commonProps4 = __commonJS({
  "node_modules/react-d3-zoom/lib/commonProps.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var width = 960;
    var height = 500;
    var margins = { top: 80, right: 100, bottom: 80, left: 100 };
    exports["default"] = {
      width,
      height,
      margins,
      y: function y2(d) {
        return +d;
      },
      xScale: "linear",
      yScale: "linear",
      zoomY: false,
      zoomX: true
    };
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/line.js
var require_line3 = __commonJS({
  "node_modules/react-d3-zoom/lib/line.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Basic = require_lib4();
    var _inheritIndex = require_inherit();
    var _inheritIndex2 = _interopRequireDefault(_inheritIndex);
    var _utilsZoom_focus = require_zoom_focus();
    var _utilsZoom_focus2 = _interopRequireDefault(_utilsZoom_focus);
    var _commonProps = require_commonProps4();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var LineZoom = function(_ZoomSet) {
      _inherits(LineZoom2, _ZoomSet);
      function LineZoom2(props) {
        _classCallCheck(this, LineZoom2);
        _get(Object.getPrototypeOf(LineZoom2.prototype), "constructor", this).call(this, props);
        var _props = this.props;
        var margins = _props.margins;
        var width = _props.width;
        var height = _props.height;
        this.zoomed = this.zoomed.bind(this);
        this.mkXDomain();
        this.mkYDomain();
        this.state = {
          xDomainSet: this.setXDomain,
          yDomainSet: this.setYDomain,
          onZoom: this.zoomed,
          d3EventSet: null,
          xRange: this.props.xRange || [0, width - margins.left - margins.right],
          yRange: this.props.yRange || [height - margins.top - margins.bottom, 0],
          xRangeRoundBands: this.props.xRangeRoundBands || { interval: [0, width - margins.left - margins.right], padding: 0.1 },
          zoomType: "line"
        };
        this.mkXScale(this.setXDomain);
        this.mkYScale(this.setYDomain);
        this.state = Object.assign(this.state, {
          xScaleSet: this.setXScale,
          yScaleSet: this.setYScale
        });
      }
      _createClass(LineZoom2, [{
        key: "render",
        value: function render() {
          var _state = this.state;
          var xDomainSet = _state.xDomainSet;
          var yDomainSet = _state.yDomainSet;
          var focus = _react2["default"].createElement(_utilsZoom_focus2["default"], this.props);
          return _react2["default"].createElement(
            "div",
            null,
            _react2["default"].createElement(
              _reactD3Core.Chart,
              _extends({}, this.props, this.state),
              _react2["default"].createElement(_reactD3Basic.LineChart, _extends({}, this.props, this.state, { xDomain: xDomainSet, yDomain: yDomainSet, showZoom: true })),
              focus
            )
          );
        }
      }], [{
        key: "defaultProps",
        value: _commonProps2["default"],
        enumerable: true
      }]);
      return LineZoom2;
    }(_inheritIndex2["default"]);
    exports["default"] = LineZoom;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/area_stack.js
var require_area_stack3 = __commonJS({
  "node_modules/react-d3-zoom/lib/area_stack.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Basic = require_lib4();
    var _inheritIndex = require_inherit();
    var _inheritIndex2 = _interopRequireDefault(_inheritIndex);
    var _utilsZoom_focus = require_zoom_focus();
    var _utilsZoom_focus2 = _interopRequireDefault(_utilsZoom_focus);
    var _commonProps = require_commonProps4();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var AreaStackZoom = function(_ZoomSet) {
      _inherits(AreaStackZoom2, _ZoomSet);
      function AreaStackZoom2(props) {
        _classCallCheck(this, AreaStackZoom2);
        _get(Object.getPrototypeOf(AreaStackZoom2.prototype), "constructor", this).call(this, props);
        var _props = this.props;
        var margins = _props.margins;
        var width = _props.width;
        var height = _props.height;
        this.zoomed = this.zoomed.bind(this);
        this.mkXDomain();
        this.mkYDomain(true);
        this.state = {
          xDomainSet: this.setXDomain,
          yDomainSet: this.setYDomain,
          onZoom: this.zoomed,
          d3EventSet: null,
          xRange: this.props.xRange || [0, width - margins.left - margins.right],
          yRange: this.props.yRange || [height - margins.top - margins.bottom, 0],
          xRangeRoundBands: this.props.xRangeRoundBands || { interval: [0, width - margins.left - margins.right], padding: 0.1 },
          zoomType: "area_stack"
        };
        this.mkXScale(this.setXDomain);
        this.mkYScale(this.setYDomain);
        this.state = Object.assign(this.state, {
          xScaleSet: this.setXScale,
          yScaleSet: this.setYScale
        });
      }
      _createClass(AreaStackZoom2, [{
        key: "render",
        value: function render() {
          var _state = this.state;
          var xDomainSet = _state.xDomainSet;
          var yDomainSet = _state.yDomainSet;
          var focus = _react2["default"].createElement(_utilsZoom_focus2["default"], this.props);
          return _react2["default"].createElement(
            "div",
            null,
            _react2["default"].createElement(
              _reactD3Core.Chart,
              _extends({}, this.props, this.state),
              _react2["default"].createElement(_reactD3Basic.AreaStackChart, _extends({}, this.props, this.state, { xDomain: xDomainSet, yDomain: yDomainSet, showZoom: true })),
              focus
            )
          );
        }
      }], [{
        key: "defaultProps",
        value: _commonProps2["default"],
        enumerable: true
      }]);
      return AreaStackZoom2;
    }(_inheritIndex2["default"]);
    exports["default"] = AreaStackZoom;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/scatter.js
var require_scatter3 = __commonJS({
  "node_modules/react-d3-zoom/lib/scatter.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Basic = require_lib4();
    var _inheritIndex = require_inherit();
    var _inheritIndex2 = _interopRequireDefault(_inheritIndex);
    var _utilsZoom_focus = require_zoom_focus();
    var _utilsZoom_focus2 = _interopRequireDefault(_utilsZoom_focus);
    var _commonProps = require_commonProps4();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var ScatterZoom = function(_ZoomSet) {
      _inherits(ScatterZoom2, _ZoomSet);
      function ScatterZoom2(props) {
        _classCallCheck(this, ScatterZoom2);
        _get(Object.getPrototypeOf(ScatterZoom2.prototype), "constructor", this).call(this, props);
        var _props = this.props;
        var margins = _props.margins;
        var width = _props.width;
        var height = _props.height;
        this.zoomed = this.zoomed.bind(this);
        this.mkXDomain();
        this.mkYDomain();
        this.state = {
          xDomainSet: this.setXDomain,
          yDomainSet: this.setYDomain,
          onZoom: this.zoomed,
          d3EventSet: null,
          xRange: this.props.xRange || [0, width - margins.left - margins.right],
          yRange: this.props.yRange || [height - margins.top - margins.bottom, 0],
          xRangeRoundBands: this.props.xRangeRoundBands || { interval: [0, width - margins.left - margins.right], padding: 0.1 },
          zoomType: "scatter"
        };
        this.mkXScale(this.setXDomain);
        this.mkYScale(this.setYDomain);
        this.state = Object.assign(this.state, {
          xScaleSet: this.setXScale,
          yScaleSet: this.setYScale
        });
      }
      _createClass(ScatterZoom2, [{
        key: "render",
        value: function render() {
          var _state = this.state;
          var xDomainSet = _state.xDomainSet;
          var yDomainSet = _state.yDomainSet;
          var focus = _react2["default"].createElement(_utilsZoom_focus2["default"], this.props);
          return _react2["default"].createElement(
            "div",
            null,
            _react2["default"].createElement(
              _reactD3Core.Chart,
              _extends({}, this.props, this.state),
              _react2["default"].createElement(_reactD3Basic.ScatterPlot, _extends({}, this.props, this.state, { xDomain: xDomainSet, yDomain: yDomainSet, showZoom: true })),
              focus
            )
          );
        }
      }], [{
        key: "defaultProps",
        value: _commonProps2["default"],
        enumerable: true
      }]);
      return ScatterZoom2;
    }(_inheritIndex2["default"]);
    exports["default"] = ScatterZoom;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/bar.js
var require_bar3 = __commonJS({
  "node_modules/react-d3-zoom/lib/bar.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Basic = require_lib4();
    var _inheritIndex = require_inherit();
    var _inheritIndex2 = _interopRequireDefault(_inheritIndex);
    var _utilsZoom_focus = require_zoom_focus();
    var _utilsZoom_focus2 = _interopRequireDefault(_utilsZoom_focus);
    var _commonProps = require_commonProps4();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var BarZoom = function(_ZoomSet) {
      _inherits(BarZoom2, _ZoomSet);
      function BarZoom2(props) {
        _classCallCheck(this, BarZoom2);
        _get(Object.getPrototypeOf(BarZoom2.prototype), "constructor", this).call(this, props);
        var _props = this.props;
        var margins = _props.margins;
        var width = _props.width;
        var height = _props.height;
        this.zoomed = this.zoomed.bind(this);
        this.mkXDomain();
        this.mkYDomain();
        this.state = {
          xDomainSet: this.setXDomain,
          yDomainSet: this.setYDomain,
          onZoom: this.zoomed,
          d3EventSet: null,
          xRange: this.props.xRange || [0, width - margins.left - margins.right],
          yRange: this.props.yRange || [height - margins.top - margins.bottom, 0],
          xRangeRoundBands: this.props.xRangeRoundBands || { interval: [0, width - margins.left - margins.right], padding: 0.1 },
          zoomType: "bar"
        };
        this.mkXScale(this.setXDomain);
        this.mkYScale(this.setYDomain);
        this.state = Object.assign(this.state, {
          xScaleSet: this.setXScale,
          yScaleSet: this.setYScale
        });
      }
      _createClass(BarZoom2, [{
        key: "render",
        value: function render() {
          var _state = this.state;
          var xDomainSet = _state.xDomainSet;
          var yDomainSet = _state.yDomainSet;
          var focus = _react2["default"].createElement(_utilsZoom_focus2["default"], this.props);
          return _react2["default"].createElement(
            "div",
            null,
            _react2["default"].createElement(
              _reactD3Core.Chart,
              _extends({}, this.props, this.state),
              _react2["default"].createElement(_reactD3Basic.BarChart, _extends({}, this.props, this.state, { xDomain: xDomainSet, yDomain: yDomainSet, showZoom: true })),
              focus
            )
          );
        }
      }], [{
        key: "defaultProps",
        value: _commonProps2["default"],
        enumerable: true
      }]);
      return BarZoom2;
    }(_inheritIndex2["default"]);
    exports["default"] = BarZoom;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/bar_stack.js
var require_bar_stack3 = __commonJS({
  "node_modules/react-d3-zoom/lib/bar_stack.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Basic = require_lib4();
    var _inheritIndex = require_inherit();
    var _inheritIndex2 = _interopRequireDefault(_inheritIndex);
    var _utilsZoom_focus = require_zoom_focus();
    var _utilsZoom_focus2 = _interopRequireDefault(_utilsZoom_focus);
    var _commonProps = require_commonProps4();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var BarStackZoom = function(_ZoomSet) {
      _inherits(BarStackZoom2, _ZoomSet);
      function BarStackZoom2(props) {
        _classCallCheck(this, BarStackZoom2);
        _get(Object.getPrototypeOf(BarStackZoom2.prototype), "constructor", this).call(this, props);
        var _props = this.props;
        var margins = _props.margins;
        var width = _props.width;
        var height = _props.height;
        this.zoomed = this.zoomed.bind(this);
        this.mkXDomain();
        this.mkYDomain(true);
        this.state = {
          xDomainSet: this.setXDomain,
          yDomainSet: this.setYDomain,
          onZoom: this.zoomed,
          d3EventSet: null,
          xRange: this.props.xRange || [0, width - margins.left - margins.right],
          yRange: this.props.yRange || [height - margins.top - margins.bottom, 0],
          xRangeRoundBands: this.props.xRangeRoundBands || { interval: [0, width - margins.left - margins.right], padding: 0.1 },
          zoomType: "bar_stack"
        };
        this.mkXScale(this.setXDomain);
        this.mkYScale(this.setYDomain);
        this.state = Object.assign(this.state, {
          xScaleSet: this.setXScale,
          yScaleSet: this.setYScale
        });
      }
      _createClass(BarStackZoom2, [{
        key: "render",
        value: function render() {
          var _state = this.state;
          var xDomainSet = _state.xDomainSet;
          var yDomainSet = _state.yDomainSet;
          var focus = _react2["default"].createElement(_utilsZoom_focus2["default"], this.props);
          return _react2["default"].createElement(
            "div",
            null,
            _react2["default"].createElement(
              _reactD3Core.Chart,
              _extends({}, this.props, this.state),
              _react2["default"].createElement(_reactD3Basic.BarStackChart, _extends({}, this.props, this.state, { xDomain: xDomainSet, yDomain: yDomainSet, showZoom: true })),
              focus
            )
          );
        }
      }], [{
        key: "defaultProps",
        value: _commonProps2["default"],
        enumerable: true
      }]);
      return BarStackZoom2;
    }(_inheritIndex2["default"]);
    exports["default"] = BarStackZoom;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/bar_group.js
var require_bar_group3 = __commonJS({
  "node_modules/react-d3-zoom/lib/bar_group.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _get = function get(_x, _x2, _x3) {
      var _again = true;
      _function:
        while (_again) {
          var object = _x, property = _x2, receiver = _x3;
          desc = parent = getter = void 0;
          _again = false;
          if (object === null)
            object = Function.prototype;
          var desc = Object.getOwnPropertyDescriptor(object, property);
          if (desc === void 0) {
            var parent = Object.getPrototypeOf(object);
            if (parent === null) {
              return void 0;
            } else {
              _x = parent;
              _x2 = property;
              _x3 = receiver;
              _again = true;
              continue _function;
            }
          } else if ("value" in desc) {
            return desc.value;
          } else {
            var getter = desc.get;
            if (getter === void 0) {
              return void 0;
            }
            return getter.call(receiver);
          }
        }
    };
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _reactD3Core = require_lib2();
    var _reactD3Basic = require_lib4();
    var _inheritIndex = require_inherit();
    var _inheritIndex2 = _interopRequireDefault(_inheritIndex);
    var _utilsZoom_focus = require_zoom_focus();
    var _utilsZoom_focus2 = _interopRequireDefault(_utilsZoom_focus);
    var _commonProps = require_commonProps4();
    var _commonProps2 = _interopRequireDefault(_commonProps);
    var BarGroupZoom = function(_ZoomSet) {
      _inherits(BarGroupZoom2, _ZoomSet);
      function BarGroupZoom2(props) {
        _classCallCheck(this, BarGroupZoom2);
        _get(Object.getPrototypeOf(BarGroupZoom2.prototype), "constructor", this).call(this, props);
        var _props = this.props;
        var margins = _props.margins;
        var width = _props.width;
        var height = _props.height;
        this.zoomed = this.zoomed.bind(this);
        this.mkXDomain();
        this.mkYDomain();
        this.state = {
          xDomainSet: this.setXDomain,
          yDomainSet: this.setYDomain,
          onZoom: this.zoomed,
          d3EventSet: null,
          xRange: this.props.xRange || [0, width - margins.left - margins.right],
          yRange: this.props.yRange || [height - margins.top - margins.bottom, 0],
          xRangeRoundBands: this.props.xRangeRoundBands || { interval: [0, width - margins.left - margins.right], padding: 0.1 },
          zoomType: "bar_group"
        };
        this.mkXScale(this.setXDomain);
        this.mkYScale(this.setYDomain);
        this.state = Object.assign(this.state, {
          xScaleSet: this.setXScale,
          yScaleSet: this.setYScale
        });
      }
      _createClass(BarGroupZoom2, [{
        key: "render",
        value: function render() {
          var _state = this.state;
          var xDomainSet = _state.xDomainSet;
          var yDomainSet = _state.yDomainSet;
          var focus = _react2["default"].createElement(_utilsZoom_focus2["default"], this.props);
          return _react2["default"].createElement(
            "div",
            null,
            _react2["default"].createElement(
              _reactD3Core.Chart,
              _extends({}, this.props, this.state),
              _react2["default"].createElement(_reactD3Basic.BarGroupChart, _extends({}, this.props, this.state, { xDomain: xDomainSet, yDomain: yDomainSet, showZoom: true })),
              focus
            )
          );
        }
      }], [{
        key: "defaultProps",
        value: _commonProps2["default"],
        enumerable: true
      }]);
      return BarGroupZoom2;
    }(_inheritIndex2["default"]);
    exports["default"] = BarGroupZoom;
    module.exports = exports["default"];
  }
});

// node_modules/react-d3-zoom/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/react-d3-zoom/lib/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var _line = require_line3();
    var _line2 = _interopRequireDefault(_line);
    var _area_stack = require_area_stack3();
    var _area_stack2 = _interopRequireDefault(_area_stack);
    var _scatter = require_scatter3();
    var _scatter2 = _interopRequireDefault(_scatter);
    var _bar = require_bar3();
    var _bar2 = _interopRequireDefault(_bar);
    var _bar_stack = require_bar_stack3();
    var _bar_stack2 = _interopRequireDefault(_bar_stack);
    var _bar_group = require_bar_group3();
    var _bar_group2 = _interopRequireDefault(_bar_group);
    var _inheritIndex = require_inherit();
    var _inheritIndex2 = _interopRequireDefault(_inheritIndex);
    var _utilsZoom_focus = require_zoom_focus();
    var _utilsZoom_focus2 = _interopRequireDefault(_utilsZoom_focus);
    exports.LineZoom = _line2["default"];
    exports.ScatterZoom = _scatter2["default"];
    exports.AreaStackZoom = _area_stack2["default"];
    exports.BarZoom = _bar2["default"];
    exports.BarStackZoom = _bar_stack2["default"];
    exports.BarGroupZoom = _bar_group2["default"];
    exports.ZoomSet = _inheritIndex2["default"];
    exports.ZoomFocus = _utilsZoom_focus2["default"];
  }
});
export default require_lib5();
//# sourceMappingURL=react-d3-zoom.js.map
